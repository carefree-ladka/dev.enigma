"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[44559],{1995:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=r(74848),i=r(28453);const s={title:"Binary Search Tree"},o=void 0,a={id:"DSA/DSA with JavaScript/BinarySearchTree",title:"Binary Search Tree",description:"Binary Search Tree (BST)",source:"@site/docs/DSA/DSA with JavaScript/BinarySearchTree.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/BinarySearchTree",permalink:"/docs/DSA/DSA with JavaScript/BinarySearchTree",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/BinarySearchTree.mdx",tags:[],version:"current",frontMatter:{title:"Binary Search Tree"},sidebar:"tutorialSidebar",previous:{title:"Binary Search and Its Variants",permalink:"/docs/DSA/DSA with JavaScript/BinarySearch"},next:{title:"Binary Search Tree (BST)",permalink:"/docs/DSA/DSA with JavaScript/BinaryTree"}},h={},l=[{value:"Binary Search Tree (BST)",id:"binary-search-tree-bst",level:2},{value:"Properties",id:"properties",level:3},{value:"Operations",id:"operations",level:3},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Example",id:"example",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"binary-search-tree-bst",children:"Binary Search Tree (BST)"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"Binary Search Tree (BST)"})," is a binary tree where each node has a key greater than all keys in its left subtree and smaller than all keys in its right subtree. This property makes BSTs useful for searching, inserting, and deleting elements efficiently."]}),"\n",(0,t.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Binary Tree"}),": Each node has at most two children."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ordered"}),": For any node with a key ",(0,t.jsx)(n.code,{children:"K"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All keys in the left subtree are less than ",(0,t.jsx)(n.code,{children:"K"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["All keys in the right subtree are greater than ",(0,t.jsx)(n.code,{children:"K"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Insertion"}),": Adds a new node to the BST while maintaining the BST property."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search"}),": Finds a node with a specific key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deletion"}),": Removes a node while maintaining the BST property."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Traversal"}),": Visits all nodes in a specific order. Common traversals include:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"In-Order"}),": Left, Root, Right"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pre-Order"}),": Root, Left, Right"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Post-Order"}),": Left, Right, Root"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Insertion"}),": O(log n) on average, O(n) in the worst case (when the tree is unbalanced)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search"}),": O(log n) on average, O(n) in the worst case"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deletion"}),": O(log n) on average, O(n) in the worst case"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Traversal"}),": O(n)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a basic implementation of a Binary Search Tree in JavaScript:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Define a class for a TreeNode, representing each node in the binary search tree\nclass TreeNode {\n  constructor(key) {\n    this.key = key; // The value of the node\n    this.left = null; // Reference to the left child node\n    this.right = null; // Reference to the right child node\n  }\n}\n\n// Define a class for the Binary Search Tree\nclass BinarySearchTree {\n  constructor() {\n    this.root = null; // The root of the tree, initially empty\n  }\n\n  // Method to insert a new key into the BST\n  insert(key) {\n    if (this.root === null) {\n      // If the tree is empty, create the root node\n      this.root = new TreeNode(key);\n    } else {\n      // Otherwise, insert the key in the correct position recursively\n      this.insertRec(this.root, key);\n    }\n  }\n\n  // Recursive method to insert a new key into the BST\n  insertRec(node, key) {\n    if (key < node.key) {\n      // If the key is less than the current node's key, go to the left subtree\n      if (node.left === null) {\n        // If the left child is null, create a new node\n        node.left = new TreeNode(key);\n      } else {\n        // Otherwise, recursively insert in the left subtree\n        this.insertRec(node.left, key);\n      }\n    } else {\n      // If the key is greater than or equal to the current node's key, go to the right subtree\n      if (node.right === null) {\n        // If the right child is null, create a new node\n        node.right = new TreeNode(key);\n      } else {\n        // Otherwise, recursively insert in the right subtree\n        this.insertRec(node.right, key);\n      }\n    }\n  }\n\n  // Method to search for a key in the BST\n  search(key) {\n    return this.searchRec(this.root, key);\n  }\n\n  // Recursive method to search for a key in the BST\n  searchRec(node, key) {\n    if (node === null || node.key === key) {\n      // If the node is null or the key is found, return the node\n      return node;\n    }\n    if (key < node.key) {\n      // If the key is less than the current node's key, search in the left subtree\n      return this.searchRec(node.left, key);\n    }\n    // If the key is greater than the current node's key, search in the right subtree\n    return this.searchRec(node.right, key);\n  }\n\n  // Method to perform an in-order traversal of the BST\n  inorderTraversal(node, result = []) {\n    if (node !== null) {\n      // Traverse the left subtree\n      this.inorderTraversal(node.left, result);\n      // Visit the current node\n      result.push(node.key);\n      // Traverse the right subtree\n      this.inorderTraversal(node.right, result);\n    }\n    return result;\n  }\n}\n\n// Example Usage\nconst bst = new BinarySearchTree();\nbst.insert(10); // Insert the key 10\nbst.insert(5); // Insert the key 5\nbst.insert(15); // Insert the key 15\nbst.insert(3); // Insert the key 3\nbst.insert(7); // Insert the key 7\n\nconsole.log('Inorder Traversal:', bst.inorderTraversal(bst.root)); // Output: [3, 5, 7, 10, 15]\nconsole.log('Search 7:', bst.search(7) ? 'Found' : 'Not Found'); // Output: Found\nconsole.log('Search 20:', bst.search(20) ? 'Found' : 'Not Found'); // Output: Not Found\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);