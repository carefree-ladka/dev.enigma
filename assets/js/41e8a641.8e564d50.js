"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[2021],{28453:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>r});var s=t(96540);const a={},o=s.createContext(a);function u(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:u(e.components),s.createElement(o.Provider,{value:n},e.children)}},75913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>i});var s=t(74848),a=t(28453);const o={title:"Task Queue"},u=void 0,r={id:"WebDev/JavaScript/TaskQueue",title:"Task Queue",description:"Design an API that processes objects sequentially (where each object must wait for the previous one to finish before executing), we can create a task queue. This queue will hold objects (representing tasks) and execute each one only after the previous task has completed.",source:"@site/docs/WebDev/JavaScript/TaskQueue.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/TaskQueue",permalink:"/dev.enigma/docs/WebDev/JavaScript/TaskQueue",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/TaskQueue.mdx",tags:[],version:"current",frontMatter:{title:"Task Queue"},sidebar:"tutorialSidebar",previous:{title:"JavaScript Symbols",permalink:"/dev.enigma/docs/WebDev/JavaScript/Symbol"},next:{title:"Throttle & Debounce",permalink:"/dev.enigma/docs/WebDev/JavaScript/ThrottleDebounce"}},c={},i=[{value:"API Design",id:"api-design",level:3}];function l(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Design an API that processes objects sequentially (where each object must wait for the previous one to finish before executing), we can create a task queue. This queue will hold objects (representing tasks) and execute each one only after the previous task has completed."}),"\n",(0,s.jsx)(n.h3,{id:"api-design",children:"API Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:'class TaskQueue {\n\n  queue = Promise.resolve()\n\n  enqueue = (task) => {\n    this.queue = this.queue.then(() => {\n      console.log(\'Executing task...\');\n      return task()\n    }).catch(e => {\n      console.log(e.message);\n    })\n    return queue\n  }\n}\n\n\n// Example tasks\nfunction task1() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log("Task 1 completed");\n      resolve();\n    }, 1000);\n  });\n}\n\nfunction task2() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log("Task 2 completed");\n      resolve();\n    }, 500);\n  });\n}\n\nfunction task3() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log("Task 3 completed");\n      resolve();\n    }, 2000);\n  });\n}\n\n// Create a task queue\nconst queue = new TaskQueue();\n\n// Enqueue tasks\nqueue.enqueue(task1);\nqueue.enqueue(task2);\nqueue.enqueue(task3);\n\n/*\nExecuting task...\nTask 1 completed\nExecuting task...\nTask 2 completed\nExecuting task...\nTask 3 completed\n*/\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);