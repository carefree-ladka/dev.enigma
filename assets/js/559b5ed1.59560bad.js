"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[4279],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(96540);const o={},c=t.createContext(o);function a(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(c.Provider,{value:n},e.children)}},44787:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var t=i(74848),o=i(28453);const c={title:"Memoization"},a=void 0,r={id:"WebDev/JavaScript/Memoization",title:"Memoization",description:"Memoization in JavaScript is a technique used to optimize the performance of functions by storing the results of expensive function calls and returning the cached result when the same inputs occur again. It is particularly useful in scenarios where the same computations are repeated multiple times, like recursive algorithms (e.g., Fibonacci sequence, factorials, dynamic programming problems).",source:"@site/docs/WebDev/JavaScript/Memoization.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Memoization",permalink:"/docs/WebDev/JavaScript/Memoization",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Memoization.mdx",tags:[],version:"current",frontMatter:{title:"Memoization"},sidebar:"tutorialSidebar",previous:{title:"JavaScript Execution in Browser",permalink:"/docs/WebDev/JavaScript/JSExecution"},next:{title:"Miscellaneous",permalink:"/docs/WebDev/JavaScript/Misx"}},s={},l=[{value:"How Memoization Works:",id:"how-memoization-works",level:3},{value:"Without Memoization:",id:"without-memoization",level:3},{value:"With Memoization",id:"with-memoization",level:3},{value:"General Memoization Function",id:"general-memoization-function",level:3},{value:"Benefits of Memoization:",id:"benefits-of-memoization",level:3}];function u(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Memoization in JavaScript is a technique used to optimize the performance of functions by storing the results of expensive function calls and returning the cached result when the same inputs occur again. It is particularly useful in scenarios where the same computations are repeated multiple times, like recursive algorithms (e.g., Fibonacci sequence, factorials, dynamic programming problems)."}),"\n",(0,t.jsx)(n.h3,{id:"how-memoization-works",children:"How Memoization Works:"}),"\n",(0,t.jsx)(n.p,{children:"A cache (often an object or map) is used to store the results of function calls.\nWhen the function is called, it first checks if the result for the given input is already in the cache.\nIf it\u2019s cached, the result is returned from the cache, avoiding the computation.\nIf it\u2019s not cached, the function computes the result, stores it in the cache, and then returns the result."}),"\n",(0,t.jsx)(n.h3,{id:"without-memoization",children:"Without Memoization:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log(fibonacci(10)); // 55\n"})}),"\n",(0,t.jsx)(n.p,{children:"This implementation works, but it recalculates the Fibonacci sequence multiple times, resulting in exponential time complexity O(2^n)."}),"\n",(0,t.jsx)(n.h3,{id:"with-memoization",children:"With Memoization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function fibonacciMemoized() {\n  const cache = {};  // Cache object to store results\n\n  function fib(n) {\n    if (n <= 1) return n;\n    if (cache[n]) return cache[n];  // Return cached result if available\n    cache[n] = fib(n - 1) + fib(n - 2);  // Store the computed result\n    return cache[n];\n  }\n\n  return fib;\n}\n\nconst fib = fibonacciMemoized();\nconsole.log(fib(10)); // 55\n"})}),"\n",(0,t.jsx)(n.p,{children:"This reduces the time complexity to linear O(n)."}),"\n",(0,t.jsx)(n.h3,{id:"general-memoization-function",children:"General Memoization Function"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function memoize(fn) {\n  const cache = {};\n  return function(...args) {\n    const key = JSON.stringify(args);  // Serialize the arguments as a key\n    if (cache[key]) return cache[key];  // Return cached result\n    const result = fn(...args);  // Compute result if not cached\n    cache[key] = result;  // Store result in cache\n    return result;\n  };\n}\n\n// Example usage with a slow function\nfunction slowFunction(x) {\n  console.log('Computing...');\n  return x * 2;\n}\n\nconst memoizedSlowFunction = memoize(slowFunction);\nconsole.log(memoizedSlowFunction(5)); // Computes: 10\nconsole.log(memoizedSlowFunction(5)); // Fetches from cache: 10\n"})}),"\n",(0,t.jsx)(n.h3,{id:"benefits-of-memoization",children:"Benefits of Memoization:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Performance optimization: Memoization can drastically reduce the runtime of functions that perform expensive or repetitive computations."}),"\n",(0,t.jsx)(n.li,{children:"Avoids redundant calculations: By caching results, it prevents recalculating the same inputs multiple times"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);