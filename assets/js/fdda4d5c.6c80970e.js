"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[812],{696:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=r(4848),i=r(8453);const s={},a="TypeScript Cheatsheet",c={id:"WebDev/TypeScript/TypeScriptIntroduction",title:"TypeScript Cheatsheet",description:"Basic Types",source:"@site/docs/WebDev/TypeScript/TypeScriptIntroduction.mdx",sourceDirName:"WebDev/TypeScript",slug:"/WebDev/TypeScript/TypeScriptIntroduction",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptIntroduction",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/TypeScript/TypeScriptIntroduction.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Generics",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptGenerics"},next:{title:"TypeScript Operators",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptOperators"}},o={},l=[{value:"Basic Types",id:"basic-types",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Classes &amp; OOP",id:"classes--oop",level:2},{value:"Generics",id:"generics",level:2},{value:"Utility Types",id:"utility-types",level:2},{value:"Advanced Types",id:"advanced-types",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Best Practices &amp; Common Patterns",id:"best-practices--common-patterns",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"typescript-cheatsheet",children:"TypeScript Cheatsheet"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-types",children:"Basic Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Primitive types\r\nlet isDone: boolean = false;\r\nlet decimal: number = 6;\r\nlet color: string = "blue";\r\nlet list: number[] = [1, 2, 3];\r\nlet tuple: [string, number] = ["hello", 10];\r\n\r\n// Special types\r\nlet notSure: any = 4;\r\nlet u: undefined = undefined;\r\nlet n: null = null;\r\nlet v: void = undefined;\r\nlet nv: never = (() => { throw new Error(); })();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Basic interface\r\ninterface User {\r\n  name: string;\r\n  age: number;\r\n  readonly id: number;\r\n  email?: string;  // Optional property\r\n}\r\n\r\n// Interface extending another interface\r\ninterface Employee extends User {\r\n  department: string;\r\n  salary: number;\r\n}\r\n\r\n// Interface with method definition\r\ninterface Clickable {\r\n  onClick(): void;\r\n  onDoubleClick?(event: MouseEvent): void;\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"classes--oop",children:"Classes & OOP"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Abstract class\r\nabstract class Animal {\r\n  protected name: string;\r\n  \r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n  \r\n  abstract makeSound(): void;\r\n  \r\n  move(distance: number): void {\r\n    console.log(`${this.name} moved ${distance}m.`);\r\n  }\r\n}\r\n\r\n// Class implementation\r\nclass Dog extends Animal {\r\n  constructor(name: string) {\r\n    super(name);\r\n  }\r\n  \r\n  makeSound(): void {\r\n    console.log('Woof!');\r\n  }\r\n}\r\n\r\n// Access modifiers\r\nclass Account {\r\n  private balance: number;\r\n  public readonly id: string;\r\n  protected type: string;\r\n  \r\n  constructor(id: string) {\r\n    this.id = id;\r\n    this.balance = 0;\r\n    this.type = 'standard';\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generics",children:"Generics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Generic function\r\nfunction identity<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\n// Generic interface\r\ninterface Collection<T> {\r\n  add(item: T): void;\r\n  remove(item: T): void;\r\n  getItems(): T[];\r\n}\r\n\r\n// Generic class\r\nclass Queue<T> {\r\n  private data: T[] = [];\r\n  \r\n  push(item: T): void {\r\n    this.data.push(item);\r\n  }\r\n  \r\n  pop(): T | undefined {\r\n    return this.data.shift();\r\n  }\r\n}\r\n\r\n// Generic constraints\r\ninterface Lengthwise {\r\n  length: number;\r\n}\r\n\r\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\r\n  console.log(arg.length);\r\n  return arg;\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"utility-types",children:"Utility Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Partial - Makes all properties optional\r\ninterface Todo {\r\n  title: string;\r\n  description: string;\r\n}\r\ntype PartialTodo = Partial<Todo>;\r\n\r\n// Required - Makes all properties required\r\ntype RequiredTodo = Required<Todo>;\r\n\r\n// Pick - Creates type with subset of properties\r\ntype TodoTitle = Pick<Todo, 'title'>;\r\n\r\n// Omit - Creates type without specified properties\r\ntype TodoWithoutDescription = Omit<Todo, 'description'>;\r\n\r\n// Record - Creates type with specified keys and value type\r\ntype PageInfo = Record<string, { url: string }>;\r\n\r\n// Readonly - Makes all properties readonly\r\ntype ReadonlyTodo = Readonly<Todo>;\r\n\r\n// ReturnType - Extracts return type of function\r\ntype FunctionReturn = ReturnType<() => string>;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-types",children:"Advanced Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Union Types\r\ntype StringOrNumber = string | number;\r\n\r\n// Intersection Types\r\ntype Employee = Person & Identifiable;\r\n\r\n// Type Guards\r\nfunction isString(value: any): value is string {\r\n  return typeof value === 'string';\r\n}\r\n\r\n// Mapped Types\r\ntype Nullable<T> = { [P in keyof T]: T[P] | null };\r\n\r\n// Conditional Types\r\ntype NonNullable<T> = T extends null | undefined ? never : T;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Class Decorator\r\nfunction sealed(constructor: Function) {\r\n  Object.seal(constructor);\r\n  Object.seal(constructor.prototype);\r\n}\r\n\r\n@sealed\r\nclass Example {\r\n  // ...\r\n}\r\n\r\n// Property Decorator\r\nfunction required(target: Object, propertyKey: string) {\r\n  let value: any;\r\n  \r\n  const getter = () => value;\r\n  const setter = (newVal: any) => {\r\n    if (newVal === undefined || newVal === null) {\r\n      throw new Error('Value is required');\r\n    }\r\n    value = newVal;\r\n  };\r\n  \r\n  Object.defineProperty(target, propertyKey, {\r\n    get: getter,\r\n    set: setter,\r\n    enumerable: true,\r\n    configurable: true,\r\n  });\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices--common-patterns",children:"Best Practices & Common Patterns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Type assertion\r\nlet someValue: any = "this is a string";\r\nlet strLength: number = (someValue as string).length;\r\n\r\n// Type inference with \'as const\'\r\nconst config = {\r\n  endpoint: "api.example.com",\r\n  port: 3000\r\n} as const;\r\n\r\n// Index signatures\r\ninterface StringMap {\r\n  [key: string]: string;\r\n}\r\n\r\n// Discriminated unions\r\ninterface Square {\r\n  kind: "square";\r\n  size: number;\r\n}\r\n\r\ninterface Rectangle {\r\n  kind: "rectangle";\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\ntype Shape = Square | Rectangle;\r\n\r\n// Type guards with discriminated unions\r\nfunction getArea(shape: Shape): number {\r\n  switch (shape.kind) {\r\n    case "square":\r\n      return shape.size * shape.size;\r\n    case "rectangle":\r\n      return shape.width * shape.height;\r\n  }\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);