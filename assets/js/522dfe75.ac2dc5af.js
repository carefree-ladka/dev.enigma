"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[851],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},75742:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=t(74848),r=t(28453);const i={title:"Kadane's Algorithm Tutorial",description:"A comprehensive guide to Kadane's Algorithm with code examples in JavaScript."},o="Kadane's Algorithm Tutorial",s={id:"DSA/DSA with JavaScript/Kadane",title:"Kadane's Algorithm Tutorial",description:"A comprehensive guide to Kadane's Algorithm with code examples in JavaScript.",source:"@site/docs/DSA/DSA with JavaScript/Kadane.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/Kadane",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/Kadane",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/Kadane.mdx",tags:[],version:"current",frontMatter:{title:"Kadane's Algorithm Tutorial",description:"A comprehensive guide to Kadane's Algorithm with code examples in JavaScript."},sidebar:"tutorialSidebar",previous:{title:"K-Way Merge Pattern",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/KWayMerge"},next:{title:"0/1 Knapsack and Unbounded Knapsack",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/KnapsackDP"}},l={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Algorithm Overview",id:"algorithm-overview",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Kadane Algorithm on 2D Grid",id:"kadane-algorithm-on-2d-grid",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"kadanes-algorithm-tutorial",children:"Kadane's Algorithm Tutorial"})}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"Kadane's Algorithm is an efficient method for finding the maximum sum subarray in a given array of integers. It works in linear time, making it suitable for large arrays. The algorithm is often used in various applications, such as financial analysis and computer science problems."}),"\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,a.jsx)(n.p,{children:"Given an array of integers, the task is to find the contiguous subarray with the maximum sum and return this sum."}),"\n",(0,a.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Subarray"}),": A contiguous part of an array."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Maximum Sum"}),": The highest possible sum of a subarray."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"algorithm-overview",children:"Algorithm Overview"}),"\n",(0,a.jsx)(n.p,{children:"Kadane's Algorithm works by iterating through the array and maintaining two variables:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Current Sum (",(0,a.jsx)(n.code,{children:"currSum"}),")"]}),": The maximum sum of the subarray that ends at the current position."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Global Maximum (",(0,a.jsx)(n.code,{children:"maxSum"}),")"]}),": The maximum sum encountered so far across all subarrays."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For each element in the array, the algorithm updates ",(0,a.jsx)(n.code,{children:"currSum"})," and ",(0,a.jsx)(n.code,{children:"maxSum"})," as follows:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"currSum"})," is updated to be the maximum of the current element alone or the current element plus the previous ",(0,a.jsx)(n.code,{children:"currSum"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"maxSum"})," is updated to be the maximum of itself and ",(0,a.jsx)(n.code,{children:"currSum"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsx)(n.p,{children:"Here\u2019s a JavaScript implementation of Kadane's Algorithm:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Javascript",children:"const kadane1D = (nums) => {\n  if (nums.length === 0) return 0;\n\n  let currSum = nums[0];\n  let maxSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    currSum = Math.max(nums[i], currSum + nums[i]);\n    maxSum = Math.max(maxSum, currSum);\n  }\n\n  return maxSum;\n}\n\n// Example Usage\nconst nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconsole.log(kadane(nums)); // Output: 6 (4 + (-1) + 2 + 1)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"kadane-algorithm-on-2d-grid",children:"Kadane Algorithm on 2D Grid"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-JavaScript",children:"function kadane2D(matrix) {\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  let maxSum = -Infinity;\n\n  for (let topRow = 0; topRow < rows; topRow++) {\n    // Initialize a 1D array to store the sum of elements between two rows\n    let temp = Array(cols).fill(0);\n\n    for (let bottomRow = topRow; bottomRow < rows; bottomRow++) {\n      // Add elements between topRow and bottomRow to the temp array\n      for (let col = 0; col < cols; col++) {\n        temp[col] += matrix[bottomRow][col];\n      }\n\n      // Find the maximum sum subarray in this 1D array using Kadane's Algorithm\n      const currentMaxSum = kadane1D(temp);\n      maxSum = Math.max(maxSum, currentMaxSum);\n    }\n  }\n\n  return maxSum;\n}\n\n// Example usage:\nconst matrix = [\n  [1, 2, -1, -4, -20],\n  [-8, -3, 4, 2, 1],\n  [3, 8, 10, 1, 3],\n  [-4, -1, 1, 7, -6]\n];\n\nconsole.log(kadane2D(matrix)); // Output: 29 (submatrix from (1, 1) to (3, 3))\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);