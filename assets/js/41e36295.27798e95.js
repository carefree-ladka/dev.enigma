"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[2256],{3061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(74848),i=t(28453);const a={},s="Java Collections Cheatsheet",l={id:"Java/JavaCollections",title:"Java Collections Cheatsheet",description:"Table of Contents",source:"@site/docs/Java/JavaCollections.mdx",sourceDirName:"Java",slug:"/Java/JavaCollections",permalink:"/dev.enigma/docs/Java/JavaCollections",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/JavaCollections.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Call by Value vs Call by Reference",permalink:"/dev.enigma/docs/Java/JavaCallbyValuevsCallbyReference"},next:{title:"Java DSA Cheat Sheet",permalink:"/dev.enigma/docs/Java/JavaDSACheatSheet"}},o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Collection Hierarchy",id:"collection-hierarchy",level:2},{value:"List Interface",id:"list-interface",level:2},{value:"ArrayList",id:"arraylist",level:3},{value:"LinkedList",id:"linkedlist",level:3},{value:"Set Interface",id:"set-interface",level:2},{value:"HashSet",id:"hashset",level:3},{value:"TreeSet",id:"treeset",level:3},{value:"Queue Interface",id:"queue-interface",level:2},{value:"PriorityQueue",id:"priorityqueue",level:3},{value:"ArrayDeque",id:"arraydeque",level:3},{value:"Map Interface",id:"map-interface",level:2},{value:"HashMap",id:"hashmap",level:3},{value:"TreeMap",id:"treemap",level:3},{value:"Stack Operations",id:"stack-operations",level:2},{value:"Using ArrayDeque (Recommended)",id:"using-arraydeque-recommended",level:3},{value:"Common Algorithms",id:"common-algorithms",level:2},{value:"Collections Utility Class",id:"collections-utility-class",level:3},{value:"Stream Operations (Java 8+)",id:"stream-operations-java-8",level:3},{value:"Java 21+ Features",id:"java-21-features",level:2},{value:"Sequenced Collections (Java 21)",id:"sequenced-collections-java-21",level:3},{value:"Record Patterns and Pattern Matching",id:"record-patterns-and-pattern-matching",level:3},{value:"Collection Factories (Java 9+, still relevant)",id:"collection-factories-java-9-still-relevant",level:3},{value:"Time Complexities",id:"time-complexities",level:2},{value:"DSA Common Patterns",id:"dsa-common-patterns",level:2},{value:"Sliding Window",id:"sliding-window",level:3},{value:"Two Pointers with Map",id:"two-pointers-with-map",level:3},{value:"Graph Traversal",id:"graph-traversal",level:3},{value:"Quick Reference",id:"quick-reference",level:2},{value:"When to Use What",id:"when-to-use-what",level:3},{value:"Memory Tips",id:"memory-tips",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"java-collections-cheatsheet",children:"Java Collections Cheatsheet"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#collection-hierarchy",children:"Collection Hierarchy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#list-interface",children:"List Interface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#set-interface",children:"Set Interface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#queue-interface",children:"Queue Interface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#map-interface",children:"Map Interface"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#stack-operations",children:"Stack Operations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#common-algorithms",children:"Common Algorithms"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#java-21-features",children:"Java 21+ Features"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#time-complexities",children:"Time Complexities"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"collection-hierarchy",children:"Collection Hierarchy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Collection (Interface)\n\u251c\u2500\u2500 List (Interface)\n\u2502   \u251c\u2500\u2500 ArrayList\n\u2502   \u251c\u2500\u2500 LinkedList\n\u2502   \u2514\u2500\u2500 Vector\n\u251c\u2500\u2500 Set (Interface)\n\u2502   \u251c\u2500\u2500 HashSet\n\u2502   \u251c\u2500\u2500 LinkedHashSet\n\u2502   \u2514\u2500\u2500 TreeSet\n\u2514\u2500\u2500 Queue (Interface)\n    \u251c\u2500\u2500 LinkedList\n    \u251c\u2500\u2500 PriorityQueue\n    \u2514\u2500\u2500 Deque (Interface)\n        \u251c\u2500\u2500 ArrayDeque\n        \u2514\u2500\u2500 LinkedList\n\nMap (Interface) - Separate hierarchy\n\u251c\u2500\u2500 HashMap\n\u251c\u2500\u2500 LinkedHashMap\n\u251c\u2500\u2500 TreeMap\n\u2514\u2500\u2500 Hashtable\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"list-interface",children:"List Interface"}),"\n",(0,r.jsx)(n.h3,{id:"arraylist",children:"ArrayList"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"ArrayList<E>()"})," - Resizable array implementation\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Fast random access, frequent reads"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Creation and Basic Operations\nList<Integer> list = new ArrayList<>();\nList<String> names = new ArrayList<>(Arrays.asList("Alice", "Bob"));\n\n// Adding elements\nlist.add(10);                    // [10]\nlist.add(0, 5);                 // [5, 10] - insert at index\nlist.addAll(Arrays.asList(1, 2, 3)); // [5, 10, 1, 2, 3]\n\n// Accessing elements\nint first = list.get(0);         // 5\nint size = list.size();          // 5\nboolean isEmpty = list.isEmpty(); // false\n\n// Modifying elements\nlist.set(1, 20);                 // [5, 20, 1, 2, 3]\nlist.remove(0);                  // [20, 1, 2, 3] - remove by index\nlist.remove(Integer.valueOf(2)); // [20, 1, 3] - remove by value\n\n// Searching\nint index = list.indexOf(1);     // 1\nboolean contains = list.contains(3); // true\n\n// Iteration\nfor (int num : list) { /* enhanced for loop */ }\nlist.forEach(System.out::println); // Java 8+\n\n// Conversion\nint[] array = list.stream().mapToInt(i -> i).toArray();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"linkedlist",children:"LinkedList"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"LinkedList<E>()"})," - Doubly-linked list implementation\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Frequent insertions/deletions, queue/deque operations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'LinkedList<String> linkedList = new LinkedList<>();\n\n// LinkedList specific methods\nlinkedList.addFirst("First");    // Add to beginning\nlinkedList.addLast("Last");      // Add to end\nlinkedList.removeFirst();        // Remove from beginning\nlinkedList.removeLast();         // Remove from end\nString first = linkedList.peekFirst(); // Get first without removing\nString last = linkedList.peekLast();   // Get last without removing\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"set-interface",children:"Set Interface"}),"\n",(0,r.jsx)(n.h3,{id:"hashset",children:"HashSet"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"HashSet<E>()"})," - Hash table implementation\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Fast lookups, no duplicates, no order"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Set<String> set = new HashSet<>();\n\n// Basic operations\nset.add("apple");               // true\nset.add("banana");              // true\nset.add("apple");               // false (duplicate)\n\nboolean contains = set.contains("apple"); // true\nset.remove("banana");           // true\nint size = set.size();          // 1\n\n// Set operations\nSet<Integer> set1 = Set.of(1, 2, 3, 4);\nSet<Integer> set2 = Set.of(3, 4, 5, 6);\n\n// Union\nSet<Integer> union = new HashSet<>(set1);\nunion.addAll(set2);             // [1, 2, 3, 4, 5, 6]\n\n// Intersection\nSet<Integer> intersection = new HashSet<>(set1);\nintersection.retainAll(set2);   // [3, 4]\n\n// Difference\nSet<Integer> difference = new HashSet<>(set1);\ndifference.removeAll(set2);     // [1, 2]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"treeset",children:"TreeSet"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"TreeSet<E>()"})," - Red-black tree implementation\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Sorted set, range operations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"TreeSet<Integer> treeSet = new TreeSet<>();\ntreeSet.addAll(Arrays.asList(3, 1, 4, 1, 5, 9));\n\n// Sorted order: [1, 3, 4, 5, 9]\nInteger first = treeSet.first();    // 1\nInteger last = treeSet.last();      // 9\nInteger lower = treeSet.lower(4);   // 3 (largest < 4)\nInteger higher = treeSet.higher(4); // 5 (smallest > 4)\nInteger floor = treeSet.floor(3);   // 3 (largest <= 3)\nInteger ceiling = treeSet.ceiling(3); // 3 (smallest >= 3)\n\n// Range operations\nSortedSet<Integer> subset = treeSet.subSet(2, 6); // [3, 4, 5]\nSortedSet<Integer> headSet = treeSet.headSet(4);  // [1, 3]\nSortedSet<Integer> tailSet = treeSet.tailSet(4);  // [4, 5, 9]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"queue-interface",children:"Queue Interface"}),"\n",(0,r.jsx)(n.h3,{id:"priorityqueue",children:"PriorityQueue"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"PriorityQueue<E>()"})," - Heap-based priority queue\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Heap operations, priority-based processing"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Min heap (default)\nPriorityQueue<Integer> minHeap = new PriorityQueue<>();\nminHeap.addAll(Arrays.asList(3, 1, 4, 1, 5));\n\n// Max heap\nPriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n\n// Basic operations\nminHeap.offer(2);               // Add element\nInteger min = minHeap.peek();   // 1 (get min without removing)\nInteger removed = minHeap.poll(); // 1 (remove and return min)\nboolean empty = minHeap.isEmpty();\n\n// Custom comparator\nPriorityQueue<String> pq = new PriorityQueue<>((a, b) -> a.length() - b.length());\n"})}),"\n",(0,r.jsx)(n.h3,{id:"arraydeque",children:"ArrayDeque"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"ArrayDeque<E>()"})," - Resizable array deque\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Stack and queue operations, better than Stack class"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Deque<Integer> deque = new ArrayDeque<>();\n\n// Queue operations (FIFO)\ndeque.offer(1);                 // Add to rear\ndeque.offer(2);\nInteger front = deque.poll();   // Remove from front (1)\n\n// Stack operations (LIFO)\ndeque.push(3);                  // Add to front\ndeque.push(4);\nInteger top = deque.pop();      // Remove from front (4)\n\n// Deque specific\ndeque.addFirst(0);              // Add to front\ndeque.addLast(5);               // Add to rear\ndeque.removeFirst();            // Remove from front\ndeque.removeLast();             // Remove from rear\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"map-interface",children:"Map Interface"}),"\n",(0,r.jsx)(n.h3,{id:"hashmap",children:"HashMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"HashMap<K,V>()"})," - Hash table implementation\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Fast key-value lookups, no order"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Map<String, Integer> map = new HashMap<>();\n\n// Basic operations\nmap.put("apple", 5);            // Add/update\nmap.put("banana", 3);\nInteger value = map.get("apple"); // 5\nInteger defaultValue = map.getOrDefault("orange", 0); // 0\n\n// Checking\nboolean hasKey = map.containsKey("apple");     // true\nboolean hasValue = map.containsValue(5);       // true\nint size = map.size();                         // 2\n\n// Removal\nInteger removed = map.remove("banana");        // 3\nmap.remove("apple", 5);                        // true (remove if key-value matches)\n\n// Java 8+ methods\nmap.putIfAbsent("grape", 10);                  // Add if key doesn\'t exist\nmap.compute("apple", (k, v) -> v == null ? 1 : v + 1); // Compute new value\nmap.computeIfAbsent("orange", k -> k.length()); // Compute if absent\nmap.computeIfPresent("apple", (k, v) -> v * 2); // Compute if present\nmap.merge("apple", 1, Integer::sum);           // Merge values\n\n// Iteration\nfor (Map.Entry<String, Integer> entry : map.entrySet()) {\n    String key = entry.getKey();\n    Integer val = entry.getValue();\n}\n\n// Java 8+ iteration\nmap.forEach((key, val) -> System.out.println(key + ": " + val));\n\n// Views\nSet<String> keys = map.keySet();\nCollection<Integer> values = map.values();\nSet<Map.Entry<String, Integer>> entries = map.entrySet();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"treemap",children:"TreeMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," ",(0,r.jsx)(n.code,{children:"TreeMap<K,V>()"})," - Red-black tree implementation\n",(0,r.jsx)(n.strong,{children:"Use Case:"})," Sorted map, range operations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'TreeMap<String, Integer> treeMap = new TreeMap<>();\ntreeMap.put("c", 3);\ntreeMap.put("a", 1);\ntreeMap.put("b", 2);\n\n// Sorted order: {a=1, b=2, c=3}\nString firstKey = treeMap.firstKey();        // "a"\nString lastKey = treeMap.lastKey();          // "c"\nString lowerKey = treeMap.lowerKey("b");     // "a"\nString higherKey = treeMap.higherKey("b");   // "c"\n\n// Range operations\nSortedMap<String, Integer> subMap = treeMap.subMap("a", "c"); // {a=1, b=2}\nSortedMap<String, Integer> headMap = treeMap.headMap("b");    // {a=1}\nSortedMap<String, Integer> tailMap = treeMap.tailMap("b");    // {b=2, c=3}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"stack-operations",children:"Stack Operations"}),"\n",(0,r.jsx)(n.h3,{id:"using-arraydeque-recommended",children:"Using ArrayDeque (Recommended)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Deque<Integer> stack = new ArrayDeque<>();\n\nstack.push(1);                  // Push\nstack.push(2);\nstack.push(3);\n\nInteger top = stack.peek();     // 3 (view top)\nInteger popped = stack.pop();   // 3 (remove top)\nboolean empty = stack.isEmpty(); // false\nint size = stack.size();        // 2\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-algorithms",children:"Common Algorithms"}),"\n",(0,r.jsx)(n.h3,{id:"collections-utility-class",children:"Collections Utility Class"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"List<Integer> list = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6);\n\n// Sorting\nCollections.sort(list);                    // [1, 1, 2, 3, 4, 5, 6, 9]\nCollections.sort(list, Collections.reverseOrder()); // Reverse sort\n\n// Searching (requires sorted list)\nint index = Collections.binarySearch(list, 4);\n\n// Min/Max\nInteger min = Collections.min(list);\nInteger max = Collections.max(list);\n\n// Shuffle\nCollections.shuffle(list);\n\n// Reverse\nCollections.reverse(list);\n\n// Fill and copy\nCollections.fill(list, 0);                 // Fill with zeros\nList<Integer> copy = new ArrayList<>(Collections.nCopies(5, 1)); // [1,1,1,1,1]\n\n// Frequency\nint freq = Collections.frequency(list, 1); // Count occurrences\n"})}),"\n",(0,r.jsx)(n.h3,{id:"stream-operations-java-8",children:"Stream Operations (Java 8+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n// Filtering and collecting\nList<Integer> evens = numbers.stream()\n    .filter(n -> n % 2 == 0)\n    .collect(Collectors.toList());\n\n// Mapping\nList<String> strings = numbers.stream()\n    .map(String::valueOf)\n    .collect(Collectors.toList());\n\n// Reducing\nint sum = numbers.stream()\n    .reduce(0, Integer::sum);\n\nOptional<Integer> max = numbers.stream()\n    .max(Integer::compareTo);\n\n// Grouping\nMap<Boolean, List<Integer>> partitioned = numbers.stream()\n    .collect(Collectors.partitioningBy(n -> n % 2 == 0));\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"java-21-features",children:"Java 21+ Features"}),"\n",(0,r.jsx)(n.h3,{id:"sequenced-collections-java-21",children:"Sequenced Collections (Java 21)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// New methods available on List, Deque, and LinkedHashSet/Map\n\nList<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));\n\n// New methods\nString first = list.getFirst();           // "a" - equivalent to get(0)\nString last = list.getLast();             // "c" - equivalent to get(size()-1)\nlist.addFirst("x");                       // ["x", "a", "b", "c"]\nlist.addLast("z");                        // ["x", "a", "b", "c", "z"]\nString removedFirst = list.removeFirst(); // Remove and return first\nString removedLast = list.removeLast();   // Remove and return last\n\n// Reversed view\nList<String> reversed = list.reversed();  // Non-destructive reverse view\n\n// Works with LinkedHashMap and LinkedHashSet too\nLinkedHashMap<String, Integer> map = new LinkedHashMap<>();\nmap.put("first", 1);\nmap.put("second", 2);\n\nMap.Entry<String, Integer> firstEntry = map.firstEntry();\nMap.Entry<String, Integer> lastEntry = map.lastEntry();\nMap<String, Integer> reversedMap = map.reversed();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"record-patterns-and-pattern-matching",children:"Record Patterns and Pattern Matching"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Using records with collections\nrecord Person(String name, int age) {}\n\nList<Person> people = Arrays.asList(\n    new Person("Alice", 25),\n    new Person("Bob", 30)\n);\n\n// Pattern matching in streams\npeople.stream()\n    .filter(person -> switch (person) {\n        case Person(var name, var age) when age > 25 -> true;\n        default -> false;\n    })\n    .forEach(System.out::println);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"collection-factories-java-9-still-relevant",children:"Collection Factories (Java 9+, still relevant)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Immutable collections\nList<String> list = List.of("a", "b", "c");\nSet<Integer> set = Set.of(1, 2, 3);\nMap<String, Integer> map = Map.of("a", 1, "b", 2, "c", 3);\n\n// For larger maps\nMap<String, Integer> largeMap = Map.ofEntries(\n    Map.entry("key1", 1),\n    Map.entry("key2", 2),\n    Map.entry("key3", 3)\n);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"time-complexities",children:"Time Complexities"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operation"}),(0,r.jsx)(n.th,{children:"ArrayList"}),(0,r.jsx)(n.th,{children:"LinkedList"}),(0,r.jsx)(n.th,{children:"HashSet"}),(0,r.jsx)(n.th,{children:"TreeSet"}),(0,r.jsx)(n.th,{children:"HashMap"}),(0,r.jsx)(n.th,{children:"TreeMap"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Add"}),(0,r.jsx)(n.td,{children:"O(1)*"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Remove"}),(0,r.jsx)(n.td,{children:"O(n)"}),(0,r.jsx)(n.td,{children:"O(1)**"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Search"}),(0,r.jsx)(n.td,{children:"O(n)"}),(0,r.jsx)(n.td,{children:"O(n)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Access"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(n)"}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(log n)"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"*Amortized time complexity\n**O(1) if you have reference to the node"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dsa-common-patterns",children:"DSA Common Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"sliding-window",children:"Sliding Window"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Maximum sum subarray of size k\npublic int maxSumSubarray(int[] arr, int k) {\n    Deque<Integer> deque = new ArrayDeque<>();\n    int maxSum = 0, windowSum = 0;\n\n    for (int i = 0; i < arr.length; i++) {\n        windowSum += arr[i];\n\n        if (i >= k - 1) {\n            maxSum = Math.max(maxSum, windowSum);\n            windowSum -= arr[i - k + 1];\n        }\n    }\n    return maxSum;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"two-pointers-with-map",children:"Two Pointers with Map"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Two sum using HashMap\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[]{map.get(complement), i};\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{};\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"graph-traversal",children:"Graph Traversal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// BFS using Queue\npublic void bfs(Map<Integer, List<Integer>> graph, int start) {\n    Queue<Integer> queue = new LinkedList<>();\n    Set<Integer> visited = new HashSet<>();\n\n    queue.offer(start);\n    visited.add(start);\n\n    while (!queue.isEmpty()) {\n        int node = queue.poll();\n        System.out.println(node);\n\n        for (int neighbor : graph.getOrDefault(node, new ArrayList<>())) {\n            if (!visited.contains(neighbor)) {\n                queue.offer(neighbor);\n                visited.add(neighbor);\n            }\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,r.jsx)(n.h3,{id:"when-to-use-what",children:"When to Use What"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ArrayList"}),": Random access, more reads than writes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"LinkedList"}),": Frequent insertions/deletions in middle, queue operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HashSet"}),": Fast lookups, no duplicates, no order needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TreeSet"}),": Sorted set, range queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HashMap"}),": Fast key-value lookups, no order needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TreeMap"}),": Sorted map, range queries on keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PriorityQueue"}),": Heap operations, priority-based processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ArrayDeque"}),": Stack/queue operations (prefer over Stack class)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"memory-tips",children:"Memory Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Collections with "Hash" prefix: O(1) average operations'}),"\n",(0,r.jsx)(n.li,{children:'Collections with "Tree" prefix: O(log n) operations, sorted'}),"\n",(0,r.jsx)(n.li,{children:'Collections with "Linked" prefix: Good for frequent modifications'}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ArrayList"})," by default for lists unless you need specific features"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);