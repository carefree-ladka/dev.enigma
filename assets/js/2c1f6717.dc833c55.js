"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[2126],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(96540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},68956:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=r(74848),s=r(28453);const t={},a="Java Enums, Generics & Sorting",l={id:"Java/JavaEnumsGenerics&Sorting",title:"Java Enums, Generics & Sorting",description:"Table of Contents",source:"@site/docs/Java/JavaEnumsGenerics&Sorting.mdx",sourceDirName:"Java",slug:"/Java/JavaEnumsGenerics&Sorting",permalink:"/dev.enigma/docs/Java/JavaEnumsGenerics&Sorting",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/JavaEnumsGenerics&Sorting.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java DSA Cheat Sheet",permalink:"/dev.enigma/docs/Java/JavaDSACheatSheet"},next:{title:"Java Iterator",permalink:"/dev.enigma/docs/Java/JavaIterator"}},o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Part 1: Java Enums",id:"part-1-java-enums",level:3},{value:"Part 2: Java Generics",id:"part-2-java-generics",level:3},{value:"Part 3: Java Sorting",id:"part-3-java-sorting",level:3},{value:"What are Enums?",id:"what-are-enums",level:2},{value:"Key Characteristics:",id:"key-characteristics",level:3},{value:"Basic Enum Syntax",id:"basic-enum-syntax",level:2},{value:"Simple Enum Declaration",id:"simple-enum-declaration",level:3},{value:"Using Enums",id:"using-enums",level:3},{value:"Looping Through Enums",id:"looping-through-enums",level:3},{value:"Enum Methods and Properties",id:"enum-methods-and-properties",level:2},{value:"Built-in Methods",id:"built-in-methods",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Advanced Enum Features",id:"advanced-enum-features",level:2},{value:"Enums with Fields and Methods",id:"enums-with-fields-and-methods",level:3},{value:"Enum with Abstract Methods",id:"enum-with-abstract-methods",level:3},{value:"Enum Implementing Interfaces",id:"enum-implementing-interfaces",level:3},{value:"Enum Best Practices",id:"enum-best-practices",level:2},{value:"\u2705 Do&#39;s",id:"-dos",level:3},{value:"\u274c Don&#39;ts",id:"-donts",level:3},{value:"Safe Enum Comparison",id:"safe-enum-comparison",level:3},{value:"Introduction to Generics",id:"introduction-to-generics",level:2},{value:"Benefits of Generics:",id:"benefits-of-generics",level:3},{value:"Before Generics (Java &lt; 5)",id:"before-generics-java--5",level:3},{value:"With Generics (Java 5+)",id:"with-generics-java-5",level:3},{value:"Generic Classes",id:"generic-classes",level:2},{value:"Basic Generic Class",id:"basic-generic-class",level:3},{value:"Using Generic Classes",id:"using-generic-classes",level:3},{value:"Multiple Type Parameters",id:"multiple-type-parameters",level:3},{value:"Generic Methods",id:"generic-methods",level:2},{value:"Basic Generic Method",id:"basic-generic-method",level:3},{value:"Usage Examples",id:"usage-examples",level:3},{value:"Bounded Type Parameters",id:"bounded-type-parameters",level:2},{value:"Upper Bounded Wildcards",id:"upper-bounded-wildcards",level:3},{value:"Multiple Bounds",id:"multiple-bounds",level:3},{value:"Wildcards",id:"wildcards",level:2},{value:"Unbounded Wildcards (?)",id:"unbounded-wildcards-",level:3},{value:"Upper Bounded Wildcards (? extends)",id:"upper-bounded-wildcards--extends",level:3},{value:"Lower Bounded Wildcards (? super)",id:"lower-bounded-wildcards--super",level:3},{value:"Generic Best Practices",id:"generic-best-practices",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:3},{value:"Generic Naming Conventions",id:"generic-naming-conventions",level:3},{value:"Basic Sorting",id:"basic-sorting",level:2},{value:"Collections.sort() for Simple Types",id:"collectionssort-for-simple-types",level:3},{value:"Sorting Arrays",id:"sorting-arrays",level:3},{value:"Comparable Interface",id:"comparable-interface",level:2},{value:"Implementing Comparable",id:"implementing-comparable",level:3},{value:"Using Comparable Objects",id:"using-comparable-objects",level:3},{value:"Comparator Interface",id:"comparator-interface",level:2},{value:"Creating Comparators",id:"creating-comparators",level:3},{value:"Lambda Expressions for Sorting",id:"lambda-expressions-for-sorting",level:3},{value:"Advanced Sorting Techniques",id:"advanced-sorting-techniques",level:2},{value:"Multiple Field Sorting",id:"multiple-field-sorting",level:3},{value:"Null-Safe Sorting",id:"null-safe-sorting",level:3},{value:"Custom Sorting Logic",id:"custom-sorting-logic",level:3},{value:"Sorting Custom Objects",id:"sorting-custom-objects",level:2},{value:"Complete Example with Multiple Sorting Options",id:"complete-example-with-multiple-sorting-options",level:3},{value:"Enum-Based Sorting",id:"enum-based-sorting",level:3},{value:"Summary",id:"summary",level:2},{value:"Enums Key Points",id:"enums-key-points",level:3},{value:"Generics Key Points",id:"generics-key-points",level:3},{value:"Sorting Key Points",id:"sorting-key-points",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"java-enums-generics--sorting",children:"Java Enums, Generics & Sorting"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsx)(n.h3,{id:"part-1-java-enums",children:"Part 1: Java Enums"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#what-are-enums",children:"What are Enums?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-enum-syntax",children:"Basic Enum Syntax"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#enum-methods-and-properties",children:"Enum Methods and Properties"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#advanced-enum-features",children:"Advanced Enum Features"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#enum-best-practices",children:"Enum Best Practices"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"part-2-java-generics",children:"Part 2: Java Generics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction-to-generics",children:"Introduction to Generics"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#generic-classes",children:"Generic Classes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#generic-methods",children:"Generic Methods"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#bounded-type-parameters",children:"Bounded Type Parameters"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#wildcards",children:"Wildcards"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#generic-best-practices",children:"Generic Best Practices"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"part-3-java-sorting",children:"Part 3: Java Sorting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-sorting",children:"Basic Sorting"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#comparable-interface",children:"Comparable Interface"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#comparator-interface",children:"Comparator Interface"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#advanced-sorting-techniques",children:"Advanced Sorting Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sorting-custom-objects",children:"Sorting Custom Objects"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"part-1-java-enums-1",children:"Part 1: Java Enums"}),"\n",(0,i.jsx)(n.h2,{id:"what-are-enums",children:"What are Enums?"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"enum"})," (enumeration) is a special class that represents a group of constants (unchangeable variables). Enums are used when you have a fixed set of values that won't change."]}),"\n",(0,i.jsx)(n.h3,{id:"key-characteristics",children:"Key Characteristics:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type-safe"}),": Prevents invalid values at compile time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Singleton"}),": Each enum constant is a singleton instance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Immutable"}),": Enum constants cannot be modified"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comparable"}),": Enums implement ",(0,i.jsx)(n.code,{children:"Comparable"})," by default"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-enum-syntax",children:"Basic Enum Syntax"}),"\n",(0,i.jsx)(n.h3,{id:"simple-enum-declaration",children:"Simple Enum Declaration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum Level {\n    LOW,\n    MEDIUM,\n    HIGH\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-enums",children:"Using Enums"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class EnumExample {\n    public static void main(String[] args) {\n        // Accessing enum constants\n        Level myLevel = Level.MEDIUM;\n        System.out.println(myLevel); // Output: MEDIUM\n\n        // Enum in switch statement\n        switch(myLevel) {\n            case LOW:\n                System.out.println("Low level");\n                break;\n            case MEDIUM:\n                System.out.println("Medium level");\n                break;\n            case HIGH:\n                System.out.println("High level");\n                break;\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"looping-through-enums",children:"Looping Through Enums"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Using values() method\nfor (Level level : Level.values()) {\n    System.out.println(level);\n}\n\n// Output:\n// LOW\n// MEDIUM\n// HIGH\n"})}),"\n",(0,i.jsx)(n.h2,{id:"enum-methods-and-properties",children:"Enum Methods and Properties"}),"\n",(0,i.jsx)(n.h3,{id:"built-in-methods",children:"Built-in Methods"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Return Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"values()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"EnumType[]"})}),(0,i.jsx)(n.td,{children:"Returns array of all enum constants"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"valueOf(String)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"EnumType"})}),(0,i.jsx)(n.td,{children:"Returns enum constant with specified name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:"Returns the name of the constant"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ordinal()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{children:"Returns the position (0-based index)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toString()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:"Returns string representation"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class EnumMethods {\n    public static void main(String[] args) {\n        Level level = Level.HIGH;\n\n        System.out.println("Name: " + level.name());        // Name: HIGH\n        System.out.println("Ordinal: " + level.ordinal());  // Ordinal: 2\n        System.out.println("String: " + level.toString());  // String: HIGH\n\n        // Using valueOf\n        Level parsed = Level.valueOf("MEDIUM");\n        System.out.println("Parsed: " + parsed);            // Parsed: MEDIUM\n\n        // Get all values\n        Level[] allLevels = Level.values();\n        System.out.println("Total levels: " + allLevels.length); // Total levels: 3\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-enum-features",children:"Advanced Enum Features"}),"\n",(0,i.jsx)(n.h3,{id:"enums-with-fields-and-methods",children:"Enums with Fields and Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum Planet {\n    MERCURY(3.303e+23, 2.4397e6),\n    VENUS(4.869e+24, 6.0518e6),\n    EARTH(5.976e+24, 6.37814e6),\n    MARS(6.421e+23, 3.3972e6);\n\n    private final double mass;   // in kilograms\n    private final double radius; // in meters\n\n    // Constructor\n    Planet(double mass, double radius) {\n        this.mass = mass;\n        this.radius = radius;\n    }\n\n    // Instance methods\n    public double getMass() {\n        return mass;\n    }\n\n    public double getRadius() {\n        return radius;\n    }\n\n    // Calculate surface gravity\n    public double surfaceGravity() {\n        return 6.67300E-11 * mass / (radius * radius);\n    }\n\n    public double surfaceWeight(double otherMass) {\n        return otherMass * surfaceGravity();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"enum-with-abstract-methods",children:"Enum with Abstract Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public enum Operation {\n    PLUS("+") {\n        public double apply(double x, double y) {\n            return x + y;\n        }\n    },\n    MINUS("-") {\n        public double apply(double x, double y) {\n            return x - y;\n        }\n    },\n    MULTIPLY("*") {\n        public double apply(double x, double y) {\n            return x * y;\n        }\n    },\n    DIVIDE("/") {\n        public double apply(double x, double y) {\n            return x / y;\n        }\n    };\n\n    private final String symbol;\n\n    Operation(String symbol) {\n        this.symbol = symbol;\n    }\n\n    // Abstract method - must be implemented by each constant\n    public abstract double apply(double x, double y);\n\n    @Override\n    public String toString() {\n        return symbol;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"enum-implementing-interfaces",children:"Enum Implementing Interfaces"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'interface Describable {\n    String getDescription();\n}\n\npublic enum Priority implements Describable {\n    LOW("Not urgent"),\n    MEDIUM("Moderately important"),\n    HIGH("Very urgent"),\n    CRITICAL("Immediate attention required");\n\n    private final String description;\n\n    Priority(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public String getDescription() {\n        return description;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"enum-best-practices",children:"Enum Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"-dos",children:"\u2705 Do's"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Use enums for fixed sets of constants"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Make enum constructors private"})," (they are by default)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use meaningful names"})," for enum constants"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Add methods when enums need behavior"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use enums in switch statements"})," for better readability"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"-donts",children:"\u274c Don'ts"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Don't use enums for values that might change"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Don't compare enums using =="})," when null-safety is important"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Don't create too many enum constants"})," (affects memory)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"safe-enum-comparison",children:"Safe Enum Comparison"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class SafeEnumComparison {\n    public static void main(String[] args) {\n        Level level1 = Level.HIGH;\n        Level level2 = null;\n\n        // Safe comparison using equals()\n        if (Objects.equals(level1, level2)) {\n            System.out.println("Levels are equal");\n        }\n\n        // Or check for null first\n        if (level1 != null && level1 == level2) {\n            System.out.println("Levels are equal");\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"part-2-java-generics-1",children:"Part 2: Java Generics"}),"\n",(0,i.jsx)(n.h2,{id:"introduction-to-generics",children:"Introduction to Generics"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Generics"})," allow you to write classes, interfaces, and methods that work with different data types while providing compile-time type safety."]}),"\n",(0,i.jsx)(n.h3,{id:"benefits-of-generics",children:"Benefits of Generics:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Catch errors at compile time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Elimination of Casting"}),": No need for explicit type casting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Reusability"}),": Write once, use with multiple types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": No boxing/unboxing overhead"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"before-generics-java--5",children:"Before Generics (Java < 5)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way - no type safety\nList list = new ArrayList();\nlist.add("Hello");\nlist.add(42); // This compiles but may cause runtime errors\n\nString s = (String) list.get(0); // Explicit casting required\n'})}),"\n",(0,i.jsx)(n.h3,{id:"with-generics-java-5",children:"With Generics (Java 5+)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Modern way - type safe\nList<String> list = new ArrayList<String>();\nlist.add("Hello");\n// list.add(42); // Compile-time error!\n\nString s = list.get(0); // No casting needed\n'})}),"\n",(0,i.jsx)(n.h2,{id:"generic-classes",children:"Generic Classes"}),"\n",(0,i.jsx)(n.h3,{id:"basic-generic-class",children:"Basic Generic Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Box<T> {\n    private T value;\n\n    public void set(T value) {\n        this.value = value;\n    }\n\n    public T get() {\n        return value;\n    }\n\n    public boolean isEmpty() {\n        return value == null;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-generic-classes",children:"Using Generic Classes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class GenericClassExample {\n    public static void main(String[] args) {\n        // String Box\n        Box<String> stringBox = new Box<>();\n        stringBox.set("Hello World");\n        String message = stringBox.get(); // No casting!\n\n        // Integer Box\n        Box<Integer> intBox = new Box<>();\n        intBox.set(42);\n        Integer number = intBox.get();\n\n        // Custom Object Box\n        Box<Person> personBox = new Box<>();\n        personBox.set(new Person("Alice", 30));\n        Person person = personBox.get();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-type-parameters",children:"Multiple Type Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Pair<T, U> {\n    private T first;\n    private U second;\n\n    public Pair(T first, U second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public T getFirst() {\n        return first;\n    }\n\n    public U getSecond() {\n        return second;\n    }\n\n    public void setFirst(T first) {\n        this.first = first;\n    }\n\n    public void setSecond(U second) {\n        this.second = second;\n    }\n}\n\n// Usage\nPair<String, Integer> nameAge = new Pair<>("Alice", 30);\nPair<Double, Boolean> scorePass = new Pair<>(85.5, true);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"generic-methods",children:"Generic Methods"}),"\n",(0,i.jsx)(n.h3,{id:"basic-generic-method",children:"Basic Generic Method"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class GenericMethods {\n    // Generic method with single type parameter\n    public static <T> void swap(T[] array, int i, int j) {\n        T temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n\n    // Generic method with return type\n    public static <T> T getMiddle(T... values) {\n        return values[values.length / 2];\n    }\n\n    // Generic method with multiple parameters\n    public static <T, U> void printPair(T first, U second) {\n        System.out.println("First: " + first + ", Second: " + second);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class GenericMethodUsage {\n    public static void main(String[] args) {\n        // Swapping strings\n        String[] names = {"Alice", "Bob", "Charlie"};\n        GenericMethods.swap(names, 0, 2);\n        System.out.println(Arrays.toString(names)); // [Charlie, Bob, Alice]\n\n        // Getting middle element\n        String middle = GenericMethods.getMiddle("A", "B", "C", "D", "E");\n        System.out.println("Middle: " + middle); // Middle: C\n\n        // Printing pairs\n        GenericMethods.printPair("Name", "Alice");\n        GenericMethods.printPair(42, true);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"bounded-type-parameters",children:"Bounded Type Parameters"}),"\n",(0,i.jsx)(n.h3,{id:"upper-bounded-wildcards",children:"Upper Bounded Wildcards"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// T must extend Number\npublic class NumberBox<T extends Number> {\n    private T value;\n\n    public void set(T value) {\n        this.value = value;\n    }\n\n    public T get() {\n        return value;\n    }\n\n    // Can use Number methods\n    public double getDoubleValue() {\n        return value.doubleValue();\n    }\n\n    // Generic method with bounds\n    public static <T extends Number> double sum(T[] numbers) {\n        double total = 0.0;\n        for (T number : numbers) {\n            total += number.doubleValue();\n        }\n        return total;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-bounds",children:"Multiple Bounds"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// T must extend Number AND implement Comparable\npublic class ComparableNumberBox<T extends Number & Comparable<T>> {\n    private T value;\n\n    public void set(T value) {\n        this.value = value;\n    }\n\n    public T get() {\n        return value;\n    }\n\n    public boolean isGreaterThan(T other) {\n        return value.compareTo(other) > 0;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"wildcards",children:"Wildcards"}),"\n",(0,i.jsx)(n.h3,{id:"unbounded-wildcards-",children:"Unbounded Wildcards (?)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class WildcardExamples {\n    // Accepts List of any type\n    public static void printList(List<?> list) {\n        for (Object item : list) {\n            System.out.println(item);\n        }\n    }\n\n    public static void main(String[] args) {\n        List<String> stringList = Arrays.asList("A", "B", "C");\n        List<Integer> intList = Arrays.asList(1, 2, 3);\n\n        printList(stringList); // Works\n        printList(intList);    // Works\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"upper-bounded-wildcards--extends",children:"Upper Bounded Wildcards (? extends)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// PECS: Producer Extends, Consumer Super\npublic class UpperBoundedWildcard {\n    // Can read from list, but cannot add (except null)\n    public static double sumNumbers(List<? extends Number> numbers) {\n        double sum = 0.0;\n        for (Number number : numbers) {\n            sum += number.doubleValue();\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> intList = Arrays.asList(1, 2, 3);\n        List<Double> doubleList = Arrays.asList(1.1, 2.2, 3.3);\n\n        System.out.println(sumNumbers(intList));    // 6.0\n        System.out.println(sumNumbers(doubleList)); // 6.6\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"lower-bounded-wildcards--super",children:"Lower Bounded Wildcards (? super)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class LowerBoundedWildcard {\n    // Can add to list, but reading gives Object\n    public static void addNumbers(List<? super Integer> numbers) {\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n    }\n\n    public static void main(String[] args) {\n        List<Number> numberList = new ArrayList<>();\n        List<Object> objectList = new ArrayList<>();\n\n        addNumbers(numberList); // Works\n        addNumbers(objectList); // Works\n\n        System.out.println(numberList); // [1, 2, 3]\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"generic-best-practices",children:"Generic Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use meaningful type parameter names"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"T"})," for type, ",(0,i.jsx)(n.code,{children:"E"})," for element, ",(0,i.jsx)(n.code,{children:"K"})," for key, ",(0,i.jsx)(n.code,{children:"V"})," for value"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use bounded wildcards appropriately"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"? extends"})," for producers (reading)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"? super"})," for consumers (writing)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Favor generic types over raw types"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use diamond operator"})," (",(0,i.jsx)(n.code,{children:"<>"}),") for cleaner code"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"generic-naming-conventions",children:"Generic Naming Conventions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface List<E>           // E for Element\npublic interface Map<K, V>         // K for Key, V for Value\npublic class Box<T>               // T for Type\npublic interface Comparable<T>     // T for Type being compared\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"part-3-java-sorting-1",children:"Part 3: Java Sorting"}),"\n",(0,i.jsx)(n.h2,{id:"basic-sorting",children:"Basic Sorting"}),"\n",(0,i.jsx)(n.h3,{id:"collectionssort-for-simple-types",children:"Collections.sort() for Simple Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.*;\n\npublic class BasicSorting {\n    public static void main(String[] args) {\n        // Sorting Strings (alphabetical)\n        List<String> names = Arrays.asList("Charlie", "Alice", "Bob");\n        Collections.sort(names);\n        System.out.println("Sorted names: " + names);\n        // Output: [Alice, Bob, Charlie]\n\n        // Sorting Numbers (ascending)\n        List<Integer> numbers = Arrays.asList(5, 2, 8, 1, 9);\n        Collections.sort(numbers);\n        System.out.println("Sorted numbers: " + numbers);\n        // Output: [1, 2, 5, 8, 9]\n\n        // Reverse sorting\n        Collections.sort(names, Collections.reverseOrder());\n        System.out.println("Reverse sorted: " + names);\n        // Output: [Charlie, Bob, Alice]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"sorting-arrays",children:"Sorting Arrays"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\n\npublic class ArraySorting {\n    public static void main(String[] args) {\n        // Sorting primitive arrays\n        int[] numbers = {5, 2, 8, 1, 9};\n        Arrays.sort(numbers);\n        System.out.println("Sorted array: " + Arrays.toString(numbers));\n        // Output: [1, 2, 5, 8, 9]\n\n        // Sorting object arrays\n        String[] names = {"Charlie", "Alice", "Bob"};\n        Arrays.sort(names);\n        System.out.println("Sorted names: " + Arrays.toString(names));\n        // Output: [Alice, Bob, Charlie]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"comparable-interface",children:"Comparable Interface"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Comparable"})," interface allows objects to define their natural ordering."]}),"\n",(0,i.jsx)(n.h3,{id:"implementing-comparable",children:"Implementing Comparable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Person implements Comparable<Person> {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Natural ordering by age\n    @Override\n    public int compareTo(Person other) {\n        return Integer.compare(this.age, other.age);\n\n        // Alternative implementations:\n        // return this.age - other.age; // Simple but can overflow\n        // return this.name.compareTo(other.name); // Sort by name\n    }\n\n    // Getters, setters, toString...\n    public String getName() { return name; }\n    public int getAge() { return age; }\n\n    @Override\n    public String toString() {\n        return name + "(" + age + ")";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-comparable-objects",children:"Using Comparable Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ComparableExample {\n    public static void main(String[] args) {\n        List<Person> people = Arrays.asList(\n            new Person("Alice", 30),\n            new Person("Bob", 25),\n            new Person("Charlie", 35)\n        );\n\n        System.out.println("Before sorting: " + people);\n        Collections.sort(people); // Uses compareTo() method\n        System.out.println("After sorting: " + people);\n        // Output: [Bob(25), Alice(30), Charlie(35)]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"comparator-interface",children:"Comparator Interface"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Comparator"})," interface allows you to define custom sorting logic without modifying the class."]}),"\n",(0,i.jsx)(n.h3,{id:"creating-comparators",children:"Creating Comparators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.Comparator;\n\npublic class ComparatorExamples {\n    public static void main(String[] args) {\n        List<Person> people = Arrays.asList(\n            new Person("Alice", 30),\n            new Person("Bob", 25),\n            new Person("Charlie", 35)\n        );\n\n        // Sort by name using anonymous class\n        Collections.sort(people, new Comparator<Person>() {\n            @Override\n            public int compare(Person p1, Person p2) {\n                return p1.getName().compareTo(p2.getName());\n            }\n        });\n        System.out.println("Sorted by name: " + people);\n\n        // Sort by age descending using lambda\n        Collections.sort(people, (p1, p2) -> Integer.compare(p2.getAge(), p1.getAge()));\n        System.out.println("Sorted by age desc: " + people);\n\n        // Sort using method reference\n        people.sort(Comparator.comparing(Person::getName));\n        System.out.println("Sorted by name (method ref): " + people);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"lambda-expressions-for-sorting",children:"Lambda Expressions for Sorting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class LambdaSorting {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList("banana", "apple", "cherry", "date");\n\n        // Sort by length\n        words.sort((s1, s2) -> Integer.compare(s1.length(), s2.length()));\n        System.out.println("By length: " + words);\n\n        // Sort by length using method reference\n        words.sort(Comparator.comparing(String::length));\n        System.out.println("By length (method ref): " + words);\n\n        // Sort by length, then alphabetically\n        words.sort(Comparator.comparing(String::length)\n                           .thenComparing(String::compareTo));\n        System.out.println("By length then alphabetically: " + words);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-sorting-techniques",children:"Advanced Sorting Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"multiple-field-sorting",children:"Multiple Field Sorting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Employee {\n    private String department;\n    private String name;\n    private int salary;\n\n    public Employee(String department, String name, int salary) {\n        this.department = department;\n        this.name = name;\n        this.salary = salary;\n    }\n\n    // Getters...\n    public String getDepartment() { return department; }\n    public String getName() { return name; }\n    public int getSalary() { return salary; }\n\n    @Override\n    public String toString() {\n        return department + "-" + name + "($" + salary + ")";\n    }\n}\n\npublic class MultiFieldSorting {\n    public static void main(String[] args) {\n        List<Employee> employees = Arrays.asList(\n            new Employee("IT", "Alice", 75000),\n            new Employee("HR", "Bob", 65000),\n            new Employee("IT", "Charlie", 80000),\n            new Employee("HR", "Diana", 70000),\n            new Employee("IT", "Eve", 75000)\n        );\n\n        // Sort by department, then by salary descending, then by name\n        employees.sort(\n            Comparator.comparing(Employee::getDepartment)\n                     .thenComparing(Employee::getSalary, Comparator.reverseOrder())\n                     .thenComparing(Employee::getName)\n        );\n\n        employees.forEach(System.out::println);\n        // Output:\n        // HR-Diana($70000)\n        // HR-Bob($65000)\n        // IT-Charlie($80000)\n        // IT-Alice($75000)\n        // IT-Eve($75000)\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"null-safe-sorting",children:"Null-Safe Sorting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class NullSafeSorting {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList("apple", null, "banana", null, "cherry");\n\n        // Nulls first\n        words.sort(Comparator.nullsFirst(String::compareTo));\n        System.out.println("Nulls first: " + words);\n\n        // Nulls last\n        words.sort(Comparator.nullsLast(String::compareTo));\n        System.out.println("Nulls last: " + words);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-sorting-logic",children:"Custom Sorting Logic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class CustomSortingLogic {\n    public static void main(String[] args) {\n        List<String> items = Arrays.asList("item1", "item10", "item2", "item20", "item3");\n\n        // Natural string sorting (lexicographic)\n        items.sort(String::compareTo);\n        System.out.println("Natural sort: " + items);\n        // Output: [item1, item10, item2, item20, item3]\n\n        // Custom numeric sorting\n        items.sort((s1, s2) -> {\n            int num1 = Integer.parseInt(s1.substring(4));\n            int num2 = Integer.parseInt(s2.substring(4));\n            return Integer.compare(num1, num2);\n        });\n        System.out.println("Numeric sort: " + items);\n        // Output: [item1, item2, item3, item10, item20]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"sorting-custom-objects",children:"Sorting Custom Objects"}),"\n",(0,i.jsx)(n.h3,{id:"complete-example-with-multiple-sorting-options",children:"Complete Example with Multiple Sorting Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Student {\n    private String name;\n    private int age;\n    private double gpa;\n    private String major;\n\n    public Student(String name, int age, double gpa, String major) {\n        this.name = name;\n        this.age = age;\n        this.gpa = gpa;\n        this.major = major;\n    }\n\n    // Getters\n    public String getName() { return name; }\n    public int getAge() { return age; }\n    public double getGpa() { return gpa; }\n    public String getMajor() { return major; }\n\n    @Override\n    public String toString() {\n        return String.format("%s(age:%d, gpa:%.1f, major:%s)",\n                           name, age, gpa, major);\n    }\n}\n\npublic class StudentSorting {\n    public static void main(String[] args) {\n        List<Student> students = Arrays.asList(\n            new Student("Alice", 20, 3.8, "CS"),\n            new Student("Bob", 19, 3.5, "Math"),\n            new Student("Charlie", 21, 3.9, "CS"),\n            new Student("Diana", 20, 3.7, "Physics"),\n            new Student("Eve", 22, 3.6, "Math")\n        );\n\n        System.out.println("Original list:");\n        students.forEach(System.out::println);\n\n        // Sort by GPA descending\n        List<Student> byGpa = students.stream()\n            .sorted(Comparator.comparing(Student::getGpa).reversed())\n            .collect(Collectors.toList());\n        System.out.println("\\nSorted by GPA (desc):");\n        byGpa.forEach(System.out::println);\n\n        // Sort by major, then by GPA descending\n        List<Student> byMajorThenGpa = students.stream()\n            .sorted(Comparator.comparing(Student::getMajor)\n                             .thenComparing(Student::getGpa).reversed())\n            .collect(Collectors.toList());\n        System.out.println("\\nSorted by major, then GPA (desc):");\n        byMajorThenGpa.forEach(System.out::println);\n\n        // Find top 3 students by GPA\n        List<Student> top3 = students.stream()\n            .sorted(Comparator.comparing(Student::getGpa).reversed())\n            .limit(3)\n            .collect(Collectors.toList());\n        System.out.println("\\nTop 3 by GPA:");\n        top3.forEach(System.out::println);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"enum-based-sorting",children:"Enum-Based Sorting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public enum Grade {\n    A(4.0), B(3.0), C(2.0), D(1.0), F(0.0);\n\n    private final double points;\n\n    Grade(double points) {\n        this.points = points;\n    }\n\n    public double getPoints() {\n        return points;\n    }\n}\n\npublic class CourseGrade {\n    private String course;\n    private Grade grade;\n\n    public CourseGrade(String course, Grade grade) {\n        this.course = course;\n        this.grade = grade;\n    }\n\n    public String getCourse() { return course; }\n    public Grade getGrade() { return grade; }\n\n    @Override\n    public String toString() {\n        return course + ": " + grade;\n    }\n}\n\npublic class EnumSorting {\n    public static void main(String[] args) {\n        List<CourseGrade> grades = Arrays.asList(\n            new CourseGrade("Math", Grade.B),\n            new CourseGrade("Science", Grade.A),\n            new CourseGrade("History", Grade.C),\n            new CourseGrade("English", Grade.A),\n            new CourseGrade("Art", Grade.B)\n        );\n\n        // Sort by grade (natural enum order)\n        grades.sort(Comparator.comparing(CourseGrade::getGrade));\n        System.out.println("Sorted by grade (natural order):");\n        grades.forEach(System.out::println);\n\n        // Sort by grade points (descending)\n        grades.sort(Comparator.comparing(\n            (CourseGrade cg) -> cg.getGrade().getPoints()).reversed());\n        System.out.println("\\nSorted by grade points (desc):");\n        grades.forEach(System.out::println);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.h3,{id:"enums-key-points",children:"Enums Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use for fixed sets of constants"}),"\n",(0,i.jsx)(n.li,{children:"Provide type safety and prevent invalid values"}),"\n",(0,i.jsx)(n.li,{children:"Can have fields, methods, and constructors"}),"\n",(0,i.jsx)(n.li,{children:"Implement Comparable by default (declaration order)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"generics-key-points",children:"Generics Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Provide compile-time type safety"}),"\n",(0,i.jsx)(n.li,{children:"Eliminate casting and reduce runtime errors"}),"\n",(0,i.jsx)(n.li,{children:"Use bounded wildcards appropriately"}),"\n",(0,i.jsx)(n.li,{children:"Follow naming conventions (T, E, K, V)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sorting-key-points",children:"Sorting Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"Comparable"})," for natural ordering"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"Comparator"})," for custom sorting logic"]}),"\n",(0,i.jsx)(n.li,{children:"Leverage lambda expressions and method references"}),"\n",(0,i.jsxs)(n.li,{children:["Chain multiple sorting criteria using ",(0,i.jsx)(n.code,{children:"thenComparing()"})]}),"\n",(0,i.jsxs)(n.li,{children:["Handle null values with ",(0,i.jsx)(n.code,{children:"nullsFirst()"})," and ",(0,i.jsx)(n.code,{children:"nullsLast()"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"These three concepts work together powerfully in Java applications, providing type safety, flexibility, and robust data manipulation capabilities."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);