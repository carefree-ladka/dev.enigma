"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5294],{1325:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var t=a(4848),s=a(8453);const i={},r="Complete SQL & MySQL Guide for Java Developers",l={id:"Java/Complete SQL & MySQL",title:"Complete SQL & MySQL Guide for Java Developers",description:"A comprehensive guide covering SQL fundamentals, MySQL specifics, and Java integration patterns for database development.",source:"@site/docs/Java/Complete SQL & MySQL.mdx",sourceDirName:"Java",slug:"/Java/Complete SQL & MySQL",permalink:"/js.enigma/docs/Java/Complete SQL & MySQL",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Complete SQL & MySQL.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Arrays and Strings",permalink:"/js.enigma/docs/Java/ArraysAndStrings"},next:{title:"JUnit Java Testing - Complete Developer Guide",permalink:"/js.enigma/docs/Java/JUnit Java Testing"}},o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"SQL Fundamentals",id:"sql-fundamentals",level:2},{value:"What is SQL?",id:"what-is-sql",level:3},{value:"SQL Categories",id:"sql-categories",level:3},{value:"Basic SQL Syntax Rules",id:"basic-sql-syntax-rules",level:3},{value:"MySQL Specifics",id:"mysql-specifics",level:2},{value:"MySQL Architecture",id:"mysql-architecture",level:3},{value:"MySQL Installation and Configuration",id:"mysql-installation-and-configuration",level:3},{value:"Basic MySQL Commands",id:"basic-mysql-commands",level:3},{value:"Data Types",id:"data-types",level:2},{value:"Numeric Data Types",id:"numeric-data-types",level:3},{value:"String Data Types",id:"string-data-types",level:3},{value:"Date and Time Data Types",id:"date-and-time-data-types",level:3},{value:"JSON Data Type (MySQL 5.7+)",id:"json-data-type-mysql-57",level:3},{value:"Database Operations",id:"database-operations",level:2},{value:"Creating Databases and Tables",id:"creating-databases-and-tables",level:3},{value:"Altering Tables",id:"altering-tables",level:3},{value:"Data Manipulation (CRUD Operations)",id:"data-manipulation-crud-operations",level:3},{value:"INSERT Operations",id:"insert-operations",level:4},{value:"SELECT Operations",id:"select-operations",level:4},{value:"UPDATE Operations",id:"update-operations",level:4},{value:"DELETE Operations",id:"delete-operations",level:4},{value:"Advanced SQL Concepts",id:"advanced-sql-concepts",level:2},{value:"Joins",id:"joins",level:3},{value:"Subqueries",id:"subqueries",level:3},{value:"Window Functions (MySQL 8.0+)",id:"window-functions-mysql-80",level:3},{value:"Common Table Expressions (CTEs) - MySQL 8.0+",id:"common-table-expressions-ctes---mysql-80",level:3},{value:"Views",id:"views",level:3},{value:"Indexes and Performance",id:"indexes-and-performance",level:2},{value:"Types of Indexes",id:"types-of-indexes",level:3},{value:"Index Analysis",id:"index-analysis",level:3},{value:"Query Optimization Tips",id:"query-optimization-tips",level:3},{value:"Transactions and ACID",id:"transactions-and-acid",level:2},{value:"ACID Properties",id:"acid-properties",level:3},{value:"Transaction Control",id:"transaction-control",level:3},{value:"Isolation Levels",id:"isolation-levels",level:3},{value:"Locking",id:"locking",level:3},{value:"Stored Procedures and Functions",id:"stored-procedures-and-functions",level:2},{value:"Stored Procedures",id:"stored-procedures",level:3},{value:"Functions",id:"functions",level:3},{value:"Triggers",id:"triggers",level:3},{value:"Java Database Connectivity",id:"java-database-connectivity",level:2},{value:"JDBC Basics",id:"jdbc-basics",level:3},{value:"Connection Pooling with HikariCP",id:"connection-pooling-with-hikaricp",level:3},{value:"CRUD Operations in Java",id:"crud-operations-in-java",level:3},{value:"Transaction Management in Java",id:"transaction-management-in-java",level:3},{value:"JPA/Hibernate Integration",id:"jpahibernate-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Database Design Best Practices",id:"database-design-best-practices",level:3},{value:"SQL Query Best Practices",id:"sql-query-best-practices",level:3},{value:"Java Integration Best Practices",id:"java-integration-best-practices",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Security Best Practices",id:"security-best-practices",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"MySQL Configuration and Tuning",id:"mysql-configuration-and-tuning",level:3},{value:"Monitoring and Diagnostics",id:"monitoring-and-diagnostics",level:3},{value:"Replication and High Availability",id:"replication-and-high-availability",level:3},{value:"Backup and Recovery",id:"backup-and-recovery",level:3},{value:"JSON Operations (MySQL 5.7+)",id:"json-operations-mysql-57",level:3},{value:"Partitioning",id:"partitioning",level:3},{value:"Common Patterns and Solutions",id:"common-patterns-and-solutions",level:2},{value:"Pagination Patterns",id:"pagination-patterns",level:3},{value:"Hierarchical Data Patterns",id:"hierarchical-data-patterns",level:3},{value:"Audit Trail Pattern",id:"audit-trail-pattern",level:3},{value:"Soft Delete Pattern",id:"soft-delete-pattern",level:3},{value:"Optimistic Locking Pattern",id:"optimistic-locking-pattern",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Connection Issues",id:"connection-issues",level:3},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Memory Issues",id:"memory-issues",level:3},{value:"Summary and Next Steps",id:"summary-and-next-steps",level:2},{value:"Recommended Learning Path:",id:"recommended-learning-path",level:3},{value:"Additional Resources:",id:"additional-resources",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"complete-sql--mysql-guide-for-java-developers",children:"Complete SQL & MySQL Guide for Java Developers"})}),"\n",(0,t.jsx)(n.p,{children:"A comprehensive guide covering SQL fundamentals, MySQL specifics, and Java integration patterns for database development."}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#sql-fundamentals",children:"SQL Fundamentals"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#mysql-specifics",children:"MySQL Specifics"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#data-types",children:"Data Types"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#database-operations",children:"Database Operations"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#advanced-sql-concepts",children:"Advanced SQL Concepts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#indexes-and-performance",children:"Indexes and Performance"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#transactions-and-acid",children:"Transactions and ACID"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#stored-procedures-and-functions",children:"Stored Procedures and Functions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#java-database-connectivity",children:"Java Database Connectivity"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sql-fundamentals",children:"SQL Fundamentals"}),"\n",(0,t.jsx)(n.h3,{id:"what-is-sql",children:"What is SQL?"}),"\n",(0,t.jsx)(n.p,{children:"SQL (Structured Query Language) is a standard language for managing relational databases. It's used to create, read, update, and delete data (CRUD operations)."}),"\n",(0,t.jsx)(n.h3,{id:"sql-categories",children:"SQL Categories"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DDL (Data Definition Language):"})," CREATE, ALTER, DROP"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DML (Data Manipulation Language):"})," INSERT, UPDATE, DELETE, SELECT"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DCL (Data Control Language):"})," GRANT, REVOKE"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TCL (Transaction Control Language):"})," COMMIT, ROLLBACK, SAVEPOINT"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"basic-sql-syntax-rules",children:"Basic SQL Syntax Rules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"SQL statements end with semicolon (;)"}),"\n",(0,t.jsx)(n.li,{children:"SQL is case-insensitive for keywords"}),"\n",(0,t.jsx)(n.li,{children:"String literals use single quotes ('')"}),"\n",(0,t.jsxs)(n.li,{children:["Comments: ",(0,t.jsx)(n.code,{children:"--"})," for single line, ",(0,t.jsx)(n.code,{children:"/* */"})," for multi-line"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"mysql-specifics",children:"MySQL Specifics"}),"\n",(0,t.jsx)(n.h3,{id:"mysql-architecture",children:"MySQL Architecture"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Storage Engines:"})," InnoDB (default), MyISAM, Memory, Archive"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query Cache:"})," Caches SELECT statement results"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Layer:"})," Handles client connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQL Layer:"})," Parses and optimizes queries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Storage Layer:"})," Manages data storage"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mysql-installation-and-configuration",children:"MySQL Installation and Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt-get install mysql-server\n\n# Start MySQL service\nsudo systemctl start mysql\n\n# Connect to MySQL\nmysql -u username -p\n"})}),"\n",(0,t.jsx)(n.h3,{id:"basic-mysql-commands",children:"Basic MySQL Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Show databases\nSHOW DATABASES;\n\n-- Create database\nCREATE DATABASE company_db;\n\n-- Use database\nUSE company_db;\n\n-- Show tables\nSHOW TABLES;\n\n-- Describe table structure\nDESCRIBE table_name;\nDESC table_name;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(n.h3,{id:"numeric-data-types",children:"Numeric Data Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Integer types\nTINYINT     -- 1 byte (-128 to 127)\nSMALLINT    -- 2 bytes (-32,768 to 32,767)\nMEDIUMINT   -- 3 bytes\nINT         -- 4 bytes (-2,147,483,648 to 2,147,483,647)\nBIGINT      -- 8 bytes\n\n-- Decimal types\nDECIMAL(M,D)  -- Fixed-point number\nFLOAT(M,D)    -- Single precision floating-point\nDOUBLE(M,D)   -- Double precision floating-point\n"})}),"\n",(0,t.jsx)(n.h3,{id:"string-data-types",children:"String Data Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CHAR(n)       -- Fixed-length string (0-255)\nVARCHAR(n)    -- Variable-length string (0-65,535)\nTEXT          -- Variable-length text (0-65,535)\nMEDIUMTEXT    -- Variable-length text (0-16,777,215)\nLONGTEXT      -- Variable-length text (0-4,294,967,295)\nBINARY(n)     -- Fixed-length binary\nVARBINARY(n)  -- Variable-length binary\nBLOB          -- Binary Large Object\n"})}),"\n",(0,t.jsx)(n.h3,{id:"date-and-time-data-types",children:"Date and Time Data Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"DATE          -- YYYY-MM-DD\nTIME          -- HH:MM:SS\nDATETIME      -- YYYY-MM-DD HH:MM:SS\nTIMESTAMP     -- YYYY-MM-DD HH:MM:SS (with timezone)\nYEAR          -- YYYY or YY\n"})}),"\n",(0,t.jsx)(n.h3,{id:"json-data-type-mysql-57",children:"JSON Data Type (MySQL 5.7+)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'-- JSON column\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    attributes JSON\n);\n\n-- Insert JSON data\nINSERT INTO products VALUES (1, \'{"color": "red", "size": "medium"}\');\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"database-operations",children:"Database Operations"}),"\n",(0,t.jsx)(n.h3,{id:"creating-databases-and-tables",children:"Creating Databases and Tables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Create database with character set\nCREATE DATABASE company_db\nCHARACTER SET utf8mb4\nCOLLATE utf8mb4_unicode_ci;\n\n-- Create table with constraints\nCREATE TABLE employees (\n    employee_id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    email VARCHAR(100) UNIQUE,\n    hire_date DATE,\n    salary DECIMAL(10,2),\n    department_id INT,\n    manager_id INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n\n    -- Foreign key constraints\n    FOREIGN KEY (department_id) REFERENCES departments(dept_id),\n    FOREIGN KEY (manager_id) REFERENCES employees(employee_id),\n\n    -- Check constraints (MySQL 8.0+)\n    CONSTRAINT chk_salary CHECK (salary >= 0)\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"altering-tables",children:"Altering Tables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Add column\nALTER TABLE employees ADD COLUMN phone VARCHAR(15);\n\n-- Modify column\nALTER TABLE employees MODIFY COLUMN salary DECIMAL(12,2);\n\n-- Drop column\nALTER TABLE employees DROP COLUMN phone;\n\n-- Add index\nALTER TABLE employees ADD INDEX idx_last_name (last_name);\n\n-- Add foreign key\nALTER TABLE employees\nADD CONSTRAINT fk_dept\nFOREIGN KEY (department_id) REFERENCES departments(dept_id);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"data-manipulation-crud-operations",children:"Data Manipulation (CRUD Operations)"}),"\n",(0,t.jsx)(n.h4,{id:"insert-operations",children:"INSERT Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Single row insert\nINSERT INTO employees (first_name, last_name, email, hire_date, salary)\nVALUES ('John', 'Doe', 'john.doe@company.com', '2024-01-15', 75000.00);\n\n-- Multiple rows insert\nINSERT INTO employees (first_name, last_name, email, salary) VALUES\n('Jane', 'Smith', 'jane.smith@company.com', 80000.00),\n('Bob', 'Johnson', 'bob.johnson@company.com', 65000.00),\n('Alice', 'Brown', 'alice.brown@company.com', 70000.00);\n\n-- Insert with ON DUPLICATE KEY UPDATE\nINSERT INTO employees (employee_id, first_name, last_name, salary)\nVALUES (1, 'John', 'Doe', 76000.00)\nON DUPLICATE KEY UPDATE salary = VALUES(salary);\n\n-- Insert from SELECT\nINSERT INTO archived_employees\nSELECT * FROM employees WHERE hire_date < '2020-01-01';\n"})}),"\n",(0,t.jsx)(n.h4,{id:"select-operations",children:"SELECT Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Basic SELECT\nSELECT first_name, last_name, salary\nFROM employees;\n\n-- SELECT with WHERE clause\nSELECT * FROM employees\nWHERE salary > 70000 AND department_id = 1;\n\n-- SELECT with ORDER BY\nSELECT first_name, last_name, salary\nFROM employees\nORDER BY salary DESC, last_name ASC;\n\n-- SELECT with LIMIT and OFFSET\nSELECT * FROM employees\nORDER BY hire_date\nLIMIT 10 OFFSET 20;\n\n-- SELECT DISTINCT\nSELECT DISTINCT department_id FROM employees;\n\n-- SELECT with aggregate functions\nSELECT\n    department_id,\n    COUNT(*) as employee_count,\n    AVG(salary) as avg_salary,\n    MIN(salary) as min_salary,\n    MAX(salary) as max_salary,\n    SUM(salary) as total_salary\nFROM employees\nGROUP BY department_id\nHAVING AVG(salary) > 60000;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"update-operations",children:"UPDATE Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Basic UPDATE\nUPDATE employees\nSET salary = salary * 1.05\nWHERE department_id = 1;\n\n-- UPDATE with JOIN\nUPDATE employees e\nJOIN departments d ON e.department_id = d.dept_id\nSET e.salary = e.salary * 1.10\nWHERE d.dept_name = 'Engineering';\n\n-- UPDATE with subquery\nUPDATE employees\nSET salary = (\n    SELECT AVG(salary) * 1.1\n    FROM (SELECT salary FROM employees) as temp\n)\nWHERE employee_id = 1;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"delete-operations",children:"DELETE Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Basic DELETE\nDELETE FROM employees\nWHERE hire_date < '2020-01-01';\n\n-- DELETE with JOIN\nDELETE e FROM employees e\nJOIN departments d ON e.department_id = d.dept_id\nWHERE d.dept_name = 'Discontinued';\n\n-- DELETE with subquery\nDELETE FROM employees\nWHERE employee_id IN (\n    SELECT employee_id FROM performance_reviews\n    WHERE rating < 2\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"advanced-sql-concepts",children:"Advanced SQL Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"joins",children:"Joins"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- INNER JOIN\nSELECT e.first_name, e.last_name, d.dept_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.dept_id;\n\n-- LEFT JOIN\nSELECT e.first_name, e.last_name, d.dept_name\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.dept_id;\n\n-- RIGHT JOIN\nSELECT e.first_name, e.last_name, d.dept_name\nFROM employees e\nRIGHT JOIN departments d ON e.department_id = d.dept_id;\n\n-- FULL OUTER JOIN (MySQL doesn't support directly, use UNION)\nSELECT e.first_name, e.last_name, d.dept_name\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.dept_id\nUNION\nSELECT e.first_name, e.last_name, d.dept_name\nFROM employees e\nRIGHT JOIN departments d ON e.department_id = d.dept_id;\n\n-- SELF JOIN\nSELECT e1.first_name as employee, e2.first_name as manager\nFROM employees e1\nLEFT JOIN employees e2 ON e1.manager_id = e2.employee_id;\n\n-- CROSS JOIN\nSELECT e.first_name, p.project_name\nFROM employees e\nCROSS JOIN projects p;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"subqueries",children:"Subqueries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Subquery in WHERE clause\nSELECT first_name, last_name, salary\nFROM employees\nWHERE salary > (SELECT AVG(salary) FROM employees);\n\n-- Subquery in FROM clause\nSELECT dept_stats.dept_name, dept_stats.avg_salary\nFROM (\n    SELECT d.dept_name, AVG(e.salary) as avg_salary\n    FROM employees e\n    JOIN departments d ON e.department_id = d.dept_id\n    GROUP BY d.dept_name\n) as dept_stats\nWHERE dept_stats.avg_salary > 70000;\n\n-- Correlated subquery\nSELECT e1.first_name, e1.last_name, e1.salary\nFROM employees e1\nWHERE e1.salary > (\n    SELECT AVG(e2.salary)\n    FROM employees e2\n    WHERE e2.department_id = e1.department_id\n);\n\n-- EXISTS\nSELECT d.dept_name\nFROM departments d\nWHERE EXISTS (\n    SELECT 1 FROM employees e\n    WHERE e.department_id = d.dept_id\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"window-functions-mysql-80",children:"Window Functions (MySQL 8.0+)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- ROW_NUMBER\nSELECT\n    first_name,\n    last_name,\n    salary,\n    ROW_NUMBER() OVER (ORDER BY salary DESC) as rank_by_salary\nFROM employees;\n\n-- RANK and DENSE_RANK\nSELECT\n    first_name,\n    last_name,\n    salary,\n    RANK() OVER (ORDER BY salary DESC) as rank,\n    DENSE_RANK() OVER (ORDER BY salary DESC) as dense_rank\nFROM employees;\n\n-- PARTITION BY\nSELECT\n    first_name,\n    last_name,\n    department_id,\n    salary,\n    ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) as dept_rank\nFROM employees;\n\n-- LAG and LEAD\nSELECT\n    first_name,\n    last_name,\n    salary,\n    LAG(salary, 1) OVER (ORDER BY hire_date) as previous_salary,\n    LEAD(salary, 1) OVER (ORDER BY hire_date) as next_salary\nFROM employees;\n\n-- Aggregate window functions\nSELECT\n    first_name,\n    last_name,\n    salary,\n    SUM(salary) OVER (ORDER BY hire_date) as running_total,\n    AVG(salary) OVER (ORDER BY hire_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as moving_avg\nFROM employees;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-table-expressions-ctes---mysql-80",children:"Common Table Expressions (CTEs) - MySQL 8.0+"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Simple CTE\nWITH high_earners AS (\n    SELECT first_name, last_name, salary, department_id\n    FROM employees\n    WHERE salary > 75000\n)\nSELECT he.first_name, he.last_name, d.dept_name\nFROM high_earners he\nJOIN departments d ON he.department_id = d.dept_id;\n\n-- Recursive CTE (Employee hierarchy)\nWITH RECURSIVE employee_hierarchy AS (\n    -- Anchor member (top-level managers)\n    SELECT employee_id, first_name, last_name, manager_id, 0 as level\n    FROM employees\n    WHERE manager_id IS NULL\n\n    UNION ALL\n\n    -- Recursive member\n    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id, eh.level + 1\n    FROM employees e\n    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id\n)\nSELECT * FROM employee_hierarchy ORDER BY level, last_name;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"views",children:"Views"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Create view\nCREATE VIEW employee_summary AS\nSELECT\n    e.employee_id,\n    e.first_name,\n    e.last_name,\n    e.salary,\n    d.dept_name,\n    CASE\n        WHEN e.salary > 80000 THEN 'High'\n        WHEN e.salary > 60000 THEN 'Medium'\n        ELSE 'Low'\n    END as salary_grade\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.dept_id;\n\n-- Use view\nSELECT * FROM employee_summary WHERE salary_grade = 'High';\n\n-- Update view (if updatable)\nUPDATE employee_summary SET salary = 85000 WHERE employee_id = 1;\n\n-- Drop view\nDROP VIEW employee_summary;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"indexes-and-performance",children:"Indexes and Performance"}),"\n",(0,t.jsx)(n.h3,{id:"types-of-indexes",children:"Types of Indexes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Primary key (automatically creates clustered index)\nALTER TABLE employees ADD PRIMARY KEY (employee_id);\n\n-- Unique index\nCREATE UNIQUE INDEX idx_email ON employees (email);\n\n-- Regular index\nCREATE INDEX idx_last_name ON employees (last_name);\n\n-- Composite index\nCREATE INDEX idx_dept_salary ON employees (department_id, salary);\n\n-- Partial index (with WHERE clause)\nCREATE INDEX idx_active_employees ON employees (last_name)\nWHERE status = 'active';\n\n-- Fulltext index\nCREATE FULLTEXT INDEX idx_fulltext_name ON employees (first_name, last_name);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"index-analysis",children:"Index Analysis"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Show indexes\nSHOW INDEXES FROM employees;\n\n-- Explain query execution plan\nEXPLAIN SELECT * FROM employees WHERE last_name = 'Smith';\n\n-- Analyze table\nANALYZE TABLE employees;\n\n-- Check index usage\nSHOW STATUS LIKE 'Handler_read%';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"query-optimization-tips",children:"Query Optimization Tips"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Use EXPLAIN to understand query execution\nEXPLAIN FORMAT=JSON\nSELECT e.first_name, d.dept_name\nFROM employees e\nJOIN departments d ON e.department_id = d.dept_id\nWHERE e.salary > 70000;\n\n-- Use indexes effectively\n-- Good: Uses index on last_name\nSELECT * FROM employees WHERE last_name = 'Smith';\n\n-- Bad: Function on column prevents index usage\nSELECT * FROM employees WHERE UPPER(last_name) = 'SMITH';\n\n-- Better: Store uppercase values or use functional index\nSELECT * FROM employees WHERE last_name = 'Smith';\n\n-- Use LIMIT for large result sets\nSELECT * FROM employees ORDER BY hire_date DESC LIMIT 10;\n\n-- Avoid SELECT * when possible\nSELECT first_name, last_name FROM employees;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"transactions-and-acid",children:"Transactions and ACID"}),"\n",(0,t.jsx)(n.h3,{id:"acid-properties",children:"ACID Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Atomicity:"})," All operations in a transaction succeed or fail together"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency:"})," Database remains in a valid state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Isolation:"})," Transactions don't interfere with each other"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Durability:"})," Committed changes persist"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"transaction-control",children:"Transaction Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Start transaction\nSTART TRANSACTION;\n-- or\nBEGIN;\n\n-- Perform operations\nUPDATE accounts SET balance = balance - 1000 WHERE account_id = 1;\nUPDATE accounts SET balance = balance + 1000 WHERE account_id = 2;\n\n-- Commit transaction\nCOMMIT;\n\n-- Rollback transaction (if error occurs)\nROLLBACK;\n\n-- Savepoints\nSTART TRANSACTION;\nUPDATE accounts SET balance = balance - 500 WHERE account_id = 1;\nSAVEPOINT sp1;\nUPDATE accounts SET balance = balance + 300 WHERE account_id = 2;\nSAVEPOINT sp2;\n-- Rollback to savepoint\nROLLBACK TO sp1;\nCOMMIT;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isolation-levels",children:"Isolation Levels"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Set isolation level\nSET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\nSET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\nSET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;  -- MySQL default\nSET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\n-- Check current isolation level\nSELECT @@transaction_isolation;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"locking",children:"Locking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Explicit locking\nSELECT * FROM employees WHERE employee_id = 1 FOR UPDATE;\nSELECT * FROM employees WHERE department_id = 1 FOR SHARE;\n\n-- Table locking\nLOCK TABLES employees READ;\n-- Perform read operations\nUNLOCK TABLES;\n\nLOCK TABLES employees WRITE;\n-- Perform write operations\nUNLOCK TABLES;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"stored-procedures-and-functions",children:"Stored Procedures and Functions"}),"\n",(0,t.jsx)(n.h3,{id:"stored-procedures",children:"Stored Procedures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Create procedure\nDELIMITER //\nCREATE PROCEDURE GetEmployeesByDepartment(IN dept_id INT)\nBEGIN\n    SELECT employee_id, first_name, last_name, salary\n    FROM employees\n    WHERE department_id = dept_id;\nEND //\nDELIMITER ;\n\n-- Call procedure\nCALL GetEmployeesByDepartment(1);\n\n-- Procedure with OUT parameter\nDELIMITER //\nCREATE PROCEDURE GetEmployeeCount(IN dept_id INT, OUT emp_count INT)\nBEGIN\n    SELECT COUNT(*) INTO emp_count\n    FROM employees\n    WHERE department_id = dept_id;\nEND //\nDELIMITER ;\n\n-- Call with OUT parameter\nCALL GetEmployeeCount(1, @count);\nSELECT @count;\n\n-- Complex procedure with error handling\nDELIMITER //\nCREATE PROCEDURE TransferMoney(\n    IN from_account INT,\n    IN to_account INT,\n    IN amount DECIMAL(10,2)\n)\nBEGIN\n    DECLARE insufficient_funds CONDITION FOR SQLSTATE '45000';\n    DECLARE from_balance DECIMAL(10,2);\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        RESIGNAL;\n    END;\n\n    START TRANSACTION;\n\n    -- Check balance\n    SELECT balance INTO from_balance\n    FROM accounts\n    WHERE account_id = from_account;\n\n    IF from_balance < amount THEN\n        SIGNAL insufficient_funds\n        SET MESSAGE_TEXT = 'Insufficient funds';\n    END IF;\n\n    -- Transfer money\n    UPDATE accounts SET balance = balance - amount\n    WHERE account_id = from_account;\n\n    UPDATE accounts SET balance = balance + amount\n    WHERE account_id = to_account;\n\n    COMMIT;\nEND //\nDELIMITER ;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Create function\nDELIMITER //\nCREATE FUNCTION CalculateBonus(salary DECIMAL(10,2))\nRETURNS DECIMAL(10,2)\nREADS SQL DATA\nDETERMINISTIC\nBEGIN\n    DECLARE bonus DECIMAL(10,2);\n    IF salary > 80000 THEN\n        SET bonus = salary * 0.15;\n    ELSEIF salary > 60000 THEN\n        SET bonus = salary * 0.10;\n    ELSE\n        SET bonus = salary * 0.05;\n    END IF;\n    RETURN bonus;\nEND //\nDELIMITER ;\n\n-- Use function\nSELECT\n    first_name,\n    last_name,\n    salary,\n    CalculateBonus(salary) as bonus\nFROM employees;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"triggers",children:"Triggers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- BEFORE INSERT trigger\nDELIMITER //\nCREATE TRIGGER before_employee_insert\nBEFORE INSERT ON employees\nFOR EACH ROW\nBEGIN\n    -- Set created timestamp\n    SET NEW.created_at = NOW();\n\n    -- Validate email format\n    IF NEW.email NOT REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$' THEN\n        SIGNAL SQLSTATE '45000'\n        SET MESSAGE_TEXT = 'Invalid email format';\n    END IF;\nEND //\nDELIMITER ;\n\n-- AFTER UPDATE trigger for audit\nDELIMITER //\nCREATE TRIGGER after_employee_update\nAFTER UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit (\n        employee_id,\n        old_salary,\n        new_salary,\n        change_date,\n        changed_by\n    )\n    VALUES (\n        NEW.employee_id,\n        OLD.salary,\n        NEW.salary,\n        NOW(),\n        USER()\n    );\nEND //\nDELIMITER ;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java-database-connectivity",children:"Java Database Connectivity"}),"\n",(0,t.jsx)(n.h3,{id:"jdbc-basics",children:"JDBC Basics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Add MySQL JDBC driver dependency\n// Maven: mysql-connector-java or mysql-connector-j (newer)\n\n// Database connection\nString url = "jdbc:mysql://localhost:3306/company_db";\nString username = "your_username";\nString password = "your_password";\n\ntry (Connection conn = DriverManager.getConnection(url, username, password)) {\n    // Database operations\n} catch (SQLException e) {\n    e.printStackTrace();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"connection-pooling-with-hikaricp",children:"Connection Pooling with HikariCP"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Maven dependency: com.zaxxer:HikariCP\n\nHikariConfig config = new HikariConfig();\nconfig.setJdbcUrl("jdbc:mysql://localhost:3306/company_db");\nconfig.setUsername("your_username");\nconfig.setPassword("your_password");\nconfig.setMaximumPoolSize(20);\nconfig.setMinimumIdle(5);\nconfig.setConnectionTimeout(30000);\nconfig.setIdleTimeout(600000);\nconfig.setMaxLifetime(1800000);\n\nHikariDataSource dataSource = new HikariDataSource(config);\n\n// Use connection from pool\ntry (Connection conn = dataSource.getConnection()) {\n    // Database operations\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"crud-operations-in-java",children:"CRUD Operations in Java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class EmployeeDAO {\n    private DataSource dataSource;\n\n    // Create\n    public void insertEmployee(Employee employee) throws SQLException {\n        String sql = "INSERT INTO employees (first_name, last_name, email, salary, department_id) VALUES (?, ?, ?, ?, ?)";\n\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\n\n            stmt.setString(1, employee.getFirstName());\n            stmt.setString(2, employee.getLastName());\n            stmt.setString(3, employee.getEmail());\n            stmt.setBigDecimal(4, employee.getSalary());\n            stmt.setInt(5, employee.getDepartmentId());\n\n            int affectedRows = stmt.executeUpdate();\n\n            if (affectedRows > 0) {\n                try (ResultSet rs = stmt.getGeneratedKeys()) {\n                    if (rs.next()) {\n                        employee.setEmployeeId(rs.getInt(1));\n                    }\n                }\n            }\n        }\n    }\n\n    // Read\n    public Employee findById(int employeeId) throws SQLException {\n        String sql = "SELECT * FROM employees WHERE employee_id = ?";\n\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n\n            stmt.setInt(1, employeeId);\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                if (rs.next()) {\n                    return mapResultSetToEmployee(rs);\n                }\n            }\n        }\n        return null;\n    }\n\n    // Update\n    public void updateEmployee(Employee employee) throws SQLException {\n        String sql = "UPDATE employees SET first_name = ?, last_name = ?, email = ?, salary = ?, department_id = ? WHERE employee_id = ?";\n\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n\n            stmt.setString(1, employee.getFirstName());\n            stmt.setString(2, employee.getLastName());\n            stmt.setString(3, employee.getEmail());\n            stmt.setBigDecimal(4, employee.getSalary());\n            stmt.setInt(5, employee.getDepartmentId());\n            stmt.setInt(6, employee.getEmployeeId());\n\n            stmt.executeUpdate();\n        }\n    }\n\n    // Delete\n    public void deleteEmployee(int employeeId) throws SQLException {\n        String sql = "DELETE FROM employees WHERE employee_id = ?";\n\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n\n            stmt.setInt(1, employeeId);\n            stmt.executeUpdate();\n        }\n    }\n\n    // List with pagination\n    public List<Employee> findAll(int page, int pageSize) throws SQLException {\n        String sql = "SELECT * FROM employees ORDER BY employee_id LIMIT ? OFFSET ?";\n        List<Employee> employees = new ArrayList<>();\n\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\n\n            stmt.setInt(1, pageSize);\n            stmt.setInt(2, page * pageSize);\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                while (rs.next()) {\n                    employees.add(mapResultSetToEmployee(rs));\n                }\n            }\n        }\n        return employees;\n    }\n\n    private Employee mapResultSetToEmployee(ResultSet rs) throws SQLException {\n        Employee employee = new Employee();\n        employee.setEmployeeId(rs.getInt("employee_id"));\n        employee.setFirstName(rs.getString("first_name"));\n        employee.setLastName(rs.getString("last_name"));\n        employee.setEmail(rs.getString("email"));\n        employee.setSalary(rs.getBigDecimal("salary"));\n        employee.setDepartmentId(rs.getInt("department_id"));\n        employee.setHireDate(rs.getDate("hire_date"));\n        return employee;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"transaction-management-in-java",children:"Transaction Management in Java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class EmployeeService {\n    private DataSource dataSource;\n\n    public void transferEmployeeBetweenDepartments(int employeeId, int fromDeptId, int toDeptId) throws SQLException {\n        Connection conn = null;\n        try {\n            conn = dataSource.getConnection();\n            conn.setAutoCommit(false);\n\n            // Update employee department\n            String updateEmployeeSql = "UPDATE employees SET department_id = ? WHERE employee_id = ? AND department_id = ?";\n            try (PreparedStatement stmt = conn.prepareStatement(updateEmployeeSql)) {\n                stmt.setInt(1, toDeptId);\n                stmt.setInt(2, employeeId);\n                stmt.setInt(3, fromDeptId);\n\n                int affectedRows = stmt.executeUpdate();\n                if (affectedRows == 0) {\n                    throw new SQLException("Employee not found in source department");\n                }\n            }\n\n            // Update department counts\n            String updateDeptCountSql = "UPDATE departments SET employee_count = employee_count + ? WHERE dept_id = ?";\n            try (PreparedStatement stmt = conn.prepareStatement(updateDeptCountSql)) {\n                // Decrease source department count\n                stmt.setInt(1, -1);\n                stmt.setInt(2, fromDeptId);\n                stmt.executeUpdate();\n\n                // Increase target department count\n                stmt.setInt(1, 1);\n                stmt.setInt(2, toDeptId);\n                stmt.executeUpdate();\n            }\n\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) {\n                try {\n                    conn.rollback();\n                } catch (SQLException ex) {\n                    e.addSuppressed(ex);\n                }\n            }\n            throw e;\n        } finally {\n            if (conn != null) {\n                try {\n                    conn.setAutoCommit(true);\n                    conn.close();\n                } catch (SQLException e) {\n                    // Log error\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"jpahibernate-integration",children:"JPA/Hibernate Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Entity class\n@Entity\n@Table(name = "employees")\npublic class Employee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = "employee_id")\n    private Integer employeeId;\n\n    @Column(name = "first_name", nullable = false, length = 50)\n    private String firstName;\n\n    @Column(name = "last_name", nullable = false, length = 50)\n    private String lastName;\n\n    @Column(name = "email", unique = true, length = 100)\n    private String email;\n\n    @Column(name = "salary", precision = 10, scale = 2)\n    private BigDecimal salary;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "department_id")\n    private Department department;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "manager_id")\n    private Employee manager;\n\n    @OneToMany(mappedBy = "manager", fetch = FetchType.LAZY)\n    private List<Employee> subordinates = new ArrayList<>();\n\n    // Constructors, getters, setters\n}\n\n// Repository interface (Spring Data JPA)\n@Repository\npublic interface EmployeeRepository extends JpaRepository<Employee, Integer> {\n    List<Employee> findByDepartmentId(Integer departmentId);\n\n    @Query("SELECT e FROM Employee e WHERE e.salary > :minSalary ORDER BY e.salary DESC")\n    List<Employee> findHighEarners(@Param("minSalary") BigDecimal minSalary);\n\n    @Modifying\n    @Query("UPDATE Employee e SET e.salary = e.salary * :factor WHERE e.department.id = :deptId")\n    int increaseSalaryByDepartment(@Param("factor") BigDecimal factor, @Param("deptId") Integer deptId);\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"database-design-best-practices",children:"Database Design Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Normalization:"})," Eliminate data redundancy while maintaining performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Primary Keys:"})," Always use primary keys, prefer surrogate keys"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Foreign Keys:"})," Maintain referential integrity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Indexing Strategy:"})," Index frequently queried columns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Types:"})," Choose appropriate data types for storage efficiency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Naming Conventions:"})," Use consistent, descriptive names"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sql-query-best-practices",children:"SQL Query Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Use specific column names instead of SELECT *\nSELECT first_name, last_name, salary FROM employees;\n\n-- Use WHERE clauses to limit result sets\nSELECT * FROM employees WHERE department_id = 1;\n\n-- Use appropriate JOIN types\nSELECT e.first_name, d.dept_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.dept_id;\n\n-- Use LIMIT for large result sets\nSELECT * FROM employees ORDER BY hire_date DESC LIMIT 10;\n\n-- Use EXISTS instead of IN for better performance\nSELECT d.dept_name\nFROM departments d\nWHERE EXISTS (SELECT 1 FROM employees e WHERE e.department_id = d.dept_id);\n\n-- Use UNION ALL instead of UNION when duplicates are acceptable\nSELECT first_name FROM employees WHERE department_id = 1\nUNION ALL\nSELECT first_name FROM employees WHERE department_id = 2;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"java-integration-best-practices",children:"Java Integration Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Use try-with-resources for automatic resource management\ntry (Connection conn = dataSource.getConnection();\n     PreparedStatement stmt = conn.prepareStatement(sql);\n     ResultSet rs = stmt.executeQuery()) {\n    // Process results\n} catch (SQLException e) {\n    // Handle exception\n}\n\n// Always use PreparedStatement to prevent SQL injection\nString sql = "SELECT * FROM employees WHERE employee_id = ?";\ntry (PreparedStatement stmt = conn.prepareStatement(sql)) {\n    stmt.setInt(1, employeeId);\n    // Execute query\n}\n\n// Use batch operations for multiple inserts\nString sql = "INSERT INTO employees (first_name, last_name, email) VALUES (?, ?, ?)";\ntry (PreparedStatement stmt = conn.prepareStatement(sql)) {\n    for (Employee emp : employees) {\n        stmt.setString(1, emp.getFirstName());\n        stmt.setString(2, emp.getLastName());\n        stmt.setString(3, emp.getEmail());\n        stmt.addBatch();\n    }\n    stmt.executeBatch();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Pooling:"})," Use connection pools to manage database connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prepared Statements:"})," Use for repeated queries with different parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch Operations:"})," Group multiple operations together"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Result Set Processing:"})," Process results efficiently, avoid loading large result sets into memory"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query Optimization:"})," Use EXPLAIN to analyze query performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQL Injection Prevention:"})," Always use parameterized queries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Principle of Least Privilege:"})," Grant minimum necessary permissions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Input Validation:"})," Validate all user inputs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Security:"})," Use SSL/TLS for database connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Password Security:"})," Use strong passwords and rotate regularly"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,t.jsx)(n.h3,{id:"mysql-configuration-and-tuning",children:"MySQL Configuration and Tuning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Show current configuration\nSHOW VARIABLES;\nSHOW VARIABLES LIKE 'innodb%';\n\n-- Important configuration parameters\n-- my.cnf or my.ini file\n[mysqld]\ninnodb_buffer_pool_size = 1G          -- 70-80% of available RAM\ninnodb_log_file_size = 256M           -- 25% of buffer pool size\nmax_connections = 200                 -- Based on application needs\nquery_cache_size = 64M               -- For read-heavy workloads\ntmp_table_size = 64M                 -- Temporary table size\nmax_heap_table_size = 64M            -- Memory table size\n\n-- Runtime configuration changes\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL max_connections = 200;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"monitoring-and-diagnostics",children:"Monitoring and Diagnostics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Performance monitoring\nSHOW PROCESSLIST;\nSHOW ENGINE INNODB STATUS;\n\n-- Query performance\nSELECT * FROM performance_schema.events_statements_summary_by_digest\nORDER BY sum_timer_wait DESC LIMIT 10;\n\n-- Index usage\nSELECT * FROM sys.schema_unused_indexes;\nSELECT * FROM sys.schema_redundant_indexes;\n\n-- Slow query log\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 2;\n\n-- Table statistics\nSELECT\n    table_name,\n    table_rows,\n    data_length,\n    index_length,\n    data_length + index_length AS total_size\nFROM information_schema.tables\nWHERE table_schema = 'company_db';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"replication-and-high-availability",children:"Replication and High Availability"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Master configuration (my.cnf)\n[mysqld]\nserver-id = 1\nlog-bin = mysql-bin\nbinlog-format = ROW\nsync_binlog = 1\ninnodb_flush_log_at_trx_commit = 1\n\n-- Slave configuration (my.cnf)\n[mysqld]\nserver-id = 2\nrelay-log = mysql-relay-bin\nread_only = 1\n\n-- Setup replication on slave\nCHANGE MASTER TO\n    MASTER_HOST='master_server_ip',\n    MASTER_USER='replication_user',\n    MASTER_PASSWORD='replication_password',\n    MASTER_LOG_FILE='mysql-bin.000001',\n    MASTER_LOG_POS=154;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"backup-and-recovery",children:"Backup and Recovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Full database backup\nmysqldump -u username -p --single-transaction --routines --triggers company_db > backup.sql\n\n# Backup with compression\nmysqldump -u username -p --single-transaction company_db | gzip > backup.sql.gz\n\n# Backup specific tables\nmysqldump -u username -p company_db employees departments > tables_backup.sql\n\n# Point-in-time recovery\nmysqlbinlog --start-datetime="2024-01-01 00:00:00" --stop-datetime="2024-01-01 12:00:00" mysql-bin.000001 | mysql -u username -p\n\n# Restore database\nmysql -u username -p company_db < backup.sql\n'})}),"\n",(0,t.jsx)(n.h3,{id:"json-operations-mysql-57",children:"JSON Operations (MySQL 5.7+)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'-- Create table with JSON column\nCREATE TABLE user_profiles (\n    user_id INT PRIMARY KEY,\n    profile_data JSON\n);\n\n-- Insert JSON data\nINSERT INTO user_profiles VALUES\n(1, \'{"name": "John", "age": 30, "hobbies": ["reading", "swimming"]}\'),\n(2, \'{"name": "Jane", "age": 25, "address": {"city": "New York", "zip": "10001"}}\');\n\n-- Query JSON data\nSELECT user_id, JSON_EXTRACT(profile_data, \'$.name\') as name\nFROM user_profiles;\n\n-- Use -> operator (shorthand for JSON_EXTRACT)\nSELECT user_id, profile_data->\'$.name\' as name\nFROM user_profiles;\n\n-- Use ->> operator (unquotes the result)\nSELECT user_id, profile_data->>\'$.name\' as name\nFROM user_profiles;\n\n-- Query nested JSON\nSELECT user_id, profile_data->\'$.address.city\' as city\nFROM user_profiles\nWHERE profile_data->\'$.address.city\' IS NOT NULL;\n\n-- Query JSON arrays\nSELECT user_id, JSON_EXTRACT(profile_data, \'$.hobbies[0]\') as first_hobby\nFROM user_profiles\nWHERE JSON_EXTRACT(profile_data, \'$.hobbies\') IS NOT NULL;\n\n-- Update JSON data\nUPDATE user_profiles\nSET profile_data = JSON_SET(profile_data, \'$.age\', 31)\nWHERE user_id = 1;\n\n-- Add to JSON array\nUPDATE user_profiles\nSET profile_data = JSON_ARRAY_APPEND(profile_data, \'$.hobbies\', \'cycling\')\nWHERE user_id = 1;\n\n-- Remove from JSON\nUPDATE user_profiles\nSET profile_data = JSON_REMOVE(profile_data, \'$.age\')\nWHERE user_id = 1;\n\n-- JSON functions\nSELECT\n    JSON_KEYS(profile_data) as keys,\n    JSON_LENGTH(profile_data) as length,\n    JSON_VALID(profile_data) as is_valid\nFROM user_profiles;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"partitioning",children:"Partitioning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Range partitioning by date\nCREATE TABLE sales (\n    sale_id INT,\n    sale_date DATE,\n    amount DECIMAL(10,2),\n    customer_id INT\n)\nPARTITION BY RANGE (YEAR(sale_date)) (\n    PARTITION p2020 VALUES LESS THAN (2021),\n    PARTITION p2021 VALUES LESS THAN (2022),\n    PARTITION p2022 VALUES LESS THAN (2023),\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);\n\n-- Hash partitioning\nCREATE TABLE customer_data (\n    customer_id INT,\n    customer_name VARCHAR(100),\n    created_date DATE\n)\nPARTITION BY HASH(customer_id)\nPARTITIONS 4;\n\n-- List partitioning\nCREATE TABLE regional_sales (\n    sale_id INT,\n    region VARCHAR(20),\n    amount DECIMAL(10,2)\n)\nPARTITION BY LIST (region) (\n    PARTITION p_north VALUES IN ('North', 'Northeast'),\n    PARTITION p_south VALUES IN ('South', 'Southeast'),\n    PARTITION p_west VALUES IN ('West', 'Southwest'),\n    PARTITION p_central VALUES IN ('Central', 'Midwest')\n);\n\n-- Partition management\nALTER TABLE sales ADD PARTITION (PARTITION p2024 VALUES LESS THAN (2025));\nALTER TABLE sales DROP PARTITION p2020;\nALTER TABLE sales REORGANIZE PARTITION p_future INTO (\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p_future VALUES LESS THAN MAXVALUE\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns-and-solutions",children:"Common Patterns and Solutions"}),"\n",(0,t.jsx)(n.h3,{id:"pagination-patterns",children:"Pagination Patterns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'-- Offset-based pagination (can be slow for large offsets)\nSELECT * FROM employees\nORDER BY employee_id\nLIMIT 10 OFFSET 20;\n\n-- Cursor-based pagination (better for large datasets)\nSELECT * FROM employees\nWHERE employee_id > 20\nORDER BY employee_id\nLIMIT 10;\n\n-- Java implementation with cursor-based pagination\npublic class PaginationResult<T> {\n    private List<T> data;\n    private String nextCursor;\n    private boolean hasMore;\n\n    // constructors, getters, setters\n}\n\npublic PaginationResult<Employee> getEmployees(String cursor, int limit) {\n    String sql = cursor == null ?\n        "SELECT * FROM employees ORDER BY employee_id LIMIT ?" :\n        "SELECT * FROM employees WHERE employee_id > ? ORDER BY employee_id LIMIT ?";\n\n    List<Employee> employees = new ArrayList<>();\n    String nextCursor = null;\n\n    try (PreparedStatement stmt = conn.prepareStatement(sql)) {\n        if (cursor == null) {\n            stmt.setInt(1, limit + 1);  // Get one extra to check if more exist\n        } else {\n            stmt.setInt(1, Integer.parseInt(cursor));\n            stmt.setInt(2, limit + 1);\n        }\n\n        try (ResultSet rs = stmt.executeQuery()) {\n            while (rs.next()) {\n                employees.add(mapResultSetToEmployee(rs));\n            }\n        }\n    }\n\n    boolean hasMore = employees.size() > limit;\n    if (hasMore) {\n        employees.remove(employees.size() - 1);  // Remove the extra record\n        nextCursor = String.valueOf(employees.get(employees.size() - 1).getEmployeeId());\n    }\n\n    return new PaginationResult<>(employees, nextCursor, hasMore);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"hierarchical-data-patterns",children:"Hierarchical Data Patterns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Adjacency List Model (simple but limited)\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(100),\n    parent_id INT,\n    FOREIGN KEY (parent_id) REFERENCES categories(category_id)\n);\n\n-- Get all descendants (requires recursive query)\nWITH RECURSIVE category_tree AS (\n    SELECT category_id, category_name, parent_id, 0 as level\n    FROM categories\n    WHERE category_id = 1  -- Root category\n\n    UNION ALL\n\n    SELECT c.category_id, c.category_name, c.parent_id, ct.level + 1\n    FROM categories c\n    JOIN category_tree ct ON c.parent_id = ct.category_id\n)\nSELECT * FROM category_tree;\n\n-- Nested Set Model (complex updates but efficient queries)\nCREATE TABLE categories_nested (\n    category_id INT PRIMARY KEY,\n    category_name VARCHAR(100),\n    lft INT NOT NULL,\n    rgt INT NOT NULL,\n    INDEX (lft, rgt)\n);\n\n-- Get all descendants (simple query)\nSELECT child.*\nFROM categories_nested parent\nJOIN categories_nested child ON child.lft BETWEEN parent.lft AND parent.rgt\nWHERE parent.category_id = 1;\n\n-- Get path to root\nSELECT parent.*\nFROM categories_nested child\nJOIN categories_nested parent ON child.lft BETWEEN parent.lft AND parent.rgt\nWHERE child.category_id = 5\nORDER BY parent.lft;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"audit-trail-pattern",children:"Audit Trail Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Audit table\nCREATE TABLE employee_audit (\n    audit_id INT AUTO_INCREMENT PRIMARY KEY,\n    employee_id INT,\n    operation_type ENUM('INSERT', 'UPDATE', 'DELETE'),\n    old_values JSON,\n    new_values JSON,\n    changed_by VARCHAR(100),\n    change_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX (employee_id, change_timestamp)\n);\n\n-- Trigger for audit trail\nDELIMITER //\nCREATE TRIGGER employee_audit_trigger\nAFTER UPDATE ON employees\nFOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit (\n        employee_id,\n        operation_type,\n        old_values,\n        new_values,\n        changed_by\n    ) VALUES (\n        NEW.employee_id,\n        'UPDATE',\n        JSON_OBJECT(\n            'first_name', OLD.first_name,\n            'last_name', OLD.last_name,\n            'salary', OLD.salary,\n            'department_id', OLD.department_id\n        ),\n        JSON_OBJECT(\n            'first_name', NEW.first_name,\n            'last_name', NEW.last_name,\n            'salary', NEW.salary,\n            'department_id', NEW.department_id\n        ),\n        USER()\n    );\nEND //\nDELIMITER ;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"soft-delete-pattern",children:"Soft Delete Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'-- Add deleted_at column\nALTER TABLE employees ADD COLUMN deleted_at TIMESTAMP NULL;\nALTER TABLE employees ADD INDEX idx_deleted_at (deleted_at);\n\n-- Soft delete\nUPDATE employees SET deleted_at = NOW() WHERE employee_id = 1;\n\n-- Active employees view\nCREATE VIEW active_employees AS\nSELECT * FROM employees WHERE deleted_at IS NULL;\n\n-- Restore deleted employee\nUPDATE employees SET deleted_at = NULL WHERE employee_id = 1;\n\n-- Java implementation\n@Entity\n@Table(name = "employees")\n@SQLDelete(sql = "UPDATE employees SET deleted_at = NOW() WHERE employee_id = ?")\n@Where(clause = "deleted_at IS NULL")\npublic class Employee {\n    // ... other fields\n\n    @Column(name = "deleted_at")\n    private Timestamp deletedAt;\n\n    // getters and setters\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"optimistic-locking-pattern",children:"Optimistic Locking Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'-- Add version column\nALTER TABLE employees ADD COLUMN version INT DEFAULT 1;\n\n-- Update with version check\nUPDATE employees\nSET first_name = ?, last_name = ?, salary = ?, version = version + 1\nWHERE employee_id = ? AND version = ?;\n\n-- Java implementation\n@Entity\npublic class Employee {\n    @Version\n    @Column(name = "version")\n    private Integer version;\n\n    // other fields, getters, setters\n}\n\n// Service method\npublic void updateEmployee(Employee employee) {\n    try {\n        employeeRepository.save(employee);\n    } catch (OptimisticLockingFailureException e) {\n        throw new ConcurrentModificationException("Employee was modified by another user");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,t.jsx)(n.h3,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Connection timeout\nHikariConfig config = new HikariConfig();\nconfig.setConnectionTimeout(30000);  // 30 seconds\nconfig.setIdleTimeout(600000);       // 10 minutes\nconfig.setMaxLifetime(1800000);      // 30 minutes\nconfig.setLeakDetectionThreshold(60000);  // 1 minute\n\n// Test connection validity\nconfig.setConnectionTestQuery("SELECT 1");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Identify slow queries\nSELECT\n    digest_text,\n    count_star,\n    avg_timer_wait/1000000000 as avg_time_sec,\n    sum_timer_wait/1000000000 as total_time_sec\nFROM performance_schema.events_statements_summary_by_digest\nORDER BY sum_timer_wait DESC\nLIMIT 10;\n\n-- Check table locks\nSHOW OPEN TABLES WHERE In_use > 0;\n\n-- Check for blocking queries\nSELECT\n    r.trx_id waiting_trx_id,\n    r.trx_mysql_thread_id waiting_thread,\n    r.trx_query waiting_query,\n    b.trx_id blocking_trx_id,\n    b.trx_mysql_thread_id blocking_thread,\n    b.trx_query blocking_query\nFROM information_schema.innodb_lock_waits w\nINNER JOIN information_schema.innodb_trx b ON b.trx_id = w.blocking_trx_id\nINNER JOIN information_schema.innodb_trx r ON r.trx_id = w.requesting_trx_id;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memory-issues",children:"Memory Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Check buffer pool usage\nSELECT\n    (SELECT variable_value FROM information_schema.global_status WHERE variable_name = 'Innodb_buffer_pool_pages_data') /\n    (SELECT variable_value FROM information_schema.global_status WHERE variable_name = 'Innodb_buffer_pool_pages_total') * 100\n    as buffer_pool_utilization;\n\n-- Check temporary table usage\nSHOW STATUS LIKE 'Created_tmp%';\n\n-- Memory usage per connection\nSELECT\n    id,\n    user,\n    host,\n    db,\n    command,\n    time,\n    state,\n    info\nFROM information_schema.processlist\nWHERE command != 'Sleep'\nORDER BY time DESC;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary-and-next-steps",children:"Summary and Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"This comprehensive guide covers:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQL Fundamentals"})," - Basic syntax, data types, and operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MySQL Specifics"})," - Architecture, configuration, and MySQL-specific features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Advanced Concepts"})," - Joins, subqueries, window functions, CTEs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Optimization"})," - Indexing, query optimization, monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Java Integration"})," - JDBC, connection pooling, ORM patterns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Best Practices"})," - Security, performance, maintainability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Advanced Topics"})," - JSON, partitioning, replication, backup/recovery"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Common Patterns"})," - Pagination, hierarchical data, audit trails"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Troubleshooting"})," - Performance issues, connection problems"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"recommended-learning-path",children:"Recommended Learning Path:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Master basic SQL operations and joins"}),"\n",(0,t.jsx)(n.li,{children:"Understand indexing and query optimization"}),"\n",(0,t.jsx)(n.li,{children:"Learn transaction management and concurrency"}),"\n",(0,t.jsx)(n.li,{children:"Practice with Java integration patterns"}),"\n",(0,t.jsx)(n.li,{children:"Study advanced features like JSON, CTEs, window functions"}),"\n",(0,t.jsx)(n.li,{children:"Explore performance tuning and monitoring"}),"\n",(0,t.jsx)(n.li,{children:"Understand high availability and scaling patterns"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"additional-resources",children:"Additional Resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"MySQL Official Documentation"}),"\n",(0,t.jsx)(n.li,{children:"Java JDBC API Documentation"}),"\n",(0,t.jsx)(n.li,{children:"Spring Data JPA Reference"}),"\n",(0,t.jsx)(n.li,{children:"Hibernate ORM Documentation"}),"\n",(0,t.jsx)(n.li,{children:"Database design patterns and best practices"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Keep practicing with real-world scenarios and always consider performance implications when designing database schemas and writing queries."})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var t=a(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);