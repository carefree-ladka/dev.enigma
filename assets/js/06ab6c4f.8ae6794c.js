"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9775],{3137:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=n(4848),t=n(8453);const o={},a="Express.js & Node.js",i={id:"Node.js/Node",title:"Express.js & Node.js",description:"Directory Structure",source:"@site/docs/Node.js/Node.mdx",sourceDirName:"Node.js",slug:"/Node.js/Node",permalink:"/js.enigma/docs/Node.js/Node",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Node.js/Node.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Node & Express.js",permalink:"/js.enigma/docs/category/node--expressjs"}},c={},l=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Basic Server Setup",id:"basic-server-setup",level:2},{value:"Environment Configuration",id:"environment-configuration",level:2},{value:"Controllers",id:"controllers",level:2},{value:"Routes",id:"routes",level:2},{value:"Middleware",id:"middleware",level:2},{value:"Services",id:"services",level:2},{value:"Database Configuration (MongoDB with Mongoose)",id:"database-configuration-mongodb-with-mongoose",level:2},{value:"Models (Mongoose Example)",id:"models-mongoose-example",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Request Validation",id:"request-validation",level:2},{value:"Logger Configuration",id:"logger-configuration",level:2},{value:"Testing Setup (Jest)",id:"testing-setup-jest",level:2},{value:"Common NPM Scripts",id:"common-npm-scripts",level:2},{value:"Security Best Practices",id:"security-best-practices",level:2}];function d(r){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",pre:"pre",...(0,t.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"expressjs--nodejs",children:"Express.js & Node.js"})}),"\n",(0,s.jsx)(e.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"project-root/\r\n\u251c\u2500\u2500 src/\r\n\u2502   \u251c\u2500\u2500 config/\r\n\u2502   \u2502   \u251c\u2500\u2500 database.js\r\n\u2502   \u2502   \u251c\u2500\u2500 constants.js\r\n\u2502   \u2502   \u2514\u2500\u2500 env.js\r\n\u2502   \u251c\u2500\u2500 controllers/\r\n\u2502   \u2502   \u251c\u2500\u2500 userController.js\r\n\u2502   \u2502   \u2514\u2500\u2500 authController.js\r\n\u2502   \u251c\u2500\u2500 middlewares/\r\n\u2502   \u2502   \u251c\u2500\u2500 auth.js\r\n\u2502   \u2502   \u251c\u2500\u2500 error.js\r\n\u2502   \u2502   \u2514\u2500\u2500 validate.js\r\n\u2502   \u251c\u2500\u2500 models/\r\n\u2502   \u2502   \u2514\u2500\u2500 User.js\r\n\u2502   \u251c\u2500\u2500 routes/\r\n\u2502   \u2502   \u251c\u2500\u2500 index.js\r\n\u2502   \u2502   \u2514\u2500\u2500 userRoutes.js\r\n\u2502   \u251c\u2500\u2500 services/\r\n\u2502   \u2502   \u2514\u2500\u2500 userService.js\r\n\u2502   \u251c\u2500\u2500 utils/\r\n\u2502   \u2502   \u251c\u2500\u2500 logger.js\r\n\u2502   \u2502   \u2514\u2500\u2500 helpers.js\r\n\u2502   \u2514\u2500\u2500 app.js\r\n\u251c\u2500\u2500 tests/\r\n\u251c\u2500\u2500 .env\r\n\u251c\u2500\u2500 .gitignore\r\n\u2514\u2500\u2500 package.json\n"})}),"\n",(0,s.jsx)(e.h2,{id:"basic-server-setup",children:"Basic Server Setup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// app.js\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst morgan = require('morgan');\r\nconst helmet = require('helmet');\r\n\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(helmet());\r\napp.use(morgan('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Routes\r\napp.use('/api/users', require('./routes/userRoutes'));\r\n\r\n// Error handling\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500).json({\r\n        error: {\r\n            message: err.message\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = app;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/env.js\r\nrequire('dotenv').config();\r\n\r\nmodule.exports = {\r\n    NODE_ENV: process.env.NODE_ENV || 'development',\r\n    PORT: process.env.PORT || 3000,\r\n    DATABASE_URL: process.env.DATABASE_URL,\r\n    JWT_SECRET: process.env.JWT_SECRET,\r\n    JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || '1d'\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"controllers",children:"Controllers"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// controllers/userController.js\r\nclass UserController {\r\n    constructor(userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    // Wrap controller methods in try-catch\r\n    async getUsers(req, res, next) {\r\n        try {\r\n            const users = await this.userService.getAllUsers();\r\n            res.json({ data: users });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    async getUserById(req, res, next) {\r\n        try {\r\n            const { id } = req.params;\r\n            const user = await this.userService.getUserById(id);\r\n            \r\n            if (!user) {\r\n                return res.status(404).json({ \r\n                    error: 'User not found' \r\n                });\r\n            }\r\n            \r\n            res.json({ data: user });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n\r\n    async createUser(req, res, next) {\r\n        try {\r\n            const userData = req.body;\r\n            const user = await this.userService.createUser(userData);\r\n            res.status(201).json({ data: user });\r\n        } catch (error) {\r\n            next(error);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = UserController;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"routes",children:"Routes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// routes/userRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst UserController = require('../controllers/userController');\r\nconst UserService = require('../services/userService');\r\nconst auth = require('../middlewares/auth');\r\nconst validate = require('../middlewares/validate');\r\nconst userValidation = require('../validations/userValidation');\r\n\r\nconst userController = new UserController(new UserService());\r\n\r\nrouter\r\n    .route('/')\r\n    .get(auth, userController.getUsers.bind(userController))\r\n    .post(\r\n        auth, \r\n        validate(userValidation.createUser), \r\n        userController.createUser.bind(userController)\r\n    );\r\n\r\nrouter\r\n    .route('/:id')\r\n    .get(auth, userController.getUserById.bind(userController))\r\n    .put(\r\n        auth, \r\n        validate(userValidation.updateUser), \r\n        userController.updateUser.bind(userController)\r\n    )\r\n    .delete(auth, userController.deleteUser.bind(userController));\r\n\r\nmodule.exports = router;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"middleware",children:"Middleware"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// middlewares/auth.js\r\nconst jwt = require('jsonwebtoken');\r\nconst { JWT_SECRET } = require('../config/env');\r\n\r\nmodule.exports = async (req, res, next) => {\r\n    try {\r\n        const token = req.headers.authorization?.split(' ')[1];\r\n        \r\n        if (!token) {\r\n            return res.status(401).json({\r\n                error: 'Authorization token required'\r\n            });\r\n        }\r\n\r\n        const decoded = jwt.verify(token, JWT_SECRET);\r\n        req.user = decoded;\r\n        next();\r\n    } catch (error) {\r\n        res.status(401).json({\r\n            error: 'Invalid token'\r\n        });\r\n    }\r\n};\r\n\r\n// middlewares/validate.js\r\nconst Joi = require('joi');\r\n\r\nmodule.exports = (schema) => (req, res, next) => {\r\n    const { error } = schema.validate(req.body);\r\n    \r\n    if (error) {\r\n        return res.status(400).json({\r\n            error: error.details[0].message\r\n        });\r\n    }\r\n    \r\n    next();\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"services",children:"Services"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// services/userService.js\r\nclass UserService {\r\n    constructor(userModel) {\r\n        this.userModel = userModel;\r\n    }\r\n\r\n    async getAllUsers() {\r\n        return this.userModel.find();\r\n    }\r\n\r\n    async getUserById(id) {\r\n        return this.userModel.findById(id);\r\n    }\r\n\r\n    async createUser(userData) {\r\n        return this.userModel.create(userData);\r\n    }\r\n\r\n    async updateUser(id, userData) {\r\n        return this.userModel.findByIdAndUpdate(\r\n            id, \r\n            userData,\r\n            { new: true }\r\n        );\r\n    }\r\n\r\n    async deleteUser(id) {\r\n        return this.userModel.findByIdAndDelete(id);\r\n    }\r\n}\r\n\r\nmodule.exports = UserService;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"database-configuration-mongodb-with-mongoose",children:"Database Configuration (MongoDB with Mongoose)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/database.js\r\nconst mongoose = require('mongoose');\r\nconst { DATABASE_URL } = require('./env');\r\n\r\nmodule.exports = {\r\n    connect: async () => {\r\n        try {\r\n            await mongoose.connect(DATABASE_URL, {\r\n                useNewUrlParser: true,\r\n                useUnifiedTopology: true\r\n            });\r\n            console.log('Database connected successfully');\r\n        } catch (error) {\r\n            console.error('Database connection error:', error);\r\n            process.exit(1);\r\n        }\r\n    }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"models-mongoose-example",children:"Models (Mongoose Example)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// models/User.js\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcryptjs');\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        lowercase: true\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true,\r\n        minlength: 6,\r\n        select: false\r\n    },\r\n    name: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    role: {\r\n        type: String,\r\n        enum: ['user', 'admin'],\r\n        default: 'user'\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\n\r\n// Hash password before saving\r\nuserSchema.pre('save', async function(next) {\r\n    if (!this.isModified('password')) return next();\r\n    \r\n    this.password = await bcrypt.hash(this.password, 12);\r\n    next();\r\n});\r\n\r\n// Method to check password\r\nuserSchema.methods.comparePassword = async function(candidatePassword) {\r\n    return bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\nmodule.exports = mongoose.model('User', userSchema);\n"})}),"\n",(0,s.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// utils/AppError.js\r\nclass AppError extends Error {\r\n    constructor(message, statusCode) {\r\n        super(message);\r\n        this.statusCode = statusCode;\r\n        this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\r\n        this.isOperational = true;\r\n\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\n// middlewares/error.js\r\nconst AppError = require('../utils/AppError');\r\n\r\nmodule.exports = (err, req, res, next) => {\r\n    err.statusCode = err.statusCode || 500;\r\n    err.status = err.status || 'error';\r\n\r\n    if (process.env.NODE_ENV === 'development') {\r\n        res.status(err.statusCode).json({\r\n            status: err.status,\r\n            error: err,\r\n            message: err.message,\r\n            stack: err.stack\r\n        });\r\n    } else {\r\n        // Production\r\n        if (err.isOperational) {\r\n            res.status(err.statusCode).json({\r\n                status: err.status,\r\n                message: err.message\r\n            });\r\n        } else {\r\n            console.error('ERROR \ud83d\udca5', err);\r\n            res.status(500).json({\r\n                status: 'error',\r\n                message: 'Something went wrong!'\r\n            });\r\n        }\r\n    }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"request-validation",children:"Request Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// validations/userValidation.js\r\nconst Joi = require('joi');\r\n\r\nmodule.exports = {\r\n    createUser: Joi.object({\r\n        email: Joi.string().email().required(),\r\n        password: Joi.string().min(6).required(),\r\n        name: Joi.string().required(),\r\n        role: Joi.string().valid('user', 'admin')\r\n    }),\r\n\r\n    updateUser: Joi.object({\r\n        email: Joi.string().email(),\r\n        name: Joi.string(),\r\n        role: Joi.string().valid('user', 'admin')\r\n    })\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"logger-configuration",children:"Logger Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// utils/logger.js\r\nconst winston = require('winston');\r\n\r\nconst logger = winston.createLogger({\r\n    level: 'info',\r\n    format: winston.format.combine(\r\n        winston.format.timestamp(),\r\n        winston.format.json()\r\n    ),\r\n    transports: [\r\n        new winston.transports.File({ \r\n            filename: 'logs/error.log', \r\n            level: 'error' \r\n        }),\r\n        new winston.transports.File({ \r\n            filename: 'logs/combined.log' \r\n        })\r\n    ]\r\n});\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n    logger.add(new winston.transports.Console({\r\n        format: winston.format.simple()\r\n    }));\r\n}\r\n\r\nmodule.exports = logger;\n"})}),"\n",(0,s.jsx)(e.h2,{id:"testing-setup-jest",children:"Testing Setup (Jest)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// tests/user.test.js\r\nconst request = require('supertest');\r\nconst app = require('../src/app');\r\nconst User = require('../src/models/User');\r\n\r\ndescribe('User API', () => {\r\n    beforeEach(async () => {\r\n        await User.deleteMany();\r\n    });\r\n\r\n    describe('POST /api/users', () => {\r\n        it('should create a new user', async () => {\r\n            const res = await request(app)\r\n                .post('/api/users')\r\n                .send({\r\n                    email: 'test@example.com',\r\n                    password: 'password123',\r\n                    name: 'Test User'\r\n                });\r\n\r\n            expect(res.statusCode).toBe(201);\r\n            expect(res.body.data).toHaveProperty('email', 'test@example.com');\r\n        });\r\n    });\r\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"common-npm-scripts",children:"Common NPM Scripts"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\r\n  "scripts": {\r\n    "start": "node src/server.js",\r\n    "dev": "nodemon src/server.js",\r\n    "test": "jest --watchAll",\r\n    "test:coverage": "jest --coverage",\r\n    "lint": "eslint .",\r\n    "lint:fix": "eslint . --fix"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"Use security middleware:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const helmet = require('helmet');\r\nconst rateLimit = require('express-rate-limit');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst xss = require('xss-clean');\r\n\r\napp.use(helmet());\r\napp.use(mongoSanitize());\r\napp.use(xss());\r\n\r\nconst limiter = rateLimit({\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n    max: 100 // limit each IP to 100 requests per windowMs\r\n});\r\n\r\napp.use('/api', limiter);\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsx)(e.li,{children:"Configure CORS:"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const cors = require('cors');\r\n\r\napp.use(cors({\r\n    origin: process.env.ALLOWED_ORIGINS.split(','),\r\n    methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n    allowedHeaders: ['Content-Type', 'Authorization']\r\n}));\n"})})]})}function u(r={}){const{wrapper:e}={...(0,t.R)(),...r.components};return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(d,{...r})}):d(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>a,x:()=>i});var s=n(6540);const t={},o=s.createContext(t);function a(r){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:a(r.components),s.createElement(o.Provider,{value:e},r.children)}}}]);