"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7099],{28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var i=n(96540);const t={},r=i.createContext(t);function a(e){const s=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:s},e.children)}},78207:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=n(74848),t=n(28453);const r={},a="Back-of-the-Envelope Calculations for System Design",l={id:"Backend System Design/Back-of-the-Envelope Calculations",title:"Back-of-the-Envelope Calculations for System Design",description:"Requirements Exploration",source:"@site/docs/Backend System Design/Back-of-the-Envelope Calculations.mdx",sourceDirName:"Backend System Design",slug:"/Backend System Design/Back-of-the-Envelope Calculations",permalink:"/dev.enigma/docs/Backend System Design/Back-of-the-Envelope Calculations",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Backend System Design/Back-of-the-Envelope Calculations.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Apache Kafka - System Design Interview Guide",permalink:"/dev.enigma/docs/Backend System Design/Apache Kafka - System Design Interview Guide"},next:{title:"Backend System Design Template",permalink:"/dev.enigma/docs/Backend System Design/Backend System Design Template"}},c={},d=[{value:"Requirements Exploration",id:"requirements-exploration",level:2},{value:"Key Questions to Ask",id:"key-questions-to-ask",level:3},{value:"What to Estimate",id:"what-to-estimate",level:3},{value:"Architecture/High-Level Design",id:"architecturehigh-level-design",level:2},{value:"Core BoE Formulas",id:"core-boe-formulas",level:3},{value:"Traffic Calculation",id:"traffic-calculation",level:4},{value:"Storage Estimation",id:"storage-estimation",level:4},{value:"Network Bandwidth",id:"network-bandwidth",level:4},{value:"Server Capacity Planning",id:"server-capacity-planning",level:3},{value:"Data Model",id:"data-model",level:2},{value:"BoE Estimation Template",id:"boe-estimation-template",level:3},{value:"Database Scaling Calculations",id:"database-scaling-calculations",level:3},{value:"Interface Definition (API)",id:"interface-definition-api",level:2},{value:"Server Capacity Planning",id:"server-capacity-planning-1",level:3},{value:"Database Sharding Estimation",id:"database-sharding-estimation",level:3},{value:"Optimizations and Deep Dives",id:"optimizations-and-deep-dives",level:2},{value:"Caching Strategy Impact",id:"caching-strategy-impact",level:3},{value:"Cost Optimization Techniques",id:"cost-optimization-techniques",level:3},{value:"Mental Math Shortcuts",id:"mental-math-shortcuts",level:3},{value:"Quick Approximations",id:"quick-approximations",level:4},{value:"Conversion Helpers",id:"conversion-helpers",level:4},{value:"Practical Example: Photo Sharing App",id:"practical-example-photo-sharing-app",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Calculations",id:"calculations",level:3},{value:"Interview Best Practices",id:"interview-best-practices",level:2},{value:"Key Tips",id:"key-tips",level:3},{value:"Common Assumptions to State",id:"common-assumptions-to-state",level:3},{value:"Scaling Considerations",id:"scaling-considerations",level:3}];function o(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"back-of-the-envelope-calculations-for-system-design",children:"Back-of-the-Envelope Calculations for System Design"})}),"\n",(0,i.jsx)(s.h2,{id:"requirements-exploration",children:"Requirements Exploration"}),"\n",(0,i.jsx)(s.p,{children:"Before diving into calculations, establish the foundation by asking clarifying questions:"}),"\n",(0,i.jsx)(s.h3,{id:"key-questions-to-ask",children:"Key Questions to Ask"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"User Scale"}),": How many daily/monthly active users?"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Usage Patterns"}),": How many requests per user per day?"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Data Characteristics"}),": What's the read vs write ratio?"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Payload Size"}),": How much data per request/response?"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Geographic Distribution"}),": Global or regional users?"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Peak Traffic Patterns"}),": When do traffic spikes occur?"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"what-to-estimate",children:"What to Estimate"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Traffic/Load"}),": Requests per second (RPS)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Storage Requirements"}),": Total data storage needs"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Network Bandwidth"}),": Data transfer requirements"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Compute Resources"}),": Server and memory needs"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Database Load"}),": Read/write operations per second"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"architecturehigh-level-design",children:"Architecture/High-Level Design"}),"\n",(0,i.jsx)(s.h3,{id:"core-boe-formulas",children:"Core BoE Formulas"}),"\n",(0,i.jsx)(s.h4,{id:"traffic-calculation",children:"Traffic Calculation"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Basic RPS calculation\nconst totalRequestsPerDay = users * actionsPerUserPerDay;\nconst secondsPerDay = 86400; // 24 * 60 * 60\nconst baseRPS = totalRequestsPerDay / secondsPerDay;\nconst peakRPS = baseRPS * peakFactor; // Usually 2-3x\n"})}),"\n",(0,i.jsx)(s.h4,{id:"storage-estimation",children:"Storage Estimation"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Storage calculation\nconst totalStorage = numberOfItems * sizePerItem;\nconst dailyStorage = users * uploadsPerDay * avgFileSize;\nconst monthlyStorage = dailyStorage * 30;\n"})}),"\n",(0,i.jsx)(s.h4,{id:"network-bandwidth",children:"Network Bandwidth"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Bandwidth calculation\nconst bandwidth = peakRPS * avgResponseSize;\n// Convert to appropriate units (Mbps, Gbps)\n"})}),"\n",(0,i.jsx)(s.h3,{id:"server-capacity-planning",children:"Server Capacity Planning"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Server Type"}),(0,i.jsx)(s.th,{children:"Request Type"}),(0,i.jsx)(s.th,{children:"Approx RPS"}),(0,i.jsx)(s.th,{children:"Use Case"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Nginx"})}),(0,i.jsx)(s.td,{children:"Static content"}),(0,i.jsx)(s.td,{children:"10,000 - 50,000"}),(0,i.jsx)(s.td,{children:"CDN, reverse proxy"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Node.js"})}),(0,i.jsx)(s.td,{children:"Simple API reads"}),(0,i.jsx)(s.td,{children:"1,000 - 5,000"}),(0,i.jsx)(s.td,{children:"Async I/O operations"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Node.js"})}),(0,i.jsx)(s.td,{children:"DB-heavy operations"}),(0,i.jsx)(s.td,{children:"100 - 1,000"}),(0,i.jsx)(s.td,{children:"Complex queries, writes"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Spring Boot"})}),(0,i.jsx)(s.td,{children:"REST API"}),(0,i.jsx)(s.td,{children:"200 - 1,000"}),(0,i.jsx)(s.td,{children:"Java backend services"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Python/Django"})}),(0,i.jsx)(s.td,{children:"Web API"}),(0,i.jsx)(s.td,{children:"100 - 500"}),(0,i.jsx)(s.td,{children:"Traditional web apps"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"File Processing"})}),(0,i.jsx)(s.td,{children:"Upload/processing"}),(0,i.jsx)(s.td,{children:"10 - 100"}),(0,i.jsx)(s.td,{children:"Image/video handling"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Redis Cache"})}),(0,i.jsx)(s.td,{children:"Key-value ops"}),(0,i.jsx)(s.td,{children:"50,000+"}),(0,i.jsx)(s.td,{children:"In-memory caching"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"data-model",children:"Data Model"}),"\n",(0,i.jsx)(s.h3,{id:"boe-estimation-template",children:"BoE Estimation Template"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Metric"}),(0,i.jsx)(s.th,{children:"Formula"}),(0,i.jsx)(s.th,{children:"Example Values"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Users (DAU)"})}),(0,i.jsx)(s.td,{children:"Daily Active Users"}),(0,i.jsx)(s.td,{children:"10,000,000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Actions/User/Day"})}),(0,i.jsx)(s.td,{children:"Average requests per user"}),(0,i.jsx)(s.td,{children:"10"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Total Requests/Day"})}),(0,i.jsx)(s.td,{children:"Users \xd7 Actions"}),(0,i.jsx)(s.td,{children:"100,000,000"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Base RPS"})}),(0,i.jsx)(s.td,{children:"Total requests \xf7 86,400"}),(0,i.jsx)(s.td,{children:"~1,157"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Peak Factor"})}),(0,i.jsx)(s.td,{children:"Traffic spike multiplier"}),(0,i.jsx)(s.td,{children:"3x"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Peak RPS"})}),(0,i.jsx)(s.td,{children:"Base RPS \xd7 Peak Factor"}),(0,i.jsx)(s.td,{children:"~3,471"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Data/Request"})}),(0,i.jsx)(s.td,{children:"Payload size"}),(0,i.jsx)(s.td,{children:"100 KB"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Bandwidth"})}),(0,i.jsx)(s.td,{children:"Peak RPS \xd7 Data size"}),(0,i.jsx)(s.td,{children:"~347 MB/s"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Daily Storage"})}),(0,i.jsx)(s.td,{children:"Requests \xd7 Data size"}),(0,i.jsx)(s.td,{children:"~10 TB"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Monthly Storage"})}),(0,i.jsx)(s.td,{children:"Daily \xd7 30"}),(0,i.jsx)(s.td,{children:"~300 TB"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"database-scaling-calculations",children:"Database Scaling Calculations"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Database load estimation\nconst readWriteRatio = 100; // 100:1 read to write ratio\nconst totalReads = totalRequests * (readWriteRatio / (readWriteRatio + 1));\nconst totalWrites = totalRequests / (readWriteRatio + 1);\n\nconst readsPerSecond = totalReads / 86400 * peakFactor;\nconst writesPerSecond = totalWrites / 86400 * peakFactor;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"interface-definition-api",children:"Interface Definition (API)"}),"\n",(0,i.jsx)(s.h3,{id:"server-capacity-planning-1",children:"Server Capacity Planning"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Calculate required servers\nconst serverCapacity = 1000; // RPS per server (Spring Boot example)\nconst requiredServers = Math.ceil(peakRPS / serverCapacity);\nconst bufferedServers = requiredServers * 1.5; // 50% buffer\n"})}),"\n",(0,i.jsx)(s.h3,{id:"database-sharding-estimation",children:"Database Sharding Estimation"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Database node calculation\nconst storagePerNode = 1000; // GB per database node\nconst replicationFactor = 3; // Master + 2 replicas\nconst totalNodes = Math.ceil(totalStorage / storagePerNode) * replicationFactor;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"optimizations-and-deep-dives",children:"Optimizations and Deep Dives"}),"\n",(0,i.jsx)(s.h3,{id:"caching-strategy-impact",children:"Caching Strategy Impact"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Cache Type"}),(0,i.jsx)(s.th,{children:"RPS Improvement"}),(0,i.jsx)(s.th,{children:"Use Case"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Redis"})}),(0,i.jsx)(s.td,{children:"10-100x"}),(0,i.jsx)(s.td,{children:"Session data, frequently accessed data"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"CDN"})}),(0,i.jsx)(s.td,{children:"100-1000x"}),(0,i.jsx)(s.td,{children:"Static assets, images, videos"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Application Cache"})}),(0,i.jsx)(s.td,{children:"5-20x"}),(0,i.jsx)(s.td,{children:"Database query results"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Browser Cache"})}),(0,i.jsx)(s.td,{children:"Infinite"}),(0,i.jsx)(s.td,{children:"Static resources"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"cost-optimization-techniques",children:"Cost Optimization Techniques"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Cost estimation example (AWS pricing model)\nconst serverCostPerHour = 0.10; // t3.medium\nconst storageCostPerGB = 0.023; // S3 standard\nconst bandwidthCostPerGB = 0.09; // Data transfer\n\nconst monthlyCosts = {\n  compute: requiredServers * serverCostPerHour * 24 * 30,\n  storage: totalStorageGB * storageCostPerGB,\n  bandwidth: monthlyBandwidthGB * bandwidthCostPerGB\n};\n"})}),"\n",(0,i.jsx)(s.h3,{id:"mental-math-shortcuts",children:"Mental Math Shortcuts"}),"\n",(0,i.jsx)(s.h4,{id:"quick-approximations",children:"Quick Approximations"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Seconds per day"}),": ~86,400 \u2248 10^5"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"1 million"}),": 10^6"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"1 billion"}),": 10^9"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Powers of 2"}),": 2^10 = 1,024 \u2248 1,000"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"conversion-helpers",children:"Conversion Helpers"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Unit conversions\nconst KB = 1024;\nconst MB = KB * 1024;\nconst GB = MB * 1024;\nconst TB = GB * 1024;\n\n// Time conversions\nconst SECONDS_PER_MINUTE = 60;\nconst SECONDS_PER_HOUR = 3600;\nconst SECONDS_PER_DAY = 86400;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"practical-example-photo-sharing-app",children:"Practical Example: Photo Sharing App"}),"\n",(0,i.jsx)(s.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Users"}),": 10M DAU"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Photos per user per day"}),": 2"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Photo size"}),": 3 MB average"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Read/Write ratio"}),": 100:1"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"calculations",children:"Calculations"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-javascript",children:"// Traffic calculation\nconst users = 10_000_000;\nconst photosPerDay = users * 2; // 20M photos\nconst baseRPS = photosPerDay / 86400; // ~231 RPS\nconst peakRPS = baseRPS * 3; // ~693 RPS\n\n// Storage calculation\nconst dailyStorage = photosPerDay * 3; // 60 GB/day\nconst monthlyStorage = dailyStorage * 30; // 1.8 TB/month\n\n// Server requirements\nconst uploadsPerSecond = peakRPS;\nconst serversNeeded = Math.ceil(uploadsPerSecond / 100); // Assuming 100 RPS for uploads\n// Result: ~7 servers\n\n// Database reads (viewing photos)\nconst photoViews = photosPerDay * 100; // 100 views per photo\nconst readRPS = (photoViews / 86400) * 3; // ~69,444 RPS\n"})}),"\n",(0,i.jsx)(s.h2,{id:"interview-best-practices",children:"Interview Best Practices"}),"\n",(0,i.jsx)(s.h3,{id:"key-tips",children:"Key Tips"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"State Assumptions"}),": Always explain your reasoning"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Round Numbers"}),": Use approximations for speed"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Show Growth Buffer"}),": Design for 2-3x peak traffic"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consider Bottlenecks"}),": Identify limiting factors"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Think Holistically"}),": Consider all system components"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"common-assumptions-to-state",children:"Common Assumptions to State"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'"Assuming each Spring Boot server handles ~500 RPS for simple REST APIs"'}),"\n",(0,i.jsx)(s.li,{children:'"Assuming 3x peak factor for traffic spikes during events"'}),"\n",(0,i.jsx)(s.li,{children:'"Assuming 100:1 read-to-write ratio for social media app"'}),"\n",(0,i.jsx)(s.li,{children:'"Assuming average response size of 100KB including metadata"'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"scaling-considerations",children:"Scaling Considerations"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Horizontal Scaling"}),": Add more servers"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Vertical Scaling"}),": Upgrade server specs"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Database Scaling"}),": Sharding, read replicas"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Caching Layers"}),": Redis, CDN, application cache"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Load Balancing"}),": Distribute traffic effectively"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Remember: The goal isn't perfect accuracy, but demonstrating systematic thinking and understanding of scale!"})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);