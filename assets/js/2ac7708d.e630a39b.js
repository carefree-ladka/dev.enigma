"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[1159],{23805:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var s=i(74848),r=i(28453);const t={},a="Java Interview Questions Guide",l={id:"Java Interview Guide/Java Interview Questions",title:"Java Interview Questions Guide",description:"A comprehensive collection of commonly asked Java interview questions organized by difficulty level.",source:"@site/docs/Java Interview Guide/Java Interview Questions.mdx",sourceDirName:"Java Interview Guide",slug:"/Java Interview Guide/Java Interview Questions",permalink:"/docs/Java Interview Guide/Java Interview Questions",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java Interview Guide/Java Interview Questions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Interview Preparation Guide",permalink:"/docs/Java Interview Guide/Java Interview Preparation"},next:{title:"Java Interview Preparation Roadmap",permalink:"/docs/Java Interview Guide/Java Interview Road Map"}},d={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Easy Questions",id:"easy-questions",level:2},{value:"1. What is Java?",id:"1-what-is-java",level:3},{value:"2. What are the main features of Java?",id:"2-what-are-the-main-features-of-java",level:3},{value:"3. What is the difference between JDK, JRE, and JVM?",id:"3-what-is-the-difference-between-jdk-jre-and-jvm",level:3},{value:"4. What are the primitive data types in Java?",id:"4-what-are-the-primitive-data-types-in-java",level:3},{value:"5. What is the difference between <code>==</code> and <code>equals()</code> method?",id:"5-what-is-the-difference-between--and-equals-method",level:3},{value:"6. What is method overloading?",id:"6-what-is-method-overloading",level:3},{value:"7. What is the <code>static</code> keyword?",id:"7-what-is-the-static-keyword",level:3},{value:"8. What is inheritance in Java?",id:"8-what-is-inheritance-in-java",level:3},{value:"9. What is polymorphism?",id:"9-what-is-polymorphism",level:3},{value:"10. What is encapsulation?",id:"10-what-is-encapsulation",level:3},{value:"Medium Questions",id:"medium-questions",level:2},{value:"1. What is the difference between abstract class and interface?",id:"1-what-is-the-difference-between-abstract-class-and-interface",level:3},{value:"2. What are the access modifiers in Java?",id:"2-what-are-the-access-modifiers-in-java",level:3},{value:"3. What is exception handling in Java?",id:"3-what-is-exception-handling-in-java",level:3},{value:"4. What is the difference between checked and unchecked exceptions?",id:"4-what-is-the-difference-between-checked-and-unchecked-exceptions",level:3},{value:"5. What is multithreading and how do you create threads?",id:"5-what-is-multithreading-and-how-do-you-create-threads",level:3},{value:"6. What is synchronization in Java?",id:"6-what-is-synchronization-in-java",level:3},{value:"7. What are Collections in Java?",id:"7-what-are-collections-in-java",level:3},{value:"8. What is the difference between ArrayList and LinkedList?",id:"8-what-is-the-difference-between-arraylist-and-linkedlist",level:3},{value:"9. What is garbage collection?",id:"9-what-is-garbage-collection",level:3},{value:"10. What is the <code>finalize()</code> method?",id:"10-what-is-the-finalize-method",level:3},{value:"11. What is method overriding?",id:"11-what-is-method-overriding",level:3},{value:"12. What is the <code>super</code> keyword?",id:"12-what-is-the-super-keyword",level:3},{value:"Hard Questions",id:"hard-questions",level:2},{value:"1. Explain the Java Memory Model and different memory areas",id:"1-explain-the-java-memory-model-and-different-memory-areas",level:3},{value:"2. What are the different types of classloaders?",id:"2-what-are-the-different-types-of-classloaders",level:3},{value:"3. Explain the concept of immutable objects and how to create them",id:"3-explain-the-concept-of-immutable-objects-and-how-to-create-them",level:3},{value:"4. What is reflection and when would you use it?",id:"4-what-is-reflection-and-when-would-you-use-it",level:3},{value:"5. Explain different types of nested classes",id:"5-explain-different-types-of-nested-classes",level:3},{value:"6. What are generics and type erasure?",id:"6-what-are-generics-and-type-erasure",level:3},{value:"7. Explain the producer-consumer problem and its solution",id:"7-explain-the-producer-consumer-problem-and-its-solution",level:3},{value:"8. What is the difference between fail-fast and fail-safe iterators?",id:"8-what-is-the-difference-between-fail-fast-and-fail-safe-iterators",level:3},{value:"9. Explain different garbage collection algorithms",id:"9-explain-different-garbage-collection-algorithms",level:3},{value:"10. What is the happens-before relationship?",id:"10-what-is-the-happens-before-relationship",level:3},{value:"11. Explain the Singleton pattern and its thread-safe implementations",id:"11-explain-the-singleton-pattern-and-its-thread-safe-implementations",level:3},{value:"12. What are weak, soft, and phantom references?",id:"12-what-are-weak-soft-and-phantom-references",level:3},{value:"13. Explain the Fork/Join framework",id:"13-explain-the-forkjoin-framework",level:3},{value:"14. What is the difference between <code>Callable</code> and <code>Runnable</code>?",id:"14-what-is-the-difference-between-callable-and-runnable",level:3},{value:"15. Explain Java 8+ features (Lambda, Streams, Optional)",id:"15-explain-java-8-features-lambda-streams-optional",level:3},{value:"Tips for Interview Success",id:"tips-for-interview-success",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"java-interview-questions-guide",children:"Java Interview Questions Guide"})}),"\n",(0,s.jsx)(n.p,{children:"A comprehensive collection of commonly asked Java interview questions organized by difficulty level."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#easy-questions",children:"Easy Questions"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#medium-questions",children:"Medium Questions"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#hard-questions",children:"Hard Questions"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"easy-questions",children:"Easy Questions"}),"\n",(0,s.jsx)(n.h3,{id:"1-what-is-java",children:"1. What is Java?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"}),' Java is a high-level, object-oriented, platform-independent programming language developed by Sun Microsystems (now Oracle). It follows the "write once, run anywhere" (WORA) principle through the Java Virtual Machine (JVM).']}),"\n",(0,s.jsx)(n.h3,{id:"2-what-are-the-main-features-of-java",children:"2. What are the main features of Java?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Platform independence"}),"\n",(0,s.jsx)(n.li,{children:"Object-oriented programming"}),"\n",(0,s.jsx)(n.li,{children:"Automatic memory management (Garbage Collection)"}),"\n",(0,s.jsx)(n.li,{children:"Multithreading support"}),"\n",(0,s.jsx)(n.li,{children:"Security"}),"\n",(0,s.jsx)(n.li,{children:"Robustness"}),"\n",(0,s.jsx)(n.li,{children:"Simple syntax"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-what-is-the-difference-between-jdk-jre-and-jvm",children:"3. What is the difference between JDK, JRE, and JVM?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JVM (Java Virtual Machine):"})," Runtime environment that executes Java bytecode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JRE (Java Runtime Environment):"})," JVM + libraries needed to run Java applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JDK (Java Development Kit):"})," JRE + development tools (compiler, debugger, etc.)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-what-are-the-primitive-data-types-in-java",children:"4. What are the primitive data types in Java?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," 8 primitive types:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"byte"})," (1 byte)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"short"})," (2 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int"})," (4 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"long"})," (8 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float"})," (4 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"double"})," (8 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"char"})," (2 bytes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"})," (1 bit)"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"5-what-is-the-difference-between--and-equals-method",children:["5. What is the difference between ",(0,s.jsx)(n.code,{children:"=="})," and ",(0,s.jsx)(n.code,{children:"equals()"})," method?"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"=="})," compares references (memory addresses) for objects, values for primitives"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"equals()"})," compares the actual content/value of objects (when properly overridden)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6-what-is-method-overloading",children:"6. What is method overloading?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Method overloading allows multiple methods with the same name but different parameters (different number, type, or order of parameters) within the same class."]}),"\n",(0,s.jsxs)(n.h3,{id:"7-what-is-the-static-keyword",children:["7. What is the ",(0,s.jsx)(n.code,{children:"static"})," keyword?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," ",(0,s.jsx)(n.code,{children:"static"})," means the member belongs to the class rather than any instance. Static members can be accessed without creating an object of the class."]}),"\n",(0,s.jsx)(n.h3,{id:"8-what-is-inheritance-in-java",children:"8. What is inheritance in Java?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Inheritance allows a class (child/subclass) to inherit properties and methods from another class (parent/superclass) using the ",(0,s.jsx)(n.code,{children:"extends"})," keyword."]}),"\n",(0,s.jsx)(n.h3,{id:"9-what-is-polymorphism",children:"9. What is polymorphism?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Polymorphism allows objects of different types to be treated as objects of a common base type. It includes method overriding (runtime) and method overloading (compile-time)."]}),"\n",(0,s.jsx)(n.h3,{id:"10-what-is-encapsulation",children:"10. What is encapsulation?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Encapsulation is the bundling of data (variables) and methods that operate on that data within a single unit (class), while hiding the internal implementation details."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"medium-questions",children:"Medium Questions"}),"\n",(0,s.jsx)(n.h3,{id:"1-what-is-the-difference-between-abstract-class-and-interface",children:"1. What is the difference between abstract class and interface?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Abstract Class:"})," Can have both abstract and concrete methods, constructors, instance variables, access modifiers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interface:"})," Only abstract methods (before Java 8), public by default, no constructors, only static final variables"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-what-are-the-access-modifiers-in-java",children:"2. What are the access modifiers in Java?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"private"}),": Accessible only within the same class"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default"})," (package-private): Accessible within the same package"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"protected"}),": Accessible within package and subclasses"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"public"}),": Accessible everywhere"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-what-is-exception-handling-in-java",children:"3. What is exception handling in Java?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Exception handling uses try-catch-finally blocks to handle runtime errors gracefully:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"try {\n    // risky code\n} catch (SpecificException e) {\n    // handle exception\n} finally {\n    // cleanup code\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-what-is-the-difference-between-checked-and-unchecked-exceptions",children:"4. What is the difference between checked and unchecked exceptions?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Checked Exceptions:"})," Must be handled at compile time (IOException, SQLException)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unchecked Exceptions:"})," Runtime exceptions that don't need explicit handling (NullPointerException, ArrayIndexOutOfBoundsException)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-what-is-multithreading-and-how-do-you-create-threads",children:"5. What is multithreading and how do you create threads?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Multithreading allows concurrent execution of multiple threads. Two ways to create threads:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Extend ",(0,s.jsx)(n.code,{children:"Thread"})," class"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.code,{children:"Runnable"})," interface"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6-what-is-synchronization-in-java",children:"6. What is synchronization in Java?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Synchronization prevents thread interference and memory consistency errors by allowing only one thread to access a shared resource at a time using ",(0,s.jsx)(n.code,{children:"synchronized"})," keyword."]}),"\n",(0,s.jsx)(n.h3,{id:"7-what-are-collections-in-java",children:"7. What are Collections in Java?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Collections Framework provides data structures like List, Set, Map, and Queue with implementations like ArrayList, HashSet, HashMap, etc."]}),"\n",(0,s.jsx)(n.h3,{id:"8-what-is-the-difference-between-arraylist-and-linkedlist",children:"8. What is the difference between ArrayList and LinkedList?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ArrayList:"})," Dynamic array, fast random access, slower insertion/deletion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LinkedList:"})," Doubly linked list, slower random access, faster insertion/deletion"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"9-what-is-garbage-collection",children:"9. What is garbage collection?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Automatic memory management that reclaims memory occupied by objects that are no longer referenced, preventing memory leaks."]}),"\n",(0,s.jsxs)(n.h3,{id:"10-what-is-the-finalize-method",children:["10. What is the ",(0,s.jsx)(n.code,{children:"finalize()"})," method?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," A method called by garbage collector before destroying an object. Used for cleanup operations but not recommended due to unpredictable timing."]}),"\n",(0,s.jsx)(n.h3,{id:"11-what-is-method-overriding",children:"11. What is method overriding?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Subclass provides a specific implementation of a method already defined in its parent class. Uses ",(0,s.jsx)(n.code,{children:"@Override"})," annotation and follows runtime polymorphism."]}),"\n",(0,s.jsxs)(n.h3,{id:"12-what-is-the-super-keyword",children:["12. What is the ",(0,s.jsx)(n.code,{children:"super"})," keyword?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," ",(0,s.jsx)(n.code,{children:"super"})," refers to the immediate parent class object. Used to access parent class methods, constructors, and variables."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"hard-questions",children:"Hard Questions"}),"\n",(0,s.jsx)(n.h3,{id:"1-explain-the-java-memory-model-and-different-memory-areas",children:"1. Explain the Java Memory Model and different memory areas"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Java memory is divided into:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Heap:"})," Objects and instance variables (Young Generation, Old Generation)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stack:"})," Method calls and local variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Method Area:"})," Class-level data, static variables, method bytecode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PC Register:"})," Current executing instruction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Native Method Stack:"})," Native method calls"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-what-are-the-different-types-of-classloaders",children:"2. What are the different types of classloaders?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bootstrap ClassLoader:"})," Loads core Java classes from rt.jar"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extension ClassLoader:"})," Loads classes from ext directory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Application ClassLoader:"})," Loads classes from classpath"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom ClassLoaders:"})," User-defined loaders"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-explain-the-concept-of-immutable-objects-and-how-to-create-them",children:"3. Explain the concept of immutable objects and how to create them"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Immutable objects cannot be modified after creation. To create:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Make class ",(0,s.jsx)(n.code,{children:"final"})]}),"\n",(0,s.jsxs)(n.li,{children:["Make all fields ",(0,s.jsx)(n.code,{children:"private final"})]}),"\n",(0,s.jsx)(n.li,{children:"Don't provide setter methods"}),"\n",(0,s.jsx)(n.li,{children:"Initialize all fields via constructor"}),"\n",(0,s.jsx)(n.li,{children:"Return defensive copies of mutable objects"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-what-is-reflection-and-when-would-you-use-it",children:"4. What is reflection and when would you use it?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Reflection allows runtime inspection and manipulation of classes, methods, and fields. Used in frameworks, serialization, testing frameworks, and dependency injection."]}),"\n",(0,s.jsx)(n.h3,{id:"5-explain-different-types-of-nested-classes",children:"5. Explain different types of nested classes"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Static Nested Class:"})," Can be instantiated without outer class instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inner Class:"})," Requires outer class instance, has access to outer class members"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local Class:"})," Defined inside a method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Anonymous Class:"})," Unnamed class, typically used with interfaces"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"6-what-are-generics-and-type-erasure",children:"6. What are generics and type erasure?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Generics provide type safety at compile time. Type erasure removes generic type information at runtime for backward compatibility, replacing with raw types or bounds."]}),"\n",(0,s.jsx)(n.h3,{id:"7-explain-the-producer-consumer-problem-and-its-solution",children:"7. Explain the producer-consumer problem and its solution"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Classic synchronization problem where producers generate data and consumers process it. Solutions include:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"wait()"})," and ",(0,s.jsx)(n.code,{children:"notify()"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"BlockingQueue"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Semaphore"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ReentrantLock"})," with ",(0,s.jsx)(n.code,{children:"Condition"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"8-what-is-the-difference-between-fail-fast-and-fail-safe-iterators",children:"8. What is the difference between fail-fast and fail-safe iterators?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fail-fast:"})," Throws ",(0,s.jsx)(n.code,{children:"ConcurrentModificationException"})," if collection is modified during iteration (ArrayList)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fail-safe:"})," Creates a copy and iterates over it, allowing safe modification (ConcurrentHashMap)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"9-explain-different-garbage-collection-algorithms",children:"9. Explain different garbage collection algorithms"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Serial GC:"})," Single-threaded, suitable for small applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel GC:"})," Multi-threaded, default for server applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"G1 GC:"})," Low-latency collector for large heaps"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ZGC/Shenandoah:"})," Ultra-low latency collectors"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"10-what-is-the-happens-before-relationship",children:"10. What is the happens-before relationship?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Defines ordering constraints between memory operations in concurrent programming. Ensures that certain operations are visible to other threads in a specific order."]}),"\n",(0,s.jsx)(n.h3,{id:"11-explain-the-singleton-pattern-and-its-thread-safe-implementations",children:"11. Explain the Singleton pattern and its thread-safe implementations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Ensures only one instance of a class exists. Thread-safe implementations:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Synchronized method"}),"\n",(0,s.jsx)(n.li,{children:"Double-checked locking"}),"\n",(0,s.jsx)(n.li,{children:"Enum singleton"}),"\n",(0,s.jsx)(n.li,{children:"Static inner class (Bill Pugh)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"12-what-are-weak-soft-and-phantom-references",children:"12. What are weak, soft, and phantom references?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strong Reference:"})," Normal references, prevent GC"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Weak Reference:"})," Eligible for GC even if referenced"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Soft Reference:"})," GC only when memory is low"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Phantom Reference:"})," Used for cleanup actions, already GC'd objects"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"13-explain-the-forkjoin-framework",children:"13. Explain the Fork/Join framework"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Answer:"})," Parallel computing framework that uses work-stealing algorithm. Tasks are recursively split into smaller subtasks and executed in parallel using ",(0,s.jsx)(n.code,{children:"ForkJoinPool"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"14-what-is-the-difference-between-callable-and-runnable",children:["14. What is the difference between ",(0,s.jsx)(n.code,{children:"Callable"})," and ",(0,s.jsx)(n.code,{children:"Runnable"}),"?"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runnable:"})," ",(0,s.jsx)(n.code,{children:"run()"})," method, returns void, cannot throw checked exceptions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Callable:"})," ",(0,s.jsx)(n.code,{children:"call()"})," method, returns a value, can throw checked exceptions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"15-explain-java-8-features-lambda-streams-optional",children:"15. Explain Java 8+ features (Lambda, Streams, Optional)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lambda Expressions:"})," Anonymous functions for functional programming"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Streams API:"})," Functional-style operations on collections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optional:"})," Container to avoid null pointer exceptions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Method References:"})," Shorthand for lambda expressions"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"tips-for-interview-success",children:"Tips for Interview Success"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Understand the fundamentals"})," - Master OOP concepts, data structures, and basic syntax"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Practice coding"})," - Be ready to write code on paper or whiteboard"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Know the Collections framework"})," - Understand when to use which collection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Be familiar with concurrency"})," - Threading, synchronization, and concurrent collections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Understand JVM internals"})," - Memory management, garbage collection, classloading"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stay updated"})," - Know modern Java features (Java 8+)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Practice system design"})," - For senior positions, understand architectural patterns"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remember to not just memorize answers but understand the concepts deeply. Good luck with your interview preparation!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);