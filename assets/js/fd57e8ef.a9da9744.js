"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[127],{16852:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var t=r(74848),i=r(28453);const s={},l="Strings",a={id:"DSA/DSA with JavaScript/DSA Cheatsheets/Strings",title:"Strings",description:"A comprehensive guide to string algorithms and techniques for Data Structures and Algorithms.",source:"@site/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Strings.mdx",sourceDirName:"DSA/DSA with JavaScript/DSA Cheatsheets",slug:"/DSA/DSA with JavaScript/DSA Cheatsheets/Strings",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Strings",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Strings.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Stack"},next:{title:"Tree Recursion Patterns",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Tree Recursion"}},c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Basic String Operations",id:"basic-string-operations",level:2},{value:"1. String Traversal",id:"1-string-traversal",level:3},{value:"2. Character Frequency Count",id:"2-character-frequency-count",level:3},{value:"3. String Comparison",id:"3-string-comparison",level:3},{value:"4. String Conversion Utilities",id:"4-string-conversion-utilities",level:3},{value:"Pattern Matching Algorithms",id:"pattern-matching-algorithms",level:2},{value:"1. Naive Pattern Search",id:"1-naive-pattern-search",level:3},{value:"2. KMP (Knuth-Morris-Pratt) Algorithm",id:"2-kmp-knuth-morris-pratt-algorithm",level:3},{value:"3. Rabin-Karp Algorithm",id:"3-rabin-karp-algorithm",level:3},{value:"String Manipulation Techniques",id:"string-manipulation-techniques",level:2},{value:"1. String Reversal",id:"1-string-reversal",level:3},{value:"2. Remove Characters",id:"2-remove-characters",level:3},{value:"3. String Compression",id:"3-string-compression",level:3},{value:"Palindrome Techniques",id:"palindrome-techniques",level:2},{value:"1. Check if String is Palindrome",id:"1-check-if-string-is-palindrome",level:3},{value:"2. Longest Palindromic Substring",id:"2-longest-palindromic-substring",level:3},{value:"3. All Palindromic Substrings",id:"3-all-palindromic-substrings",level:3},{value:"Anagram and Permutation",id:"anagram-and-permutation",level:2},{value:"1. Check if Two Strings are Anagrams",id:"1-check-if-two-strings-are-anagrams",level:3},{value:"2. Group Anagrams",id:"2-group-anagrams",level:3},{value:"3. Generate All Permutations",id:"3-generate-all-permutations",level:3},{value:"Sliding Window Techniques",id:"sliding-window-techniques",level:2},{value:"1. Longest Substring Without Repeating Characters",id:"1-longest-substring-without-repeating-characters",level:3},{value:"2. Minimum Window Substring",id:"2-minimum-window-substring",level:3},{value:"3. Longest Repeating Character Replacement",id:"3-longest-repeating-character-replacement",level:3},{value:"Two Pointer Techniques",id:"two-pointer-techniques",level:2},{value:"1. Valid Palindrome",id:"1-valid-palindrome",level:3},{value:"2. Two Sum in Sorted Array (String Version)",id:"2-two-sum-in-sorted-array-string-version",level:3},{value:"3. Container With Most Water (String Analogy)",id:"3-container-with-most-water-string-analogy",level:3},{value:"Advanced String Algorithms",id:"advanced-string-algorithms",level:2},{value:"1. Z Algorithm",id:"1-z-algorithm",level:3},{value:"2. Manacher&#39;s Algorithm (Longest Palindromic Substring)",id:"2-manachers-algorithm-longest-palindromic-substring",level:3},{value:"3. Suffix Array",id:"3-suffix-array",level:3},{value:"Dynamic Programming with Strings",id:"dynamic-programming-with-strings",level:2},{value:"1. Longest Common Subsequence",id:"1-longest-common-subsequence",level:3},{value:"2. Edit Distance (Levenshtein Distance)",id:"2-edit-distance-levenshtein-distance",level:3},{value:"3. Distinct Subsequences",id:"3-distinct-subsequences",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Time Complexity Summary",id:"time-complexity-summary",level:2},{value:"Common Patterns to Remember",id:"common-patterns-to-remember",level:2},{value:"1. <strong>Two Pointer Pattern</strong>",id:"1-two-pointer-pattern",level:3},{value:"2. <strong>Sliding Window Pattern</strong>",id:"2-sliding-window-pattern",level:3},{value:"3. <strong>Character Frequency Pattern</strong>",id:"3-character-frequency-pattern",level:3},{value:"4. <strong>Dynamic Programming Pattern</strong>",id:"4-dynamic-programming-pattern",level:3},{value:"5. <strong>Preprocessing Pattern</strong>",id:"5-preprocessing-pattern",level:3},{value:"Key Interview Tips",id:"key-interview-tips",level:2},{value:"1. <strong>String Immutability</strong>",id:"1-string-immutability",level:3},{value:"2. <strong>Edge Cases to Consider</strong>",id:"2-edge-cases-to-consider",level:3},{value:"3. <strong>Common String Methods</strong>",id:"3-common-string-methods",level:3},{value:"4. <strong>ASCII and Character Codes</strong>",id:"4-ascii-and-character-codes",level:3},{value:"5. <strong>Regex Patterns for Common Operations</strong>",id:"5-regex-patterns-for-common-operations",level:3},{value:"Practice Problems Categories",id:"practice-problems-categories",level:2},{value:"<strong>Easy Level</strong>",id:"easy-level",level:3},{value:"<strong>Medium Level</strong>",id:"medium-level",level:3},{value:"<strong>Hard Level</strong>",id:"hard-level",level:3},{value:"Advanced Topics for Further Study",id:"advanced-topics-for-further-study",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"strings",children:"Strings"})}),"\n",(0,t.jsx)(e.p,{children:"A comprehensive guide to string algorithms and techniques for Data Structures and Algorithms."}),"\n",(0,t.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#basic-string-operations",children:"Basic String Operations"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#pattern-matching-algorithms",children:"Pattern Matching Algorithms"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#string-manipulation-techniques",children:"String Manipulation Techniques"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#palindrome-techniques",children:"Palindrome Techniques"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#anagram-and-permutation",children:"Anagram and Permutation"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#sliding-window-techniques",children:"Sliding Window Techniques"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#two-pointer-techniques",children:"Two Pointer Techniques"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#advanced-string-algorithms",children:"Advanced String Algorithms"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#dynamic-programming-with-strings",children:"Dynamic Programming with Strings"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#usage-examples",children:"Usage Examples"})}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"basic-string-operations",children:"Basic String Operations"}),"\n",(0,t.jsx)(e.h3,{id:"1-string-traversal",children:"1. String Traversal"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function traverseString(str) {\n  const result = [];\n\n  // Method 1: Traditional for loop\n  for (let i = 0; i < str.length; i++) {\n    result.push(str[i]);\n  }\n\n  // Method 2: for...of loop\n  for (const char of str) {\n    result.push(char);\n  }\n\n  return result;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(n)"})," | ",(0,t.jsx)(e.strong,{children:"Space Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(1)"})]}),"\n",(0,t.jsx)(e.h3,{id:"2-character-frequency-count",children:"2. Character Frequency Count"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function charFrequency(str) {\n  const freq = {};\n\n  for (const char of str) {\n    freq[char] = (freq[char] || 0) + 1;\n  }\n\n  return freq;\n}\n\n// Using Map for better performance\nfunction charFrequencyMap(str) {\n  const freq = new Map();\n\n  for (const char of str) {\n    freq.set(char, (freq.get(char) || 0) + 1);\n  }\n\n  return freq;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-string-comparison",children:"3. String Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function compareStrings(str1, str2) {\n  if (str1.length !== str2.length) return false;\n\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] !== str2[i]) return false;\n  }\n\n  return true;\n}\n\n// Case-insensitive comparison\nfunction compareIgnoreCase(str1, str2) {\n  return str1.toLowerCase() === str2.toLowerCase();\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-string-conversion-utilities",children:"4. String Conversion Utilities"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Convert to different cases\nfunction toCamelCase(str) {\n  return str\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());\n}\n\nfunction toSnakeCase(str) {\n  return str\n    .replace(/\\W+/g, ' ')\n    .split(/ |\\B(?=[A-Z])/)\n    .map(word => word.toLowerCase())\n    .join('_');\n}\n\nfunction toKebabCase(str) {\n  return str\n    .replace(/\\W+/g, ' ')\n    .split(/ |\\B(?=[A-Z])/)\n    .map(word => word.toLowerCase())\n    .join('-');\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"pattern-matching-algorithms",children:"Pattern Matching Algorithms"}),"\n",(0,t.jsx)(e.h3,{id:"1-naive-pattern-search",children:"1. Naive Pattern Search"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function naiveSearch(text, pattern) {\n  const matches = [];\n  const n = text.length;\n  const m = pattern.length;\n\n  for (let i = 0; i <= n - m; i++) {\n    let j = 0;\n\n    while (j < m && text[i + j] === pattern[j]) {\n      j++;\n    }\n\n    if (j === m) {\n      matches.push(i);\n    }\n  }\n\n  return matches;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(nm)"})," | ",(0,t.jsx)(e.strong,{children:"Space Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(1)"})]}),"\n",(0,t.jsx)(e.h3,{id:"2-kmp-knuth-morris-pratt-algorithm",children:"2. KMP (Knuth-Morris-Pratt) Algorithm"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function computeLPS(pattern) {\n  const lps = new Array(pattern.length).fill(0);\n  let len = 0;\n  let i = 1;\n\n  while (i < pattern.length) {\n    if (pattern[i] === pattern[len]) {\n      len++;\n      lps[i] = len;\n      i++;\n    } else {\n      if (len !== 0) {\n        len = lps[len - 1];\n      } else {\n        lps[i] = 0;\n        i++;\n      }\n    }\n  }\n\n  return lps;\n}\n\nfunction KMPSearch(text, pattern) {\n  const matches = [];\n  const n = text.length;\n  const m = pattern.length;\n  const lps = computeLPS(pattern);\n\n  let i = 0; // text index\n  let j = 0; // pattern index\n\n  while (i < n) {\n    if (pattern[j] === text[i]) {\n      i++;\n      j++;\n    }\n\n    if (j === m) {\n      matches.push(i - j);\n      j = lps[j - 1];\n    } else if (i < n && pattern[j] !== text[i]) {\n      if (j !== 0) {\n        j = lps[j - 1];\n      } else {\n        i++;\n      }\n    }\n  }\n\n  return matches;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(n + m)"})," | ",(0,t.jsx)(e.strong,{children:"Space Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(m)"})]}),"\n",(0,t.jsx)(e.h3,{id:"3-rabin-karp-algorithm",children:"3. Rabin-Karp Algorithm"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function rabinKarp(text, pattern, prime = 101) {\n  const matches = [];\n  const n = text.length;\n  const m = pattern.length;\n  const base = 256;\n\n  let patternHash = 0;\n  let textHash = 0;\n  let h = 1;\n\n  // Calculate h = base^(m-1) % prime\n  for (let i = 0; i < m - 1; i++) {\n    h = (h * base) % prime;\n  }\n\n  // Calculate hash for pattern and first window of text\n  for (let i = 0; i < m; i++) {\n    patternHash = (base * patternHash + pattern.charCodeAt(i)) % prime;\n    textHash = (base * textHash + text.charCodeAt(i)) % prime;\n  }\n\n  // Slide pattern over text\n  for (let i = 0; i <= n - m; i++) {\n    if (patternHash === textHash) {\n      // Check characters one by one\n      let match = true;\n      for (let j = 0; j < m; j++) {\n        if (text[i + j] !== pattern[j]) {\n          match = false;\n          break;\n        }\n      }\n      if (match) matches.push(i);\n    }\n\n    // Calculate hash for next window\n    if (i < n - m) {\n      textHash =\n        (base * (textHash - text.charCodeAt(i) * h) + text.charCodeAt(i + m)) %\n        prime;\n      if (textHash < 0) textHash += prime;\n    }\n  }\n\n  return matches;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(nm)"})," worst case, ",(0,t.jsx)(e.code,{children:"O(n + m)"})," average | ",(0,t.jsx)(e.strong,{children:"Space Complexity:"})," ",(0,t.jsx)(e.code,{children:"O(1)"})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"string-manipulation-techniques",children:"String Manipulation Techniques"}),"\n",(0,t.jsx)(e.h3,{id:"1-string-reversal",children:"1. String Reversal"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Method 1: Built-in methods\nfunction reverseString1(str) {\n  return str.split('').reverse().join('');\n}\n\n// Method 2: Two pointers\nfunction reverseString2(str) {\n  const chars = str.split('');\n  let left = 0;\n  let right = chars.length - 1;\n\n  while (left < right) {\n    [chars[left], chars[right]] = [chars[right], chars[left]];\n    left++;\n    right--;\n  }\n\n  return chars.join('');\n}\n\n// Method 3: Recursive\nfunction reverseString3(str) {\n  if (str.length <= 1) return str;\n  return str[str.length - 1] + reverseString3(str.slice(0, -1));\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-remove-characters",children:"2. Remove Characters"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function removeChar(str, charToRemove) {\n  return str\n    .split('')\n    .filter(char => char !== charToRemove)\n    .join('');\n}\n\nfunction removeCharsRegex(str, pattern) {\n  return str.replace(new RegExp(pattern, 'g'), '');\n}\n\nfunction removeVowels(str) {\n  return str.replace(/[aeiouAEIOU]/g, '');\n}\n\nfunction removeConsonants(str) {\n  return str.replace(/[^aeiouAEIOU\\s]/g, '');\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-string-compression",children:"3. String Compression"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function compress(str) {\n  if (!str) return '';\n\n  let compressed = '';\n  let count = 1;\n\n  for (let i = 1; i < str.length; i++) {\n    if (str[i] === str[i - 1]) {\n      count++;\n    } else {\n      compressed += str[i - 1] + (count > 1 ? count : '');\n      count = 1;\n    }\n  }\n\n  // Add the last character group\n  compressed += str[str.length - 1] + (count > 1 ? count : '');\n\n  return compressed.length < str.length ? compressed : str;\n}\n\nfunction decompress(str) {\n  let result = '';\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n    let count = '';\n    i++;\n\n    // Read the number\n    while (i < str.length && !isNaN(str[i])) {\n      count += str[i];\n      i++;\n    }\n\n    const repeatCount = count === '' ? 1 : parseInt(count);\n    result += char.repeat(repeatCount);\n  }\n\n  return result;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"palindrome-techniques",children:"Palindrome Techniques"}),"\n",(0,t.jsx)(e.h3,{id:"1-check-if-string-is-palindrome",children:"1. Check if String is Palindrome"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Simple approach\nfunction isPalindrome1(str) {\n  const cleaned = str.toLowerCase().replace(/[^a-z0-9]/g, '');\n  return cleaned === cleaned.split('').reverse().join('');\n}\n\n// Two pointers approach\nfunction isPalindrome2(str) {\n  const cleaned = str.toLowerCase().replace(/[^a-z0-9]/g, '');\n  let left = 0;\n  let right = cleaned.length - 1;\n\n  while (left < right) {\n    if (cleaned[left] !== cleaned[right]) {\n      return false;\n    }\n    left++;\n    right--;\n  }\n\n  return true;\n}\n\n// Recursive approach\nfunction isPalindromeRecursive(str, start = 0, end = str.length - 1) {\n  if (start >= end) return true;\n  if (str[start] !== str[end]) return false;\n  return isPalindromeRecursive(str, start + 1, end - 1);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-longest-palindromic-substring",children:"2. Longest Palindromic Substring"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Expand around centers\nfunction longestPalindrome(s) {\n  if (!s || s.length < 2) return s || '';\n\n  let start = 0;\n  let maxLength = 1;\n\n  function expandAroundCenter(left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      const currentLength = right - left + 1;\n      if (currentLength > maxLength) {\n        start = left;\n        maxLength = currentLength;\n      }\n      left--;\n      right++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    expandAroundCenter(i, i); // Odd length palindromes\n    expandAroundCenter(i, i + 1); // Even length palindromes\n  }\n\n  return s.substring(start, start + maxLength);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-all-palindromic-substrings",children:"3. All Palindromic Substrings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function countPalindromes(s) {\n  let count = 0;\n\n  function expandAroundCenter(left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      count++;\n      left--;\n      right++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    expandAroundCenter(i, i); // Odd length\n    expandAroundCenter(i, i + 1); // Even length\n  }\n\n  return count;\n}\n\nfunction getAllPalindromes(s) {\n  const palindromes = [];\n\n  function expandAroundCenter(left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      palindromes.push(s.substring(left, right + 1));\n      left--;\n      right++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    expandAroundCenter(i, i);\n    expandAroundCenter(i, i + 1);\n  }\n\n  return [...new Set(palindromes)]; // Remove duplicates\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"anagram-and-permutation",children:"Anagram and Permutation"}),"\n",(0,t.jsx)(e.h3,{id:"1-check-if-two-strings-are-anagrams",children:"1. Check if Two Strings are Anagrams"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Sorting approach\nfunction isAnagram1(str1, str2) {\n  if (str1.length !== str2.length) return false;\n\n  const sorted1 = str1.toLowerCase().split('').sort().join('');\n  const sorted2 = str2.toLowerCase().split('').sort().join('');\n\n  return sorted1 === sorted2;\n}\n\n// Character frequency approach\nfunction isAnagram2(str1, str2) {\n  if (str1.length !== str2.length) return false;\n\n  const freq = {};\n\n  // Count characters in first string\n  for (const char of str1.toLowerCase()) {\n    freq[char] = (freq[char] || 0) + 1;\n  }\n\n  // Subtract characters from second string\n  for (const char of str2.toLowerCase()) {\n    if (!freq[char]) return false;\n    freq[char]--;\n  }\n\n  return true;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-group-anagrams",children:"2. Group Anagrams"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function groupAnagrams(strs) {\n  const groups = {};\n\n  for (const str of strs) {\n    const key = str.split('').sort().join('');\n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    groups[key].push(str);\n  }\n\n  return Object.values(groups);\n}\n\n// Alternative approach using character frequency\nfunction groupAnagramsFreq(strs) {\n  const groups = {};\n\n  for (const str of strs) {\n    const freq = new Array(26).fill(0);\n    for (const char of str) {\n      freq[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    const key = freq.join(',');\n\n    if (!groups[key]) {\n      groups[key] = [];\n    }\n    groups[key].push(str);\n  }\n\n  return Object.values(groups);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-generate-all-permutations",children:"3. Generate All Permutations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function permutations(str) {\n  if (str.length <= 1) return [str];\n\n  const result = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    const remaining = str.slice(0, i) + str.slice(i + 1);\n    const perms = permutations(remaining);\n\n    for (const perm of perms) {\n      result.push(char + perm);\n    }\n  }\n\n  return result;\n}\n\n// Iterative approach\nfunction permutationsIterative(str) {\n  let perms = [''];\n\n  for (const char of str) {\n    const newPerms = [];\n    for (const perm of perms) {\n      for (let i = 0; i <= perm.length; i++) {\n        newPerms.push(perm.slice(0, i) + char + perm.slice(i));\n      }\n    }\n    perms = newPerms;\n  }\n\n  return perms;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"sliding-window-techniques",children:"Sliding Window Techniques"}),"\n",(0,t.jsx)(e.h3,{id:"1-longest-substring-without-repeating-characters",children:"1. Longest Substring Without Repeating Characters"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function lengthOfLongestSubstring(s) {\n  const seen = new Set();\n  let left = 0;\n  let maxLength = 0;\n\n  for (let right = 0; right < s.length; right++) {\n    while (seen.has(s[right])) {\n      seen.delete(s[left]);\n      left++;\n    }\n\n    seen.add(s[right]);\n    maxLength = Math.max(maxLength, right - left + 1);\n  }\n\n  return maxLength;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-minimum-window-substring",children:"2. Minimum Window Substring"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function minWindow(s, t) {\n  if (s.length < t.length) return '';\n\n  const tFreq = {};\n  for (const char of t) {\n    tFreq[char] = (tFreq[char] || 0) + 1;\n  }\n\n  let left = 0;\n  let minLen = Infinity;\n  let minStart = 0;\n  let matched = 0;\n  const windowFreq = {};\n\n  for (let right = 0; right < s.length; right++) {\n    const rightChar = s[right];\n    windowFreq[rightChar] = (windowFreq[rightChar] || 0) + 1;\n\n    if (tFreq[rightChar] && windowFreq[rightChar] === tFreq[rightChar]) {\n      matched++;\n    }\n\n    while (matched === Object.keys(tFreq).length) {\n      if (right - left + 1 < minLen) {\n        minLen = right - left + 1;\n        minStart = left;\n      }\n\n      const leftChar = s[left];\n      windowFreq[leftChar]--;\n      if (tFreq[leftChar] && windowFreq[leftChar] < tFreq[leftChar]) {\n        matched--;\n      }\n      left++;\n    }\n  }\n\n  return minLen === Infinity ? '' : s.substring(minStart, minStart + minLen);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-longest-repeating-character-replacement",children:"3. Longest Repeating Character Replacement"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function characterReplacement(s, k) {\n  const freq = {};\n  let left = 0;\n  let maxFreq = 0;\n  let maxLength = 0;\n\n  for (let right = 0; right < s.length; right++) {\n    freq[s[right]] = (freq[s[right]] || 0) + 1;\n    maxFreq = Math.max(maxFreq, freq[s[right]]);\n\n    // If window size - max frequency > k, shrink window\n    if (right - left + 1 - maxFreq > k) {\n      freq[s[left]]--;\n      left++;\n    }\n\n    maxLength = Math.max(maxLength, right - left + 1);\n  }\n\n  return maxLength;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"two-pointer-techniques",children:"Two Pointer Techniques"}),"\n",(0,t.jsx)(e.h3,{id:"1-valid-palindrome",children:"1. Valid Palindrome"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function isPalindromeAlphanumeric(s) {\n  let left = 0;\n  let right = s.length - 1;\n\n  while (left < right) {\n    // Skip non-alphanumeric characters\n    while (left < right && !isAlphanumeric(s[left])) {\n      left++;\n    }\n    while (left < right && !isAlphanumeric(s[right])) {\n      right--;\n    }\n\n    if (s[left].toLowerCase() !== s[right].toLowerCase()) {\n      return false;\n    }\n\n    left++;\n    right--;\n  }\n\n  return true;\n}\n\nfunction isAlphanumeric(char) {\n  const code = char.charCodeAt(0);\n  return (\n    (code >= 48 && code <= 57) || // 0-9\n    (code >= 65 && code <= 90) || // A-Z\n    (code >= 97 && code <= 122)\n  ); // a-z\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-two-sum-in-sorted-array-string-version",children:"2. Two Sum in Sorted Array (String Version)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function twoSumStrings(strings, target) {\n  let left = 0;\n  let right = strings.length - 1;\n\n  while (left < right) {\n    const current = strings[left] + strings[right];\n\n    if (current === target) {\n      return [left, right];\n    } else if (current < target) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  return [-1, -1];\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-container-with-most-water-string-analogy",children:"3. Container With Most Water (String Analogy)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function longestCommonPrefix(strs) {\n  if (!strs || strs.length === 0) return '';\n\n  let prefix = strs[0];\n\n  for (let i = 1; i < strs.length; i++) {\n    while (strs[i].indexOf(prefix) !== 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n      if (prefix === '') return '';\n    }\n  }\n\n  return prefix;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"advanced-string-algorithms",children:"Advanced String Algorithms"}),"\n",(0,t.jsx)(e.h3,{id:"1-z-algorithm",children:"1. Z Algorithm"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function zAlgorithm(s) {\n  const n = s.length;\n  const z = new Array(n).fill(0);\n  let left = 0;\n  let right = 0;\n\n  for (let i = 1; i < n; i++) {\n    if (i <= right) {\n      z[i] = Math.min(right - i + 1, z[i - left]);\n    }\n\n    while (i + z[i] < n && s[z[i]] === s[i + z[i]]) {\n      z[i]++;\n    }\n\n    if (i + z[i] - 1 > right) {\n      left = i;\n      right = i + z[i] - 1;\n    }\n  }\n\n  return z;\n}\n\nfunction searchWithZ(text, pattern) {\n  const combined = pattern + '$' + text;\n  const z = zAlgorithm(combined);\n  const matches = [];\n\n  for (let i = 0; i < z.length; i++) {\n    if (z[i] === pattern.length) {\n      matches.push(i - pattern.length - 1);\n    }\n  }\n\n  return matches;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-manachers-algorithm-longest-palindromic-substring",children:"2. Manacher's Algorithm (Longest Palindromic Substring)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function manacher(s) {\n  // Transform string: \"abc\" -> \"^#a#b#c#$\"\n  const processed = '^#' + s.split('').join('#') + '#$';\n  const n = processed.length;\n  const p = new Array(n).fill(0);\n  let center = 0;\n  let right = 0;\n\n  for (let i = 1; i < n - 1; i++) {\n    const mirror = 2 * center - i;\n\n    if (i < right) {\n      p[i] = Math.min(right - i, p[mirror]);\n    }\n\n    // Expand around center i\n    while (processed[i + (1 + p[i])] === processed[i - (1 + p[i])]) {\n      p[i]++;\n    }\n\n    // If palindrome centered at i extends past right, adjust center and right\n    if (i + p[i] > right) {\n      center = i;\n      right = i + p[i];\n    }\n  }\n\n  return p;\n}\n\nfunction longestPalindromeManacher(s) {\n  const p = manacher(s);\n  let maxLen = 0;\n  let centerIndex = 0;\n\n  for (let i = 0; i < p.length; i++) {\n    if (p[i] > maxLen) {\n      maxLen = p[i];\n      centerIndex = i;\n    }\n  }\n\n  const start = Math.floor((centerIndex - maxLen) / 2);\n  return s.substring(start, start + maxLen);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-suffix-array",children:"3. Suffix Array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function buildSuffixArray(s) {\n  const n = s.length;\n  const suffixes = [];\n\n  for (let i = 0; i < n; i++) {\n    suffixes.push({\n      index: i,\n      suffix: s.substring(i),\n    });\n  }\n\n  suffixes.sort((a, b) => a.suffix.localeCompare(b.suffix));\n\n  return suffixes.map(suffix => suffix.index);\n}\n\nfunction longestCommonSubstring(str1, str2) {\n  const combined = str1 + '#' + str2;\n  const suffixArray = buildSuffixArray(combined);\n  const n = combined.length;\n\n  let maxLength = 0;\n  let result = '';\n\n  for (let i = 0; i < n - 1; i++) {\n    const idx1 = suffixArray[i];\n    const idx2 = suffixArray[i + 1];\n\n    // Check if suffixes are from different strings\n    const fromDifferentStrings =\n      (idx1 < str1.length && idx2 > str1.length) ||\n      (idx1 > str1.length && idx2 < str1.length);\n\n    if (fromDifferentStrings) {\n      const suffix1 = combined.substring(idx1);\n      const suffix2 = combined.substring(idx2);\n\n      let commonLength = 0;\n      const minLength = Math.min(suffix1.length, suffix2.length);\n\n      while (\n        commonLength < minLength &&\n        suffix1[commonLength] === suffix2[commonLength]\n      ) {\n        commonLength++;\n      }\n\n      if (commonLength > maxLength) {\n        maxLength = commonLength;\n        result = suffix1.substring(0, commonLength);\n      }\n    }\n  }\n\n  return result;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"dynamic-programming-with-strings",children:"Dynamic Programming with Strings"}),"\n",(0,t.jsx)(e.h3,{id:"1-longest-common-subsequence",children:"1. Longest Common Subsequence"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function longestCommonSubsequence(text1, text2) {\n  const m = text1.length;\n  const n = text2.length;\n  const dp = Array(m + 1)\n    .fill(null)\n    .map(() => Array(n + 1).fill(0));\n\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (text1[i - 1] === text2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[m][n];\n}\n\nfunction getLCSString(text1, text2) {\n  const m = text1.length;\n  const n = text2.length;\n  const dp = Array(m + 1)\n    .fill(null)\n    .map(() => Array(n + 1).fill(0));\n\n  // Fill DP table\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (text1[i - 1] === text2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  // Reconstruct LCS\n  let lcs = '';\n  let i = m,\n    j = n;\n\n  while (i > 0 && j > 0) {\n    if (text1[i - 1] === text2[j - 1]) {\n      lcs = text1[i - 1] + lcs;\n      i--;\n      j--;\n    } else if (dp[i - 1][j] > dp[i][j - 1]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n\n  return lcs;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-edit-distance-levenshtein-distance",children:"2. Edit Distance (Levenshtein Distance)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function editDistance(word1, word2) {\n  const m = word1.length;\n  const n = word2.length;\n  const dp = Array(m + 1)\n    .fill(null)\n    .map(() => Array(n + 1).fill(0));\n\n  // Initialize base cases\n  for (let i = 0; i <= m; i++) dp[i][0] = i;\n  for (let j = 0; j <= n; j++) dp[0][j] = j;\n\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (word1[i - 1] === word2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1];\n      } else {\n        dp[i][j] =\n          1 +\n          Math.min(\n            dp[i - 1][j], // deletion\n            dp[i][j - 1], // insertion\n            dp[i - 1][j - 1] // substitution\n          );\n      }\n    }\n  }\n\n  return dp[m][n];\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-distinct-subsequences",children:"3. Distinct Subsequences"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function numDistinct(s, t) {\n  const m = s.length;\n  const n = t.length;\n  const dp = Array(m + 1)\n    .fill(null)\n    .map(() => Array(n + 1).fill(0));\n\n  // Empty subsequence can be formed in one way\n  for (let i = 0; i <= m; i++) {\n    dp[i][0] = 1;\n  }\n\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (s[i - 1] === t[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n      } else {\n        dp[i][j] = dp[i - 1][j];\n      }\n    }\n  }\n\n  return dp[m][n];\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"console.log('=== String Algorithms Demo ===');\n\n// Basic operations\nconst str = 'Hello World';\nconsole.log('Original:', str);\nconsole.log('Reversed:', reverseString2(str));\nconsole.log('Character frequency:', charFrequency(str.toLowerCase()));\n\n// Pattern matching\nconst text = 'ABABDABACDABABCABCABCABCABC';\nconst pattern = 'ABABCABCAB';\nconsole.log('Naive search:', naiveSearch(text, pattern));\nconsole.log('KMP search:', KMPSearch(text, pattern));\nconsole.log('Rabin-Karp search:', rabinKarp(text, pattern));\n\n// String manipulation\nconst testStr = 'aabcccccaaa';\nconsole.log('Compressed:', compress(testStr));\nconsole.log('Decompressed:', decompress(compress(testStr)));\n\n// Palindrome checks\nconst palindromeTests = [\n  'racecar',\n  'A man a plan a canal Panama',\n  'race a car',\n];\npalindromeTests.forEach(test => {\n  console.log(`\"${test}\" is palindrome:`, isPalindrome2(test));\n});\n\nconsole.log(\"Longest palindrome in 'babad':\", longestPalindrome('babad'));\nconsole.log(\"All palindromes in 'aab':\", getAllPalindromes('aab'));\n\n// Anagrams\nconsole.log(\n  \"'listen' and 'silent' are anagrams:\",\n  isAnagram2('listen', 'silent')\n);\nconsole.log(\n  'Group anagrams:',\n  groupAnagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat'])\n);\n\n// Sliding window\nconsole.log(\n  'Longest substring without repeating:',\n  lengthOfLongestSubstring('abcabcbb')\n);\nconsole.log('Min window substring:', minWindow('ADOBECODEBANC', 'ABC'));\n\n// Advanced algorithms\nconsole.log(\"Z-algorithm for 'aabaaba':\", zAlgorithm('aabaaba'));\nconsole.log(\"LCS of 'ABCDGH' and 'AEDFHR':\", getLCSString('ABCDGH', 'AEDFHR'));\nconsole.log(\n  \"Edit distance between 'horse' and 'ros':\",\n  editDistance('horse', 'ros')\n);\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"time-complexity-summary",children:"Time Complexity Summary"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Algorithm"}),(0,t.jsx)(e.th,{children:"Time Complexity"}),(0,t.jsx)(e.th,{children:"Space Complexity"}),(0,t.jsx)(e.th,{children:"Use Case"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Basic Operations"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Traversal"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Basic string processing"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Character Frequency"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"O(k)"})," where k = unique chars"]}),(0,t.jsx)(e.td,{children:"Anagram detection"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"String Comparison"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Equality checking"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Pattern Matching"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Naive Search"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Simple pattern finding"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"KMP Algorithm"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n + m)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(m)"})}),(0,t.jsx)(e.td,{children:"Efficient pattern matching"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Rabin-Karp"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"O(n + m)"})," avg, ",(0,t.jsx)(e.code,{children:"O(nm)"})," worst"]}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Multiple pattern search"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Z Algorithm"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:"Pattern matching, periodicity"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"String Manipulation"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Reverse String"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"O(1)"})," to ",(0,t.jsx)(e.code,{children:"O(n)"})]}),(0,t.jsx)(e.td,{children:"String reversal"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Compression"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Data compression"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Remove Characters"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"O(1)"})," to ",(0,t.jsx)(e.code,{children:"O(n)"})]}),(0,t.jsx)(e.td,{children:"String cleaning"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Palindrome Algorithms"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Palindrome Check"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Validation"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Longest Palindrome"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n\xb2)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"Substring finding"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Manacher's Algorithm"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:"Optimal palindrome finding"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Anagram & Permutation"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Anagram Check"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"O(n log n)"})," or ",(0,t.jsx)(e.code,{children:"O(n)"})]}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"O(1)"})," or ",(0,t.jsx)(e.code,{children:"O(k)"})]}),(0,t.jsx)(e.td,{children:"Anagram detection"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Group Anagrams"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n * m log m)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:"Grouping similar strings"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Generate Permutations"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n! * n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n! * n)"})}),(0,t.jsx)(e.td,{children:"All arrangements"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Sliding Window"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Longest Substring"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(min(m,n))"})}),(0,t.jsx)(e.td,{children:"Substring problems"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Min Window Substring"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n + m)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(m + n)"})}),(0,t.jsx)(e.td,{children:"Pattern matching"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Character Replacement"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(n)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(1)"})}),(0,t.jsx)(e.td,{children:"String modification"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Dynamic Programming"})}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"LCS"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:"Subsequence finding"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Edit Distance"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:"String similarity"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Distinct Subsequences"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"O(nm)"})}),(0,t.jsx)(e.td,{children:"Counting subsequences"})]})]})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"common-patterns-to-remember",children:"Common Patterns to Remember"}),"\n",(0,t.jsxs)(e.h3,{id:"1-two-pointer-pattern",children:["1. ",(0,t.jsx)(e.strong,{children:"Two Pointer Pattern"})]}),"\n",(0,t.jsx)(e.p,{children:"Perfect for palindromes and sorted array problems:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let left = 0,\n  right = str.length - 1;\nwhile (left < right) {\n  // Process characters at left and right\n  left++;\n  right--;\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"2-sliding-window-pattern",children:["2. ",(0,t.jsx)(e.strong,{children:"Sliding Window Pattern"})]}),"\n",(0,t.jsx)(e.p,{children:"For substring problems with constraints:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let left = 0;\nfor (let right = 0; right < str.length; right++) {\n    // Expand window\n    while (/* window invalid */) {\n        // Shrink window\n        left++;\n    }\n    // Update result\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"3-character-frequency-pattern",children:["3. ",(0,t.jsx)(e.strong,{children:"Character Frequency Pattern"})]}),"\n",(0,t.jsx)(e.p,{children:"Using Map or object for character counting:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const freq = new Map();\nfor (const char of str) {\n  freq.set(char, (freq.get(char) || 0) + 1);\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"4-dynamic-programming-pattern",children:["4. ",(0,t.jsx)(e.strong,{children:"Dynamic Programming Pattern"})]}),"\n",(0,t.jsx)(e.p,{children:"For comparing two strings:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const dp = Array(m + 1)\n  .fill(null)\n  .map(() => Array(n + 1).fill(0));\nfor (let i = 1; i <= m; i++) {\n  for (let j = 1; j <= n; j++) {\n    if (str1[i - 1] === str2[j - 1]) {\n      dp[i][j] = dp[i - 1][j - 1] + 1;\n    } else {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n    }\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"5-preprocessing-pattern",children:["5. ",(0,t.jsx)(e.strong,{children:"Preprocessing Pattern"})]}),"\n",(0,t.jsx)(e.p,{children:"Building auxiliary data structures:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// LPS array for KMP\nfunction computeLPS(pattern) {\n  const lps = new Array(pattern.length).fill(0);\n  let len = 0,\n    i = 1;\n\n  while (i < pattern.length) {\n    if (pattern[i] === pattern[len]) {\n      len++;\n      lps[i] = len;\n      i++;\n    } else {\n      if (len !== 0) {\n        len = lps[len - 1];\n      } else {\n        lps[i] = 0;\n        i++;\n      }\n    }\n  }\n  return lps;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"key-interview-tips",children:"Key Interview Tips"}),"\n",(0,t.jsxs)(e.h3,{id:"1-string-immutability",children:["1. ",(0,t.jsx)(e.strong,{children:"String Immutability"})]}),"\n",(0,t.jsx)(e.p,{children:"Remember that strings are immutable in JavaScript:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Inefficient - creates new string each time\nlet result = '';\nfor (let i = 0; i < n; i++) {\n  result += char; // O(n\xb2) time complexity\n}\n\n// Efficient - use array then join\nconst chars = [];\nfor (let i = 0; i < n; i++) {\n  chars.push(char);\n}\nconst result = chars.join(''); // O(n) time complexity\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"2-edge-cases-to-consider",children:["2. ",(0,t.jsx)(e.strong,{children:"Edge Cases to Consider"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Empty string ",(0,t.jsx)(e.code,{children:'""'})]}),"\n",(0,t.jsxs)(e.li,{children:["Single character string ",(0,t.jsx)(e.code,{children:'"a"'})]}),"\n",(0,t.jsxs)(e.li,{children:["All same characters ",(0,t.jsx)(e.code,{children:'"aaaa"'})]}),"\n",(0,t.jsxs)(e.li,{children:["No repeating characters ",(0,t.jsx)(e.code,{children:'"abcd"'})]}),"\n",(0,t.jsx)(e.li,{children:"Special characters and spaces"}),"\n",(0,t.jsx)(e.li,{children:"Case sensitivity"}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{id:"3-common-string-methods",children:["3. ",(0,t.jsx)(e.strong,{children:"Common String Methods"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Essential JavaScript string methods\nstr.charAt(i)           // Get character at index\nstr.charCodeAt(i)       // Get ASCII code\nstr.substring(i, j)     // Extract substring\nstr.slice(i, j)         // Extract substring (supports negative indices)\nstr.indexOf(substr)     // Find first occurrence\nstr.lastIndexOf(substr) // Find last occurrence\nstr.split(delimiter)    // Split into array\nstr.replace(old, new)   // Replace occurrences\nstr.toLowerCase()       // Convert to lowercase\nstr.toUpperCase()       // Convert to uppercase\nstr.trim()             // Remove whitespace\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"4-ascii-and-character-codes",children:["4. ",(0,t.jsx)(e.strong,{children:"ASCII and Character Codes"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Useful for character manipulation\n'a'.charCodeAt(0) - 'a'.charCodeAt(0) = 0  // a = 97\n'z'.charCodeAt(0) - 'a'.charCodeAt(0) = 25 // z = 122\n'A'.charCodeAt(0) - 'A'.charCodeAt(0) = 0  // A = 65\n'Z'.charCodeAt(0) - 'A'.charCodeAt(0) = 25 // Z = 90\n'0'.charCodeAt(0) - '0'.charCodeAt(0) = 0  // 0 = 48\n'9'.charCodeAt(0) - '0'.charCodeAt(0) = 9  // 9 = 57\n\n// Convert between cases\nconst lowerToUpper = char => String.fromCharCode(char.charCodeAt(0) - 32);\nconst upperToLower = char => String.fromCharCode(char.charCodeAt(0) + 32);\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"5-regex-patterns-for-common-operations",children:["5. ",(0,t.jsx)(e.strong,{children:"Regex Patterns for Common Operations"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Remove non-alphanumeric characters\nstr.replace(/[^a-zA-Z0-9]/g, '');\n\n// Remove vowels\nstr.replace(/[aeiouAEIOU]/g, '');\n\n// Split on multiple delimiters\nstr.split(/[,\\s]+/);\n\n// Match email pattern\n/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n\n// Match phone number\n/^\\d{3}-\\d{3}-\\d{4}$/.test(phone);\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"practice-problems-categories",children:"Practice Problems Categories"}),"\n",(0,t.jsx)(e.h3,{id:"easy-level",children:(0,t.jsx)(e.strong,{children:"Easy Level"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Reverse String"}),"\n",(0,t.jsx)(e.li,{children:"Valid Palindrome"}),"\n",(0,t.jsx)(e.li,{children:"First Unique Character"}),"\n",(0,t.jsx)(e.li,{children:"Valid Anagram"}),"\n",(0,t.jsx)(e.li,{children:"Implement strStr()"}),"\n",(0,t.jsx)(e.li,{children:"Length of Last Word"}),"\n",(0,t.jsx)(e.li,{children:"Roman to Integer"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"medium-level",children:(0,t.jsx)(e.strong,{children:"Medium Level"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Longest Palindromic Substring"}),"\n",(0,t.jsx)(e.li,{children:"Longest Substring Without Repeating Characters"}),"\n",(0,t.jsx)(e.li,{children:"Group Anagrams"}),"\n",(0,t.jsx)(e.li,{children:"Minimum Window Substring"}),"\n",(0,t.jsx)(e.li,{children:"Longest Repeating Character Replacement"}),"\n",(0,t.jsx)(e.li,{children:"Palindromic Substrings"}),"\n",(0,t.jsx)(e.li,{children:"String Compression"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"hard-level",children:(0,t.jsx)(e.strong,{children:"Hard Level"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Edit Distance"}),"\n",(0,t.jsx)(e.li,{children:"Regular Expression Matching"}),"\n",(0,t.jsx)(e.li,{children:"Wildcard Matching"}),"\n",(0,t.jsx)(e.li,{children:"Shortest Palindrome"}),"\n",(0,t.jsx)(e.li,{children:"Distinct Subsequences"}),"\n",(0,t.jsx)(e.li,{children:"Minimum Number of Taps to Open to Water a Garden"}),"\n",(0,t.jsx)(e.li,{children:"Text Justification"}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"advanced-topics-for-further-study",children:"Advanced Topics for Further Study"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Suffix Trees and Suffix Arrays"})}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Aho-Corasick Algorithm"})," (Multiple pattern matching)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Boyer-Moore Algorithm"})," (Pattern matching)"]}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"String Hashing Techniques"})}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Finite State Automata"})," for pattern recognition"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Trie Data Structure"})," for prefix matching"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Rolling Hash"})," for substring operations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Burrows-Wheeler Transform"})," for compression"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function l(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);