"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4680],{6739:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=n(4848),a=n(8453);const s={},c="Redux Saga Testing",i={id:"WebDev/React/ReduxSagaTesting",title:"Redux Saga Testing",description:"",source:"@site/docs/WebDev/React/ReduxSagaTesting.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReduxSagaTesting",permalink:"/js.enigma/docs/WebDev/React/ReduxSagaTesting",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReduxSagaTesting.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React TypeScript Context",permalink:"/js.enigma/docs/WebDev/React/ReactTypeScriptContext"},next:{title:"Redux Toolkit",permalink:"/js.enigma/docs/WebDev/React/ReduxToolkit"}},o={},d=[];function l(r){const e={code:"code",h1:"h1",header:"header",pre:"pre",...(0,a.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"redux-saga-testing",children:"Redux Saga Testing"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:"// Redux Saga Testing Cheatsheet\r\n\r\n// 1. Basic Test Setup\r\nimport { runSaga } from 'redux-saga';\r\nimport { call, put, select } from 'redux-saga/effects';\r\nimport { expectSaga } from 'redux-saga-test-plan';\r\nimport * as matchers from 'redux-saga-test-plan/matchers';\r\nimport { throwError } from 'redux-saga-test-plan/providers';\r\n\r\n// 2. Simple Saga Example\r\nfunction* fetchUserSaga(action) {\r\n  try {\r\n    const user = yield call(api.fetchUser, action.payload.id);\r\n    yield put({ type: 'FETCH_USER_SUCCESS', payload: user });\r\n  } catch (error) {\r\n    yield put({ type: 'FETCH_USER_ERROR', error });\r\n  }\r\n}\r\n\r\n// 3. Testing with redux-saga-test-plan\r\ndescribe('fetchUserSaga', () => {\r\n  const userId = 1;\r\n  const user = { id: 1, name: 'John' };\r\n\r\n  // Basic happy path test\r\n  test('should fetch user successfully', () => {\r\n    return expectSaga(fetchUserSaga, { payload: { id: userId } })\r\n      .provide([\r\n        [matchers.call.fn(api.fetchUser), user]\r\n      ])\r\n      .put({ type: 'FETCH_USER_SUCCESS', payload: user })\r\n      .run();\r\n  });\r\n\r\n  // Error path test\r\n  test('should handle errors', () => {\r\n    const error = new Error('User not found');\r\n    \r\n    return expectSaga(fetchUserSaga, { payload: { id: userId } })\r\n      .provide([\r\n        [matchers.call.fn(api.fetchUser), throwError(error)]\r\n      ])\r\n      .put({ type: 'FETCH_USER_ERROR', error })\r\n      .run();\r\n  });\r\n});\r\n\r\n// 4. Testing Complex Flows\r\nfunction* complexSaga() {\r\n  const user = yield select(state => state.user);\r\n  yield call(api.trackUserAction, user.id);\r\n  const data = yield call(api.fetchData);\r\n  yield put({ type: 'DATA_LOADED', payload: data });\r\n}\r\n\r\ntest('complex saga flow', () => {\r\n  const fakeUser = { id: 1 };\r\n  const fakeData = { items: [] };\r\n\r\n  return expectSaga(complexSaga)\r\n    .withState({\r\n      user: fakeUser\r\n    })\r\n    .provide([\r\n      [matchers.call.fn(api.trackUserAction), null],\r\n      [matchers.call.fn(api.fetchData), fakeData]\r\n    ])\r\n    .call(api.trackUserAction, fakeUser.id)\r\n    .put({ type: 'DATA_LOADED', payload: fakeData })\r\n    .run();\r\n});\r\n\r\n// 5. Testing Saga Forks and Parallel Tasks\r\nfunction* parentSaga() {\r\n  yield fork(childSaga1);\r\n  yield fork(childSaga2);\r\n}\r\n\r\ntest('forked sagas', () => {\r\n  return expectSaga(parentSaga)\r\n    .provide([\r\n      // Provide mocked values for child sagas\r\n    ])\r\n    .fork(childSaga1)\r\n    .fork(childSaga2)\r\n    .run();\r\n});\r\n\r\n// 6. Testing Race Conditions\r\nfunction* raceSaga() {\r\n  const { response, timeout } = yield race({\r\n    response: call(api.fetchData),\r\n    timeout: delay(1000)\r\n  });\r\n}\r\n\r\ntest('race condition', () => {\r\n  const response = { data: 'success' };\r\n\r\n  return expectSaga(raceSaga)\r\n    .provide([\r\n      [matchers.race({ \r\n        response: matchers.call.fn(api.fetchData),\r\n        timeout: matchers.call.fn(delay)\r\n      }), { response }]\r\n    ])\r\n    .run();\r\n});\r\n\r\n// 7. Testing Take Effects\r\nfunction* watchUserSaga() {\r\n  while (true) {\r\n    const action = yield take('USER_REQUEST');\r\n    yield call(handleUserRequest, action);\r\n  }\r\n}\r\n\r\ntest('watch saga', () => {\r\n  const action = { type: 'USER_REQUEST', payload: 1 };\r\n\r\n  return expectSaga(watchUserSaga)\r\n    .take('USER_REQUEST')\r\n    .dispatch(action)\r\n    .call(handleUserRequest, action)\r\n    .silentRun();\r\n});\r\n\r\n// 8. Common Patterns and Best Practices\r\n\r\n// Pattern 1: Dynamic Providers\r\ntest('dynamic providers', () => {\r\n  return expectSaga(mySaga)\r\n    .provide({\r\n      call: (effect, next) => {\r\n        if (effect.fn === api.fetchUser) {\r\n          return { id: 1, name: 'John' };\r\n        }\r\n        return next();\r\n      }\r\n    })\r\n    .run();\r\n});\r\n\r\n// Pattern 2: Testing Saga Cancellation\r\ntest('saga cancellation', () => {\r\n  return expectSaga(mySaga)\r\n    .provide([\r\n      [matchers.fork.fn(backgroundTask), true]\r\n    ])\r\n    .fork(backgroundTask)\r\n    .cancel.like({ pattern: backgroundTask })\r\n    .run();\r\n});\r\n\r\n// Pattern 3: Testing with Partial State\r\ntest('partial state matching', () => {\r\n  return expectSaga(mySaga)\r\n    .withState({\r\n      user: { id: 1 },\r\n      // Other state properties can be omitted\r\n    })\r\n    .run();\r\n});\r\n\r\n// 9. Helper Functions for Testing\r\nconst createSagaTestHelper = (initialState = {}) => {\r\n  const dispatched = [];\r\n  \r\n  return {\r\n    dispatch: (action) => dispatched.push(action),\r\n    getState: () => initialState,\r\n    getDispatched: () => dispatched\r\n  };\r\n};\r\n\r\n// 10. Manual Testing without redux-saga-test-plan\r\ntest('manual saga testing', async () => {\r\n  const dispatched = [];\r\n  const fakeStore = {\r\n    dispatch: (action) => dispatched.push(action),\r\n    getState: () => ({ user: { id: 1 } })\r\n  };\r\n\r\n  await runSaga(\r\n    fakeStore,\r\n    mySaga,\r\n    { type: 'START_SAGA' }\r\n  ).toPromise();\r\n\r\n  expect(dispatched).toEqual([\r\n    // Expected actions\r\n  ]);\r\n});\n"})})]})}function p(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(l,{...r})}):l(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>c,x:()=>i});var t=n(6540);const a={},s=t.createContext(a);function c(r){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:c(r.components),t.createElement(s.Provider,{value:e},r.children)}}}]);