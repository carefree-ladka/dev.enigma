"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[4511],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(96540);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}},96174:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(74848),r=t(28453);const a={},l="Java Optional Class",s={id:"Java/Java Optional Class",title:"Java Optional Class",description:"A comprehensive guide to Java Optional class methods, theory, and usage patterns for modern Java development.",source:"@site/docs/Java/Java Optional Class.mdx",sourceDirName:"Java",slug:"/Java/Java Optional Class",permalink:"/dev.enigma/docs/Java/Java Optional Class",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Java Optional Class.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Microservices - Beginner's Guide",permalink:"/dev.enigma/docs/Java/Java Microservices - Beginner's Guide"},next:{title:"Java Primitive Data Types - Complete Cheatsheet",permalink:"/dev.enigma/docs/Java/Java Primitive Data Types - Complete Cheatsheet"}},o={},p=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction and Theory",id:"introduction-and-theory",level:2},{value:"What is Optional?",id:"what-is-optional",level:3},{value:"Why Use Optional?",id:"why-use-optional",level:3},{value:"When to Use Optional",id:"when-to-use-optional",level:3},{value:"Creation Methods",id:"creation-methods",level:2},{value:"1. Optional.empty()",id:"1-optionalempty",level:3},{value:"2. Optional.of(value)",id:"2-optionalofvalue",level:3},{value:"3. Optional.ofNullable(value)",id:"3-optionalofnullablevalue",level:3},{value:"Presence Check Methods",id:"presence-check-methods",level:2},{value:"1. isPresent()",id:"1-ispresent",level:3},{value:"2. isEmpty() (Java 11+)",id:"2-isempty-java-11",level:3},{value:"Value Retrieval Methods",id:"value-retrieval-methods",level:2},{value:"1. get()",id:"1-get",level:3},{value:"2. orElse(defaultValue)",id:"2-orelsedefaultvalue",level:3},{value:"3. orElseGet(supplier)",id:"3-orelsegetsupplier",level:3},{value:"4. orElseThrow()",id:"4-orelsethrow",level:3},{value:"Conditional Operations",id:"conditional-operations",level:2},{value:"1. ifPresent(consumer)",id:"1-ifpresentconsumer",level:3},{value:"2. ifPresentOrElse(consumer, runnable) (Java 9+)",id:"2-ifpresentorelseconsumer-runnable-java-9",level:3},{value:"Transformation Methods",id:"transformation-methods",level:2},{value:"1. map(mapper)",id:"1-mapmapper",level:3},{value:"2. flatMap(mapper)",id:"2-flatmapmapper",level:3},{value:"3. Practical Transformation Examples",id:"3-practical-transformation-examples",level:3},{value:"Filtering and Predicates",id:"filtering-and-predicates",level:2},{value:"1. filter(predicate)",id:"1-filterpredicate",level:3},{value:"2. Complex Filtering Examples",id:"2-complex-filtering-examples",level:3},{value:"Combination and Chaining",id:"combination-and-chaining",level:2},{value:"1. or(supplier) (Java 9+)",id:"1-orsupplier-java-9",level:3},{value:"2. Stream Integration (Java 9+)",id:"2-stream-integration-java-9",level:3},{value:"3. Complex Chaining Examples",id:"3-complex-chaining-examples",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Prefer Optional in Return Types",id:"1-prefer-optional-in-return-types",level:3},{value:"2. Use Method Chaining",id:"2-use-method-chaining",level:3},{value:"3. Avoid Unnecessary Optional Creation",id:"3-avoid-unnecessary-optional-creation",level:3},{value:"4. Use orElseGet for Expensive Defaults",id:"4-use-orelseget-for-expensive-defaults",level:3},{value:"Common Anti-Patterns",id:"common-anti-patterns",level:2},{value:"1. Don&#39;t Use Optional.get() Without Checking",id:"1-dont-use-optionalget-without-checking",level:3},{value:"2. Don&#39;t Use Optional as Method Parameters",id:"2-dont-use-optional-as-method-parameters",level:3},{value:"3. Don&#39;t Use Optional for Class Fields",id:"3-dont-use-optional-for-class-fields",level:3},{value:"4. Don&#39;t Use Optional for Collections",id:"4-dont-use-optional-for-collections",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"1. Repository Pattern",id:"1-repository-pattern",level:3},{value:"2. Service Layer with Optional",id:"2-service-layer-with-optional",level:3},{value:"3. Configuration Management",id:"3-configuration-management",level:3},{value:"4. API Response Handling",id:"4-api-response-handling",level:3},{value:"5. Validation Chains",id:"5-validation-chains",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"1. Optional with Streams",id:"1-optional-with-streams",level:3},{value:"2. Builder Pattern with Optional",id:"2-builder-pattern-with-optional",level:3},{value:"3. Caching with Optional",id:"3-caching-with-optional",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Memory Overhead",id:"memory-overhead",level:3},{value:"Lazy Evaluation",id:"lazy-evaluation",level:3},{value:"Testing with Optional",id:"testing-with-optional",level:2},{value:"Unit Testing Patterns",id:"unit-testing-patterns",level:3},{value:"Method Reference Summary",id:"method-reference-summary",level:2},{value:"Complex Example: Order Processing System",id:"complex-example-order-processing-system",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"1. Avoid Boxing/Unboxing",id:"1-avoid-boxingunboxing",level:3},{value:"2. Minimize Optional Creation",id:"2-minimize-optional-creation",level:3},{value:"Migration Strategies",id:"migration-strategies",level:2},{value:"From Null-Based Code",id:"from-null-based-code",level:3},{value:"Exception Handling with Optional",id:"exception-handling-with-optional",level:2},{value:"1. Safe Exception Handling",id:"1-safe-exception-handling",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"Design Patterns with Optional",id:"design-patterns-with-optional",level:2},{value:"1. Factory Pattern",id:"1-factory-pattern",level:3},{value:"2. Strategy Pattern",id:"2-strategy-pattern",level:3},{value:"3. Chain of Responsibility",id:"3-chain-of-responsibility",level:3},{value:"Debugging and Logging",id:"debugging-and-logging",level:2},{value:"1. Optional-Friendly Logging",id:"1-optional-friendly-logging",level:3},{value:"2. Error Context Preservation",id:"2-error-context-preservation",level:3},{value:"Integration with Modern Java Features",id:"integration-with-modern-java-features",level:2},{value:"1. Records and Optional (Java 14+)",id:"1-records-and-optional-java-14",level:3},{value:"2. Pattern Matching (Java 17+)",id:"2-pattern-matching-java-17",level:3},{value:"3. Virtual Threads Integration (Java 21+)",id:"3-virtual-threads-integration-java-21",level:3},{value:"Testing Strategies",id:"testing-strategies",level:2},{value:"1. Comprehensive Test Examples",id:"1-comprehensive-test-examples",level:3},{value:"2. Property-Based Testing",id:"2-property-based-testing",level:3},{value:"Functional Programming Patterns",id:"functional-programming-patterns",level:2},{value:"1. Monadic Patterns",id:"1-monadic-patterns",level:3},{value:"2. Validation Chains",id:"2-validation-chains",level:3},{value:"Reactive Programming Integration",id:"reactive-programming-integration",level:2},{value:"1. Optional with Reactive Streams",id:"1-optional-with-reactive-streams",level:3},{value:"Memory and Performance Optimizations",id:"memory-and-performance-optimizations",level:2},{value:"1. Optional Caching",id:"1-optional-caching",level:3},{value:"2. Memory-Efficient Patterns",id:"2-memory-efficient-patterns",level:3},{value:"Advanced Use Cases",id:"advanced-use-cases",level:2},{value:"1. Database Integration",id:"1-database-integration",level:3},{value:"2. REST API Controllers",id:"2-rest-api-controllers",level:3},{value:"Comparison with Other Languages",id:"comparison-with-other-languages",level:2},{value:"1. Optional vs Nullable Types",id:"1-optional-vs-nullable-types",level:3},{value:"2. Optional vs Maybe Monad",id:"2-optional-vs-maybe-monad",level:3},{value:"Key Interview Tips",id:"key-interview-tips",level:2},{value:"1. Common Interview Questions",id:"1-common-interview-questions",level:3},{value:"2. Performance Considerations",id:"2-performance-considerations",level:3},{value:"Complete Example: E-commerce Order System",id:"complete-example-e-commerce-order-system",level:2},{value:"Migration and Refactoring Guide",id:"migration-and-refactoring-guide",level:2},{value:"1. Step-by-Step Migration",id:"1-step-by-step-migration",level:3},{value:"2. Refactoring Utilities",id:"2-refactoring-utilities",level:3},{value:"Debugging and Troubleshooting",id:"debugging-and-troubleshooting",level:2},{value:"1. Optional Debugging Techniques",id:"1-optional-debugging-techniques",level:3},{value:"2. Common Debugging Scenarios",id:"2-common-debugging-scenarios",level:3},{value:"Integration with Testing Frameworks",id:"integration-with-testing-frameworks",level:2},{value:"1. AssertJ Optional Assertions",id:"1-assertj-optional-assertions",level:3},{value:"2. Mockito with Optional",id:"2-mockito-with-optional",level:3},{value:"3. Test Data Builders with Optional",id:"3-test-data-builders-with-optional",level:3},{value:"Library Integrations",id:"library-integrations",level:2},{value:"1. Jackson JSON Serialization",id:"1-jackson-json-serialization",level:3},{value:"2. Spring Framework Integration",id:"2-spring-framework-integration",level:3},{value:"3. Hibernate/JPA Integration",id:"3-hibernatejpa-integration",level:3},{value:"Concurrency and Optional",id:"concurrency-and-optional",level:2},{value:"1. Thread-Safe Optional Operations",id:"1-thread-safe-optional-operations",level:3},{value:"2. CompletableFuture with Optional",id:"2-completablefuture-with-optional",level:3},{value:"Design Patterns Deep Dive",id:"design-patterns-deep-dive",level:2},{value:"1. Null Object Pattern with Optional",id:"1-null-object-pattern-with-optional",level:3},{value:"2. Command Pattern with Optional",id:"2-command-pattern-with-optional",level:3},{value:"Serialization and Persistence",id:"serialization-and-persistence",level:2},{value:"1. Custom Serialization Strategies",id:"1-custom-serialization-strategies",level:3},{value:"2. Configuration Management",id:"2-configuration-management",level:3},{value:"Summary and Quick Reference",id:"summary-and-quick-reference",level:2},{value:"Essential Patterns to Remember",id:"essential-patterns-to-remember",level:3},{value:"Best Practices Checklist",id:"best-practices-checklist",level:3},{value:"Performance Guidelines",id:"performance-guidelines",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"java-optional-class",children:"Java Optional Class"})}),"\n",(0,i.jsx)(n.p,{children:"A comprehensive guide to Java Optional class methods, theory, and usage patterns for modern Java development."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction-and-theory",children:"Introduction and Theory"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#creation-methods",children:"Creation Methods"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#presence-check-methods",children:"Presence Check Methods"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#value-retrieval-methods",children:"Value Retrieval Methods"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conditional-operations",children:"Conditional Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#transformation-methods",children:"Transformation Methods"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#filtering-and-predicates",children:"Filtering and Predicates"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#combination-and-chaining",children:"Combination and Chaining"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#common-anti-patterns",children:"Common Anti-Patterns"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#real-world-examples",children:"Real-World Examples"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"introduction-and-theory",children:"Introduction and Theory"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-optional",children:"What is Optional?"}),"\n",(0,i.jsxs)(n.p,{children:["Java Optional is a container object introduced in Java 8 that may or may not contain a non-null value. It's designed to represent optional values and help eliminate ",(0,i.jsx)(n.code,{children:"NullPointerException"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"why-use-optional",children:"Why Use Optional?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null Safety"}),": Explicitly handles the possibility of null values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Readability"}),": Makes code intention clearer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Functional Style"}),": Enables functional programming patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Design"}),": Clearly communicates when a value might be absent"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-optional",children:"When to Use Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u2705 Good uses\npublic Optional<User> findUserById(Long id)\npublic Optional<String> getConfigValue(String key)\nOptional<String> result = processData();\n\n// \u274c Avoid these uses\nOptional<List<String>> list; // Use empty list instead\nvoid method(Optional<String> param); // Don't use in parameters\nOptional<String> field; // Don't use as class fields\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"creation-methods",children:"Creation Methods"}),"\n",(0,i.jsx)(n.h3,{id:"1-optionalempty",children:"1. Optional.empty()"}),"\n",(0,i.jsx)(n.p,{children:"Creates an empty Optional instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Optional<String> empty = Optional.empty();\nSystem.out.println(empty.isPresent()); // false\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-optionalofvalue",children:"2. Optional.of(value)"}),"\n",(0,i.jsx)(n.p,{children:"Creates Optional with non-null value (throws NPE if null):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'String value = "Hello";\nOptional<String> optional = Optional.of(value);\n\n// \u274c This throws NullPointerException\n// Optional<String> nullOptional = Optional.of(null);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-optionalofnullablevalue",children:"3. Optional.ofNullable(value)"}),"\n",(0,i.jsx)(n.p,{children:"Creates Optional that handles null values safely:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'String nullValue = null;\nString nonNullValue = "Hello";\n\nOptional<String> fromNull = Optional.ofNullable(nullValue);     // empty\nOptional<String> fromValue = Optional.ofNullable(nonNullValue); // contains "Hello"\n\nSystem.out.println(fromNull.isEmpty());    // true\nSystem.out.println(fromValue.isPresent()); // true\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(1) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"presence-check-methods",children:"Presence Check Methods"}),"\n",(0,i.jsx)(n.h3,{id:"1-ispresent",children:"1. isPresent()"}),"\n",(0,i.jsx)(n.p,{children:"Checks if value is present:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> optional = Optional.of("Hello");\nOptional<String> empty = Optional.empty();\n\nif (optional.isPresent()) {\n    System.out.println("Value exists: " + optional.get());\n}\n\nif (!empty.isPresent()) {\n    System.out.println("No value present");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-isempty-java-11",children:"2. isEmpty() (Java 11+)"}),"\n",(0,i.jsx)(n.p,{children:"Opposite of isPresent():"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> empty = Optional.empty();\nOptional<String> filled = Optional.of("Value");\n\nSystem.out.println(empty.isEmpty());  // true\nSystem.out.println(filled.isEmpty()); // false\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"value-retrieval-methods",children:"Value Retrieval Methods"}),"\n",(0,i.jsx)(n.h3,{id:"1-get",children:"1. get()"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves value (throws exception if empty):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> optional = Optional.of("Hello");\nString value = optional.get(); // "Hello"\n\n// \u274c Dangerous - throws NoSuchElementException\nOptional<String> empty = Optional.empty();\n// String badValue = empty.get(); // Exception!\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f Warning:"})," Avoid ",(0,i.jsx)(n.code,{children:"get()"})," without checking presence first!"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-orelsedefaultvalue",children:"2. orElse(defaultValue)"}),"\n",(0,i.jsx)(n.p,{children:"Returns value or default:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> optional = Optional.ofNullable(getName());\nString result = optional.orElse("Unknown");\n\n// Practical example\npublic String getUserDisplayName(User user) {\n    return Optional.ofNullable(user)\n            .map(User::getName)\n            .orElse("Anonymous User");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-orelsegetsupplier",children:"3. orElseGet(supplier)"}),"\n",(0,i.jsx)(n.p,{children:"Returns value or result of supplier function:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> optional = Optional.empty();\n\n// Supplier is only called if Optional is empty\nString result = optional.orElseGet(() -> {\n    System.out.println("Computing default value...");\n    return "Computed Default";\n});\n\n// Better performance for expensive operations\nString expensiveDefault = optional.orElseGet(this::computeExpensiveDefault);\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance Note:"})," Use ",(0,i.jsx)(n.code,{children:"orElseGet()"})," for expensive default computations!"]}),"\n",(0,i.jsx)(n.h3,{id:"4-orelsethrow",children:"4. orElseThrow()"}),"\n",(0,i.jsx)(n.p,{children:"Throws exception if empty:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Java 10+: Throws NoSuchElementException\nOptional<String> optional = Optional.empty();\n// String value = optional.orElseThrow(); // Exception!\n\n// Custom exception\nString value = optional.orElseThrow(() ->\n    new IllegalArgumentException("Value not found"));\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conditional-operations",children:"Conditional Operations"}),"\n",(0,i.jsx)(n.h3,{id:"1-ifpresentconsumer",children:"1. ifPresent(consumer)"}),"\n",(0,i.jsx)(n.p,{children:"Executes action if value is present:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<User> user = findUser(id);\n\nuser.ifPresent(u -> {\n    System.out.println("Found user: " + u.getName());\n    logUserAccess(u);\n});\n\n// Method reference style\nuser.ifPresent(this::processUser);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-ifpresentorelseconsumer-runnable-java-9",children:"2. ifPresentOrElse(consumer, runnable) (Java 9+)"}),"\n",(0,i.jsx)(n.p,{children:"Executes different actions based on presence:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<User> user = findUser(id);\n\nuser.ifPresentOrElse(\n    u -> System.out.println("User found: " + u.getName()),\n    () -> System.out.println("User not found")\n);\n\n// Practical example\nuser.ifPresentOrElse(\n    this::sendWelcomeEmail,\n    this::handleUserNotFound\n);\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"transformation-methods",children:"Transformation Methods"}),"\n",(0,i.jsx)(n.h3,{id:"1-mapmapper",children:"1. map(mapper)"}),"\n",(0,i.jsx)(n.p,{children:"Transforms the value if present:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> name = Optional.of("john doe");\n\nOptional<String> upperName = name.map(String::toUpperCase);\nOptional<Integer> nameLength = name.map(String::length);\n\n// Chaining transformations\nOptional<String> result = Optional.of("  hello world  ")\n    .map(String::trim)\n    .map(String::toUpperCase)\n    .map(s -> s.replace(" ", "_"));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-flatmapmapper",children:"2. flatMap(mapper)"}),"\n",(0,i.jsx)(n.p,{children:"Flattens nested Optionals:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class User {\n    private String name;\n    private Optional<Address> address;\n\n    public Optional<Address> getAddress() {\n        return address;\n    }\n}\n\npublic class Address {\n    private String street;\n\n    public Optional<String> getStreet() {\n        return Optional.ofNullable(street);\n    }\n}\n\n// Without flatMap (creates Optional<Optional<String>>)\nOptional<Optional<String>> nested = userOpt.map(user -> user.getAddress().map(Address::getStreet));\n\n// With flatMap (creates Optional<String>)\nOptional<String> street = userOpt\n    .flatMap(User::getAddress)\n    .flatMap(Address::getStreet);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-practical-transformation-examples",children:"3. Practical Transformation Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Parse string to integer safely\npublic Optional<Integer> parseInteger(String str) {\n    return Optional.ofNullable(str)\n        .filter(s -> s.matches("\\\\d+"))\n        .map(Integer::parseInt);\n}\n\n// Extract file extension\npublic Optional<String> getFileExtension(String filename) {\n    return Optional.ofNullable(filename)\n        .filter(f -> f.contains("."))\n        .map(f -> f.substring(f.lastIndexOf(".") + 1));\n}\n\n// Safe division\npublic Optional<Double> safeDivide(double a, double b) {\n    return b == 0 ? Optional.empty() : Optional.of(a / b);\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"filtering-and-predicates",children:"Filtering and Predicates"}),"\n",(0,i.jsx)(n.h3,{id:"1-filterpredicate",children:"1. filter(predicate)"}),"\n",(0,i.jsx)(n.p,{children:"Filters value based on condition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<Integer> number = Optional.of(42);\n\nOptional<Integer> evenNumber = number.filter(n -> n % 2 == 0);\nOptional<Integer> largeNumber = number.filter(n -> n > 100);\n\n// Chaining filters\nOptional<String> validEmail = Optional.of("user@example.com")\n    .filter(email -> email.contains("@"))\n    .filter(email -> email.length() > 5)\n    .filter(email -> !email.startsWith("."));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-complex-filtering-examples",children:"2. Complex Filtering Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class Product {\n    private String name;\n    private double price;\n    private boolean inStock;\n\n    // constructors, getters...\n}\n\npublic Optional<Product> findAffordableProduct(List<Product> products, double budget) {\n    return products.stream()\n        .filter(p -> p.getPrice() <= budget)\n        .filter(Product::isInStock)\n        .findFirst();\n}\n\n// Age validation\npublic Optional<Person> validateAge(Person person) {\n    return Optional.of(person)\n        .filter(p -> p.getAge() >= 18)\n        .filter(p -> p.getAge() <= 120);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"combination-and-chaining",children:"Combination and Chaining"}),"\n",(0,i.jsx)(n.h3,{id:"1-orsupplier-java-9",children:"1. or(supplier) (Java 9+)"}),"\n",(0,i.jsx)(n.p,{children:"Provides alternative Optional if current is empty:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Optional<String> primary = Optional.empty();\nOptional<String> secondary = Optional.of("backup");\n\nOptional<String> result = primary.or(() -> secondary);\n// Returns secondary since primary is empty\n\n// Chaining multiple alternatives\nOptional<String> config = getConfigFromFile()\n    .or(this::getConfigFromEnvironment)\n    .or(this::getDefaultConfig);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-stream-integration-java-9",children:"2. Stream Integration (Java 9+)"}),"\n",(0,i.jsx)(n.p,{children:"Convert Optional to Stream:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'List<Optional<String>> optionals = Arrays.asList(\n    Optional.of("Hello"),\n    Optional.empty(),\n    Optional.of("World")\n);\n\nList<String> values = optionals.stream()\n    .flatMap(Optional::stream)\n    .collect(Collectors.toList());\n// Result: ["Hello", "World"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-complex-chaining-examples",children:"3. Complex Chaining Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    public Optional<String> getUserEmailById(Long id) {\n        return findUser(id)\n            .filter(user -> user.isActive())\n            .map(User::getProfile)\n            .flatMap(Profile::getEmail)\n            .filter(email -> isValidEmail(email))\n            .map(String::toLowerCase);\n    }\n\n    public String getDisplayName(Long userId) {\n        return findUser(userId)\n            .map(User::getFullName)\n            .filter(name -> !name.trim().isEmpty())\n            .or(() -> findUser(userId).map(User::getUsername))\n            .orElse("Anonymous User");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-prefer-optional-in-return-types",children:"1. Prefer Optional in Return Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u2705 Good\npublic Optional<User> findUserByEmail(String email) {\n    // Implementation\n}\n\n// \u274c Avoid\npublic User findUserByEmail(String email) {\n    // May return null - unclear from signature\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-use-method-chaining",children:"2. Use Method Chaining"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// \u2705 Functional style\npublic String processUser(Long id) {\n    return findUser(id)\n        .filter(User::isActive)\n        .map(User::getName)\n        .map(String::toUpperCase)\n        .orElse("UNKNOWN");\n}\n\n// \u274c Imperative style\npublic String processUser(Long id) {\n    Optional<User> userOpt = findUser(id);\n    if (userOpt.isPresent()) {\n        User user = userOpt.get();\n        if (user.isActive()) {\n            String name = user.getName();\n            return name.toUpperCase();\n        }\n    }\n    return "UNKNOWN";\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-avoid-unnecessary-optional-creation",children:"3. Avoid Unnecessary Optional Creation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// \u2705 Good - return Optional directly from method that might not find value\npublic Optional<String> findConfigValue(String key) {\n    return configMap.containsKey(key) ?\n        Optional.of(configMap.get(key)) :\n        Optional.empty();\n}\n\n// \u274c Avoid - wrapping known values\nString knownValue = "Hello";\nOptional<String> unnecessary = Optional.of(knownValue);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-use-orelseget-for-expensive-defaults",children:"4. Use orElseGet for Expensive Defaults"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u2705 Lazy evaluation\nString result = optional.orElseGet(this::expensiveComputation);\n\n// \u274c Eager evaluation (always executes)\nString result = optional.orElse(expensiveComputation());\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-anti-patterns",children:"Common Anti-Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"1-dont-use-optionalget-without-checking",children:"1. Don't Use Optional.get() Without Checking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// \u274c Dangerous\nOptional<String> opt = Optional.empty();\nString value = opt.get(); // NoSuchElementException!\n\n// \u2705 Safe alternatives\nString value1 = opt.orElse("default");\nString value2 = opt.orElseThrow(() -> new CustomException("Value required"));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-dont-use-optional-as-method-parameters",children:"2. Don't Use Optional as Method Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u274c Avoid\npublic void processUser(Optional<User> userOpt) {\n    // Caller has to wrap value in Optional\n}\n\n// \u2705 Better\npublic void processUser(User user) {\n    if (user != null) {\n        // Handle user\n    }\n}\n\n// \u2705 Or use overloading\npublic void processUser(User user) { /* implementation */ }\npublic void processUserOptional() { /* no user case */ }\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-dont-use-optional-for-class-fields",children:"3. Don't Use Optional for Class Fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u274c Avoid\npublic class User {\n    private Optional<String> email; // Unnecessary overhead\n}\n\n// \u2705 Better\npublic class User {\n    private String email; // Can be null\n\n    public Optional<String> getEmail() {\n        return Optional.ofNullable(email);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-dont-use-optional-for-collections",children:"4. Don't Use Optional for Collections"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u274c Avoid\nOptional<List<String>> optionalList = Optional.of(Collections.emptyList());\n\n// \u2705 Better\nList<String> list = Collections.emptyList(); // Use empty collections\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,i.jsx)(n.h3,{id:"1-repository-pattern",children:"1. Repository Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class UserRepository {\n    private Map<Long, User> users = new HashMap<>();\n\n    public Optional<User> findById(Long id) {\n        return Optional.ofNullable(users.get(id));\n    }\n\n    public Optional<User> findByEmail(String email) {\n        return users.values().stream()\n            .filter(user -> email.equals(user.getEmail()))\n            .findFirst();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-service-layer-with-optional",children:"2. Service Layer with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class UserService {\n    private UserRepository userRepository;\n\n    public String getUserDisplayName(Long userId) {\n        return userRepository.findById(userId)\n            .map(User::getFirstName)\n            .filter(name -> !name.trim().isEmpty())\n            .orElseGet(() -> {\n                return userRepository.findById(userId)\n                    .map(User::getEmail)\n                    .map(email -> email.substring(0, email.indexOf('@')))\n                    .orElse(\"Anonymous\");\n            });\n    }\n\n    public Optional<String> getVerifiedEmail(Long userId) {\n        return userRepository.findById(userId)\n            .filter(User::isEmailVerified)\n            .map(User::getEmail);\n    }\n\n    public boolean updateUserProfile(Long userId, ProfileUpdateRequest request) {\n        return userRepository.findById(userId)\n            .filter(User::isActive)\n            .map(user -> {\n                user.updateProfile(request);\n                return userRepository.save(user);\n            })\n            .isPresent();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-configuration-management",children:"3. Configuration Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ConfigService {\n    private Properties properties;\n\n    public Optional<String> getStringProperty(String key) {\n        return Optional.ofNullable(properties.getProperty(key))\n            .filter(value -> !value.trim().isEmpty());\n    }\n\n    public Optional<Integer> getIntProperty(String key) {\n        return getStringProperty(key)\n            .flatMap(this::parseInteger);\n    }\n\n    public Optional<Boolean> getBooleanProperty(String key) {\n        return getStringProperty(key)\n            .filter(value -> "true".equalsIgnoreCase(value) || "false".equalsIgnoreCase(value))\n            .map(Boolean::parseBoolean);\n    }\n\n    private Optional<Integer> parseInteger(String value) {\n        try {\n            return Optional.of(Integer.parseInt(value));\n        } catch (NumberFormatException e) {\n            return Optional.empty();\n        }\n    }\n\n    // Fallback chain\n    public String getDatabaseUrl() {\n        return getStringProperty("db.url")\n            .or(() -> getStringProperty("database.url"))\n            .or(() -> getStringProperty("DATABASE_URL"))\n            .orElse("jdbc:h2:mem:testdb");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-api-response-handling",children:"4. API Response Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ApiService {\n\n    public Optional<ApiResponse> callExternalApi(String endpoint) {\n        try {\n            ApiResponse response = httpClient.get(endpoint);\n            return response.isSuccessful() ?\n                Optional.of(response) :\n                Optional.empty();\n        } catch (Exception e) {\n            logger.error("API call failed", e);\n            return Optional.empty();\n        }\n    }\n\n    public Optional<UserData> fetchUserData(String userId) {\n        return callExternalApi("/users/" + userId)\n            .filter(response -> response.getStatusCode() == 200)\n            .map(ApiResponse::getBody)\n            .flatMap(this::parseUserData);\n    }\n\n    private Optional<UserData> parseUserData(String json) {\n        try {\n            return Optional.of(objectMapper.readValue(json, UserData.class));\n        } catch (JsonProcessingException e) {\n            return Optional.empty();\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-validation-chains",children:"5. Validation Chains"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ValidationService {\n\n    public Optional<User> validateUser(User user) {\n        return Optional.of(user)\n            .filter(this::isValidEmail)\n            .filter(this::isValidAge)\n            .filter(this::isValidName);\n    }\n\n    public ValidationResult validateUserWithDetails(User user) {\n        List<String> errors = new ArrayList<>();\n\n        Optional<User> validUser = Optional.of(user)\n            .filter(u -> {\n                if (!isValidEmail(u)) {\n                    errors.add("Invalid email format");\n                    return false;\n                }\n                return true;\n            })\n            .filter(u -> {\n                if (!isValidAge(u)) {\n                    errors.add("Age must be between 13 and 120");\n                    return false;\n                }\n                return true;\n            });\n\n        return new ValidationResult(validUser.isPresent(), errors);\n    }\n\n    private boolean isValidEmail(User user) {\n        return Optional.ofNullable(user.getEmail())\n            .filter(email -> email.contains("@"))\n            .filter(email -> email.matches("^[^@]+@[^@]+\\\\.[^@]+$"))\n            .isPresent();\n    }\n\n    private boolean isValidAge(User user) {\n        return user.getAge() >= 13 && user.getAge() <= 120;\n    }\n\n    private boolean isValidName(User user) {\n        return Optional.ofNullable(user.getName())\n            .filter(name -> name.trim().length() >= 2)\n            .isPresent();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"1-optional-with-streams",children:"1. Optional with Streams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class DataProcessor {\n\n    public Optional<String> findFirstValidData(List<String> inputs) {\n        return inputs.stream()\n            .map(this::processData)\n            .filter(Optional::isPresent)\n            .map(Optional::get)\n            .findFirst();\n    }\n\n    // Better approach using flatMap\n    public Optional<String> findFirstValidDataBetter(List<String> inputs) {\n        return inputs.stream()\n            .map(this::processData)\n            .flatMap(Optional::stream) // Java 9+\n            .findFirst();\n    }\n\n    private Optional<String> processData(String input) {\n        return Optional.ofNullable(input)\n            .filter(s -> s.length() > 3)\n            .map(String::toUpperCase);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-builder-pattern-with-optional",children:"2. Builder Pattern with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class QueryBuilder {\n    private Optional<String> where = Optional.empty();\n    private Optional<String> orderBy = Optional.empty();\n    private Optional<Integer> limit = Optional.empty();\n\n    public QueryBuilder where(String condition) {\n        this.where = Optional.of(condition);\n        return this;\n    }\n\n    public QueryBuilder orderBy(String column) {\n        this.orderBy = Optional.of(column);\n        return this;\n    }\n\n    public QueryBuilder limit(int count) {\n        this.limit = Optional.of(count);\n        return this;\n    }\n\n    public String build() {\n        StringBuilder sql = new StringBuilder("SELECT * FROM users");\n\n        where.ifPresent(w -> sql.append(" WHERE ").append(w));\n        orderBy.ifPresent(o -> sql.append(" ORDER BY ").append(o));\n        limit.ifPresent(l -> sql.append(" LIMIT ").append(l));\n\n        return sql.toString();\n    }\n}\n\n// Usage\nString query = new QueryBuilder()\n    .where("age > 18")\n    .orderBy("name")\n    .limit(10)\n    .build();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-caching-with-optional",children:"3. Caching with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class CacheService {\n    private Map<String, String> cache = new ConcurrentHashMap<>();\n\n    public Optional<String> getCachedValue(String key) {\n        return Optional.ofNullable(cache.get(key));\n    }\n\n    public String getOrCompute(String key, Supplier<String> computation) {\n        return getCachedValue(key)\n            .orElseGet(() -> {\n                String computed = computation.get();\n                cache.put(key, computed);\n                return computed;\n            });\n    }\n\n    // With expiration\n    public Optional<String> getWithExpiration(String key, Duration maxAge) {\n        return getCachedValue(key + "_timestamp")\n            .flatMap(timestampStr -> parseTimestamp(timestampStr))\n            .filter(timestamp -> timestamp.plus(maxAge).isAfter(Instant.now()))\n            .flatMap(timestamp -> getCachedValue(key));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"memory-overhead",children:"Memory Overhead"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Optional has memory overhead - use judiciously\npublic class PerformanceTips {\n\n    // \u2705 Good for return types\n    public Optional<String> findUserName(Long id) {\n        return userRepository.findById(id).map(User::getName);\n    }\n\n    // \u274c Avoid for hot paths with primitives\n    // Optional<Integer> count; // Use int with special value instead\n\n    // \u2705 Use for complex objects where null is meaningful\n    private Optional<DatabaseConnection> connection;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"lazy-evaluation",children:"Lazy Evaluation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// \u2705 Lazy - only computed if needed\nString result = optional.orElseGet(this::expensiveOperation);\n\n// \u274c Eager - always computed\nString result = optional.orElse(expensiveOperation());\n\n// \u2705 Lazy chaining\nOptional<String> result = getData()\n    .filter(this::isValid)\n    .map(this::transform) // Only called if filter passes\n    .flatMap(this::process); // Only called if map succeeds\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"testing-with-optional",children:"Testing with Optional"}),"\n",(0,i.jsx)(n.h3,{id:"unit-testing-patterns",children:"Unit Testing Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testOptionalService() {\n    UserService service = new UserService();\n\n    // Test empty case\n    Optional<User> empty = service.findUser(999L);\n    assertThat(empty).isEmpty();\n\n    // Test present case\n    Optional<User> found = service.findUser(1L);\n    assertThat(found).isPresent();\n    assertThat(found.get().getName()).isEqualTo("John");\n\n    // Test transformation\n    Optional<String> email = service.findUser(1L)\n        .map(User::getEmail);\n    assertThat(email).hasValue("john@example.com");\n}\n\n// Custom assertions for better readability\npublic static class OptionalAssert {\n    public static <T> void assertPresent(Optional<T> optional) {\n        assertTrue("Optional should be present", optional.isPresent());\n    }\n\n    public static <T> void assertEmpty(Optional<T> optional) {\n        assertTrue("Optional should be empty", optional.isEmpty());\n    }\n\n    public static <T> void assertValue(Optional<T> optional, T expected) {\n        assertPresent(optional);\n        assertEquals(expected, optional.get());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"method-reference-summary",children:"Method Reference Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Returns"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Java Version"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"empty()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<T>"})}),(0,i.jsx)(n.td,{children:"Creates empty Optional"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"of(value)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<T>"})}),(0,i.jsx)(n.td,{children:"Creates Optional with non-null value"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ofNullable(value)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<T>"})}),(0,i.jsx)(n.td,{children:"Creates Optional, handles null"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isPresent()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:"Checks if value exists"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isEmpty()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsx)(n.td,{children:"Checks if value is absent"}),(0,i.jsx)(n.td,{children:"11"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"get()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T"})}),(0,i.jsx)(n.td,{children:"Gets value (throws if empty)"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orElse(other)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T"})}),(0,i.jsx)(n.td,{children:"Returns value or default"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orElseGet(supplier)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T"})}),(0,i.jsx)(n.td,{children:"Returns value or supplier result"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orElseThrow()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T"})}),(0,i.jsx)(n.td,{children:"Gets value or throws exception"}),(0,i.jsx)(n.td,{children:"10"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orElseThrow(supplier)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"T"})}),(0,i.jsx)(n.td,{children:"Gets value or throws custom exception"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ifPresent(consumer)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void"})}),(0,i.jsx)(n.td,{children:"Executes action if present"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ifPresentOrElse(consumer, runnable)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void"})}),(0,i.jsx)(n.td,{children:"Executes different actions"}),(0,i.jsx)(n.td,{children:"9"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"map(mapper)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<U>"})}),(0,i.jsx)(n.td,{children:"Transforms value if present"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"flatMap(mapper)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<U>"})}),(0,i.jsx)(n.td,{children:"Flattens nested Optionals"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"filter(predicate)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<T>"})}),(0,i.jsx)(n.td,{children:"Filters based on condition"}),(0,i.jsx)(n.td,{children:"8"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"or(supplier)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional<T>"})}),(0,i.jsx)(n.td,{children:"Alternative Optional if empty"}),(0,i.jsx)(n.td,{children:"9"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"stream()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Stream<T>"})}),(0,i.jsx)(n.td,{children:"Converts to Stream"}),(0,i.jsx)(n.td,{children:"9"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"complex-example-order-processing-system",children:"Complex Example: Order Processing System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class OrderProcessingService {\n\n    public Optional<Order> processOrder(OrderRequest request) {\n        return validateOrderRequest(request)\n            .flatMap(this::checkInventory)\n            .flatMap(this::calculatePricing)\n            .flatMap(this::applyDiscounts)\n            .flatMap(this::processPayment)\n            .map(this::createOrder);\n    }\n\n    private Optional<OrderRequest> validateOrderRequest(OrderRequest request) {\n        return Optional.of(request)\n            .filter(r -> r.getCustomerId() != null)\n            .filter(r -> r.getItems() != null && !r.getItems().isEmpty())\n            .filter(r -> r.getItems().stream().allMatch(this::isValidItem));\n    }\n\n    private Optional<OrderRequest> checkInventory(OrderRequest request) {\n        boolean allAvailable = request.getItems().stream()\n            .allMatch(item ->\n                inventoryService.getStock(item.getProductId())\n                    .map(stock -> stock >= item.getQuantity())\n                    .orElse(false)\n            );\n\n        return allAvailable ? Optional.of(request) : Optional.empty();\n    }\n\n    private Optional<PricedOrder> calculatePricing(OrderRequest request) {\n        return request.getItems().stream()\n            .map(this::calculateItemPrice)\n            .reduce(Optional.of(BigDecimal.ZERO), this::addOptionalPrices)\n            .map(total -> new PricedOrder(request, total));\n    }\n\n    private Optional<BigDecimal> addOptionalPrices(Optional<BigDecimal> acc, Optional<BigDecimal> price) {\n        return acc.flatMap(a -> price.map(p -> a.add(p)));\n    }\n\n    public String getOrderStatus(Long orderId) {\n        return orderRepository.findById(orderId)\n            .map(Order::getStatus)\n            .map(Status::getDisplayName)\n            .orElse("Order not found");\n    }\n\n    public Optional<String> getEstimatedDeliveryDate(Long orderId) {\n        return orderRepository.findById(orderId)\n            .filter(order -> order.getStatus() != Status.CANCELLED)\n            .map(Order::getShippingInfo)\n            .flatMap(ShippingInfo::getEstimatedDelivery)\n            .map(date -> date.format(DateTimeFormatter.ISO_LOCAL_DATE));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,i.jsx)(n.h3,{id:"1-avoid-boxingunboxing",children:"1. Avoid Boxing/Unboxing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// For primitives, consider specialized Optional classes\nOptionalInt intOpt = OptionalInt.of(42);\nOptionalLong longOpt = OptionalLong.of(100L);\nOptionalDouble doubleOpt = OptionalDouble.of(3.14);\n\n// Avoid unnecessary boxing\npublic OptionalInt findMaxValue(int[] array) {\n    return array.length == 0 ?\n        OptionalInt.empty() :\n        OptionalInt.of(Arrays.stream(array).max().orElse(0));\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-minimize-optional-creation",children:"2. Minimize Optional Creation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class PerformantService {\n\n    // \u2705 Return existing Optional from repository\n    public Optional<User> getUser(Long id) {\n        return userRepository.findById(id); // Already returns Optional\n    }\n\n    // \u274c Creating unnecessary Optionals\n    public Optional<User> getUserBad(Long id) {\n        User user = userRepository.findByIdRaw(id); // Returns User or null\n        return Optional.ofNullable(user); // Unnecessary creation\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"migration-strategies",children:"Migration Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"from-null-based-code",children:"From Null-Based Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Before: Null-based approach\npublic String processUserName(User user) {\n    if (user != null) {\n        String name = user.getName();\n        if (name != null && !name.trim().isEmpty()) {\n            return name.toUpperCase();\n        }\n    }\n    return "UNKNOWN";\n}\n\n// After: Optional approach\npublic String processUserName(User user) {\n    return Optional.ofNullable(user)\n        .map(User::getName)\n        .filter(name -> !name.trim().isEmpty())\n        .map(String::toUpperCase)\n        .orElse("UNKNOWN");\n}\n\n// Gradual migration - keep null checks for backward compatibility\npublic Optional<String> processUserNameSafe(User user) {\n    if (user == null) return Optional.empty();\n\n    return Optional.ofNullable(user.getName())\n        .filter(name -> !name.trim().isEmpty())\n        .map(String::toUpperCase);\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"exception-handling-with-optional",children:"Exception Handling with Optional"}),"\n",(0,i.jsx)(n.h3,{id:"1-safe-exception-handling",children:"1. Safe Exception Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class SafeOperations {\n\n    public Optional<Integer> safeParseInt(String str) {\n        try {\n            return Optional.of(Integer.parseInt(str));\n        } catch (NumberFormatException e) {\n            return Optional.empty();\n        }\n    }\n\n    public Optional<LocalDate> safeParseDate(String dateStr) {\n        try {\n            return Optional.of(LocalDate.parse(dateStr));\n        } catch (DateTimeParseException e) {\n            return Optional.empty();\n        }\n    }\n\n    public Optional<JsonNode> safeParseJson(String json) {\n        try {\n            return Optional.of(objectMapper.readTree(json));\n        } catch (JsonProcessingException e) {\n            logger.warn("Invalid JSON: {}", json);\n            return Optional.empty();\n        }\n    }\n\n    // Combining safe operations\n    public Optional<BigDecimal> calculateTax(String amountStr, String rateStr) {\n        return safeParseInt(amountStr)\n            .flatMap(amount -> safeParseInt(rateStr)\n                .map(rate -> BigDecimal.valueOf(amount * rate / 100.0)));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ResourceManager {\n\n    public Optional<String> readFileContent(String filename) {\n        return Optional.ofNullable(filename)\n            .filter(name -> Files.exists(Paths.get(name)))\n            .flatMap(this::safeReadFile);\n    }\n\n    private Optional<String> safeReadFile(String filename) {\n        try {\n            return Optional.of(Files.readString(Paths.get(filename)));\n        } catch (IOException e) {\n            logger.error("Failed to read file: {}", filename, e);\n            return Optional.empty();\n        }\n    }\n\n    public boolean saveToFile(String filename, String content) {\n        return Optional.ofNullable(content)\n            .filter(c -> !c.trim().isEmpty())\n            .map(c -> {\n                try {\n                    Files.writeString(Paths.get(filename), c);\n                    return true;\n                } catch (IOException e) {\n                    logger.error("Failed to write file: {}", filename, e);\n                    return false;\n                }\n            })\n            .orElse(false);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"design-patterns-with-optional",children:"Design Patterns with Optional"}),"\n",(0,i.jsx)(n.h3,{id:"1-factory-pattern",children:"1. Factory Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class UserFactory {\n\n    public static Optional<User> createUser(String email, String name, Integer age) {\n        return validateEmail(email)\n            .flatMap(validEmail -> validateName(name)\n                .flatMap(validName -> validateAge(age)\n                    .map(validAge -> new User(validEmail, validName, validAge))));\n    }\n\n    private static Optional<String> validateEmail(String email) {\n        return Optional.ofNullable(email)\n            .filter(e -> e.matches("^[^@]+@[^@]+\\\\.[^@]+$"));\n    }\n\n    private static Optional<String> validateName(String name) {\n        return Optional.ofNullable(name)\n            .filter(n -> n.trim().length() >= 2);\n    }\n\n    private static Optional<Integer> validateAge(Integer age) {\n        return Optional.ofNullable(age)\n            .filter(a -> a >= 0 && a <= 150);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-strategy-pattern",children:"2. Strategy Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class PaymentProcessor {\n    private Map<PaymentType, PaymentStrategy> strategies = new HashMap<>();\n\n    public Optional<PaymentResult> processPayment(PaymentRequest request) {\n        return Optional.ofNullable(request)\n            .map(PaymentRequest::getPaymentType)\n            .map(strategies::get)\n            .flatMap(strategy -> strategy.process(request));\n    }\n\n    public interface PaymentStrategy {\n        Optional<PaymentResult> process(PaymentRequest request);\n    }\n\n    public class CreditCardStrategy implements PaymentStrategy {\n        public Optional<PaymentResult> process(PaymentRequest request) {\n            return validateCreditCard(request)\n                .flatMap(this::chargeCard)\n                .map(this::createSuccessResult);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-chain-of-responsibility",children:"3. Chain of Responsibility"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class NotificationService {\n    private List<NotificationChannel> channels;\n\n    public boolean sendNotification(User user, String message) {\n        return channels.stream()\n            .map(channel -> channel.send(user, message))\n            .filter(Optional::isPresent)\n            .findFirst()\n            .isPresent();\n    }\n\n    public interface NotificationChannel {\n        Optional<NotificationResult> send(User user, String message);\n    }\n\n    public class EmailChannel implements NotificationChannel {\n        public Optional<NotificationResult> send(User user, String message) {\n            return Optional.ofNullable(user.getEmail())\n                .filter(this::isValidEmail)\n                .flatMap(email -> sendEmail(email, message));\n        }\n    }\n\n    public class SmsChannel implements NotificationChannel {\n        public Optional<NotificationResult> send(User user, String message) {\n            return Optional.ofNullable(user.getPhoneNumber())\n                .filter(this::isValidPhoneNumber)\n                .flatMap(phone -> sendSms(phone, message));\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"debugging-and-logging",children:"Debugging and Logging"}),"\n",(0,i.jsx)(n.h3,{id:"1-optional-friendly-logging",children:"1. Optional-Friendly Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class LoggingService {\n\n    public void logUserAction(Long userId, String action) {\n        userRepository.findById(userId)\n            .ifPresentOrElse(\n                user -> logger.info("User {} performed action: {}",\n                    user.getName(), action),\n                () -> logger.warn("Action attempted by unknown user ID: {}", userId)\n            );\n    }\n\n    public void debugOptionalChain(String input) {\n        logger.debug("Starting processing for input: {}", input);\n\n        Optional<String> result = Optional.ofNullable(input)\n            .filter(s -> {\n                boolean valid = s.length() > 3;\n                logger.debug("Length validation: {} -> {}", s.length(), valid);\n                return valid;\n            })\n            .map(s -> {\n                String upper = s.toUpperCase();\n                logger.debug("Uppercase transformation: {} -> {}", s, upper);\n                return upper;\n            })\n            .filter(s -> {\n                boolean isAlpha = s.matches("[A-Z]+");\n                logger.debug("Alpha validation: {} -> {}", s, isAlpha);\n                return isAlpha;\n            });\n\n        result.ifPresentOrElse(\n            value -> logger.info("Processing successful: {}", value),\n            () -> logger.warn("Processing failed for input: {}", input)\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-error-context-preservation",children:"2. Error Context Preservation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ErrorHandlingService {\n\n    public class ProcessingResult {\n        private final Optional<String> value;\n        private final List<String> errors;\n\n        public ProcessingResult(Optional<String> value, List<String> errors) {\n            this.value = value;\n            this.errors = errors;\n        }\n\n        // getters...\n    }\n\n    public ProcessingResult processWithErrorTracking(String input) {\n        List<String> errors = new ArrayList<>();\n\n        Optional<String> result = Optional.ofNullable(input)\n            .filter(s -> {\n                if (s.trim().isEmpty()) {\n                    errors.add("Input cannot be empty");\n                    return false;\n                }\n                return true;\n            })\n            .filter(s -> {\n                if (s.length() < 5) {\n                    errors.add("Input must be at least 5 characters");\n                    return false;\n                }\n                return true;\n            })\n            .map(s -> {\n                try {\n                    return s.toUpperCase();\n                } catch (Exception e) {\n                    errors.add("Failed to convert to uppercase: " + e.getMessage());\n                    return null;\n                }\n            })\n            .filter(Objects::nonNull);\n\n        return new ProcessingResult(result, errors);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-modern-java-features",children:"Integration with Modern Java Features"}),"\n",(0,i.jsx)(n.h3,{id:"1-records-and-optional-java-14",children:"1. Records and Optional (Java 14+)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public record UserProfile(\n    String name,\n    Optional<String> email,\n    Optional<LocalDate> birthDate,\n    Optional<String> phoneNumber\n) {\n    public String getDisplayName() {\n        return Optional.ofNullable(name)\n            .filter(n -> !n.trim().isEmpty())\n            .orElse("Anonymous");\n    }\n\n    public Optional<Integer> getAge() {\n        return birthDate\n            .map(date -> Period.between(date, LocalDate.now()).getYears())\n            .filter(age -> age >= 0);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-pattern-matching-java-17",children:"2. Pattern Matching (Java 17+)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ModernOptionalUsage {\n\n    public String processOptional(Optional<String> opt) {\n        return switch (opt.isEmpty()) {\n            case true -> "Empty optional";\n            case false -> "Value: " + opt.get();\n        };\n    }\n\n    // With sealed classes (Java 17+)\n    public sealed interface Result permits Success, Failure {}\n    public record Success(String value) implements Result {}\n    public record Failure(String error) implements Result {}\n\n    public Result processWithResult(String input) {\n        return Optional.ofNullable(input)\n            .filter(s -> !s.trim().isEmpty())\n            .map(s -> (Result) new Success(s.toUpperCase()))\n            .orElse(new Failure("Invalid input"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-virtual-threads-integration-java-21",children:"3. Virtual Threads Integration (Java 21+)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class AsyncOptionalService {\n\n    public CompletableFuture<Optional<User>> findUserAsync(Long id) {\n        return CompletableFuture.supplyAsync(() ->\n            userRepository.findById(id), virtualThreadExecutor);\n    }\n\n    public CompletableFuture<String> processUserAsync(Long id) {\n        return findUserAsync(id)\n            .thenCompose(userOpt ->\n                userOpt.map(this::enrichUserDataAsync)\n                    .orElse(CompletableFuture.completedFuture("User not found"))\n            );\n    }\n\n    private CompletableFuture<String> enrichUserDataAsync(User user) {\n        return CompletableFuture.supplyAsync(() ->\n            Optional.of(user)\n                .map(User::getName)\n                .map(String::toUpperCase)\n                .orElse("UNKNOWN")\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"1-comprehensive-test-examples",children:"1. Comprehensive Test Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\npublic class OptionalServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    @DisplayName("Should return user when found")\n    void shouldReturnUserWhenFound() {\n        // Given\n        User expectedUser = new User("John", "john@example.com");\n        when(userRepository.findById(1L)).thenReturn(Optional.of(expectedUser));\n\n        // When\n        Optional<User> result = userService.getUser(1L);\n\n        // Then\n        assertThat(result)\n            .isPresent()\n            .hasValueSatisfying(user -> {\n                assertThat(user.getName()).isEqualTo("John");\n                assertThat(user.getEmail()).isEqualTo("john@example.com");\n            });\n    }\n\n    @Test\n    @DisplayName("Should return empty when user not found")\n    void shouldReturnEmptyWhenUserNotFound() {\n        // Given\n        when(userRepository.findById(999L)).thenReturn(Optional.empty());\n\n        // When\n        Optional<User> result = userService.getUser(999L);\n\n        // Then\n        assertThat(result).isEmpty();\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {"", "   ", "a", "ab"})\n    @DisplayName("Should filter out invalid names")\n    void shouldFilterInvalidNames(String invalidName) {\n        // Given\n        User user = new User(invalidName, "email@test.com");\n\n        // When\n        Optional<String> result = userService.getValidatedName(user);\n\n        // Then\n        assertThat(result).isEmpty();\n    }\n\n    @Test\n    @DisplayName("Should chain transformations correctly")\n    void shouldChainTransformations() {\n        // Given\n        User user = new User("john doe", "john@example.com");\n        when(userRepository.findById(1L)).thenReturn(Optional.of(user));\n\n        // When\n        String result = userService.getFormattedUserName(1L);\n\n        // Then\n        assertThat(result).isEqualTo("JOHN DOE");\n\n        // Verify the chain works\n        verify(userRepository).findById(1L);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-property-based-testing",children:"2. Property-Based Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@TestPropertySource(properties = {\n    "junit.jupiter.testinstance.lifecycle.default = per_class"\n})\npublic class OptionalPropertyTest {\n\n    @Property\n    void optionalMapPreservesPresence(@ForAll Optional<@IntRange(min = 1, max = 100) Integer> opt) {\n        Optional<String> mapped = opt.map(Object::toString);\n        assertThat(mapped.isPresent()).isEqualTo(opt.isPresent());\n    }\n\n    @Property\n    void optionalOrElseIsIdempotent(@ForAll String defaultValue) {\n        Optional<String> empty = Optional.empty();\n        String result1 = empty.orElse(defaultValue);\n        String result2 = empty.orElse(defaultValue);\n        assertThat(result1).isEqualTo(result2);\n    }\n\n    @Property\n    void optionalFilterReducesOrMaintains(@ForAll Optional<@IntRange(min = 1, max = 100) Integer> opt) {\n        Optional<Integer> filtered = opt.filter(n -> n > 50);\n\n        if (filtered.isPresent()) {\n            assertThat(opt.isPresent()).isTrue();\n            assertThat(opt.get()).isGreaterThan(50);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"functional-programming-patterns",children:"Functional Programming Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"1-monadic-patterns",children:"1. Monadic Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class MonadicOptional {\n\n    // Functor: map preserves structure\n    public static <T, R> Optional<R> fmap(Optional<T> opt, Function<T, R> f) {\n        return opt.map(f);\n    }\n\n    // Monad: flatMap allows chaining\n    public static <T, R> Optional<R> bind(Optional<T> opt, Function<T, Optional<R>> f) {\n        return opt.flatMap(f);\n    }\n\n    // Applicative: apply function in Optional to value in Optional\n    public static <T, R> Optional<R> apply(Optional<Function<T, R>> optFunc, Optional<T> optValue) {\n        return optFunc.flatMap(func -> optValue.map(func));\n    }\n\n    // Lifting regular functions to work with Optional\n    public static <T, U, R> Function<Optional<T>, Function<Optional<U>, Optional<R>>>\n            lift2(BiFunction<T, U, R> func) {\n        return optT -> optU -> optT.flatMap(t -> optU.map(u -> func.apply(t, u)));\n    }\n\n    // Usage example\n    public Optional<String> combineNames(Optional<String> firstName, Optional<String> lastName) {\n        BiFunction<String, String, String> combiner = (f, l) -> f + " " + l;\n        return lift2(combiner).apply(firstName).apply(lastName);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-validation-chains",children:"2. Validation Chains"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class ValidationChain {\n\n    public static class ValidationError {\n        private final String field;\n        private final String message;\n\n        public ValidationError(String field, String message) {\n            this.field = field;\n            this.message = message;\n        }\n\n        // getters...\n    }\n\n    public class Validator<T> {\n        private final List<ValidationError> errors = new ArrayList<>();\n        private final Optional<T> value;\n\n        private Validator(T value) {\n            this.value = Optional.ofNullable(value);\n        }\n\n        public static <T> Validator<T> of(T value) {\n            return new Validator<>(value);\n        }\n\n        public Validator<T> validate(Predicate<T> condition, String field, String message) {\n            if (value.isPresent() && !condition.test(value.get())) {\n                errors.add(new ValidationError(field, message));\n            }\n            return this;\n        }\n\n        public <U> Validator<U> map(Function<T, U> mapper) {\n            return new Validator<>(value.map(mapper).orElse(null));\n        }\n\n        public Optional<T> get() {\n            return errors.isEmpty() ? value : Optional.empty();\n        }\n\n        public List<ValidationError> getErrors() {\n            return Collections.unmodifiableList(errors);\n        }\n    }\n\n    // Usage\n    public Optional<User> validateAndCreateUser(String name, String email, Integer age) {\n        return Validator.of(new User(name, email, age))\n            .validate(u -> u.getName() != null && u.getName().length() >= 2,\n                     "name", "Name must be at least 2 characters")\n            .validate(u -> u.getEmail() != null && u.getEmail().contains("@"),\n                     "email", "Email must be valid")\n            .validate(u -> u.getAge() != null && u.getAge() >= 18,\n                     "age", "Age must be 18 or older")\n            .get();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reactive-programming-integration",children:"Reactive Programming Integration"}),"\n",(0,i.jsx)(n.h3,{id:"1-optional-with-reactive-streams",children:"1. Optional with Reactive Streams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class ReactiveOptionalService {\n\n    // Convert Optional to Mono (Project Reactor)\n    public Mono<User> findUserReactive(Long id) {\n        return Mono.fromCallable(() -> userRepository.findById(id))\n            .flatMap(opt -> opt.map(Mono::just).orElse(Mono.empty()));\n    }\n\n    // Convert Optional to Maybe (RxJava)\n    public Maybe<User> findUserRx(Long id) {\n        return Maybe.fromCallable(() -> userRepository.findById(id))\n            .flatMap(opt -> opt.map(Maybe::just).orElse(Maybe.empty()));\n    }\n\n    // Processing streams of Optionals\n    public Flux<String> processUserNames(Flux<Long> userIds) {\n        return userIds\n            .flatMap(id -> findUserReactive(id))\n            .map(User::getName)\n            .filter(name -> !name.trim().isEmpty());\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"memory-and-performance-optimizations",children:"Memory and Performance Optimizations"}),"\n",(0,i.jsx)(n.h3,{id:"1-optional-caching",children:"1. Optional Caching"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class OptimizedService {\n    private final Map<String, Optional<String>> cache = new ConcurrentHashMap<>();\n\n    // Cache Optional results to avoid repeated empty checks\n    public Optional<String> getCachedValue(String key) {\n        return cache.computeIfAbsent(key, k ->\n            Optional.ofNullable(expensiveDataSource.getValue(k))\n        );\n    }\n\n    // Batch processing to reduce Optional creation\n    public Map<Long, Optional<User>> findUsersBatch(Set<Long> ids) {\n        Map<Long, User> found = userRepository.findByIds(ids);\n        return ids.stream()\n            .collect(Collectors.toMap(\n                Function.identity(),\n                id -> Optional.ofNullable(found.get(id))\n            ));\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-memory-efficient-patterns",children:"2. Memory-Efficient Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class MemoryEfficientOptional {\n\n    // Reuse empty instances\n    private static final Optional<String> EMPTY_STRING = Optional.empty();\n\n    public Optional<String> processString(String input) {\n        if (input == null || input.trim().isEmpty()) {\n            return EMPTY_STRING; // Reuse singleton\n        }\n        return Optional.of(input.trim());\n    }\n\n    // Avoid creating Optionals in hot paths\n    public boolean hasValidEmail(User user) {\n        String email = user.getEmail();\n        return email != null && email.contains("@") && email.length() > 5;\n    }\n\n    // Create Optional only when needed for API\n    public Optional<String> getValidEmail(User user) {\n        return hasValidEmail(user) ?\n            Optional.of(user.getEmail()) :\n            Optional.empty();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"advanced-use-cases",children:"Advanced Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"1-database-integration",children:"1. Database Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Repository\npublic class OptionalUserRepository {\n\n    @Query("SELECT u FROM User u WHERE u.email = :email")\n    Optional<User> findByEmail(@Param("email") String email);\n\n    @Query("SELECT u FROM User u WHERE u.isActive = true AND u.lastLogin > :since")\n    List<User> findActiveUsersSince(@Param("since") LocalDateTime since);\n\n    // Custom query with Optional result\n    public Optional<UserStats> getUserStats(Long userId) {\n        return findById(userId)\n            .map(user -> UserStats.builder()\n                .userId(user.getId())\n                .loginCount(getLoginCount(user))\n                .lastActivity(user.getLastActivity())\n                .build());\n    }\n\n    // Conditional updates\n    public boolean updateUserEmail(Long userId, String newEmail) {\n        return findById(userId)\n            .filter(User::isActive)\n            .filter(user -> isValidEmail(newEmail))\n            .map(user -> {\n                user.setEmail(newEmail);\n                user.setEmailVerified(false);\n                return save(user);\n            })\n            .isPresent();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-rest-api-controllers",children:"2. REST API Controllers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping("/{id}")\n    public ResponseEntity<UserDto> getUser(@PathVariable Long id) {\n        return userService.findUser(id)\n            .map(UserDto::from)\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n    }\n\n    @GetMapping("/{id}/profile")\n    public ResponseEntity<UserProfileDto> getUserProfile(@PathVariable Long id) {\n        return userService.findUser(id)\n            .filter(User::isActive)\n            .map(User::getProfile)\n            .filter(Objects::nonNull)\n            .map(UserProfileDto::from)\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n    }\n\n    @PostMapping("/{id}/activate")\n    public ResponseEntity<String> activateUser(@PathVariable Long id) {\n        return userService.findUser(id)\n            .filter(user -> !user.isActive())\n            .map(user -> {\n                user.setActive(true);\n                userService.save(user);\n                return ResponseEntity.ok("User activated successfully");\n            })\n            .orElse(ResponseEntity.badRequest().body("User not found or already active"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"comparison-with-other-languages",children:"Comparison with Other Languages"}),"\n",(0,i.jsx)(n.h3,{id:"1-optional-vs-nullable-types",children:"1. Optional vs Nullable Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Java Optional\npublic Optional<String> findValue(String key) {\n    return Optional.ofNullable(map.get(key));\n}\n\n// Kotlin nullable types (for reference)\n// fun findValue(key: String): String? = map[key]\n\n// C# nullable reference types (for reference)\n// public string? FindValue(string key) => map.TryGetValue(key, out var value) ? value : null;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-optional-vs-maybe-monad",children:"2. Optional vs Maybe Monad"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Java Optional (limited monad)\nOptional<String> result = Optional.of("hello")\n    .map(String::toUpperCase)\n    .filter(s -> s.length() > 3);\n\n// Haskell Maybe (for reference)\n// result = Just "hello" >>= return . toUpper >>= \\s -> if length s > 3 then Just s else Nothing\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-interview-tips",children:"Key Interview Tips"}),"\n",(0,i.jsx)(n.h3,{id:"1-common-interview-questions",children:"1. Common Interview Questions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class InterviewExamples {\n\n    // Q: Find first even number in a list\n    public Optional<Integer> findFirstEven(List<Integer> numbers) {\n        return numbers.stream()\n            .filter(n -> n % 2 == 0)\n            .findFirst();\n    }\n\n    // Q: Safe string parsing with default\n    public int parseIntWithDefault(String str, int defaultValue) {\n        return Optional.ofNullable(str)\n            .flatMap(s -> {\n                try {\n                    return Optional.of(Integer.parseInt(s));\n                } catch (NumberFormatException e) {\n                    return Optional.empty();\n                }\n            })\n            .orElse(defaultValue);\n    }\n\n    // Q: Chain multiple Optional operations\n    public Optional<String> processUserData(Long userId) {\n        return userRepository.findById(userId)\n            .filter(User::isActive)\n            .map(User::getProfile)\n            .flatMap(Profile::getBio)\n            .filter(bio -> bio.length() > 10)\n            .map(bio -> bio.substring(0, 50));\n    }\n\n    // Q: Handle nested Optional structures\n    public Optional<String> getNestedProperty(User user) {\n        return Optional.ofNullable(user)\n            .map(User::getAddress)\n            .flatMap(Address::getCountry)\n            .map(Country::getCode);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-performance-considerations",children:"2. Performance Considerations"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Time Complexity"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional.of()"})}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Lightweight wrapper"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Optional.empty()"})}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Singleton instance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isPresent()"})}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Simple null check"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"map()"})}),(0,i.jsx)(n.td,{children:"O(1) + O(f)"}),(0,i.jsx)(n.td,{children:"Where f is mapper function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"flatMap()"})}),(0,i.jsx)(n.td,{children:"O(1) + O(f)"}),(0,i.jsx)(n.td,{children:"Where f is mapper function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"filter()"})}),(0,i.jsx)(n.td,{children:"O(1) + O(p)"}),(0,i.jsx)(n.td,{children:"Where p is predicate function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orElse()"})}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Always evaluates default"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orElseGet()"})}),(0,i.jsx)(n.td,{children:"O(1) + O(s)"}),(0,i.jsx)(n.td,{children:"Lazy evaluation of supplier"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"complete-example-e-commerce-order-system",children:"Complete Example: E-commerce Order System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class EcommerceOrderService {\n\n    public class OrderResult {\n        private final Optional<Order> order;\n        private final List<String> warnings;\n        private final Optional<String> errorMessage;\n\n        // constructors, getters...\n    }\n\n    public OrderResult createOrder(OrderRequest request) {\n        List<String> warnings = new ArrayList<>();\n\n        Optional<Order> order = validateRequest(request)\n            .flatMap(this::checkInventory)\n            .flatMap(req -> applyDiscounts(req, warnings))\n            .flatMap(this::calculateShipping)\n            .flatMap(this::processPayment)\n            .map(this::createOrderEntity);\n\n        String errorMessage = order.isEmpty() ? "Order creation failed" : null;\n\n        return new OrderResult(order, warnings, Optional.ofNullable(errorMessage));\n    }\n\n    private Optional<OrderRequest> validateRequest(OrderRequest request) {\n        return Optional.ofNullable(request)\n            .filter(req -> req.getCustomerId() != null)\n            .filter(req -> req.getItems() != null && !req.getItems().isEmpty())\n            .filter(req -> req.getItems().stream()\n                .allMatch(item -> item.getQuantity() > 0 && item.getProductId() != null));\n    }\n\n    private Optional<OrderRequest> checkInventory(OrderRequest request) {\n        boolean allAvailable = request.getItems().stream()\n            .allMatch(item ->\n                inventoryService.getAvailableStock(item.getProductId())\n                    .map(stock -> stock >= item.getQuantity())\n                    .orElse(false));\n\n        return allAvailable ? Optional.of(request) : Optional.empty();\n    }\n\n    private Optional<OrderRequest> applyDiscounts(OrderRequest request, List<String> warnings) {\n        return Optional.of(request)\n            .map(req -> {\n                discountService.getApplicableDiscount(req.getCustomerId())\n                    .ifPresentOrElse(\n                        discount -> {\n                            req.applyDiscount(discount);\n                            warnings.add("Discount applied: " + discount.getDescription());\n                        },\n                        () -> warnings.add("No applicable discounts found")\n                    );\n                return req;\n            });\n    }\n\n    public Optional<OrderSummary> getOrderSummary(Long orderId) {\n        return orderRepository.findById(orderId)\n            .map(order -> OrderSummary.builder()\n                .orderId(order.getId())\n                .status(order.getStatus())\n                .total(order.getTotal())\n                .estimatedDelivery(order.getShippingInfo()\n                    .flatMap(ShippingInfo::getEstimatedDelivery))\n                .trackingNumber(order.getShippingInfo()\n                    .flatMap(ShippingInfo::getTrackingNumber))\n                .build());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"migration-and-refactoring-guide",children:"Migration and Refactoring Guide"}),"\n",(0,i.jsx)(n.h3,{id:"1-step-by-step-migration",children:"1. Step-by-Step Migration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Step 1: Original null-based code\npublic String getUpperCaseName(User user) {\n    if (user != null) {\n        String name = user.getName();\n        if (name != null && !name.trim().isEmpty()) {\n            return name.toUpperCase();\n        }\n    }\n    return "UNKNOWN";\n}\n\n// Step 2: Introduce Optional gradually\npublic String getUpperCaseName(User user) {\n    return Optional.ofNullable(user)\n        .map(User::getName)\n        .filter(name -> name != null && !name.trim().isEmpty())\n        .map(String::toUpperCase)\n        .orElse("UNKNOWN");\n}\n\n// Step 3: Full Optional integration\npublic Optional<String> getUpperCaseNameOptional(Optional<User> userOpt) {\n    return userOpt\n        .map(User::getName)\n        .filter(name -> !name.trim().isEmpty())\n        .map(String::toUpperCase);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-refactoring-utilities",children:"2. Refactoring Utilities"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class RefactoringUtils {\n\n    // Helper to gradually introduce Optional\n    public static <T> Optional<T> nullable(T value) {\n        return Optional.ofNullable(value);\n    }\n\n    // Convert existing null checks\n    public static <T> Predicate<T> nonNull() {\n        return Objects::nonNull;\n    }\n\n    // Safe getter conversion\n    public static <T, R> Function<T, Optional<R>> safeGetter(Function<T, R> getter) {\n        return obj -> {\n            try {\n                return Optional.ofNullable(getter.apply(obj));\n            } catch (Exception e) {\n                return Optional.empty();\n            }\n        };\n    }\n\n    // Usage example\n    Function<User, Optional<String>> safeEmailGetter = safeGetter(User::getEmail);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"debugging-and-troubleshooting",children:"Debugging and Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"1-optional-debugging-techniques",children:"1. Optional Debugging Techniques"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class OptionalDebugging {\n\n    // Add debugging to Optional chains\n    public Optional<String> debugChain(String input) {\n        return Optional.ofNullable(input)\n            .peek(s -> System.out.println("Input: " + s))\n            .filter(s -> s.length() > 3)\n            .peek(s -> System.out.println("After length filter: " + s))\n            .map(String::toUpperCase)\n            .peek(s -> System.out.println("After uppercase: " + s))\n            .filter(s -> s.contains("VALID"))\n            .peek(s -> System.out.println("Final result: " + s));\n    }\n\n    // Custom peek method for Optional (Java 8 compatible)\n    public static <T> Optional<T> peek(Optional<T> opt, Consumer<T> action) {\n        opt.ifPresent(action);\n        return opt;\n    }\n\n    // Usage\n    public Optional<User> findAndLogUser(Long id) {\n        return peek(userRepository.findById(id),\n            user -> logger.debug("Found user: {}", user.getName()));\n    }\n\n    // Conditional debugging\n    public Optional<String> processWithConditionalLogging(String input, boolean debug) {\n        Optional<String> result = Optional.ofNullable(input)\n            .filter(s -> !s.trim().isEmpty())\n            .map(String::toUpperCase);\n\n        if (debug) {\n            result.ifPresentOrElse(\n                value -> logger.debug("Processing successful: {}", value),\n                () -> logger.debug("Processing failed for input: {}", input)\n            );\n        }\n\n        return result;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-common-debugging-scenarios",children:"2. Common Debugging Scenarios"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class DebuggingScenarios {\n\n    // Debug why Optional chain returns empty\n    public Optional<String> debugEmptyChain(User user) {\n        System.out.println("Starting with user: " + (user != null ? user.getName() : "null"));\n\n        return Optional.ofNullable(user)\n            .peek(u -> System.out.println("User is present: " + u.getName()))\n            .filter(u -> {\n                boolean active = u.isActive();\n                System.out.println("User active check: " + active);\n                return active;\n            })\n            .map(u -> {\n                String email = u.getEmail();\n                System.out.println("User email: " + email);\n                return email;\n            })\n            .filter(email -> {\n                boolean valid = email != null && email.contains("@");\n                System.out.println("Email validation: " + valid);\n                return valid;\n            });\n    }\n\n    // Track Optional transformations\n    public class OptionalTracker<T> {\n        private final Optional<T> optional;\n        private final List<String> operations;\n\n        private OptionalTracker(Optional<T> optional) {\n            this.optional = optional;\n            this.operations = new ArrayList<>();\n        }\n\n        public static <T> OptionalTracker<T> of(Optional<T> optional) {\n            OptionalTracker<T> tracker = new OptionalTracker<>(optional);\n            tracker.operations.add("Initial: " + optional.isPresent());\n            return tracker;\n        }\n\n        public <R> OptionalTracker<R> map(Function<T, R> mapper, String description) {\n            Optional<R> result = optional.map(mapper);\n            operations.add("Map (" + description + "): " + result.isPresent());\n            return new OptionalTracker<>(result);\n        }\n\n        public OptionalTracker<T> filter(Predicate<T> predicate, String description) {\n            Optional<T> result = optional.filter(predicate);\n            operations.add("Filter (" + description + "): " + result.isPresent());\n            return new OptionalTracker<>(result);\n        }\n\n        public Optional<T> get() {\n            operations.forEach(System.out::println);\n            return optional;\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-testing-frameworks",children:"Integration with Testing Frameworks"}),"\n",(0,i.jsx)(n.h3,{id:"1-assertj-optional-assertions",children:"1. AssertJ Optional Assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testWithAssertJ() {\n    Optional<String> result = service.processData("input");\n\n    // Rich Optional assertions\n    assertThat(result)\n        .isPresent()\n        .hasValueSatisfying(value -> {\n            assertThat(value).startsWith("PROCESSED");\n            assertThat(value).hasSize(15);\n        });\n\n    // Testing empty Optionals\n    Optional<String> empty = service.processData(null);\n    assertThat(empty).isEmpty();\n\n    // Testing Optional chains\n    Optional<Integer> number = Optional.of("123")\n        .map(Integer::parseInt);\n    assertThat(number).hasValue(123);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-mockito-with-optional",children:"2. Mockito with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testMockingOptionalReturns() {\n    // Mock repository returning Optional\n    when(userRepository.findById(1L))\n        .thenReturn(Optional.of(new User("John")));\n    when(userRepository.findById(999L))\n        .thenReturn(Optional.empty());\n\n    // Test service behavior\n    String result1 = userService.getUserName(1L);\n    assertThat(result1).isEqualTo("JOHN");\n\n    String result2 = userService.getUserName(999L);\n    assertThat(result2).isEqualTo("UNKNOWN");\n\n    // Verify Optional methods were called\n    verify(userRepository, times(2)).findById(any());\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-test-data-builders-with-optional",children:"3. Test Data Builders with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class UserTestDataBuilder {\n    private String name = "Test User";\n    private Optional<String> email = Optional.empty();\n    private Optional<Integer> age = Optional.empty();\n\n    public UserTestDataBuilder withEmail(String email) {\n        this.email = Optional.ofNullable(email);\n        return this;\n    }\n\n    public UserTestDataBuilder withAge(Integer age) {\n        this.age = Optional.ofNullable(age);\n        return this;\n    }\n\n    public UserTestDataBuilder withoutEmail() {\n        this.email = Optional.empty();\n        return this;\n    }\n\n    public User build() {\n        User user = new User(name);\n        email.ifPresent(user::setEmail);\n        age.ifPresent(user::setAge);\n        return user;\n    }\n\n    // Usage in tests\n    @Test\n    public void testUserWithOptionalData() {\n        User userWithEmail = new UserTestDataBuilder()\n            .withEmail("test@example.com")\n            .build();\n\n        User userWithoutEmail = new UserTestDataBuilder()\n            .withoutEmail()\n            .build();\n\n        // Test both scenarios\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"library-integrations",children:"Library Integrations"}),"\n",(0,i.jsx)(n.h3,{id:"1-jackson-json-serialization",children:"1. Jackson JSON Serialization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class User {\n    private String name;\n\n    @JsonProperty\n    @JsonInclude(JsonInclude.Include.NON_ABSENT)\n    private Optional<String> email = Optional.empty();\n\n    @JsonProperty\n    @JsonInclude(JsonInclude.Include.NON_ABSENT)\n    private Optional<LocalDate> birthDate = Optional.empty();\n\n    // Custom serializer for Optional\n    @JsonSerialize(using = OptionalSerializer.class)\n    @JsonDeserialize(using = OptionalDeserializer.class)\n    private Optional<Address> address = Optional.empty();\n}\n\npublic class OptionalSerializer extends JsonSerializer<Optional<?>> {\n    @Override\n    public void serialize(Optional<?> value, JsonGenerator gen, SerializerProvider serializers)\n            throws IOException {\n        if (value.isPresent()) {\n            gen.writeObject(value.get());\n        } else {\n            gen.writeNull();\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-spring-framework-integration",children:"2. Spring Framework Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class SpringOptionalService {\n\n    // Spring Data JPA automatically supports Optional\n    @Autowired\n    private UserRepository userRepository; // returns Optional<User>\n\n    // Cache with Optional\n    @Cacheable(value = "users", unless = "#result.isEmpty()")\n    public Optional<User> getCachedUser(Long id) {\n        return userRepository.findById(id);\n    }\n\n    // Conditional bean creation\n    @Bean\n    @ConditionalOnProperty(name = "feature.advanced", havingValue = "true")\n    public Optional<AdvancedService> advancedService() {\n        return Optional.of(new AdvancedServiceImpl());\n    }\n\n    // Configuration properties with Optional\n    @ConfigurationProperties(prefix = "app")\n    public class AppConfig {\n        private Optional<String> apiKey = Optional.empty();\n        private Optional<Duration> timeout = Optional.empty();\n\n        // getters and setters...\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-hibernatejpa-integration",children:"3. Hibernate/JPA Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Entity\npublic class UserEntity {\n    @Id\n    private Long id;\n\n    @Column(nullable = false)\n    private String name;\n\n    @Column(nullable = true)\n    private String email;\n\n    // Don\'t store Optional as field, provide Optional getter\n    public Optional<String> getEmail() {\n        return Optional.ofNullable(email);\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    // Custom query methods\n    @NamedQuery(\n        name = "User.findByActiveEmail",\n        query = "SELECT u FROM UserEntity u WHERE u.email IS NOT NULL AND u.isActive = true"\n    )\n}\n\n@Repository\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\n\n    Optional<UserEntity> findByEmail(String email);\n\n    @Query("SELECT u FROM UserEntity u WHERE u.name = :name AND u.isActive = true")\n    Optional<UserEntity> findActiveUserByName(@Param("name") String name);\n\n    // Custom implementation\n    default Optional<UserEntity> findByEmailDomain(String domain) {\n        return findAll().stream()\n            .filter(user -> user.getEmail()\n                .map(email -> email.endsWith("@" + domain))\n                .orElse(false))\n            .findFirst();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"concurrency-and-optional",children:"Concurrency and Optional"}),"\n",(0,i.jsx)(n.h3,{id:"1-thread-safe-optional-operations",children:"1. Thread-Safe Optional Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class ConcurrentOptionalService {\n    private final ConcurrentMap<String, Optional<String>> cache = new ConcurrentHashMap<>();\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n\n    public Optional<String> getOrComputeThreadSafe(String key, Supplier<String> computation) {\n        // Double-checked locking with Optional\n        Optional<String> result = cache.get(key);\n        if (result != null) {\n            return result;\n        }\n\n        lock.writeLock().lock();\n        try {\n            result = cache.get(key);\n            if (result == null) {\n                String computed = computation.get();\n                result = Optional.ofNullable(computed);\n                cache.put(key, result);\n            }\n            return result;\n        } finally {\n            lock.writeLock().unlock();\n        }\n    }\n\n    // Atomic operations with Optional\n    private final AtomicReference<Optional<String>> currentValue =\n        new AtomicReference<>(Optional.empty());\n\n    public boolean updateIfBetter(String newValue, Comparator<String> comparator) {\n        return currentValue.updateAndGet(current ->\n            Optional.ofNullable(newValue)\n                .filter(nv -> current.map(cv -> comparator.compare(nv, cv) > 0).orElse(true))\n                .or(() -> current)\n        ).isPresent();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-completablefuture-with-optional",children:"2. CompletableFuture with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class AsyncOptionalService {\n\n    public CompletableFuture<Optional<User>> findUserAsync(Long id) {\n        return CompletableFuture\n            .supplyAsync(() -> userRepository.findById(id))\n            .exceptionally(throwable -> {\n                logger.error("Error finding user: " + id, throwable);\n                return Optional.empty();\n            });\n    }\n\n    public CompletableFuture<String> processUserAsync(Long id) {\n        return findUserAsync(id)\n            .thenCompose(userOpt ->\n                userOpt.map(this::enrichUserAsync)\n                    .orElse(CompletableFuture.completedFuture("User not found"))\n            );\n    }\n\n    private CompletableFuture<String> enrichUserAsync(User user) {\n        return CompletableFuture\n            .supplyAsync(() ->\n                Optional.of(user)\n                    .map(User::getName)\n                    .filter(name -> !name.trim().isEmpty())\n                    .map(String::toUpperCase)\n                    .orElse("INVALID_USER")\n            );\n    }\n\n    // Parallel processing with Optional results\n    public CompletableFuture<List<String>> processUsersInParallel(List<Long> userIds) {\n        List<CompletableFuture<Optional<String>>> futures = userIds.stream()\n            .map(id -> findUserAsync(id).thenApply(opt -> opt.map(User::getName)))\n            .collect(Collectors.toList());\n\n        return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))\n            .thenApply(v -> futures.stream()\n                .map(CompletableFuture::join)\n                .flatMap(Optional::stream)\n                .collect(Collectors.toList()));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"design-patterns-deep-dive",children:"Design Patterns Deep Dive"}),"\n",(0,i.jsx)(n.h3,{id:"1-null-object-pattern-with-optional",children:"1. Null Object Pattern with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class NullObjectOptional {\n\n    public interface UserService {\n        String getName();\n        Optional<String> getEmail();\n        boolean isActive();\n    }\n\n    public class RealUser implements UserService {\n        private final User user;\n\n        public RealUser(User user) {\n            this.user = user;\n        }\n\n        @Override\n        public String getName() {\n            return user.getName();\n        }\n\n        @Override\n        public Optional<String> getEmail() {\n            return Optional.ofNullable(user.getEmail());\n        }\n\n        @Override\n        public boolean isActive() {\n            return user.isActive();\n        }\n    }\n\n    public class NullUser implements UserService {\n        private static final NullUser INSTANCE = new NullUser();\n\n        public static NullUser getInstance() {\n            return INSTANCE;\n        }\n\n        @Override\n        public String getName() {\n            return "Unknown User";\n        }\n\n        @Override\n        public Optional<String> getEmail() {\n            return Optional.empty();\n        }\n\n        @Override\n        public boolean isActive() {\n            return false;\n        }\n    }\n\n    public UserService getUser(Long id) {\n        return userRepository.findById(id)\n            .map(RealUser::new)\n            .map(UserService.class::cast)\n            .orElse(NullUser.getInstance());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-command-pattern-with-optional",children:"2. Command Pattern with Optional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class OptionalCommandPattern {\n\n    public interface Command<T> {\n        Optional<T> execute();\n    }\n\n    public class FindUserCommand implements Command<User> {\n        private final Long userId;\n        private final UserRepository repository;\n\n        public FindUserCommand(Long userId, UserRepository repository) {\n            this.userId = userId;\n            this.repository = repository;\n        }\n\n        @Override\n        public Optional<User> execute() {\n            return repository.findById(userId)\n                .filter(User::isActive);\n        }\n    }\n\n    public class CommandProcessor {\n        public <T> Optional<T> processCommand(Command<T> command) {\n            try {\n                return command.execute();\n            } catch (Exception e) {\n                logger.error("Command execution failed", e);\n                return Optional.empty();\n            }\n        }\n\n        public <T> CompletableFuture<Optional<T>> processCommandAsync(Command<T> command) {\n            return CompletableFuture.supplyAsync(() -> processCommand(command));\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"serialization-and-persistence",children:"Serialization and Persistence"}),"\n",(0,i.jsx)(n.h3,{id:"1-custom-serialization-strategies",children:"1. Custom Serialization Strategies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class OptionalSerialization {\n\n    // Custom JSON serialization\n    public static class OptionalStringSerializer extends JsonSerializer<Optional<String>> {\n        @Override\n        public void serialize(Optional<String> value, JsonGenerator gen, SerializerProvider serializers)\n                throws IOException {\n            value.ifPresentOrElse(gen::writeString, gen::writeNull);\n        }\n    }\n\n    public static class OptionalStringDeserializer extends JsonDeserializer<Optional<String>> {\n        @Override\n        public Optional<String> deserialize(JsonParser p, DeserializationContext ctxt)\n                throws IOException {\n            String value = p.getValueAsString();\n            return Optional.ofNullable(value);\n        }\n    }\n\n    // Database persistence helper\n    public class OptionalDatabaseMapper {\n\n        public void setOptionalString(PreparedStatement stmt, int index, Optional<String> value)\n                throws SQLException {\n            value.ifPresentOrElse(\n                v -> {\n                    try {\n                        stmt.setString(index, v);\n                    } catch (SQLException e) {\n                        throw new RuntimeException(e);\n                    }\n                },\n                () -> {\n                    try {\n                        stmt.setNull(index, Types.VARCHAR);\n                    } catch (SQLException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            );\n        }\n\n        public Optional<String> getOptionalString(ResultSet rs, String columnName)\n                throws SQLException {\n            String value = rs.getString(columnName);\n            return rs.wasNull() ? Optional.empty() : Optional.of(value);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-configuration-management",children:"2. Configuration Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Component\n@ConfigurationProperties(prefix = "app")\npublic class OptionalConfig {\n\n    private Optional<String> databaseUrl = Optional.empty();\n    private Optional<Integer> maxConnections = Optional.empty();\n    private Optional<Duration> connectionTimeout = Optional.empty();\n\n    // Getters and setters that handle Optional\n    public Optional<String> getDatabaseUrl() {\n        return databaseUrl;\n    }\n\n    public void setDatabaseUrl(String databaseUrl) {\n        this.databaseUrl = Optional.ofNullable(databaseUrl);\n    }\n\n    // Validation with Optional\n    @PostConstruct\n    public void validate() {\n        List<String> errors = new ArrayList<>();\n\n        if (databaseUrl.isEmpty()) {\n            errors.add("Database URL is required");\n        }\n\n        maxConnections\n            .filter(max -> max <= 0)\n            .ifPresent(max -> errors.add("Max connections must be positive"));\n\n        if (!errors.isEmpty()) {\n            throw new IllegalStateException("Configuration errors: " + String.join(", ", errors));\n        }\n    }\n\n    // Provide configured services\n    @Bean\n    public DataSource dataSource() {\n        return databaseUrl\n            .map(url -> {\n                HikariConfig config = new HikariConfig();\n                config.setJdbcUrl(url);\n                maxConnections.ifPresent(config::setMaximumPoolSize);\n                connectionTimeout.ifPresent(timeout ->\n                    config.setConnectionTimeout(timeout.toMillis()));\n                return new HikariDataSource(config);\n            })\n            .orElseThrow(() -> new IllegalStateException("Database URL not configured"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary-and-quick-reference",children:"Summary and Quick Reference"}),"\n",(0,i.jsx)(n.h3,{id:"essential-patterns-to-remember",children:"Essential Patterns to Remember"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Creation Patterns"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Optional.empty()                    // Empty Optional\nOptional.of(value)                  // Non-null value (throws if null)\nOptional.ofNullable(value)          // Handles null safely\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Transformation Patterns"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"opt.map(func)                       // Transform value\nopt.flatMap(func)                   // Flatten nested Optional\nopt.filter(predicate)               // Conditional filtering\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Terminal Operations"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"opt.orElse(defaultValue)            // Get value or default\nopt.orElseGet(supplier)             // Lazy default computation\nopt.ifPresent(consumer)             // Action if present\nopt.ifPresentOrElse(consumer, runnable) // Conditional actions\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Safety Patterns"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// \u2705 Safe extraction\nString result = optional.orElse("default");\n\n// \u274c Dangerous extraction\nString result = optional.get(); // May throw!\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"best-practices-checklist",children:"Best Practices Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Use Optional for return types that may not have a value"}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Prefer ",(0,i.jsx)(n.code,{children:"orElseGet()"})," for expensive default computations"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Chain operations using ",(0,i.jsx)(n.code,{children:"map()"}),", ",(0,i.jsx)(n.code,{children:"flatMap()"}),", and ",(0,i.jsx)(n.code,{children:"filter()"})]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Use ",(0,i.jsx)(n.code,{children:"ifPresent()"})," instead of ",(0,i.jsx)(n.code,{children:"isPresent()"})," + ",(0,i.jsx)(n.code,{children:"get()"})]}),"\n",(0,i.jsx)(n.li,{children:"\u274c Don't use Optional for method parameters"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Don't use Optional for class fields"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Don't use Optional for collections (use empty collections)"}),"\n",(0,i.jsxs)(n.li,{children:["\u274c Avoid ",(0,i.jsx)(n.code,{children:"get()"})," without presence checks"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-guidelines",children:"Performance Guidelines"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Scenario"}),(0,i.jsx)(n.th,{children:"Recommendation"}),(0,i.jsx)(n.th,{children:"Reason"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Hot paths"}),(0,i.jsx)(n.td,{children:"Minimize Optional creation"}),(0,i.jsx)(n.td,{children:"Reduce object allocation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Default values"}),(0,i.jsxs)(n.td,{children:["Use ",(0,i.jsx)(n.code,{children:"orElseGet()"})," for expensive operations"]}),(0,i.jsx)(n.td,{children:"Lazy evaluation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Primitive values"}),(0,i.jsxs)(n.td,{children:["Consider ",(0,i.jsx)(n.code,{children:"OptionalInt/Long/Double"})]}),(0,i.jsx)(n.td,{children:"Avoid boxing overhead"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Collections"}),(0,i.jsx)(n.td,{children:"Return empty collections, not Optional"}),(0,i.jsx)(n.td,{children:"Standard Java conventions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Caching"}),(0,i.jsx)(n.td,{children:"Cache Optional results when appropriate"}),(0,i.jsx)(n.td,{children:"Reduce repeated computations"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive guide covers all essential aspects of Java Optional for effective use in modern Java development, from basic operations to advanced patterns and real-world applications!"})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);