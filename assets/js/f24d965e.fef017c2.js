"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[696],{4202:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var s=i(4848),t=i(8453);const r={},a="System Design Notes",l={id:"Java/System Design Notes",title:"System Design Notes",description:"Table of Contents",source:"@site/docs/Java/System Design Notes.mdx",sourceDirName:"Java",slug:"/Java/System Design Notes",permalink:"/js.enigma/docs/Java/System Design Notes",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/System Design Notes.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Spring Boot Beginner Guide",permalink:"/js.enigma/docs/Java/Spring Boot"}},c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction to System Design",id:"introduction-to-system-design",level:2},{value:"Why System Design Matters",id:"why-system-design-matters",level:3},{value:"High-Level Design (HLD)",id:"high-level-design-hld",level:2},{value:"Definition",id:"definition",level:3},{value:"Key Components of HLD",id:"key-components-of-hld",level:3},{value:"1. System Architecture",id:"1-system-architecture",level:4},{value:"2. Core Components",id:"2-core-components",level:4},{value:"3. HLD Design Process",id:"3-hld-design-process",level:4},{value:"HLD Example: URL Shortener (like bit.ly)",id:"hld-example-url-shortener-like-bitly",level:3},{value:"Low-Level Design (LLD)",id:"low-level-design-lld",level:2},{value:"Definition",id:"definition-1",level:3},{value:"Key Components of LLD",id:"key-components-of-lld",level:3},{value:"1. Class Design",id:"1-class-design",level:4},{value:"2. Database Schema Design",id:"2-database-schema-design",level:4},{value:"3. API Design",id:"3-api-design",level:4},{value:"System Design Fundamentals",id:"system-design-fundamentals",level:2},{value:"1. Scalability Patterns",id:"1-scalability-patterns",level:3},{value:"Horizontal vs Vertical Scaling",id:"horizontal-vs-vertical-scaling",level:4},{value:"Load Balancing Strategies",id:"load-balancing-strategies",level:4},{value:"Database Scaling",id:"database-scaling",level:4},{value:"2. Consistency Patterns",id:"2-consistency-patterns",level:3},{value:"CAP Theorem",id:"cap-theorem",level:4},{value:"Consistency Models",id:"consistency-models",level:4},{value:"3. Caching Strategies",id:"3-caching-strategies",level:3},{value:"4. Database Design Patterns",id:"4-database-design-patterns",level:3},{value:"SQL vs NoSQL Decision Matrix",id:"sql-vs-nosql-decision-matrix",level:4},{value:"Database Sharding",id:"database-sharding",level:4},{value:"Interview Templates",id:"interview-templates",level:2},{value:"Template 1: System Design Interview Structure (45-60 minutes)",id:"template-1-system-design-interview-structure-45-60-minutes",level:3},{value:"Phase 1: Requirements Gathering (10 minutes)",id:"phase-1-requirements-gathering-10-minutes",level:4},{value:"Phase 2: Capacity Estimation (10 minutes)",id:"phase-2-capacity-estimation-10-minutes",level:4},{value:"Phase 3: High-Level Design (15 minutes)",id:"phase-3-high-level-design-15-minutes",level:4},{value:"Phase 4: Deep Dive - Database Design (10 minutes)",id:"phase-4-deep-dive---database-design-10-minutes",level:4},{value:"Phase 5: Scaling and Reliability (10 minutes)",id:"phase-5-scaling-and-reliability-10-minutes",level:4},{value:"Template 2: API Design Template",id:"template-2-api-design-template",level:3},{value:"Template 3: Class Design Template",id:"template-3-class-design-template",level:3},{value:"Common Design Patterns",id:"common-design-patterns",level:2},{value:"1. Microservices Patterns",id:"1-microservices-patterns",level:3},{value:"Service Decomposition",id:"service-decomposition",level:4},{value:"Communication Patterns",id:"communication-patterns",level:4},{value:"2. Data Management Patterns",id:"2-data-management-patterns",level:3},{value:"Database per Service",id:"database-per-service",level:4},{value:"CQRS (Command Query Responsibility Segregation)",id:"cqrs-command-query-responsibility-segregation",level:4},{value:"3. Resilience Patterns",id:"3-resilience-patterns",level:3},{value:"Circuit Breaker Pattern",id:"circuit-breaker-pattern",level:4},{value:"Bulkhead Pattern",id:"bulkhead-pattern",level:4},{value:"Case Studies",id:"case-studies",level:2},{value:"Case Study 1: Design a Chat Application (like WhatsApp)",id:"case-study-1-design-a-chat-application-like-whatsapp",level:3},{value:"Requirements Analysis",id:"requirements-analysis",level:4},{value:"High-Level Architecture",id:"high-level-architecture",level:4},{value:"Database Design",id:"database-design",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"system-design-notes",children:"System Design Notes"})}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#introduction-to-system-design",children:"Introduction to System Design"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#high-level-design-hld",children:"High-Level Design (HLD)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#low-level-design-lld",children:"Low-Level Design (LLD)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#system-design-fundamentals",children:"System Design Fundamentals"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#interview-templates",children:"Interview Templates"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#common-design-patterns",children:"Common Design Patterns"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#case-studies",children:"Case Studies"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#checklists-and-best-practices",children:"Checklists and Best Practices"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-system-design",children:"Introduction to System Design"}),"\n",(0,s.jsx)(n.p,{children:"System design is the process of defining the architecture, modules, interfaces, and data for a system to satisfy specified requirements. It involves two main levels:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High-Level Design (HLD)"}),": System architecture, major components, and their interactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Low-Level Design (LLD)"}),": Detailed design of individual components, classes, and algorithms"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"why-system-design-matters",children:"Why System Design Matters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalability"}),": Handle growing user base and data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reliability"}),": Ensure system uptime and fault tolerance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Optimize for speed and efficiency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintainability"}),": Easy to modify and extend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cost-effectiveness"}),": Optimal resource utilization"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"high-level-design-hld",children:"High-Level Design (HLD)"}),"\n",(0,s.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,s.jsx)(n.p,{children:"HLD provides a bird's-eye view of the entire system, focusing on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"System architecture and major components"}),"\n",(0,s.jsx)(n.li,{children:"Data flow between components"}),"\n",(0,s.jsx)(n.li,{children:"Technology stack decisions"}),"\n",(0,s.jsx)(n.li,{children:"Infrastructure requirements"}),"\n",(0,s.jsx)(n.li,{children:"Scalability and reliability strategies"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-components-of-hld",children:"Key Components of HLD"}),"\n",(0,s.jsx)(n.h4,{id:"1-system-architecture",children:"1. System Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client    \u2502\u2500\u2500\u2500\u25b6\u2502 Load Balancer\u2502\u2500\u2500\u2500\u25b6\u2502 Web Servers \u2502\n\u2502 (Web/Mobile)\u2502    \u2502              \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                                              \u25bc\n                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u2502     Application Servers        \u2502\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                                              \u25bc\n                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u2502        Database Layer          \u2502\n                          \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n                          \u2502  \u2502 Primary \u2502  \u2502   Cache     \u2502  \u2502\n                          \u2502  \u2502   DB    \u2502  \u2502  (Redis)    \u2502  \u2502\n                          \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h4,{id:"2-core-components",children:"2. Core Components"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Load Balancer"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Distributes incoming requests"}),"\n",(0,s.jsx)(n.li,{children:"Types: Layer 4 (TCP) vs Layer 7 (HTTP)"}),"\n",(0,s.jsx)(n.li,{children:"Algorithms: Round Robin, Weighted, Least Connections"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Web Servers"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handle HTTP requests"}),"\n",(0,s.jsx)(n.li,{children:"Serve static content"}),"\n",(0,s.jsx)(n.li,{children:"Examples: Nginx, Apache"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Application Servers"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Business logic execution"}),"\n",(0,s.jsx)(n.li,{children:"API endpoints"}),"\n",(0,s.jsx)(n.li,{children:"Examples: Node.js, Spring Boot, Django"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Database Layer"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Primary database (RDBMS/NoSQL)"}),"\n",(0,s.jsx)(n.li,{children:"Read replicas"}),"\n",(0,s.jsx)(n.li,{children:"Caching layer"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Message Queues"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Asynchronous processing"}),"\n",(0,s.jsx)(n.li,{children:"Decoupling services"}),"\n",(0,s.jsx)(n.li,{children:"Examples: RabbitMQ, Apache Kafka"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"3-hld-design-process",children:"3. HLD Design Process"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requirement Analysis"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Functional requirements"}),"\n",(0,s.jsx)(n.li,{children:"Non-functional requirements (NFRs)"}),"\n",(0,s.jsx)(n.li,{children:"Scale estimation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Capacity Estimation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Traffic patterns"}),"\n",(0,s.jsx)(n.li,{children:"Storage requirements"}),"\n",(0,s.jsx)(n.li,{children:"Bandwidth calculations"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Architecture Design"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Choose architectural pattern"}),"\n",(0,s.jsx)(n.li,{children:"Define major components"}),"\n",(0,s.jsx)(n.li,{children:"Plan data flow"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Technology Selection"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database choice"}),"\n",(0,s.jsx)(n.li,{children:"Programming languages"}),"\n",(0,s.jsx)(n.li,{children:"Infrastructure decisions"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hld-example-url-shortener-like-bitly",children:"HLD Example: URL Shortener (like bit.ly)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Requirements:\n- Shorten long URLs\n- Redirect short URLs to original\n- 100M URLs/day, 100:1 read/write ratio\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client    \u2502\u2500\u2500\u2500\u25b6\u2502Load Balancer \u2502\u2500\u2500\u2500\u25b6\u2502 Web Servers \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502                          \u25bc                          \u2502\n                   \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u2502\n                   \u2502              \u2502 App Servers     \u2502                    \u2502\n                   \u2502              \u2502 - URL encoding  \u2502                    \u2502\n                   \u2502              \u2502 - URL decoding  \u2502                    \u2502\n                   \u2502              \u2502 - Analytics     \u2502                    \u2502\n                   \u2502              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2502\n                   \u2502                          \u2502                          \u2502\n                   \u2502                          \u25bc                          \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n       \u2502     Cache       \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524    Database     \u2502   \u2502\n       \u2502   (Redis)       \u2502                         \u2502   - URL mappings\u2502   \u2502\n       \u2502 - Hot URLs      \u2502                         \u2502   - Analytics   \u2502   \u2502\n       \u2502 - TTL based     \u2502                         \u2502   - User data   \u2502   \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                                                                          \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"low-level-design-lld",children:"Low-Level Design (LLD)"}),"\n",(0,s.jsx)(n.h3,{id:"definition-1",children:"Definition"}),"\n",(0,s.jsx)(n.p,{children:"LLD provides detailed design of individual components, focusing on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Class diagrams and relationships"}),"\n",(0,s.jsx)(n.li,{children:"API designs"}),"\n",(0,s.jsx)(n.li,{children:"Database schemas"}),"\n",(0,s.jsx)(n.li,{children:"Algorithms and data structures"}),"\n",(0,s.jsx)(n.li,{children:"Interface definitions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-components-of-lld",children:"Key Components of LLD"}),"\n",(0,s.jsx)(n.h4,{id:"1-class-design",children:"1. Class Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// URL Shortener LLD Example\n\npublic class URLShortenerService {\n    private URLRepository urlRepository;\n    private CacheService cacheService;\n    private Base62Encoder encoder;\n\n    public ShortenURLResponse shortenURL(ShortenURLRequest request) {\n        // Validate URL\n        if (!isValidURL(request.getOriginalUrl())) {\n            throw new InvalidURLException("Invalid URL provided");\n        }\n\n        // Check if URL already exists\n        String existingShortCode = urlRepository.findShortCodeByOriginalUrl(\n            request.getOriginalUrl()\n        );\n\n        if (existingShortCode != null) {\n            return new ShortenURLResponse(existingShortCode);\n        }\n\n        // Generate unique short code\n        String shortCode = generateUniqueShortCode();\n\n        // Save mapping\n        URLMapping mapping = new URLMapping(\n            shortCode,\n            request.getOriginalUrl(),\n            request.getUserId(),\n            System.currentTimeMillis()\n        );\n\n        urlRepository.save(mapping);\n\n        return new ShortenURLResponse(shortCode);\n    }\n\n    public String expandURL(String shortCode) {\n        // Check cache first\n        String cachedUrl = cacheService.get(shortCode);\n        if (cachedUrl != null) {\n            return cachedUrl;\n        }\n\n        // Query database\n        URLMapping mapping = urlRepository.findByShortCode(shortCode);\n        if (mapping == null) {\n            throw new URLNotFoundException("Short URL not found");\n        }\n\n        // Cache the result\n        cacheService.put(shortCode, mapping.getOriginalUrl(), TTL_SECONDS);\n\n        return mapping.getOriginalUrl();\n    }\n\n    private String generateUniqueShortCode() {\n        // Implementation using counter or random generation\n        long id = counterService.getNextId();\n        return encoder.encode(id);\n    }\n}\n\n// Data Models\npublic class URLMapping {\n    private String shortCode;\n    private String originalUrl;\n    private String userId;\n    private long createdAt;\n    private long expiresAt;\n\n    // constructors, getters, setters\n}\n\npublic class ShortenURLRequest {\n    private String originalUrl;\n    private String userId;\n    private long ttl; // Time to live\n\n    // constructors, getters, setters\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"2-database-schema-design",children:"2. Database Schema Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- URL Mappings Table\nCREATE TABLE url_mappings (\n    short_code VARCHAR(7) PRIMARY KEY,\n    original_url TEXT NOT NULL,\n    user_id VARCHAR(36),\n    created_at BIGINT NOT NULL,\n    expires_at BIGINT,\n    click_count BIGINT DEFAULT 0,\n\n    INDEX idx_user_id (user_id),\n    INDEX idx_created_at (created_at)\n);\n\n-- Analytics Table\nCREATE TABLE url_analytics (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    short_code VARCHAR(7) NOT NULL,\n    ip_address VARCHAR(45),\n    user_agent TEXT,\n    referer TEXT,\n    country VARCHAR(2),\n    clicked_at BIGINT NOT NULL,\n\n    FOREIGN KEY (short_code) REFERENCES url_mappings(short_code),\n    INDEX idx_short_code_time (short_code, clicked_at)\n);\n\n-- Users Table\nCREATE TABLE users (\n    user_id VARCHAR(36) PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at BIGINT NOT NULL,\n    subscription_type ENUM('FREE', 'PREMIUM') DEFAULT 'FREE'\n);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"3-api-design",children:"3. API Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# OpenAPI Specification\nopenapi: 3.0.0\ninfo:\n  title: URL Shortener API\n  version: 1.0.0\n\npaths:\n  /api/v1/shorten:\n    post:\n      summary: Shorten a URL\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  type: string\n                  format: uri\n                customCode:\n                  type: string\n                  minLength: 4\n                  maxLength: 7\n                ttl:\n                  type: integer\n                  description: Time to live in seconds\n              required:\n                - url\n      responses:\n        '200':\n          description: URL shortened successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  shortCode:\n                    type: string\n                  shortUrl:\n                    type: string\n                  originalUrl:\n                    type: string\n        '400':\n          description: Invalid request\n        '409':\n          description: Custom code already exists\n\n  /api/v1/expand/{shortCode}:\n    get:\n      summary: Expand a short URL\n      parameters:\n        - name: shortCode\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '302':\n          description: Redirect to original URL\n          headers:\n            Location:\n              schema:\n                type: string\n        '404':\n          description: Short URL not found\n\n  /api/v1/analytics/{shortCode}:\n    get:\n      summary: Get URL analytics\n      parameters:\n        - name: shortCode\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Analytics data\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  totalClicks:\n                    type: integer\n                  clicksToday:\n                    type: integer\n                  topCountries:\n                    type: array\n                    items:\n                      type: object\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"system-design-fundamentals",children:"System Design Fundamentals"}),"\n",(0,s.jsx)(n.h3,{id:"1-scalability-patterns",children:"1. Scalability Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"horizontal-vs-vertical-scaling",children:"Horizontal vs Vertical Scaling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Vertical Scaling (Scale Up)     Horizontal Scaling (Scale Out)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502            \u2502     \u2502 \u2502     \u2502 \u2502     \u2502\n\u2502   More Power    \u2502     vs     \u2502 App \u2502 \u2502 App \u2502 \u2502 App \u2502\n\u2502   Same Machine  \u2502            \u2502     \u2502 \u2502     \u2502 \u2502     \u2502\n\u2502                 \u2502            \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h4,{id:"load-balancing-strategies",children:"Load Balancing Strategies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Round Robin"}),": Equal distribution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Weighted Round Robin"}),": Based on server capacity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Least Connections"}),": Route to server with fewest active connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IP Hash"}),": Route based on client IP hash"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Health Check"}),": Remove unhealthy servers"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"database-scaling",children:"Database Scaling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Read Replicas Pattern:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    Write    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Application \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 Primary DB  \u2502\n\u2502   Server   \u2502             \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                          \u2502\n       \u2502                    Replication\n       \u2502                          \u25bc\n       \u2502    Read         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Read Replicas     \u2502\n                         \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n                         \u2502 \u2502 DB1 \u2502 \u2502 DB2 \u2502     \u2502\n                         \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-consistency-patterns",children:"2. Consistency Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"cap-theorem",children:"CAP Theorem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"}),": All nodes see the same data simultaneously"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Availability"}),": System remains operational"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partition Tolerance"}),": System continues despite network failures"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"You can only guarantee 2 out of 3"})}),"\n",(0,s.jsx)(n.h4,{id:"consistency-models",children:"Consistency Models"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strong Consistency"}),": Immediate consistency across all nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventual Consistency"}),": System will become consistent over time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Weak Consistency"}),": No guarantees when all nodes will be consistent"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-caching-strategies",children:"3. Caching Strategies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Cache Patterns:\n\n1. Cache-Aside (Lazy Loading)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    Cache Miss   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    Query    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Application  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Cache  \u2502             \u2502 Database \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                              \u25b2                       \u25b2\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    Update Cache      \u2502       Return Data\n\n2. Write-Through\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Write      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Write    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Application  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Cache  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 Database \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3. Write-Behind (Write-Back)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     Write      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   Async Write \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Application  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Cache  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 Database \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-database-design-patterns",children:"4. Database Design Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"sql-vs-nosql-decision-matrix",children:"SQL vs NoSQL Decision Matrix"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Factor"}),(0,s.jsx)(n.th,{children:"SQL"}),(0,s.jsx)(n.th,{children:"NoSQL"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Schema"}),(0,s.jsx)(n.td,{children:"Fixed schema"}),(0,s.jsx)(n.td,{children:"Flexible schema"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ACID"}),(0,s.jsx)(n.td,{children:"Full ACID support"}),(0,s.jsx)(n.td,{children:"Eventual consistency"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Scaling"}),(0,s.jsx)(n.td,{children:"Vertical (primarily)"}),(0,s.jsx)(n.td,{children:"Horizontal"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Queries"}),(0,s.jsx)(n.td,{children:"Complex queries (JOIN)"}),(0,s.jsx)(n.td,{children:"Simple queries"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Use Cases"}),(0,s.jsx)(n.td,{children:"Financial, Traditional apps"}),(0,s.jsx)(n.td,{children:"Real-time, Big data"})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"database-sharding",children:"Database Sharding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Horizontal Partitioning (Sharding):\n\nUser Data Distribution by User ID:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Shard 1   \u2502  \u2502   Shard 2   \u2502  \u2502   Shard 3   \u2502\n\u2502 Users 0-33% \u2502  \u2502Users 34-66% \u2502  \u2502Users 67-100%\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSharding Key Selection:\n- Range-based: Partition by value ranges\n- Hash-based: Partition by hash function\n- Directory-based: Lookup service for shard location\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"interview-templates",children:"Interview Templates"}),"\n",(0,s.jsx)(n.h3,{id:"template-1-system-design-interview-structure-45-60-minutes",children:"Template 1: System Design Interview Structure (45-60 minutes)"}),"\n",(0,s.jsx)(n.h4,{id:"phase-1-requirements-gathering-10-minutes",children:"Phase 1: Requirements Gathering (10 minutes)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Questions to Ask:\n\u25a1 What are the core features needed?\n\u25a1 How many users are expected?\n\u25a1 What's the scale (reads vs writes)?\n\u25a1 What's the latency requirement?\n\u25a1 Do we need to handle failures?\n\u25a1 Any specific technology constraints?\n\nExample Clarification:\n\"For a URL shortener:\n- Do we need custom URLs?\n- Should URLs expire?\n- Do we need analytics?\n- What's the expected QPS?\"\n"})}),"\n",(0,s.jsx)(n.h4,{id:"phase-2-capacity-estimation-10-minutes",children:"Phase 2: Capacity Estimation (10 minutes)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Estimation Template:\n\u25a1 Daily Active Users (DAU)\n\u25a1 Queries Per Second (QPS)\n  - Write QPS = DAU * writes_per_user / seconds_per_day\n  - Read QPS = Write QPS * read_to_write_ratio\n\u25a1 Storage Requirements\n  - Data per record * records_per_day * retention_days\n\u25a1 Bandwidth Requirements\n  - QPS * average_request_size\n\nExample Calculation:\n"URL Shortener with 100M URLs/day:\n- Write QPS: 100M / 86400 = ~1200 QPS\n- Read QPS: 1200 * 100 = 120K QPS\n- Storage: 500 bytes * 100M * 365 = ~18TB/year"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"phase-3-high-level-design-15-minutes",children:"Phase 3: High-Level Design (15 minutes)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Design Steps:\n\u25a1 Draw basic architecture\n\u25a1 Identify major components\n\u25a1 Show data flow\n\u25a1 Discuss technology choices\n\nComponents Checklist:\n\u25a1 Load Balancer\n\u25a1 Web Servers\n\u25a1 Application Servers\n\u25a1 Database (Primary/Replica)\n\u25a1 Cache Layer\n\u25a1 Message Queues (if needed)\n\u25a1 CDN (if needed)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"phase-4-deep-dive---database-design-10-minutes",children:"Phase 4: Deep Dive - Database Design (10 minutes)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Database Design Template:\n\u25a1 Define main entities\n\u25a1 Create table schemas\n\u25a1 Define relationships\n\u25a1 Consider indexing strategy\n\u25a1 Discuss partitioning/sharding\n\nSchema Template:\ntable_name (\n  primary_key TYPE PRIMARY KEY,\n  column1 TYPE constraints,\n  column2 TYPE constraints,\n  created_at TIMESTAMP,\n  updated_at TIMESTAMP,\n\n  INDEX idx_name (columns),\n  FOREIGN KEY constraints\n)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"phase-5-scaling-and-reliability-10-minutes",children:"Phase 5: Scaling and Reliability (10 minutes)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Scaling Checklist:\n\u25a1 How to handle increased load?\n\u25a1 Database scaling strategy\n\u25a1 Caching strategy\n\u25a1 CDN usage\n\u25a1 Load balancing\n\nReliability Checklist:\n\u25a1 Single points of failure\n\u25a1 Data backup strategy\n\u25a1 Disaster recovery\n\u25a1 Monitoring and alerting\n\u25a1 Circuit breakers\n"})}),"\n",(0,s.jsx)(n.h3,{id:"template-2-api-design-template",children:"Template 2: API Design Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Standard API Design Template\npaths:\n  /api/v1/resource:\n    get:\n      summary: Get resources\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            default: 20\n            maximum: 100\n        - name: offset\n          in: query\n          schema:\n            type: integer\n            default: 0\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Resource'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalError'\n\n    post:\n      summary: Create resource\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CreateResourceRequest'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"template-3-class-design-template",children:"Template 3: Class Design Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Service Layer Template\n@Service\npublic class ResourceService {\n    private final ResourceRepository repository;\n    private final CacheService cacheService;\n    private final ValidationService validationService;\n\n    public ResourceService(\n        ResourceRepository repository,\n        CacheService cacheService,\n        ValidationService validationService\n    ) {\n        this.repository = repository;\n        this.cacheService = cacheService;\n        this.validationService = validationService;\n    }\n\n    public CreateResourceResponse createResource(CreateResourceRequest request) {\n        // 1. Validate input\n        validationService.validate(request);\n\n        // 2. Business logic\n        Resource resource = new Resource(\n            generateId(),\n            request.getName(),\n            request.getDescription(),\n            System.currentTimeMillis()\n        );\n\n        // 3. Persist\n        Resource savedResource = repository.save(resource);\n\n        // 4. Cache\n        cacheService.put(getCacheKey(savedResource.getId()), savedResource);\n\n        // 5. Return response\n        return new CreateResourceResponse(savedResource);\n    }\n\n    public GetResourceResponse getResource(String resourceId) {\n        // 1. Check cache\n        Resource cachedResource = cacheService.get(getCacheKey(resourceId));\n        if (cachedResource != null) {\n            return new GetResourceResponse(cachedResource);\n        }\n\n        // 2. Query database\n        Resource resource = repository.findById(resourceId)\n            .orElseThrow(() -> new ResourceNotFoundException(resourceId));\n\n        // 3. Cache result\n        cacheService.put(getCacheKey(resourceId), resource, TTL_SECONDS);\n\n        return new GetResourceResponse(resource);\n    }\n\n    private String getCacheKey(String resourceId) {\n        return "resource:" + resourceId;\n    }\n}\n\n// Repository Interface Template\npublic interface ResourceRepository {\n    Resource save(Resource resource);\n    Optional<Resource> findById(String id);\n    List<Resource> findByUserId(String userId, int limit, int offset);\n    void deleteById(String id);\n    boolean existsById(String id);\n}\n\n// Model Template\npublic class Resource {\n    private final String id;\n    private String name;\n    private String description;\n    private final String userId;\n    private final long createdAt;\n    private long updatedAt;\n\n    public Resource(String id, String name, String description, String userId, long createdAt) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.userId = userId;\n        this.createdAt = createdAt;\n        this.updatedAt = createdAt;\n    }\n\n    // Getters and business methods\n    public void updateDetails(String newName, String newDescription) {\n        this.name = newName;\n        this.description = newDescription;\n        this.updatedAt = System.currentTimeMillis();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"common-design-patterns",children:"Common Design Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"1-microservices-patterns",children:"1. Microservices Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"service-decomposition",children:"Service Decomposition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Decomposition Strategies:\n\u25a1 By Business Capability\n\u25a1 By Domain (DDD)\n\u25a1 By Transaction\n\u25a1 By Team Structure (Conway's Law)\n\nExample: E-commerce Decomposition\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    API Gateway                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502             \u2502             \u2502             \u2502             \u2502\n    \u25bc             \u25bc             \u25bc             \u25bc             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User    \u2502 \u2502Product  \u2502 \u2502Inventory\u2502 \u2502 Order   \u2502 \u2502Payment  \u2502\n\u2502Service  \u2502 \u2502Service  \u2502 \u2502Service  \u2502 \u2502Service  \u2502 \u2502Service  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502           \u2502           \u2502           \u2502           \u2502\n     \u25bc           \u25bc           \u25bc           \u25bc           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502User DB  \u2502 \u2502Product  \u2502 \u2502Inventory\u2502 \u2502Order DB \u2502 \u2502Payment  \u2502\n\u2502         \u2502 \u2502   DB    \u2502 \u2502   DB    \u2502 \u2502         \u2502 \u2502   DB    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h4,{id:"communication-patterns",children:"Communication Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1. Synchronous Communication\n   Client \u2500\u2500HTTP\u2500\u2500\u25b6 Service A \u2500\u2500HTTP\u2500\u2500\u25b6 Service B\n\n2. Asynchronous Communication\n   Service A \u2500\u2500Message\u2500\u2500\u25b6 Queue \u2500\u2500Message\u2500\u2500\u25b6 Service B\n\n3. Event-Driven Architecture\n   Service A \u2500\u2500Event\u2500\u2500\u25b6 Event Bus \u2500\u2500Event\u2500\u2500\u25b6 Multiple Services\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-data-management-patterns",children:"2. Data Management Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"database-per-service",children:"Database per Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "pattern": "Database per Service",\n  "benefits": [\n    "Service independence",\n    "Technology diversity",\n    "Fault isolation"\n  ],\n  "challenges": [\n    "Data consistency",\n    "Complex queries across services",\n    "Data duplication"\n  ],\n  "solutions": {\n    "consistency": "Saga Pattern",\n    "queries": "CQRS + Event Sourcing",\n    "duplication": "Eventual consistency"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"cqrs-command-query-responsibility-segregation",children:"CQRS (Command Query Responsibility Segregation)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Write Side (Commands):          Read Side (Queries):\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Command   \u2502                \u2502    Query    \u2502\n\u2502   Handler   \u2502                \u2502   Handler   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                               \u2502\n       \u25bc                               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    Events     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Write DB   \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 \u2502   Read DB   \u2502\n\u2502(Normalized) \u2502               \u2502(Denormalized)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-resilience-patterns",children:"3. Resilience Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"circuit-breaker-pattern",children:"Circuit Breaker Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class CircuitBreaker {\n    private State state = State.CLOSED;\n    private int failureCount = 0;\n    private long lastFailureTime = 0;\n\n    public <T> T execute(Supplier<T> operation) throws Exception {\n        if (state == State.OPEN) {\n            if (System.currentTimeMillis() - lastFailureTime > timeout) {\n                state = State.HALF_OPEN;\n            } else {\n                throw new CircuitBreakerOpenException();\n            }\n        }\n\n        try {\n            T result = operation.get();\n            onSuccess();\n            return result;\n        } catch (Exception e) {\n            onFailure();\n            throw e;\n        }\n    }\n\n    private void onSuccess() {\n        failureCount = 0;\n        state = State.CLOSED;\n    }\n\n    private void onFailure() {\n        failureCount++;\n        lastFailureTime = System.currentTimeMillis();\n\n        if (failureCount >= failureThreshold) {\n            state = State.OPEN;\n        }\n    }\n\n    enum State { CLOSED, OPEN, HALF_OPEN }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"bulkhead-pattern",children:"Bulkhead Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Resource Isolation:\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Application                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502Thread Pool 1\u2502Thread Pool 2\u2502Thread Pool 3\u2502\n\u2502 Critical    \u2502   Normal    \u2502    Batch    \u2502\n\u2502 Operations  \u2502 Operations  \u2502 Operations  \u2502\n\u2502     10      \u2502     20      \u2502     5       \u2502\n\u2502  threads    \u2502  threads    \u2502  threads    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"case-studies",children:"Case Studies"}),"\n",(0,s.jsx)(n.h3,{id:"case-study-1-design-a-chat-application-like-whatsapp",children:"Case Study 1: Design a Chat Application (like WhatsApp)"}),"\n",(0,s.jsx)(n.h4,{id:"requirements-analysis",children:"Requirements Analysis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Functional Requirements:\n\u25a1 Send/receive messages\n\u25a1 Group chats\n\u25a1 Online status\n\u25a1 Message history\n\u25a1 Push notifications\n\nNon-Functional Requirements:\n\u25a1 1B users, 50B messages/day\n\u25a1 Real-time messaging\n\u25a1 99.9% availability\n\u25a1 Support multimedia messages\n"})}),"\n",(0,s.jsx)(n.h4,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Mobile Apps  \u2502\u2500\u2500\u2500\u25b6\u2502 Load Balancer\u2502\u2500\u2500\u2500\u25b6\u2502   Gateway   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502   (Layer 7)  \u2502    \u2502   Service   \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                              \u2502\n                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u2502                   \u2502                   \u2502\n                          \u25bc                   \u25bc                   \u25bc\n                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502   Chat      \u2502   \u2502   User      \u2502   \u2502Notification \u2502\n                   \u2502  Service    \u2502   \u2502  Service    \u2502   \u2502  Service    \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502                   \u2502                   \u2502\n                          \u25bc                   \u25bc                   \u25bc\n                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502   Message   \u2502   \u2502    User     \u2502   \u2502   Device    \u2502\n                   \u2502 Database    \u2502   \u2502  Database   \u2502   \u2502  Database   \u2502\n                   \u2502(Cassandra)  \u2502   \u2502 (MongoDB)   \u2502   \u2502  (Redis)    \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nAdditional Components:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Message   \u2502   \u2502    Media    \u2502   \u2502   Push      \u2502\n\u2502    Queue    \u2502   \u2502   Storage   \u2502   \u2502 Notification\u2502\n\u2502  (Kafka)    \u2502   \u2502    (S3)     \u2502   \u2502   (FCM)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h4,{id:"database-design",children:"Database Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Messages Table (Cassandra-style)\nCREATE TABLE messages (\n    chat_id TEXT,\n    message_id TIMEUUID,\n    sender_id TEXT,\n    content TEXT,\n    message_type TEXT, -- text, image, video\n    created_at TIMESTAMP,\n\n    PRIMARY KEY (chat_id, message_id)\n) WITH CLUSTERING ORDER BY (message_id DESC);\n\n-- User Chats Table\nCREATE TABLE user_chats (\n    user_id TEXT,\n    chat_id TEXT,\n    chat_type TEXT, -- direct, group\n    last_read_message_id TIMEUUID,\n    created_at TIMESTAMP,\n\n    PRIMARY KEY (user_id, chat\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);