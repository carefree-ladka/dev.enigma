"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7133],{251:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var t=r(4848),s=r(8453);const i={},a="Async Await",c={id:"WebDev/JavaScript/AsyncAwait",title:"Async Await",description:"Print Numbers after num Seconds",source:"@site/docs/WebDev/JavaScript/AsyncAwait.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/AsyncAwait",permalink:"/js.enigma/docs/WebDev/JavaScript/AsyncAwait",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/AsyncAwait.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DOM Methods & Selectors Cheatsheet",permalink:"/js.enigma/docs/WebDev/HTMLDOM/DOMCheatSheet"},next:{title:"Closures",permalink:"/js.enigma/docs/WebDev/JavaScript/Closure"}},o={},u=[{value:"Print Numbers after num Seconds",id:"print-numbers-after-num-seconds",level:2},{value:"Print Numbers after num Seconds : Async Await",id:"print-numbers-after-num-seconds--async-await",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"async-await",children:"Async Await"})}),"\n",(0,t.jsx)(n.h2,{id:"print-numbers-after-num-seconds",children:"Print Numbers after num Seconds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const nums = [1, 2, 3, 4, 5];\r\n\r\nfunction printAfterNumber(nums) {\r\n  let cumulativeDelay = 0;\r\n\r\n  for (let i = 0; i < nums.length; i++) {\r\n    cumulativeDelay += nums[i] * 1000; // Add the delay for the current number\r\n    setTimeout(() => {\r\n      console.log(nums[i]);\r\n    }, cumulativeDelay);\r\n  }\r\n}\r\n\r\nprintAfterNumber(nums);\r\n/* \r\n1 // After 1s\r\n2 // After 2s\r\n3 //...\r\n4\r\n5\r\n*/\n"})}),"\n",(0,t.jsx)(n.h2,{id:"print-numbers-after-num-seconds--async-await",children:"Print Numbers after num Seconds : Async Await"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const nums = [1, 2, 3, 4, 5];\r\n\r\nconst sleep = (ms) => new Promise((res) => setTimeout(res, ms));\r\n\r\nasync function printAfterNumber(nums) {\r\n  for (let i = 0; i < nums.length; i++) {\r\n    await sleep(nums[i] * 1000);\r\n    console.log(nums[i]);\r\n  }\r\n}\r\n\r\nprintAfterNumber(nums);\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);