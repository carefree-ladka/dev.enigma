"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[3734],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},52291:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var i=s(74848),r=s(28453);const t={},l="Microservice Patterns",a={id:"Backend System Design/Microservice Patterns",title:"Microservice Patterns",description:"Table of Contents",source:"@site/docs/Backend System Design/Microservice Patterns.mdx",sourceDirName:"Backend System Design",slug:"/Backend System Design/Microservice Patterns",permalink:"/dev.enigma/docs/Backend System Design/Microservice Patterns",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Backend System Design/Microservice Patterns.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Latency vs Throughput",permalink:"/dev.enigma/docs/Backend System Design/Latency vs Throughput"},next:{title:"Object Storage",permalink:"/dev.enigma/docs/Backend System Design/Object Storage"}},d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Two-Phase Commit (2PC)",id:"1-two-phase-commit-2pc",level:2},{value:"Overview",id:"overview",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"2. Three-Phase Commit (3PC)",id:"2-three-phase-commit-3pc",level:2},{value:"Overview",id:"overview-1",level:3},{value:"How It Works",id:"how-it-works-1",level:3},{value:"Advantages",id:"advantages-1",level:3},{value:"Disadvantages",id:"disadvantages-1",level:3},{value:"Use Cases",id:"use-cases-1",level:3},{value:"3. CQRS (Command Query Responsibility Segregation)",id:"3-cqrs-command-query-responsibility-segregation",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Architecture Pattern",id:"architecture-pattern",level:3},{value:"Implementation Approaches",id:"implementation-approaches",level:3},{value:"Advantages",id:"advantages-2",level:3},{value:"Disadvantages",id:"disadvantages-2",level:3},{value:"Use Cases",id:"use-cases-2",level:3},{value:"Example Scenario",id:"example-scenario",level:3},{value:"4. Saga Pattern",id:"4-saga-pattern",level:2},{value:"Overview",id:"overview-3",level:3},{value:"Types of Sagas",id:"types-of-sagas",level:3},{value:"<strong>Choreography-Based Saga</strong>",id:"choreography-based-saga",level:4},{value:"<strong>Orchestration-Based Saga</strong>",id:"orchestration-based-saga",level:4},{value:"Saga Example: E-Commerce Order",id:"saga-example-e-commerce-order",level:3},{value:"Implementation Considerations",id:"implementation-considerations",level:3},{value:"Advantages",id:"advantages-3",level:3},{value:"Disadvantages",id:"disadvantages-3",level:3},{value:"Use Cases",id:"use-cases-3",level:3},{value:"5. Event Sourcing",id:"5-event-sourcing",level:2},{value:"Overview",id:"overview-4",level:3},{value:"Core Concepts",id:"core-concepts-1",level:3},{value:"Architecture Pattern",id:"architecture-pattern-1",level:3},{value:"Event Structure",id:"event-structure",level:3},{value:"Example: Bank Account",id:"example-bank-account",level:3},{value:"Event Sourcing with CQRS",id:"event-sourcing-with-cqrs",level:3},{value:"Projections (Read Models)",id:"projections-read-models",level:3},{value:"Snapshots",id:"snapshots",level:3},{value:"Event Versioning",id:"event-versioning",level:3},{value:"Handling Commands",id:"handling-commands",level:3},{value:"Advantages",id:"advantages-4",level:3},{value:"Disadvantages",id:"disadvantages-4",level:3},{value:"Use Cases",id:"use-cases-4",level:3},{value:"Event Store Technologies",id:"event-store-technologies",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:3},{value:"Real-World Example: E-Commerce Order",id:"real-world-example-e-commerce-order",level:3},{value:"Pattern Comparison",id:"pattern-comparison",level:2},{value:"Best Practices",id:"best-practices-1",level:2},{value:"General Guidelines",id:"general-guidelines",level:3},{value:"Event Sourcing Best Practices",id:"event-sourcing-best-practices",level:3},{value:"Saga Best Practices",id:"saga-best-practices",level:3},{value:"CQRS Best Practices",id:"cqrs-best-practices",level:3},{value:"Real-World Example: Flight Booking",id:"real-world-example-flight-booking",level:2},{value:"Using Saga Pattern (Orchestration)",id:"using-saga-pattern-orchestration",level:3},{value:"Using CQRS",id:"using-cqrs",level:3},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"microservice-patterns",children:"Microservice Patterns"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#1-two-phase-commit-2pc",children:"Two-Phase Commit (2PC)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#2-three-phase-commit-3pc",children:"Three-Phase Commit (3PC)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#3-cqrs-command-query-responsibility-segregation",children:"CQRS (Command Query Responsibility Segregation)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#4-saga-pattern",children:"Saga Pattern"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#5-event-sourcing",children:"Event Sourcing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pattern-comparison",children:"Pattern Comparison"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#real-world-example-flight-booking",children:"Real-World Example: Flight Booking"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-two-phase-commit-2pc",children:"1. Two-Phase Commit (2PC)"}),"\n",(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Two-Phase Commit is a distributed transaction protocol that ensures all participating nodes either commit or abort a transaction atomically."}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 1: Prepare Phase"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Coordinator sends PREPARE request to all participants"}),"\n",(0,i.jsxs)(n.li,{children:["Each participant:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Executes the transaction up to the point of commit"}),"\n",(0,i.jsx)(n.li,{children:"Writes to undo/redo logs"}),"\n",(0,i.jsx)(n.li,{children:"Responds with VOTE_COMMIT or VOTE_ABORT"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 2: Commit Phase"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["If all votes are COMMIT:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Coordinator sends COMMIT to all participants"}),"\n",(0,i.jsx)(n.li,{children:"Each participant commits and releases locks"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["If any vote is ABORT:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Coordinator sends ROLLBACK to all participants"}),"\n",(0,i.jsx)(n.li,{children:"Each participant rolls back and releases locks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advantages",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Strong consistency guarantees"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 ACID properties maintained"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Simple to understand conceptually"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Blocking protocol (participants wait for coordinator)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Single point of failure (coordinator)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Poor performance in distributed systems"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Resource locks held during both phases"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Not suitable for microservices at scale"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Traditional distributed databases"}),"\n",(0,i.jsx)(n.li,{children:"Systems requiring strict consistency"}),"\n",(0,i.jsx)(n.li,{children:"Small-scale distributed transactions"}),"\n",(0,i.jsx)(n.li,{children:"Banking systems with limited services"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-three-phase-commit-3pc",children:"2. Three-Phase Commit (3PC)"}),"\n",(0,i.jsx)(n.h3,{id:"overview-1",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Three-Phase Commit extends 2PC to eliminate blocking by adding an additional phase and timeout mechanisms."}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works-1",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 1: CanCommit"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Coordinator asks participants if they can commit"}),"\n",(0,i.jsx)(n.li,{children:"Participants respond YES or NO"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 2: PreCommit"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If all say YES, coordinator sends PRECOMMIT"}),"\n",(0,i.jsx)(n.li,{children:"Participants acknowledge and prepare to commit"}),"\n",(0,i.jsx)(n.li,{children:"Participants can now timeout and commit if coordinator fails"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 3: DoCommit"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Coordinator sends DOCOMMIT"}),"\n",(0,i.jsx)(n.li,{children:"All participants commit the transaction"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advantages-1",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Non-blocking under certain failure scenarios"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Better fault tolerance than 2PC"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Reduces the blocking window"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages-1",children:"Disadvantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c More complex than 2PC"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Higher network overhead (3 phases)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Still has performance issues"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Can have data inconsistency under network partitions"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Rarely used in modern microservices"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-cases-1",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Legacy systems requiring non-blocking distributed transactions"}),"\n",(0,i.jsx)(n.li,{children:"Systems where coordinator failure is common"}),"\n",(0,i.jsx)(n.li,{children:"Limited adoption in practice"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-cqrs-command-query-responsibility-segregation",children:"3. CQRS (Command Query Responsibility Segregation)"}),"\n",(0,i.jsx)(n.h3,{id:"overview-2",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"CQRS separates read and write operations into different models, optimizing each for their specific purpose."}),"\n",(0,i.jsx)(n.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command Side (Write Model)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Handles all data modifications"}),"\n",(0,i.jsx)(n.li,{children:"Validates business rules"}),"\n",(0,i.jsx)(n.li,{children:"Emits domain events"}),"\n",(0,i.jsx)(n.li,{children:"Optimized for writes"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Query Side (Read Model)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Handles all data retrieval"}),"\n",(0,i.jsx)(n.li,{children:"Denormalized views"}),"\n",(0,i.jsx)(n.li,{children:"Optimized for specific queries"}),"\n",(0,i.jsx)(n.li,{children:"Eventually consistent with write model"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"architecture-pattern",children:"Architecture Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502             \u2502\n   Commands      Queries\n       \u2502             \u2502\n       \u25bc             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Command   \u2502  \u2502    Query     \u2502\n\u2502   Model    \u2502  \u2502    Model     \u2502\n\u2502  (Write)   \u2502  \u2502    (Read)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                \u2502\n      \u2502  Events        \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-approaches",children:"Implementation Approaches"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Simple CQRS"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Same database, different models"}),"\n",(0,i.jsx)(n.li,{children:"Synchronous updates"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CQRS with Event Sourcing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Events as source of truth"}),"\n",(0,i.jsx)(n.li,{children:"Read models built from events"}),"\n",(0,i.jsx)(n.li,{children:"Full audit trail"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CQRS with Separate Databases"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Different databases for read/write"}),"\n",(0,i.jsx)(n.li,{children:"Eventual consistency via events"}),"\n",(0,i.jsx)(n.li,{children:"Scale independently"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advantages-2",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Optimized read and write models"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Independent scaling of reads/writes"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Simplified complex domain models"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Better performance for queries"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Flexibility in data storage"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages-2",children:"Disadvantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Increased complexity"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Eventual consistency challenges"}),"\n",(0,i.jsx)(n.li,{children:"\u274c More code to maintain"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Learning curve for team"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-cases-2",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"High-traffic applications with different read/write patterns"}),"\n",(0,i.jsx)(n.li,{children:"Complex business domains"}),"\n",(0,i.jsx)(n.li,{children:"Systems requiring audit trails"}),"\n",(0,i.jsx)(n.li,{children:"Applications needing multiple read models"}),"\n",(0,i.jsx)(n.li,{children:"E-commerce platforms"}),"\n",(0,i.jsx)(n.li,{children:"Reporting systems"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-scenario",children:"Example Scenario"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Command: Place Order\n{\n  command: "PlaceOrder",\n  orderId: "123",\n  items: [...],\n  customerId: "456"\n}\n\n// Event Generated\n{\n  event: "OrderPlaced",\n  orderId: "123",\n  timestamp: "2025-10-06T10:00:00Z",\n  data: {...}\n}\n\n// Query: Get Order Details (from read model)\n{\n  query: "GetOrderDetails",\n  orderId: "123"\n}\n// Returns denormalized view with customer info, items, status\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-saga-pattern",children:"4. Saga Pattern"}),"\n",(0,i.jsx)(n.h3,{id:"overview-3",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Saga pattern manages distributed transactions as a sequence of local transactions, where each step has a compensating action for rollback."}),"\n",(0,i.jsx)(n.h3,{id:"types-of-sagas",children:"Types of Sagas"}),"\n",(0,i.jsx)(n.h4,{id:"choreography-based-saga",children:(0,i.jsx)(n.strong,{children:"Choreography-Based Saga"})}),"\n",(0,i.jsx)(n.p,{children:"Services communicate through events, no central coordinator."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Service A \u2192 Event \u2192 Service B \u2192 Event \u2192 Service C\n    \u2193                  \u2193              \u2193\nCompensate \u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flow:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Service A completes transaction, publishes event"}),"\n",(0,i.jsx)(n.li,{children:"Service B listens, completes its transaction, publishes event"}),"\n",(0,i.jsx)(n.li,{children:"Service C listens, completes its transaction"}),"\n",(0,i.jsx)(n.li,{children:"If any fails, compensation events flow backward"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simple for small sagas"}),"\n",(0,i.jsx)(n.li,{children:"No single point of failure"}),"\n",(0,i.jsx)(n.li,{children:"Services loosely coupled"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Difficult to understand flow"}),"\n",(0,i.jsx)(n.li,{children:"Hard to debug"}),"\n",(0,i.jsx)(n.li,{children:"Cyclic dependencies risk"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"orchestration-based-saga",children:(0,i.jsx)(n.strong,{children:"Orchestration-Based Saga"})}),"\n",(0,i.jsx)(n.p,{children:"Central orchestrator coordinates the saga flow."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"         Orchestrator\n        /     |      \\\n       \u2193      \u2193       \u2193\n  Service A  Service B  Service C\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flow:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Orchestrator sends command to Service A"}),"\n",(0,i.jsx)(n.li,{children:"Waits for response"}),"\n",(0,i.jsx)(n.li,{children:"Sends command to Service B"}),"\n",(0,i.jsx)(n.li,{children:"If any fails, orchestrator triggers compensations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Centralized logic"}),"\n",(0,i.jsx)(n.li,{children:"Easy to understand and test"}),"\n",(0,i.jsx)(n.li,{children:"Better monitoring"}),"\n",(0,i.jsx)(n.li,{children:"Simpler error handling"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single point of failure"}),"\n",(0,i.jsx)(n.li,{children:"Orchestrator can become complex"}),"\n",(0,i.jsx)(n.li,{children:"Additional service to maintain"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"saga-example-e-commerce-order",children:"Saga Example: E-Commerce Order"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Happy Path:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1. Order Service \u2192 Create Order (Pending)\n2. Payment Service \u2192 Reserve Payment\n3. Inventory Service \u2192 Reserve Items\n4. Shipping Service \u2192 Schedule Delivery\n5. Order Service \u2192 Confirm Order\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Failure with Compensation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1. Order Service \u2192 Create Order \u2705\n2. Payment Service \u2192 Reserve Payment \u2705\n3. Inventory Service \u2192 Reserve Items \u274c (Out of Stock)\n4. Compensation: Payment Service \u2192 Release Payment\n5. Compensation: Order Service \u2192 Cancel Order\n"})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-considerations",children:"Implementation Considerations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"State Management"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Track saga state and current step"}),"\n",(0,i.jsx)(n.li,{children:"Store in database or event store"}),"\n",(0,i.jsx)(n.li,{children:"Handle retries and idempotency"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compensating Transactions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Must be idempotent"}),"\n",(0,i.jsx)(n.li,{children:"May not always perfectly undo (semantic rollback)"}),"\n",(0,i.jsx)(n.li,{children:"Example: Cancel order vs. Delete order"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Handling Failures"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Forward recovery: retry until success"}),"\n",(0,i.jsx)(n.li,{children:"Backward recovery: compensate completed steps"}),"\n",(0,i.jsx)(n.li,{children:"Timeout handling and dead letter queues"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advantages-3",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 No distributed locks"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Better scalability than 2PC"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Works across service boundaries"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Each service maintains local ACID"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages-3",children:"Disadvantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Eventual consistency"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Complex error handling"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Difficult debugging"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Compensating logic complexity"}),"\n",(0,i.jsx)(n.li,{children:"\u274c No isolation (dirty reads possible)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-cases-3",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Microservices architectures"}),"\n",(0,i.jsx)(n.li,{children:"Long-running business processes"}),"\n",(0,i.jsx)(n.li,{children:"Cross-service transactions"}),"\n",(0,i.jsx)(n.li,{children:"E-commerce order processing"}),"\n",(0,i.jsx)(n.li,{children:"Travel booking systems"}),"\n",(0,i.jsx)(n.li,{children:"Payment processing workflows"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-event-sourcing",children:"5. Event Sourcing"}),"\n",(0,i.jsx)(n.h3,{id:"overview-4",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Event Sourcing is a pattern where state changes are stored as a sequence of immutable events rather than storing just the current state. The current state is derived by replaying all events."}),"\n",(0,i.jsx)(n.h3,{id:"core-concepts-1",children:"Core Concepts"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Store"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Append-only log of domain events"}),"\n",(0,i.jsx)(n.li,{children:"Events are immutable (never updated or deleted)"}),"\n",(0,i.jsx)(n.li,{children:"Each event represents a state change"}),"\n",(0,i.jsx)(n.li,{children:"Events ordered by timestamp/sequence number"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Replay"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Current state reconstructed by replaying events"}),"\n",(0,i.jsx)(n.li,{children:"Can rebuild state at any point in time"}),"\n",(0,i.jsx)(n.li,{children:'Enables temporal queries ("what was the state on date X?")'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Snapshots"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Periodic state snapshots for performance"}),"\n",(0,i.jsx)(n.li,{children:"Avoid replaying thousands of events"}),"\n",(0,i.jsx)(n.li,{children:"Optimization technique, not core requirement"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"architecture-pattern-1",children:"Architecture Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Application Logic              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   Command   \u2502\n        \u2502   Handler   \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502   Domain    \u2502\n        \u2502   Model     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 Emits Events\n               \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502    Event    \u2502\n        \u2502    Store    \u2502\n        \u2502  (Append    \u2502\n        \u2502   Only)     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502 Publish\n               \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502    Event    \u2502\n        \u2502     Bus     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u25bc                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Read      \u2502  \u2502   Other     \u2502\n\u2502   Models    \u2502  \u2502  Services   \u2502\n\u2502 (Projections)\u2502  \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-structure",children:"Event Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n  eventId: "evt_12345",\n  eventType: "OrderPlaced",\n  aggregateId: "order_789",\n  aggregateType: "Order",\n  timestamp: "2025-10-06T10:30:00Z",\n  version: 1,\n  data: {\n    orderId: "order_789",\n    customerId: "cust_456",\n    items: [\n      { productId: "prod_001", quantity: 2, price: 29.99 },\n      { productId: "prod_002", quantity: 1, price: 49.99 }\n    ],\n    totalAmount: 109.97\n  },\n  metadata: {\n    userId: "user_123",\n    correlationId: "corr_abc",\n    causationId: "cmd_xyz"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-bank-account",children:"Example: Bank Account"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Traditional Approach:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Database stores only current state\n{\n  accountId: "acc_123",\n  balance: 1500,\n  lastUpdated: "2025-10-06"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Sourcing Approach:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Event Store contains all events\n[\n  {\n    eventType: 'AccountOpened',\n    accountId: 'acc_123',\n    timestamp: '2025-01-01T09:00:00Z',\n    data: { initialBalance: 1000 },\n  },\n  {\n    eventType: 'MoneyDeposited',\n    accountId: 'acc_123',\n    timestamp: '2025-02-15T14:30:00Z',\n    data: { amount: 500 },\n  },\n  {\n    eventType: 'MoneyWithdrawn',\n    accountId: 'acc_123',\n    timestamp: '2025-03-20T11:15:00Z',\n    data: { amount: 200 },\n  },\n  {\n    eventType: 'MoneyDeposited',\n    accountId: 'acc_123',\n    timestamp: '2025-05-10T16:45:00Z',\n    data: { amount: 200 },\n  },\n];\n\n// Current balance = 1000 + 500 - 200 + 200 = 1500\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-sourcing-with-cqrs",children:"Event Sourcing with CQRS"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Perfect Combination:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Events are the source of truth (write side)"}),"\n",(0,i.jsx)(n.li,{children:"Projections/read models built from events (read side)"}),"\n",(0,i.jsx)(n.li,{children:"Enables multiple read models from same events"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Commands \u2192 Aggregate \u2192 Events \u2192 Event Store\n                                      \u2193\n                              Event Handlers\n                                      \u2193\n                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                          \u25bc                        \u25bc\n                  Read Model 1              Read Model 2\n              (Current Balance)         (Transaction History)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"projections-read-models",children:"Projections (Read Models)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Projection 1: Current Account Balance"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Listens to events and maintains current state\nclass AccountBalanceProjection {\n  constructor() {\n    this.balances = {};\n  }\n\n  on(event) {\n    switch (event.eventType) {\n      case 'AccountOpened':\n        this.balances[event.accountId] = event.data.initialBalance;\n        break;\n      case 'MoneyDeposited':\n        this.balances[event.accountId] += event.data.amount;\n        break;\n      case 'MoneyWithdrawn':\n        this.balances[event.accountId] -= event.data.amount;\n        break;\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Projection 2: Audit Trail"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Maintains complete transaction history\nclass TransactionHistoryProjection {\n  constructor() {\n    this.transactions = {};\n  }\n\n  on(event) {\n    if (!this.transactions[event.accountId]) {\n      this.transactions[event.accountId] = [];\n    }\n\n    this.transactions[event.accountId].push({\n      type: event.eventType,\n      amount: event.data.amount,\n      timestamp: event.timestamp,\n      balance: this.calculateBalance(event.accountId),\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"snapshots",children:"Snapshots"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Snapshots?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Replaying 1 million events is slow"}),"\n",(0,i.jsx)(n.li,{children:"Snapshots cache state at a point in time"}),"\n",(0,i.jsx)(n.li,{children:"Replay only events after last snapshot"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Snapshot Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Snapshot every 100 events\n{\n  snapshotId: "snap_001",\n  aggregateId: "order_789",\n  version: 100,\n  timestamp: "2025-10-05T00:00:00Z",\n  state: {\n    // Cached aggregate state at version 100\n    orderId: "order_789",\n    status: "Shipped",\n    totalAmount: 109.97,\n    // ... complete state\n  }\n}\n\n// To rebuild current state:\n// 1. Load latest snapshot (version 100)\n// 2. Replay events from version 101 onwards\n'})}),"\n",(0,i.jsx)(n.h3,{id:"event-versioning",children:"Event Versioning"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge:"})," Events are immutable, but business logic changes"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution: Upcasting"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Old event format (v1)\n{\n  eventType: "OrderPlaced_v1",\n  data: {\n    customerId: "123",\n    items: ["item1", "item2"]\n  }\n}\n\n// New event format (v2) - added customer name\n{\n  eventType: "OrderPlaced_v2",\n  data: {\n    customerId: "123",\n    customerName: "John Doe",\n    items: [\n      { id: "item1", name: "Product 1" },\n      { id: "item2", name: "Product 2" }\n    ]\n  }\n}\n\n// Upcaster: converts v1 to v2 when replaying\nclass OrderPlacedUpcaster {\n  upcast(event) {\n    if (event.eventType === "OrderPlaced_v1") {\n      return {\n        eventType: "OrderPlaced_v2",\n        data: {\n          customerId: event.data.customerId,\n          customerName: lookupCustomerName(event.data.customerId),\n          items: event.data.items.map(id => ({\n            id,\n            name: lookupItemName(id)\n          }))\n        }\n      };\n    }\n    return event;\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"handling-commands",children:"Handling Commands"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Typical Flow:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class OrderAggregate {\n  constructor(eventStore) {\n    this.eventStore = eventStore;\n    this.state = {};\n    this.uncommittedEvents = [];\n  }\n\n  // Load aggregate from events\n  async load(orderId) {\n    const events = await this.eventStore.getEvents(orderId);\n    events.forEach(event => this.apply(event));\n  }\n\n  // Handle command\n  placeOrder(command) {\n    // Validate business rules\n    if (this.state.status) {\n      throw new Error('Order already exists');\n    }\n\n    // Create event\n    const event = {\n      eventType: 'OrderPlaced',\n      aggregateId: command.orderId,\n      data: {\n        customerId: command.customerId,\n        items: command.items,\n        totalAmount: command.totalAmount,\n      },\n      timestamp: new Date().toISOString(),\n    };\n\n    // Apply to local state\n    this.apply(event);\n\n    // Add to uncommitted events\n    this.uncommittedEvents.push(event);\n  }\n\n  // Apply event to state\n  apply(event) {\n    switch (event.eventType) {\n      case 'OrderPlaced':\n        this.state = {\n          orderId: event.aggregateId,\n          customerId: event.data.customerId,\n          items: event.data.items,\n          totalAmount: event.data.totalAmount,\n          status: 'Placed',\n        };\n        break;\n      case 'OrderShipped':\n        this.state.status = 'Shipped';\n        break;\n    }\n  }\n\n  // Save events to store\n  async save() {\n    await this.eventStore.appendEvents(\n      this.state.orderId,\n      this.uncommittedEvents\n    );\n    this.uncommittedEvents = [];\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"advantages-4",children:"Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Complete Audit Trail"}),": Every state change is recorded"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Temporal Queries"}),": Query state at any point in time"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Event Replay"}),": Rebuild state, fix bugs by replaying with new logic"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Debugging"}),": See exact sequence of events that led to current state"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Multiple Read Models"}),": Build different projections from same events"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Business Intelligence"}),": Rich data for analytics"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Event-Driven Integration"}),": Easy to integrate with other systems"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"No Lost Information"}),": Never delete data, only append"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages-4",children:"Disadvantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Complexity"}),": Higher learning curve and development complexity"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Eventual Consistency"}),": Read models lag behind events"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Event Schema Evolution"}),": Managing event versioning is challenging"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Query Limitations"}),": Can't query event store directly (need projections)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Storage"}),": Stores all events (though events are typically small)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Replay Performance"}),": Can be slow without snapshots"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Operational Complexity"}),": More moving parts to monitor"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-cases-4",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Financial Systems"}),": Banking, payments, accounting (audit requirements)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"E-Commerce"}),": Order processing, inventory management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compliance-Heavy Domains"}),": Healthcare, legal, regulatory systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collaborative Systems"}),": Document editing, version control"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics Platforms"}),": Need historical data analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Systems Requiring Audit Trails"}),': Any system needing "who did what when"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging Complex Systems"}),": Reproduce bugs from event history"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Temporal Reporting"}),": Reports showing state at specific points in time"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"event-store-technologies",children:"Event Store Technologies"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Specialized Event Stores:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"EventStoreDB"}),": Purpose-built for event sourcing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Axon Server"}),": CQRS and Event Sourcing platform"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Marten"}),": Event store for PostgreSQL"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"General Purpose:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kafka"}),": Distributed event streaming"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS DynamoDB"}),": With proper schema design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MongoDB"}),": Document store with append-only pattern"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PostgreSQL"}),": With JSONB columns"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Design"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Events should be business-meaningful"}),"\n",(0,i.jsx)(n.li,{children:"Name events in past tense (OrderPlaced, not PlaceOrder)"}),"\n",(0,i.jsx)(n.li,{children:"Keep events small and focused"}),"\n",(0,i.jsx)(n.li,{children:"Include all necessary data (no foreign keys)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Versioning Strategy"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Version events from the start"}),"\n",(0,i.jsx)(n.li,{children:"Use upcasters for old event formats"}),"\n",(0,i.jsx)(n.li,{children:"Never modify existing events"}),"\n",(0,i.jsx)(n.li,{children:"Document event schemas"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Snapshots"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement for performance"}),"\n",(0,i.jsx)(n.li,{children:"Snapshot every N events (e.g., 50-100)"}),"\n",(0,i.jsx)(n.li,{children:"Snapshots are optional optimization"}),"\n",(0,i.jsx)(n.li,{children:"Can rebuild from snapshots + recent events"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Idempotency"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Event handlers must be idempotent"}),"\n",(0,i.jsx)(n.li,{children:"Use event IDs to detect duplicates"}),"\n",(0,i.jsx)(n.li,{children:"Handle out-of-order events"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Projections"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"One projection per read model"}),"\n",(0,i.jsx)(n.li,{children:"Rebuild projections when schema changes"}),"\n",(0,i.jsx)(n.li,{children:"Keep projections simple"}),"\n",(0,i.jsx)(n.li,{children:"Handle projection rebuilds gracefully"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test by given events, when command, then events"}),"\n",(0,i.jsx)(n.li,{children:"Easy to test business logic"}),"\n",(0,i.jsx)(n.li,{children:"Replay production events in test environment"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Storing Current State Only"}),": Defeats the purpose of event sourcing\n\u274c ",(0,i.jsx)(n.strong,{children:"Making Events Too Large"}),": Include only necessary data\n\u274c ",(0,i.jsx)(n.strong,{children:"No Versioning Strategy"}),": Leads to issues when events evolve\n\u274c ",(0,i.jsx)(n.strong,{children:"Forgetting Idempotency"}),": Duplicate events cause incorrect state\n\u274c ",(0,i.jsx)(n.strong,{children:"Not Using Snapshots"}),": Performance issues with long event streams\n\u274c ",(0,i.jsx)(n.strong,{children:"Coupling Events to DB Schema"}),": Events should be domain-focused\n\u274c ",(0,i.jsx)(n.strong,{children:"Deleting Events"}),": Never delete, use compensating events instead"]}),"\n",(0,i.jsx)(n.h3,{id:"real-world-example-e-commerce-order",children:"Real-World Example: E-Commerce Order"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Event Stream for Order \"ORD-123\"\n[\n  {\n    eventType: 'OrderPlaced',\n    orderId: 'ORD-123',\n    timestamp: '2025-10-06T09:00:00Z',\n    data: {\n      customerId: 'CUST-456',\n      items: [{ productId: 'PROD-1', qty: 2, price: 50 }],\n      total: 100,\n    },\n  },\n  {\n    eventType: 'PaymentReceived',\n    orderId: 'ORD-123',\n    timestamp: '2025-10-06T09:01:30Z',\n    data: {\n      paymentId: 'PAY-789',\n      amount: 100,\n      method: 'CreditCard',\n    },\n  },\n  {\n    eventType: 'OrderShipped',\n    orderId: 'ORD-123',\n    timestamp: '2025-10-06T14:30:00Z',\n    data: {\n      trackingNumber: 'TRK-ABC123',\n      carrier: 'FedEx',\n    },\n  },\n  {\n    eventType: 'OrderDelivered',\n    orderId: 'ORD-123',\n    timestamp: '2025-10-08T16:45:00Z',\n    data: {\n      deliveredAt: '2025-10-08T16:45:00Z',\n      signedBy: 'John Doe',\n    },\n  },\n];\n\n// Benefits:\n// - Complete history of order lifecycle\n// - Can rebuild order state at any point\n// - Multiple read models: current status, delivery history, audit trail\n// - Analytics: average time from order to delivery\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pattern-comparison",children:"Pattern Comparison"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pattern"}),(0,i.jsx)(n.th,{children:"Consistency"}),(0,i.jsx)(n.th,{children:"Complexity"}),(0,i.jsx)(n.th,{children:"Performance"}),(0,i.jsx)(n.th,{children:"Scalability"}),(0,i.jsx)(n.th,{children:"Use Case"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"2PC"})}),(0,i.jsx)(n.td,{children:"Strong"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Poor"}),(0,i.jsx)(n.td,{children:"Poor"}),(0,i.jsx)(n.td,{children:"Legacy distributed DBs"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"3PC"})}),(0,i.jsx)(n.td,{children:"Strong"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Poor"}),(0,i.jsx)(n.td,{children:"Poor"}),(0,i.jsx)(n.td,{children:"Rarely used"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"CQRS"})}),(0,i.jsx)(n.td,{children:"Eventual"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Read-heavy systems"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Saga"})}),(0,i.jsx)(n.td,{children:"Eventual"}),(0,i.jsx)(n.td,{children:"Medium-High"}),(0,i.jsx)(n.td,{children:"Good"}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Microservices"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Event Sourcing"})}),(0,i.jsx)(n.td,{children:"Eventual"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Good"}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Audit trails, temporal queries"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-1",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"general-guidelines",children:"General Guidelines"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer Saga over 2PC/3PC"})," in microservices"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Use CQRS when read/write patterns differ significantly"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Combine Event Sourcing with CQRS"})," for complete audit trails"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement idempotency"})," for all operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use correlation IDs"})," for tracing distributed transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor and alert"})," on saga failures and compensations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"event-sourcing-best-practices",children:"Event Sourcing Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Design events around business domain, not technical operations"}),"\n",(0,i.jsx)(n.li,{children:"Never modify or delete events"}),"\n",(0,i.jsx)(n.li,{children:"Implement event versioning from day one"}),"\n",(0,i.jsx)(n.li,{children:"Use snapshots for aggregates with many events"}),"\n",(0,i.jsx)(n.li,{children:"Make event handlers idempotent"}),"\n",(0,i.jsx)(n.li,{children:"Keep events immutable and serializable"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"saga-best-practices",children:"Saga Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep sagas short (3-4 steps ideal)"}),"\n",(0,i.jsx)(n.li,{children:"Make compensations idempotent"}),"\n",(0,i.jsx)(n.li,{children:"Use orchestration for complex workflows"}),"\n",(0,i.jsx)(n.li,{children:"Implement timeout mechanisms"}),"\n",(0,i.jsx)(n.li,{children:"Log all state transitions"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cqrs-best-practices",children:"CQRS Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start simple, add complexity only when needed"}),"\n",(0,i.jsx)(n.li,{children:"Use domain events for synchronization"}),"\n",(0,i.jsx)(n.li,{children:"Version your read models"}),"\n",(0,i.jsx)(n.li,{children:"Handle eventual consistency in UI"}),"\n",(0,i.jsx)(n.li,{children:"Cache aggressively on read side"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"real-world-example-flight-booking",children:"Real-World Example: Flight Booking"}),"\n",(0,i.jsx)(n.h3,{id:"using-saga-pattern-orchestration",children:"Using Saga Pattern (Orchestration)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1. Create Reservation (Pending)\n   \u2193\n2. Reserve Flight Seat\n   \u2193\n3. Process Payment\n   \u2193\n4. Send Confirmation Email\n   \u2193\n5. Complete Reservation\n\nCompensations if step 3 fails:\n- Release Flight Seat\n- Cancel Reservation\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-cqrs",children:"Using CQRS"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command Side:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"BookFlight command"}),"\n",(0,i.jsx)(n.li,{children:"Validates availability"}),"\n",(0,i.jsx)(n.li,{children:"Creates reservation"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Query Side:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Flight search (denormalized with pricing, seats, routes)"}),"\n",(0,i.jsx)(n.li,{children:"Booking history (optimized for user queries)"}),"\n",(0,i.jsx)(n.li,{children:"Admin dashboard (different aggregations)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each read model optimized for its specific use case!"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Modern microservices architectures typically combine these patterns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Saga"})," for distributed transactions across services"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CQRS"})," for read/write optimization and scalability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event Sourcing"})," with CQRS for complete audit trails and temporal queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event-Driven Architecture"})," for loose coupling between services"]}),"\n",(0,i.jsx)(n.li,{children:"Avoid 2PC/3PC in distributed systems due to blocking and poor scalability"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common Combinations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CQRS + Event Sourcing"}),": Events as source of truth, multiple read models"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Saga + Event Sourcing"}),": Track saga state as events, enable replay and debugging"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"All Three Together"}),": Enterprise-grade microservices with full auditability"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Choose based on your consistency requirements, scale needs, audit requirements, and team expertise."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);