"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1951],{4233:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var i=s(4848),r=s(8453);const l={},t="OOP and Java 8 Interview Questions",a={id:"Java/OOP and Java 8 Interview Questions",title:"OOP and Java 8 Interview Questions",description:"Part A: Object-Oriented Programming (OOP) Interview Questions",source:"@site/docs/Java/OOP and Java 8 Interview Questions.mdx",sourceDirName:"Java",slug:"/Java/OOP and Java 8 Interview Questions",permalink:"/js.enigma/docs/Java/OOP and Java 8 Interview Questions",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/OOP and Java 8 Interview Questions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Wrapper Classes, Lambda, Regex & Annotations",permalink:"/js.enigma/docs/Java/JavaWrapperClassesLambdaRegex&Annotations"},next:{title:"Spring & Spring Boot Detailed Cheatsheet",permalink:"/js.enigma/docs/Java/Spring & Spring Boot Detailed Cheatsheet"}},c={},d=[{value:"<strong>Part A: Object-Oriented Programming (OOP) Interview Questions</strong>",id:"part-a-object-oriented-programming-oop-interview-questions",level:2},{value:"<strong>Beginner Level OOP Questions (1-15)</strong>",id:"beginner-level-oop-questions-1-15",level:3},{value:"Fundamental OOP Concepts",id:"fundamental-oop-concepts",level:4},{value:"<strong>Intermediate Level OOP Questions (16-25)</strong>",id:"intermediate-level-oop-questions-16-25",level:3},{value:"<strong>Advanced Level OOP Questions (26-30)</strong>",id:"advanced-level-oop-questions-26-30",level:3},{value:"<strong>Part B: Java 8 Interview Questions</strong>",id:"part-b-java-8-interview-questions",level:2},{value:"<strong>Beginner Level Java 8 Questions (1-15)</strong>",id:"beginner-level-java-8-questions-1-15",level:3},{value:"Lambda Expressions",id:"lambda-expressions",level:4},{value:"<strong>Intermediate Level Java 8 Questions (16-30)</strong>",id:"intermediate-level-java-8-questions-16-30",level:3},{value:"Stream API",id:"stream-api",level:4},{value:"<strong>Advanced Level Java 8 Questions (31-40)</strong>",id:"advanced-level-java-8-questions-31-40",level:3},{value:"Advanced Features",id:"advanced-features",level:4},{value:"<strong>Common Coding Examples</strong>",id:"common-coding-examples",level:2},{value:"<strong>OOP Example:</strong>",id:"oop-example",level:3},{value:"<strong>Java 8 Example:</strong>",id:"java-8-example",level:3},{value:"<strong>Interview Preparation Tips:</strong>",id:"interview-preparation-tips",level:2},{value:"<strong>For OOP Questions:</strong>",id:"for-oop-questions",level:3},{value:"<strong>For Java 8 Questions:</strong>",id:"for-java-8-questions",level:3},{value:"<strong>Common Follow-up Areas:</strong>",id:"common-follow-up-areas",level:3}];function o(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"oop-and-java-8-interview-questions",children:"OOP and Java 8 Interview Questions"})}),"\n",(0,i.jsx)(e.h2,{id:"part-a-object-oriented-programming-oop-interview-questions",children:(0,i.jsx)(e.strong,{children:"Part A: Object-Oriented Programming (OOP) Interview Questions"})}),"\n",(0,i.jsx)(e.h3,{id:"beginner-level-oop-questions-1-15",children:(0,i.jsx)(e.strong,{children:"Beginner Level OOP Questions (1-15)"})}),"\n",(0,i.jsx)(e.h4,{id:"fundamental-oop-concepts",children:"Fundamental OOP Concepts"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Object-Oriented Programming?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Programming paradigm based on objects containing data and methods"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the four pillars of OOP?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Encapsulation, Inheritance, Polymorphism, Abstraction"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is a class and object?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Class: blueprint/template, Object: instance of a class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is encapsulation? Provide an example."})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Wrapping data and methods together, hiding internal implementation"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"class Person {\n    private String name;\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is inheritance? What are its types?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Mechanism to acquire properties of another class"}),"\n",(0,i.jsx)(e.li,{children:"Types: Single, Multilevel, Hierarchical, Multiple (through interfaces), Hybrid"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is polymorphism? Explain its types."})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"One interface, multiple implementations"}),"\n",(0,i.jsx)(e.li,{children:"Types: Compile-time (method overloading) and Runtime (method overriding)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is abstraction?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Hiding implementation details and showing only essential features"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between abstraction and encapsulation?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Abstraction: hiding complexity, Encapsulation: hiding data"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is method overloading?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Same method name with different parameters in same class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is method overriding?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Child class provides specific implementation of parent class method"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between overloading and overriding?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Overloading: compile-time, same class; Overriding: runtime, different classes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is a constructor? What are its types?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Special method to initialize objects"}),"\n",(0,i.jsx)(e.li,{children:"Types: Default, Parameterized, Copy constructor"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is constructor overloading?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Multiple constructors with different parameters"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between constructor and method?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Constructor initializes object, method performs operations"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:["What is ",(0,i.jsx)(e.code,{children:"this"})," keyword?"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Reference to current object instance"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"intermediate-level-oop-questions-16-25",children:(0,i.jsx)(e.strong,{children:"Intermediate Level OOP Questions (16-25)"})}),"\n",(0,i.jsxs)(e.ol,{start:"16",children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:["What is ",(0,i.jsx)(e.code,{children:"super"})," keyword?"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Reference to parent class members"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:["What is the difference between ",(0,i.jsx)(e.code,{children:"this()"})," and ",(0,i.jsx)(e.code,{children:"super()"}),"?"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"this(): calls current class constructor, super(): calls parent constructor"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is an abstract class?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Class that cannot be instantiated, can have abstract and concrete methods"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is an interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Contract defining method signatures, pure abstraction (before Java 8)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between abstract class and interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Abstract class: partial abstraction, Interface: complete abstraction"}),"\n",(0,i.jsx)(e.li,{children:"Abstract class: can have constructors, Interface: cannot"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Can we have multiple inheritance in Java? How?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"No through classes, Yes through interfaces"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is composition?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'"Has-a" relationship, object contains other objects'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is aggregation?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'Special form of association, "has-a" relationship with independent lifecycle'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between composition and inheritance?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:'Composition: "has-a", Inheritance: "is-a"'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is association, aggregation, and composition?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Association: relationship between classes"}),"\n",(0,i.jsx)(e.li,{children:'Aggregation: weak "has-a"'}),"\n",(0,i.jsx)(e.li,{children:'Composition: strong "has-a"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"advanced-level-oop-questions-26-30",children:(0,i.jsx)(e.strong,{children:"Advanced Level OOP Questions (26-30)"})}),"\n",(0,i.jsxs)(e.ol,{start:"26",children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is dynamic method dispatch?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Runtime method resolution based on object type"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the diamond problem?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Ambiguity in multiple inheritance, solved by interfaces in Java"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is SOLID principles?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are design patterns? Name few important ones."})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Reusable solutions to common problems"}),"\n",(0,i.jsx)(e.li,{children:"Singleton, Factory, Observer, Strategy, Decorator"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is tight coupling and loose coupling?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Tight: high dependency, Loose: low dependency between classes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"part-b-java-8-interview-questions",children:(0,i.jsx)(e.strong,{children:"Part B: Java 8 Interview Questions"})}),"\n",(0,i.jsx)(e.h3,{id:"beginner-level-java-8-questions-1-15",children:(0,i.jsx)(e.strong,{children:"Beginner Level Java 8 Questions (1-15)"})}),"\n",(0,i.jsx)(e.h4,{id:"lambda-expressions",children:"Lambda Expressions"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the new features introduced in Java 8?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Lambda expressions, Stream API, Functional interfaces, Optional, Method references, Default methods"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is a lambda expression?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Anonymous function that can be treated as a value"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"(parameters) -> expression\n(parameters) -> { statements; }\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is a functional interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Interface with exactly one abstract method (SAM - Single Abstract Method)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is @FunctionalInterface annotation?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Ensures interface has only one abstract method"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the built-in functional interfaces in Java 8?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Predicate, Function, Consumer, Supplier, UnaryOperator, BinaryOperator"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Predicate functional interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Takes one argument, returns boolean"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Predicate<String> isEmpty = s -> s.isEmpty();\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Function functional interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Takes one argument, returns a result"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Function<String, Integer> length = s -> s.length();\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Consumer functional interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Takes one argument, returns nothing (void)"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Consumer<String> print = s -> System.out.println(s);\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Supplier functional interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Takes no argument, returns a result"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'Supplier<String> supplier = () -> "Hello World";\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are method references?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Shorthand notation for lambda expressions"}),"\n",(0,i.jsx)(e.li,{children:"Types: Static, Instance, Constructor, Instance of arbitrary object"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the types of method references?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Static: Class::staticMethod"}),"\n",(0,i.jsx)(e.li,{children:"Instance: object::instanceMethod"}),"\n",(0,i.jsx)(e.li,{children:"Constructor: Class::new"}),"\n",(0,i.jsx)(e.li,{children:"Instance of arbitrary object: Class::instanceMethod"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between lambda expression and method reference?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Method reference is shorthand for lambda when calling existing method"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Can we use lambda expressions with any interface?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"No, only with functional interfaces"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between lambda and anonymous inner class?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Lambda: functional interfaces only, Anonymous class: any interface/abstract class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are default methods in interfaces?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Methods with implementation in interfaces (Java 8+)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"intermediate-level-java-8-questions-16-30",children:(0,i.jsx)(e.strong,{children:"Intermediate Level Java 8 Questions (16-30)"})}),"\n",(0,i.jsx)(e.h4,{id:"stream-api",children:"Stream API"}),"\n",(0,i.jsxs)(e.ol,{start:"16",children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Stream API?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Functional-style operations on collections of objects"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the characteristics of Stream?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"No storage, Functional, Lazy evaluation, Possibly unbounded, Consumable"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between Collection and Stream?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Collection: data structure, Stream: abstraction for processing data"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are intermediate and terminal operations in Stream?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Intermediate: return Stream (filter, map, sorted)"}),"\n",(0,i.jsx)(e.li,{children:"Terminal: return non-Stream result (collect, forEach, reduce)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between map() and flatMap()?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"map(): one-to-one mapping"}),"\n",(0,i.jsx)(e.li,{children:"flatMap(): one-to-many mapping, flattens nested structures"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is filter() method in Stream?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Filters elements based on predicate"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"list.stream().filter(x -> x > 5).collect(toList());\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is collect() method in Stream?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Terminal operation to transform stream elements into different form"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are Collectors?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Utility class with predefined collectors (toList, toSet, groupingBy, etc.)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is reduce() method?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Combines stream elements into single result"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"Optional<Integer> sum = numbers.stream().reduce(Integer::sum);\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between findFirst() and findAny()?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"findFirst(): returns first element, findAny(): returns any element"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is parallel stream?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Stream that can be processed in parallel across multiple threads"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"list.parallelStream().filter(predicate);\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"When should you use parallel streams?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Large datasets, CPU-intensive operations, independent operations"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Optional class?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Container object to handle null values gracefully"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the methods of Optional class?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"of(), ofNullable(), empty(), isPresent(), ifPresent(), orElse(), orElseGet()"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between orElse() and orElseGet()?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"orElse(): always executes, orElseGet(): executes only if empty"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"advanced-level-java-8-questions-31-40",children:(0,i.jsx)(e.strong,{children:"Advanced Level Java 8 Questions (31-40)"})}),"\n",(0,i.jsx)(e.h4,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsxs)(e.ol,{start:"31",children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are static methods in interfaces?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Methods that belong to interface, not implementing class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the diamond problem with default methods?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Multiple interfaces with same default method, resolved by implementing class"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"How do you resolve conflicts with multiple default methods?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Override in implementing class or use Interface.super.method()"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is CompletableFuture?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Enhanced Future for asynchronous programming"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the differences between Future and CompletableFuture?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"CompletableFuture: composable, chainable, better exception handling"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is Date and Time API in Java 8?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"New immutable date-time classes: LocalDate, LocalTime, LocalDateTime, ZonedDateTime"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are the advantages of new Date-Time API?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Immutable, Thread-safe, Clear API, Better parsing/formatting"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is forEach() method?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Internal iteration method for collections and streams"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What is the difference between external and internal iteration?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"External: for loop (imperative), Internal: forEach (functional)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"What are StringJoiner and String.join()?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Utilities for joining strings with delimiters"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"common-coding-examples",children:(0,i.jsx)(e.strong,{children:"Common Coding Examples"})}),"\n",(0,i.jsx)(e.h3,{id:"oop-example",children:(0,i.jsx)(e.strong,{children:"OOP Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'// Encapsulation + Inheritance + Polymorphism\nabstract class Animal {\n    protected String name;\n\n    public Animal(String name) { this.name = name; }\n\n    public abstract void makeSound();\n\n    public void sleep() { System.out.println(name + " is sleeping"); }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) { super(name); }\n\n    @Override\n    public void makeSound() { System.out.println(name + " barks"); }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"java-8-example",children:(0,i.jsx)(e.strong,{children:"Java 8 Example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'// Lambda + Stream + Optional\nList<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");\n\nOptional<String> result = names.stream()\n    .filter(name -> name.startsWith("C"))\n    .map(String::toUpperCase)\n    .findFirst();\n\nresult.ifPresent(System.out::println); // CHARLIE\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"interview-preparation-tips",children:(0,i.jsx)(e.strong,{children:"Interview Preparation Tips:"})}),"\n",(0,i.jsx)(e.h3,{id:"for-oop-questions",children:(0,i.jsx)(e.strong,{children:"For OOP Questions:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Practice implementing all four pillars with code examples"}),"\n",(0,i.jsx)(e.li,{children:"Understand real-world scenarios where each concept applies"}),"\n",(0,i.jsx)(e.li,{children:"Be ready to draw UML diagrams"}),"\n",(0,i.jsx)(e.li,{children:"Know design patterns and SOLID principles"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"for-java-8-questions",children:(0,i.jsx)(e.strong,{children:"For Java 8 Questions:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Practice writing lambda expressions and method references"}),"\n",(0,i.jsx)(e.li,{children:"Master Stream API operations with examples"}),"\n",(0,i.jsx)(e.li,{children:"Understand functional programming concepts"}),"\n",(0,i.jsx)(e.li,{children:"Practice converting imperative code to functional style"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"common-follow-up-areas",children:(0,i.jsx)(e.strong,{children:"Common Follow-up Areas:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Performance implications"}),"\n",(0,i.jsx)(e.li,{children:"Best practices and when to use what"}),"\n",(0,i.jsx)(e.li,{children:"Real-world application scenarios"}),"\n",(0,i.jsx)(e.li,{children:"Code optimization techniques"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>a});var i=s(6540);const r={},l=i.createContext(r);function t(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);