"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[8055],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},44470:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(74848),i=t(28453);const s={},a="Java Iterator",l={id:"Java/JavaIterator",title:"Java Iterator",description:"Table of Contents",source:"@site/docs/Java/JavaIterator.mdx",sourceDirName:"Java",slug:"/Java/JavaIterator",permalink:"/dev.enigma/docs/Java/JavaIterator",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/JavaIterator.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Enums, Generics & Sorting",permalink:"/dev.enigma/docs/Java/JavaEnumsGenerics&Sorting"},next:{title:"Java Multithreading",permalink:"/dev.enigma/docs/Java/JavaMultithreading"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What is an Iterator?",id:"what-is-an-iterator",level:2},{value:"Import Statement",id:"import-statement",level:3},{value:"Key Concepts",id:"key-concepts",level:2},{value:"1. <strong>Sequential Access</strong>",id:"1-sequential-access",level:3},{value:"2. <strong>Fail-Safe Iteration</strong>",id:"2-fail-safe-iteration",level:3},{value:"3. <strong>Generic Type Support</strong>",id:"3-generic-type-support",level:3},{value:"Getting an Iterator",id:"getting-an-iterator",level:2},{value:"Core Methods",id:"core-methods",level:2},{value:"Method Details",id:"method-details",level:3},{value:"<code>hasNext()</code>",id:"hasnext",level:4},{value:"<code>next()</code>",id:"next",level:4},{value:"<code>remove()</code>",id:"remove",level:4},{value:"Looping Through Collections",id:"looping-through-collections",level:2},{value:"Basic Iteration Pattern",id:"basic-iteration-pattern",level:3},{value:"Complete Example",id:"complete-example",level:3},{value:"Removing Items Safely",id:"removing-items-safely",level:2},{value:"\u274c Incorrect Way (Using Enhanced For Loop)",id:"-incorrect-way-using-enhanced-for-loop",level:3},{value:"\u2705 Correct Way (Using Iterator)",id:"-correct-way-using-iterator",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. <strong>Always Use hasNext() Before next()</strong>",id:"1-always-use-hasnext-before-next",level:3},{value:"2. <strong>Handle Exceptions Properly</strong>",id:"2-handle-exceptions-properly",level:3},{value:"3. <strong>Use Enhanced For Loop When Not Modifying</strong>",id:"3-use-enhanced-for-loop-when-not-modifying",level:3},{value:"4. <strong>Don&#39;t Reuse Iterators</strong>",id:"4-dont-reuse-iterators",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"1. <strong>Calling remove() Before next()</strong>",id:"1-calling-remove-before-next",level:3},{value:"2. <strong>Multiple remove() Calls</strong>",id:"2-multiple-remove-calls",level:3},{value:"3. <strong>Modifying Collection Directly During Iteration</strong>",id:"3-modifying-collection-directly-during-iteration",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Working with Different Collection Types",id:"working-with-different-collection-types",level:3},{value:"ArrayList Example",id:"arraylist-example",level:4},{value:"HashSet Example",id:"hashset-example",level:4},{value:"Custom Object Iteration",id:"custom-object-iteration",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Example 1: Basic Iteration",id:"example-1-basic-iteration",level:3},{value:"Example 2: Conditional Processing",id:"example-2-conditional-processing",level:3},{value:"Example 3: Filtering and Removal",id:"example-3-filtering-and-removal",level:3},{value:"Summary",id:"summary",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"java-iterator",children:"Java Iterator"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#what-is-an-iterator",children:"What is an Iterator?"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#key-concepts",children:"Key Concepts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#getting-an-iterator",children:"Getting an Iterator"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#core-methods",children:"Core Methods"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#looping-through-collections",children:"Looping Through Collections"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#removing-items-safely",children:"Removing Items Safely"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#common-pitfalls",children:"Common Pitfalls"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#advanced-usage",children:"Advanced Usage"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#code-examples",children:"Code Examples"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"what-is-an-iterator",children:"What is an Iterator?"}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.strong,{children:"Iterator"})," is an object that provides a standard way to traverse (loop through) collections in Java, such as:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ArrayList"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"HashSet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"LinkedList"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Vector"})}),"\n",(0,r.jsx)(n.li,{children:"And other Collection Framework classes"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,r.jsx)(n.strong,{children:"Etymology"}),': The term "iterator" comes from "iterating," which is the technical term for looping or repeating through elements.']}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"import-statement",children:"Import Statement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.Iterator;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(n.h3,{id:"1-sequential-access",children:["1. ",(0,r.jsx)(n.strong,{children:"Sequential Access"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Iterators provide sequential access to collection elements"}),"\n",(0,r.jsx)(n.li,{children:"You can move forward through the collection one element at a time"}),"\n",(0,r.jsxs)(n.li,{children:["Cannot move backward (unless using ",(0,r.jsx)(n.code,{children:"ListIterator"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-fail-safe-iteration",children:["2. ",(0,r.jsx)(n.strong,{children:"Fail-Safe Iteration"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Safe way to modify collections during iteration"}),"\n",(0,r.jsxs)(n.li,{children:["Prevents ",(0,r.jsx)(n.code,{children:"ConcurrentModificationException"})," when removing elements"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-generic-type-support",children:["3. ",(0,r.jsx)(n.strong,{children:"Generic Type Support"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Iterator<String> stringIterator;\nIterator<Integer> integerIterator;\nIterator<CustomObject> objectIterator;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"getting-an-iterator",children:"Getting an Iterator"}),"\n",(0,r.jsxs)(n.p,{children:["Every collection class provides an ",(0,r.jsx)(n.code,{children:"iterator()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Basic syntax\nIterator<DataType> iteratorName = collection.iterator();\n\n// Examples\nArrayList<String> list = new ArrayList<>();\nIterator<String> it = list.iterator();\n\nHashSet<Integer> set = new HashSet<>();\nIterator<Integer> numIt = set.iterator();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-methods",children:"Core Methods"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Return Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hasNext()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"true"})," if there are more elements"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"next()"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"E"})," (generic)"]}),(0,r.jsx)(n.td,{children:"Returns the next element and advances the iterator"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"remove()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"void"})}),(0,r.jsxs)(n.td,{children:["Removes the last element returned by ",(0,r.jsx)(n.code,{children:"next()"})]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"method-details",children:"Method Details"}),"\n",(0,r.jsx)(n.h4,{id:"hasnext",children:(0,r.jsx)(n.code,{children:"hasNext()"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Check if more elements exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Usage"}),": Typically used in loop conditions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": ",(0,r.jsx)(n.code,{children:"true"})," if iteration has more elements"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"next",children:(0,r.jsx)(n.code,{children:"next()"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Retrieve the next element"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Side Effect"}),": Advances the iterator position"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throws"}),": ",(0,r.jsx)(n.code,{children:"NoSuchElementException"})," if no more elements exist"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"remove",children:(0,r.jsx)(n.code,{children:"remove()"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Safely remove elements during iteration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": Can only be called once per ",(0,r.jsx)(n.code,{children:"next()"})," call"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throws"}),": ",(0,r.jsx)(n.code,{children:"IllegalStateException"})," if called before ",(0,r.jsx)(n.code,{children:"next()"})," or called twice"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"looping-through-collections",children:"Looping Through Collections"}),"\n",(0,r.jsx)(n.h3,{id:"basic-iteration-pattern",children:"Basic Iteration Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"while (iterator.hasNext()) {\n    DataType element = iterator.next();\n    // Process the element\n    System.out.println(element);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class IteratorExample {\n    public static void main(String[] args) {\n        ArrayList<String> cars = new ArrayList<>();\n        cars.add("Volvo");\n        cars.add("BMW");\n        cars.add("Ford");\n        cars.add("Mazda");\n\n        Iterator<String> it = cars.iterator();\n\n        while (it.hasNext()) {\n            String car = it.next();\n            System.out.println(car);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"removing-items-safely",children:"Removing Items Safely"}),"\n",(0,r.jsx)(n.h3,{id:"-incorrect-way-using-enhanced-for-loop",children:"\u274c Incorrect Way (Using Enhanced For Loop)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// This can cause ConcurrentModificationException\nfor (Integer num : numbers) {\n    if (num < 10) {\n        numbers.remove(num); // DANGEROUS!\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-correct-way-using-iterator",children:"\u2705 Correct Way (Using Iterator)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class SafeRemoval {\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        numbers.add(12);\n        numbers.add(8);\n        numbers.add(2);\n        numbers.add(23);\n\n        Iterator<Integer> it = numbers.iterator();\n        while (it.hasNext()) {\n            Integer num = it.next();\n            if (num < 10) {\n                it.remove(); // Safe removal\n            }\n        }\n\n        System.out.println(numbers); // Output: [12, 23]\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.h3,{id:"1-always-use-hasnext-before-next",children:["1. ",(0,r.jsx)(n.strong,{children:"Always Use hasNext() Before next()"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Good practice\nwhile (it.hasNext()) {\n    String element = it.next();\n    // Process element\n}\n\n// Avoid calling next() without checking\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-handle-exceptions-properly",children:["2. ",(0,r.jsx)(n.strong,{children:"Handle Exceptions Properly"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'try {\n    while (it.hasNext()) {\n        String element = it.next();\n        // Process element\n    }\n} catch (NoSuchElementException e) {\n    System.err.println("Iterator exhausted: " + e.getMessage());\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-use-enhanced-for-loop-when-not-modifying",children:["3. ",(0,r.jsx)(n.strong,{children:"Use Enhanced For Loop When Not Modifying"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// When you don't need to remove elements, use enhanced for loop\nfor (String car : cars) {\n    System.out.println(car);\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"4-dont-reuse-iterators",children:["4. ",(0,r.jsx)(n.strong,{children:"Don't Reuse Iterators"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Create a new iterator for each iteration cycle\nIterator<String> it1 = list.iterator();\n// Use it1...\n\n// Later, create a new one\nIterator<String> it2 = list.iterator();\n// Use it2...\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.h3,{id:"1-calling-remove-before-next",children:["1. ",(0,r.jsx)(n.strong,{children:"Calling remove() Before next()"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u274c Wrong\nIterator<String> it = list.iterator();\nit.remove(); // IllegalStateException!\n\n// \u2705 Correct\nIterator<String> it = list.iterator();\nif (it.hasNext()) {\n    it.next();\n    it.remove(); // Now it's safe\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-multiple-remove-calls",children:["2. ",(0,r.jsx)(n.strong,{children:"Multiple remove() Calls"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u274c Wrong\nString element = it.next();\nit.remove();\nit.remove(); // IllegalStateException!\n\n// \u2705 Correct\nString element = it.next();\nit.remove(); // Only one remove() per next()\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-modifying-collection-directly-during-iteration",children:["3. ",(0,r.jsx)(n.strong,{children:"Modifying Collection Directly During Iteration"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u274c Wrong - Can cause ConcurrentModificationException\nIterator<String> it = list.iterator();\nwhile (it.hasNext()) {\n    String element = it.next();\n    list.add("New Element"); // Direct modification!\n}\n\n// \u2705 Correct - Use iterator methods only\nIterator<String> it = list.iterator();\nwhile (it.hasNext()) {\n    String element = it.next();\n    it.remove(); // Use iterator\'s remove method\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,r.jsx)(n.h3,{id:"working-with-different-collection-types",children:"Working with Different Collection Types"}),"\n",(0,r.jsx)(n.h4,{id:"arraylist-example",children:"ArrayList Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ArrayList<String> arrayList = new ArrayList<>();\narrayList.add("A");\narrayList.add("B");\narrayList.add("C");\n\nIterator<String> arrayIt = arrayList.iterator();\nwhile (arrayIt.hasNext()) {\n    System.out.println(arrayIt.next());\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"hashset-example",children:"HashSet Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"HashSet<Integer> hashSet = new HashSet<>();\nhashSet.add(10);\nhashSet.add(20);\nhashSet.add(30);\n\nIterator<Integer> setIt = hashSet.iterator();\nwhile (setIt.hasNext()) {\n    System.out.println(setIt.next());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-object-iteration",children:"Custom Object Iteration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return name + " (" + age + ")";\n    }\n}\n\n// Usage\nArrayList<Person> people = new ArrayList<>();\npeople.add(new Person("Alice", 30));\npeople.add(new Person("Bob", 25));\n\nIterator<Person> personIt = people.iterator();\nwhile (personIt.hasNext()) {\n    Person person = personIt.next();\n    System.out.println(person);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-basic-iteration",children:"Example 1: Basic Iteration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class BasicIteration {\n    public static void main(String[] args) {\n        ArrayList<String> fruits = new ArrayList<>();\n        fruits.add("Apple");\n        fruits.add("Banana");\n        fruits.add("Orange");\n\n        Iterator<String> it = fruits.iterator();\n\n        System.out.println("Fruits in the list:");\n        while (it.hasNext()) {\n            System.out.println("- " + it.next());\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-conditional-processing",children:"Example 2: Conditional Processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class ConditionalProcessing {\n    public static void main(String[] args) {\n        ArrayList<Integer> scores = new ArrayList<>();\n        scores.add(95);\n        scores.add(67);\n        scores.add(88);\n        scores.add(45);\n        scores.add(92);\n\n        Iterator<Integer> it = scores.iterator();\n\n        System.out.println("High scores (80 and above):");\n        while (it.hasNext()) {\n            Integer score = it.next();\n            if (score >= 80) {\n                System.out.println("Score: " + score);\n            }\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-3-filtering-and-removal",children:"Example 3: Filtering and Removal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class FilterAndRemove {\n    public static void main(String[] args) {\n        ArrayList<String> words = new ArrayList<>();\n        words.add("hello");\n        words.add("a");\n        words.add("world");\n        words.add("of");\n        words.add("programming");\n\n        System.out.println("Original list: " + words);\n\n        Iterator<String> it = words.iterator();\n        while (it.hasNext()) {\n            String word = it.next();\n            if (word.length() <= 2) {\n                it.remove(); // Remove short words\n            }\n        }\n\n        System.out.println("After removing short words: " + words);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"Details"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Purpose"})}),(0,r.jsx)(n.td,{children:"Safe iteration and modification of collections"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Key Methods"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"hasNext()"}),", ",(0,r.jsx)(n.code,{children:"next()"}),", ",(0,r.jsx)(n.code,{children:"remove()"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Advantages"})}),(0,r.jsx)(n.td,{children:"Safe removal during iteration, universal interface"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Best Use Cases"})}),(0,r.jsx)(n.td,{children:"When you need to remove elements while iterating"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Alternative"})}),(0,r.jsx)(n.td,{children:"Enhanced for loop (when not modifying collection)"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Always check ",(0,r.jsx)(n.code,{children:"hasNext()"})," before calling ",(0,r.jsx)(n.code,{children:"next()"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Use iterator's ",(0,r.jsx)(n.code,{children:"remove()"})," method for safe element removal"]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Don't modify collection directly during iteration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Create new iterators for each iteration cycle"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Handle exceptions appropriately"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"These notes cover the essential concepts and practical usage of Java Iterators based on W3Schools documentation and Java best practices."})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);