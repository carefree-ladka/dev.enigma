"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[9464],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(96540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}},97623:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>E,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var r=s(74848),i=s(28453);const a={},t="SQL Interview Questions & Answers",l={id:"Database/SQL Interview Questions",title:"SQL Interview Questions & Answers",description:"A comprehensive guide covering SQL fundamentals to advanced topics with practical examples and Java integration.",source:"@site/docs/Database/SQL Interview Questions.mdx",sourceDirName:"Database",slug:"/Database/SQL Interview Questions",permalink:"/docs/Database/SQL Interview Questions",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Database/SQL Interview Questions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Essentials for Java Backend Developers",permalink:"/docs/Database/SQL Essentials for Java Backend Developers"},next:{title:"Sharding vs Replication vs Partitioning",permalink:"/docs/Database/Sharding vs Replication vs Partitioning"}},d={},o=[{value:"\ud83c\udfd7\ufe0f 1. SQL Basics (for API + DB Integration)",id:"\ufe0f-1-sql-basics-for-api--db-integration",level:2},{value:"Q1: Difference between INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN",id:"q1-difference-between-inner-join-left-join-right-join-and-full-outer-join",level:3},{value:"Q2: What&#39;s the difference between WHERE and HAVING?",id:"q2-whats-the-difference-between-where-and-having",level:3},{value:"Q3: How do you find duplicate records in a table?",id:"q3-how-do-you-find-duplicate-records-in-a-table",level:3},{value:"Q4: Difference between DELETE, TRUNCATE, and DROP",id:"q4-difference-between-delete-truncate-and-drop",level:3},{value:"Q5: What&#39;s the difference between UNION and UNION ALL?",id:"q5-whats-the-difference-between-union-and-union-all",level:3},{value:"Q6: How do you get the nth highest salary in a table?",id:"q6-how-do-you-get-the-nth-highest-salary-in-a-table",level:3},{value:"Q7: What is the purpose of DISTINCT and GROUP BY?",id:"q7-what-is-the-purpose-of-distinct-and-group-by",level:3},{value:"Q8: Explain the difference between BETWEEN, IN, and comparison operators",id:"q8-explain-the-difference-between-between-in-and-comparison-operators",level:3},{value:"Q9: What&#39;s the purpose of COALESCE() and NULLIF()?",id:"q9-whats-the-purpose-of-coalesce-and-nullif",level:3},{value:"Q10: How would you get records between two dates?",id:"q10-how-would-you-get-records-between-two-dates",level:3},{value:"\u2699\ufe0f 2. Intermediate Level (Common in Java REST Backends)",id:"\ufe0f-2-intermediate-level-common-in-java-rest-backends",level:2},{value:"Q11: What&#39;s the difference between primary key, unique key, and foreign key?",id:"q11-whats-the-difference-between-primary-key-unique-key-and-foreign-key",level:3},{value:"Q12: What&#39;s normalization? Explain 1NF, 2NF, and 3NF",id:"q12-whats-normalization-explain-1nf-2nf-and-3nf",level:3},{value:"Q13: What is denormalization, and when is it needed?",id:"q13-what-is-denormalization-and-when-is-it-needed",level:3},{value:"Q14: Explain how indexes improve query performance and when they hurt it",id:"q14-explain-how-indexes-improve-query-performance-and-when-they-hurt-it",level:3},{value:"Q15: What is the difference between clustered and non-clustered indexes?",id:"q15-what-is-the-difference-between-clustered-and-non-clustered-indexes",level:3},{value:"Q16: How would you paginate large datasets efficiently in SQL?",id:"q16-how-would-you-paginate-large-datasets-efficiently-in-sql",level:3},{value:"Q17: Difference between EXISTS and IN?",id:"q17-difference-between-exists-and-in",level:3},{value:"Q18: What&#39;s a subquery? When would you use a CTE (Common Table Expression)?",id:"q18-whats-a-subquery-when-would-you-use-a-cte-common-table-expression",level:3},{value:"Q19: How do you join three or more tables efficiently?",id:"q19-how-do-you-join-three-or-more-tables-efficiently",level:3},{value:"Q20: Explain CASE WHEN usage in SQL for conditional logic",id:"q20-explain-case-when-usage-in-sql-for-conditional-logic",level:3},{value:"\ud83e\udde9 3. Advanced SQL (used in Enterprise Java Projects)",id:"-3-advanced-sql-used-in-enterprise-java-projects",level:2},{value:"Q21: What are window functions (ROW_NUMBER(), RANK(), DENSE_RANK())?",id:"q21-what-are-window-functions-row_number-rank-dense_rank",level:3},{value:"Q22: Explain transactions and ACID properties",id:"q22-explain-transactions-and-acid-properties",level:3},{value:"Q23: What is the difference between commit and rollback?",id:"q23-what-is-the-difference-between-commit-and-rollback",level:3},{value:"Q24: Explain transaction isolation levels",id:"q24-explain-transaction-isolation-levels",level:3},{value:"Q25: How do you handle deadlocks and race conditions?",id:"q25-how-do-you-handle-deadlocks-and-race-conditions",level:3},{value:"Q26: How do you ensure data consistency in concurrent updates?",id:"q26-how-do-you-ensure-data-consistency-in-concurrent-updates",level:3},{value:"Q27: What are stored procedures, and when would you use them vs Java business logic?",id:"q27-what-are-stored-procedures-and-when-would-you-use-them-vs-java-business-logic",level:3},{value:"Q28: How do you handle soft deletes in SQL?",id:"q28-how-do-you-handle-soft-deletes-in-sql",level:3},{value:"Q29: Explain ON DELETE CASCADE and ON UPDATE CASCADE",id:"q29-explain-on-delete-cascade-and-on-update-cascade",level:3},{value:"Q30: How would you debug a slow query in production?",id:"q30-how-would-you-debug-a-slow-query-in-production",level:3},{value:"\ud83d\udd17 4. Fullstack-Oriented SQL Scenarios (Detailed)",id:"-4-fullstack-oriented-sql-scenarios-detailed",level:2},{value:"1. User Management System (Expanded)",id:"1-user-management-system-expanded",level:3},{value:"2. Order &amp; Product System (Expanded)",id:"2-order--product-system-expanded",level:3},{value:"3. Pagination API Deep Dive",id:"3-pagination-api-deep-dive",level:3},{value:"\u26a1 5. Performance &amp; Optimization (Advanced)",id:"-5-performance--optimization-advanced",level:2},{value:"Index Deep Dive",id:"index-deep-dive",level:3},{value:"N+1 Query Problem",id:"n1-query-problem",level:3},{value:"Lazy vs Eager Loading",id:"lazy-vs-eager-loading",level:3},{value:"\ud83e\uddf0 6. Java Integration - Advanced Topics",id:"-6-java-integration---advanced-topics",level:2},{value:"Connection Pooling with HikariCP",id:"connection-pooling-with-hikaricp",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Pagination with Spring Data JPA",id:"pagination-with-spring-data-jpa",level:3},{value:"SQL Injection Prevention",id:"sql-injection-prevention",level:3},{value:"@Transactional Best Practices",id:"transactional-best-practices",level:3},{value:"Custom Query Projections",id:"custom-query-projections",level:3},{value:"Summary of Best Practices",id:"summary-of-best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sql-interview-questions--answers",children:"SQL Interview Questions & Answers"})}),"\n",(0,r.jsx)(n.p,{children:"A comprehensive guide covering SQL fundamentals to advanced topics with practical examples and Java integration."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-1-sql-basics-for-api--db-integration",children:"\ud83c\udfd7\ufe0f 1. SQL Basics (for API + DB Integration)"}),"\n",(0,r.jsx)(n.h3,{id:"q1-difference-between-inner-join-left-join-right-join-and-full-outer-join",children:"Q1: Difference between INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"INNER JOIN"}),": Returns only matching rows from both tables. If no match exists, the row is excluded."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT e.name, d.name\nFROM employees e\nINNER JOIN departments d ON e.dept_id = d.id;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"LEFT JOIN (LEFT OUTER JOIN)"}),": Returns all rows from the left table and matching rows from the right table. Non-matching rows from the right table show NULL."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT e.name, d.name\nFROM employees e\nLEFT JOIN departments d ON e.dept_id = d.id;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"RIGHT JOIN (RIGHT OUTER JOIN)"}),": Returns all rows from the right table and matching rows from the left table. Non-matching rows from the left table show NULL."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT e.name, d.name\nFROM employees e\nRIGHT JOIN departments d ON e.dept_id = d.id;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"FULL OUTER JOIN"}),": Returns all rows from both tables. Shows NULL where no match exists on either side."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT e.name, d.name\nFROM employees e\nFULL OUTER JOIN departments d ON e.dept_id = d.id;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world use case"}),": In a React dashboard showing employee-department mapping, use LEFT JOIN to show all employees even if they're not assigned to a department yet."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q2-whats-the-difference-between-where-and-having",children:"Q2: What's the difference between WHERE and HAVING?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WHERE"}),": Filters rows before grouping. Used with individual row conditions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HAVING"}),": Filters groups after aggregation. Used with aggregate functions like COUNT, SUM, AVG."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- WHERE: Filters before grouping\nSELECT department, COUNT(*) AS emp_count\nFROM employees\nWHERE salary > 50000\nGROUP BY department;\n\n-- HAVING: Filters after grouping\nSELECT department, COUNT(*) AS emp_count\nFROM employees\nGROUP BY department\nHAVING COUNT(*) > 5;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key difference"}),": WHERE cannot use aggregate functions; HAVING can."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java tie-in"}),": When building filter APIs in Spring Boot, WHERE clauses map to query parameters, while HAVING is used for analytical endpoints."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q3-how-do-you-find-duplicate-records-in-a-table",children:"Q3: How do you find duplicate records in a table?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Find duplicate emails\nSELECT email, COUNT(*) AS duplicate_count\nFROM users\nGROUP BY email\nHAVING COUNT(*) > 1;\n\n-- Get all details of duplicate records\nSELECT u.*\nFROM users u\nINNER JOIN (\n    SELECT email\n    FROM users\n    GROUP BY email\n    HAVING COUNT(*) > 1\n) duplicates ON u.email = duplicates.email\nORDER BY u.email;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alternative using window functions:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) AS rn\n    FROM users\n) subquery\nWHERE rn > 1;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q4-difference-between-delete-truncate-and-drop",children:"Q4: Difference between DELETE, TRUNCATE, and DROP"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"DELETE"}),(0,r.jsx)(n.th,{children:"TRUNCATE"}),(0,r.jsx)(n.th,{children:"DROP"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Purpose"})}),(0,r.jsx)(n.td,{children:"Remove specific rows"}),(0,r.jsx)(n.td,{children:"Remove all rows"}),(0,r.jsx)(n.td,{children:"Remove entire table"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"WHERE clause"})}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Rollback"})}),(0,r.jsx)(n.td,{children:"Yes (with transaction)"}),(0,r.jsx)(n.td,{children:"No (auto-commit)"}),(0,r.jsx)(n.td,{children:"No"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Triggers"})}),(0,r.jsx)(n.td,{children:"Fires triggers"}),(0,r.jsx)(n.td,{children:"Doesn't fire triggers"}),(0,r.jsx)(n.td,{children:"Removes triggers too"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Speed"})}),(0,r.jsx)(n.td,{children:"Slower"}),(0,r.jsx)(n.td,{children:"Faster"}),(0,r.jsx)(n.td,{children:"Fastest"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Identity reset"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"N/A"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- DELETE: Removes specific rows\nDELETE FROM employees WHERE id = 5;\n\n-- TRUNCATE: Removes all rows, resets auto-increment\nTRUNCATE TABLE employees;\n\n-- DROP: Removes entire table structure\nDROP TABLE employees;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java tie-in"}),": In Spring Boot, use ",(0,r.jsx)(n.code,{children:"@Transactional"})," with DELETE for rollback capability. TRUNCATE is used in test cleanup methods."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q5-whats-the-difference-between-union-and-union-all",children:"Q5: What's the difference between UNION and UNION ALL?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UNION"}),": Combines results from multiple queries and removes duplicates. Slower due to duplicate elimination."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UNION ALL"}),": Combines results and keeps all duplicates. Faster."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- UNION: Removes duplicates\nSELECT name FROM employees\nUNION\nSELECT name FROM contractors;\n\n-- UNION ALL: Keeps duplicates\nSELECT name FROM employees\nUNION ALL\nSELECT name FROM contractors;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance tip"}),": Always use UNION ALL if duplicates don't matter \u2014 it's significantly faster."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java tie-in"}),": When building search APIs that query multiple tables, use UNION ALL for better performance."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q6-how-do-you-get-the-nth-highest-salary-in-a-table",children:"Q6: How do you get the nth highest salary in a table?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 1: Using LIMIT with OFFSET"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- 3rd highest salary\nSELECT DISTINCT salary\nFROM employees\nORDER BY salary DESC\nLIMIT 1 OFFSET 2;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 2: Using subquery"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT MAX(salary)\nFROM employees\nWHERE salary < (\n    SELECT MAX(salary)\n    FROM employees\n    WHERE salary < (SELECT MAX(salary) FROM employees)\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 3: Using DENSE_RANK (Best approach)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT salary\nFROM (\n    SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS rank\n    FROM employees\n) ranked\nWHERE rank = 3;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why DENSE_RANK?"})," Handles ties properly. If two people have the 2nd highest salary, the next salary is still ranked 3rd."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q7-what-is-the-purpose-of-distinct-and-group-by",children:"Q7: What is the purpose of DISTINCT and GROUP BY?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DISTINCT"}),": Removes duplicate rows from result set. Simple deduplication."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GROUP BY"}),": Groups rows for aggregation (COUNT, SUM, AVG, etc.)."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- DISTINCT: Get unique departments\nSELECT DISTINCT department FROM employees;\n\n-- GROUP BY: Get employee count per department\nSELECT department, COUNT(*) AS emp_count\nFROM employees\nGROUP BY department;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key difference"}),": Use DISTINCT for simple deduplication. Use GROUP BY when you need aggregation."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": GROUP BY is generally faster for large datasets when combined with aggregation."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q8-explain-the-difference-between-between-in-and-comparison-operators",children:"Q8: Explain the difference between BETWEEN, IN, and comparison operators"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- BETWEEN: Range check (inclusive)\nSELECT * FROM products\nWHERE price BETWEEN 100 AND 500;\n-- Equivalent to: price >= 100 AND price <= 500\n\n-- IN: Multiple specific values\nSELECT * FROM employees\nWHERE department IN ('Engineering', 'Sales', 'Marketing');\n-- Equivalent to: department = 'Engineering' OR department = 'Sales' OR ...\n\n-- Comparison operators: Single condition\nSELECT * FROM employees WHERE salary > 60000;\nSELECT * FROM employees WHERE status = 'Active';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance tip"}),": For large IN lists (>1000 values), consider using a JOIN with a temporary table instead."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q9-whats-the-purpose-of-coalesce-and-nullif",children:"Q9: What's the purpose of COALESCE() and NULLIF()?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"COALESCE()"}),": Returns the first non-NULL value from a list."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Return backup contact if primary is null\nSELECT name, COALESCE(phone, mobile, email, 'No contact') AS contact\nFROM customers;\n\n-- Handle null salaries\nSELECT name, COALESCE(salary, 0) AS salary\nFROM employees;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NULLIF()"}),": Returns NULL if two values are equal, otherwise returns the first value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Avoid division by zero\nSELECT sales / NULLIF(visits, 0) AS conversion_rate\nFROM analytics;\n\n-- Convert empty strings to NULL\nSELECT NULLIF(address, '') AS address\nFROM users;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java tie-in"}),": These functions are useful for handling Optional fields in Spring Boot responses."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q10-how-would-you-get-records-between-two-dates",children:"Q10: How would you get records between two dates?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Using BETWEEN (inclusive)\nSELECT * FROM orders\nWHERE order_date BETWEEN '2025-01-01' AND '2025-01-31';\n\n-- Using comparison operators (more explicit)\nSELECT * FROM orders\nWHERE order_date >= '2025-01-01'\n  AND order_date < '2025-02-01';\n\n-- Last 30 days\nSELECT * FROM orders\nWHERE order_date >= CURRENT_DATE - INTERVAL 30 DAY;\n\n-- This month\nSELECT * FROM orders\nWHERE YEAR(order_date) = YEAR(CURRENT_DATE)\n  AND MONTH(order_date) = MONTH(CURRENT_DATE);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": When using BETWEEN with timestamps, be careful about time components:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- May miss records on end date after midnight\nWHERE created_at BETWEEN '2025-01-01 00:00:00' AND '2025-01-31 23:59:59'\n\n-- Better approach\nWHERE created_at >= '2025-01-01' AND created_at < '2025-02-01'\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-2-intermediate-level-common-in-java-rest-backends",children:"\u2699\ufe0f 2. Intermediate Level (Common in Java REST Backends)"}),"\n",(0,r.jsx)(n.h3,{id:"q11-whats-the-difference-between-primary-key-unique-key-and-foreign-key",children:"Q11: What's the difference between primary key, unique key, and foreign key?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"PRIMARY KEY"}),(0,r.jsx)(n.th,{children:"UNIQUE KEY"}),(0,r.jsx)(n.th,{children:"FOREIGN KEY"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Nulls allowed"})}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Yes (one NULL)"}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Per table"})}),(0,r.jsx)(n.td,{children:"Only one"}),(0,r.jsx)(n.td,{children:"Multiple allowed"}),(0,r.jsx)(n.td,{children:"Multiple allowed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Purpose"})}),(0,r.jsx)(n.td,{children:"Unique identifier"}),(0,r.jsx)(n.td,{children:"Enforce uniqueness"}),(0,r.jsx)(n.td,{children:"Referential integrity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Index"})}),(0,r.jsx)(n.td,{children:"Clustered index"}),(0,r.jsx)(n.td,{children:"Non-clustered index"}),(0,r.jsx)(n.td,{children:"Should be indexed"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE employees (\n    id INT PRIMARY KEY,              -- Primary key\n    email VARCHAR(255) UNIQUE,       -- Unique key\n    ssn VARCHAR(11) UNIQUE,          -- Another unique key\n    department_id INT,\n    FOREIGN KEY (department_id) REFERENCES departments(id)  -- Foreign key\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world example"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PRIMARY KEY: employee id"}),"\n",(0,r.jsx)(n.li,{children:"UNIQUE: email, SSN (can have NULL for contractors without SSN)"}),"\n",(0,r.jsx)(n.li,{children:"FOREIGN KEY: department_id references departments table"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q12-whats-normalization-explain-1nf-2nf-and-3nf",children:"Q12: What's normalization? Explain 1NF, 2NF, and 3NF"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Normalization"}),": Process of organizing data to reduce redundancy and improve integrity."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"1NF (First Normal Form)"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each column contains atomic (indivisible) values"}),"\n",(0,r.jsx)(n.li,{children:"No repeating groups"}),"\n",(0,r.jsx)(n.li,{children:"Each row is unique"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- \u274c Violates 1NF (multiple values in one column)\nCREATE TABLE students (\n    id INT,\n    name VARCHAR(100),\n    subjects VARCHAR(255)  -- "Math, Physics, Chemistry"\n);\n\n-- \u2705 Follows 1NF\nCREATE TABLE students (\n    id INT,\n    name VARCHAR(100)\n);\n\nCREATE TABLE student_subjects (\n    student_id INT,\n    subject VARCHAR(50)\n);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2NF (Second Normal Form)"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Must be in 1NF"}),"\n",(0,r.jsx)(n.li,{children:"All non-key attributes fully depend on the primary key"}),"\n",(0,r.jsx)(n.li,{children:"No partial dependencies"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- \u274c Violates 2NF (instructor depends only on subject, not on student+subject)\nCREATE TABLE enrollments (\n    student_id INT,\n    subject VARCHAR(50),\n    instructor VARCHAR(100),\n    PRIMARY KEY (student_id, subject)\n);\n\n-- \u2705 Follows 2NF\nCREATE TABLE enrollments (\n    student_id INT,\n    subject_id INT,\n    PRIMARY KEY (student_id, subject_id)\n);\n\nCREATE TABLE subjects (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    instructor VARCHAR(100)\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"3NF (Third Normal Form)"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Must be in 2NF"}),"\n",(0,r.jsx)(n.li,{children:"No transitive dependencies (non-key attributes depend only on the primary key)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- \u274c Violates 3NF (department_name depends on department_id, not on employee_id)\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    department_id INT,\n    department_name VARCHAR(100)\n);\n\n-- \u2705 Follows 3NF\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    department_id INT\n);\n\nCREATE TABLE departments (\n    id INT PRIMARY KEY,\n    name VARCHAR(100)\n);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q13-what-is-denormalization-and-when-is-it-needed",children:"Q13: What is denormalization, and when is it needed?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Denormalization"}),": Intentionally adding redundancy to improve read performance by reducing joins."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When to use"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Heavy read operations (analytics, reporting)"}),"\n",(0,r.jsx)(n.li,{children:"Complex joins affecting performance"}),"\n",(0,r.jsx)(n.li,{children:"Data warehouse scenarios"}),"\n",(0,r.jsx)(n.li,{children:"Caching layer design"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Normalized (3NF)\nSELECT e.name, d.name AS dept, d.location\nFROM employees e\nJOIN departments d ON e.dept_id = d.id;\n\n-- Denormalized (faster reads, but update complexity)\nCREATE TABLE employees_denorm (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    dept_id INT,\n    dept_name VARCHAR(100),    -- Redundant\n    dept_location VARCHAR(100)  -- Redundant\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Trade-offs"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Faster SELECT queries (no joins)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Better for analytics dashboards"}),"\n",(0,r.jsx)(n.li,{children:"\u274c More storage space"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Update anomalies (must update multiple places)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Data inconsistency risk"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world example"}),": E-commerce order table storing product name and price at order time (even though product table has this info) to preserve historical data."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q14-explain-how-indexes-improve-query-performance-and-when-they-hurt-it",children:"Q14: Explain how indexes improve query performance and when they hurt it"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"How indexes work"}),": Like a book's index \u2014 helps locate data without scanning the entire table."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Without index: Full table scan\nSELECT * FROM employees WHERE email = 'john@example.com';\n\n-- Create index\nCREATE INDEX idx_email ON employees(email);\n-- Now: Direct lookup using B-tree\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When indexes help"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"WHERE clauses"}),"\n",(0,r.jsx)(n.li,{children:"JOIN conditions"}),"\n",(0,r.jsx)(n.li,{children:"ORDER BY columns"}),"\n",(0,r.jsx)(n.li,{children:"Searching large tables"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When indexes hurt"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Slow INSERTs: Index must be updated\nINSERT INTO employees (name, email, department)\nVALUES ('John', 'john@example.com', 'Engineering');\n\n-- Slow UPDATEs on indexed columns\nUPDATE employees SET email = 'newemail@example.com' WHERE id = 1;\n\n-- Slow DELETEs: Index must be updated\nDELETE FROM employees WHERE id = 1;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance impact"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Too many indexes \u2192 slower writes"}),"\n",(0,r.jsx)(n.li,{children:"Unused indexes \u2192 wasted space and maintenance overhead"}),"\n",(0,r.jsx)(n.li,{children:"Wrong indexes \u2192 optimizer may choose suboptimal query plans"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Best practices"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Index foreign keys"}),"\n",(0,r.jsx)(n.li,{children:"Index frequently searched columns"}),"\n",(0,r.jsx)(n.li,{children:"Use composite indexes for multi-column queries"}),"\n",(0,r.jsx)(n.li,{children:"Remove unused indexes"}),"\n",(0,r.jsx)(n.li,{children:"Monitor index usage"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Composite index for common query\nCREATE INDEX idx_dept_salary ON employees(department_id, salary);\n\n-- Benefits this query:\nSELECT * FROM employees\nWHERE department_id = 5 AND salary > 60000;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q15-what-is-the-difference-between-clustered-and-non-clustered-indexes",children:"Q15: What is the difference between clustered and non-clustered indexes?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Clustered Index"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Physical order of data matches index order"}),"\n",(0,r.jsx)(n.li,{children:"One per table (usually primary key)"}),"\n",(0,r.jsx)(n.li,{children:"Table data stored in index leaf nodes"}),"\n",(0,r.jsx)(n.li,{children:"Faster for range queries"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE employees (\n    id INT PRIMARY KEY,  -- Automatically creates clustered index\n    name VARCHAR(100)\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Non-clustered Index"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Separate structure from table data"}),"\n",(0,r.jsx)(n.li,{children:"Multiple per table"}),"\n",(0,r.jsx)(n.li,{children:"Leaf nodes contain pointers to data"}),"\n",(0,r.jsx)(n.li,{children:"Additional lookup required"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_name ON employees(name);  -- Non-clustered index\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Visual difference"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Clustered Index:\n[10] \u2192 [Row data for ID 10]\n[20] \u2192 [Row data for ID 20]\n[30] \u2192 [Row data for ID 30]\n\nNon-clustered Index:\n['Alice'] \u2192 Pointer to row\n['Bob'] \u2192 Pointer to row\n['Charlie'] \u2192 Pointer to row\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance comparison"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Fast: Uses clustered index\nSELECT * FROM employees WHERE id = 100;\n\n-- Slower: Uses non-clustered index + lookup\nSELECT * FROM employees WHERE name = 'Alice';\n\n-- Fastest: Covering index (non-clustered but includes all needed columns)\nCREATE INDEX idx_name_email ON employees(name, email);\nSELECT name, email FROM employees WHERE name = 'Alice';\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q16-how-would-you-paginate-large-datasets-efficiently-in-sql",children:"Q16: How would you paginate large datasets efficiently in SQL?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 1: OFFSET/LIMIT (Simple but slow for large offsets)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Page 1 (0-9)\nSELECT * FROM employees ORDER BY id LIMIT 10 OFFSET 0;\n\n-- Page 100 (990-999)\nSELECT * FROM employees ORDER BY id LIMIT 10 OFFSET 990;\n-- Problem: Database scans 990 rows before returning 10\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Method 2: Keyset Pagination (Seek Method - Recommended)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Page 1\nSELECT * FROM employees ORDER BY id LIMIT 10;\n-- Returns ids 1-10, last id is 10\n\n-- Page 2\nSELECT * FROM employees WHERE id > 10 ORDER BY id LIMIT 10;\n-- Returns ids 11-20, last id is 20\n\n-- Page 3\nSELECT * FROM employees WHERE id > 20 ORDER BY id LIMIT 10;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Advantages of keyset pagination"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Consistent performance regardless of page number"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 No duplicate rows when data changes"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 No missing rows when data changes"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java + Spring Boot implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// OFFSET pagination (built-in)\n@GetMapping("/employees")\npublic Page<Employee> getEmployees(Pageable pageable) {\n    return employeeRepository.findAll(pageable);\n}\n\n// Keyset pagination (custom)\n@GetMapping("/employees/keyset")\npublic List<Employee> getEmployeesKeyset(@RequestParam(required = false) Long lastId) {\n    return employeeRepository.findTop10ByIdGreaterThanOrderById(lastId != null ? lastId : 0);\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"React tie-in"}),": Keyset pagination works perfectly with infinite scroll components."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q17-difference-between-exists-and-in",children:"Q17: Difference between EXISTS and IN?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"IN"}),": Checks if value matches any value in a list/subquery. Returns values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM employees\nWHERE department_id IN (SELECT id FROM departments WHERE location = 'Bangalore');\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"EXISTS"}),": Checks if subquery returns any rows. Returns boolean."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM employees e\nWHERE EXISTS (\n    SELECT 1 FROM departments d\n    WHERE d.id = e.department_id AND d.location = 'Bangalore'\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance differences"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- IN: Executes subquery first, then checks each row\n-- Bad for large subquery results\nSELECT * FROM orders\nWHERE customer_id IN (SELECT id FROM customers WHERE country = 'India');\n\n-- EXISTS: Stops at first match (short-circuit evaluation)\n-- Better for large datasets\nSELECT * FROM orders o\nWHERE EXISTS (\n    SELECT 1 FROM customers c\n    WHERE c.id = o.customer_id AND c.country = 'India'\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When to use what"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use IN"}),": Small, static lists ",(0,r.jsx)(n.code,{children:"WHERE status IN ('Active', 'Pending')"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use EXISTS"}),": Correlated subqueries or large result sets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use JOIN"}),": When you need columns from both tables"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"NOT EXISTS vs NOT IN pitfall"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- NOT IN with NULLs returns empty result!\nSELECT * FROM employees\nWHERE id NOT IN (SELECT manager_id FROM employees);  -- If any manager_id is NULL, returns 0 rows\n\n-- NOT EXISTS handles NULLs correctly\nSELECT * FROM employees e\nWHERE NOT EXISTS (\n    SELECT 1 FROM employees m WHERE m.manager_id = e.id\n);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q18-whats-a-subquery-when-would-you-use-a-cte-common-table-expression",children:"Q18: What's a subquery? When would you use a CTE (Common Table Expression)?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Subquery"}),": Query nested inside another query."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Scalar subquery (returns single value)\nSELECT name, salary,\n    (SELECT AVG(salary) FROM employees) AS avg_salary\nFROM employees;\n\n-- Row subquery\nSELECT * FROM employees\nWHERE (department_id, salary) = (SELECT id, max_salary FROM departments WHERE name = 'Engineering');\n\n-- Table subquery\nSELECT * FROM (\n    SELECT name, salary, RANK() OVER (ORDER BY salary DESC) AS rank\n    FROM employees\n) ranked\nWHERE rank <= 5;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"CTE (Common Table Expression)"}),": Named temporary result set."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"WITH department_stats AS (\n    SELECT department_id,\n           AVG(salary) AS avg_salary,\n           COUNT(*) AS emp_count\n    FROM employees\n    GROUP BY department_id\n)\nSELECT e.name, e.salary, ds.avg_salary\nFROM employees e\nJOIN department_stats ds ON e.department_id = ds.department_id\nWHERE e.salary > ds.avg_salary;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When to use CTE over subquery"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Readability"}),": Complex queries are easier to understand"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Hard to read subquery\nSELECT * FROM (\n    SELECT * FROM (\n        SELECT * FROM employees WHERE salary > 50000\n    ) high_earners WHERE department_id IN (1, 2, 3)\n) filtered;\n\n-- Clear CTE\nWITH high_earners AS (\n    SELECT * FROM employees WHERE salary > 50000\n),\nfiltered AS (\n    SELECT * FROM high_earners WHERE department_id IN (1, 2, 3)\n)\nSELECT * FROM filtered;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusability"}),": Reference the same result set multiple times"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"WITH active_customers AS (\n    SELECT * FROM customers WHERE status = 'Active'\n)\nSELECT\n    (SELECT COUNT(*) FROM active_customers) AS total,\n    (SELECT AVG(credit_limit) FROM active_customers) AS avg_credit;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recursive queries"}),": Only possible with CTEs"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Find all employees in hierarchy\nWITH RECURSIVE employee_hierarchy AS (\n    SELECT id, name, manager_id, 1 AS level\n    FROM employees WHERE manager_id IS NULL\n\n    UNION ALL\n\n    SELECT e.id, e.name, e.manager_id, eh.level + 1\n    FROM employees e\n    JOIN employee_hierarchy eh ON e.manager_id = eh.id\n)\nSELECT * FROM employee_hierarchy;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": CTEs and subqueries generally have similar performance. Optimizer often treats them the same way."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q19-how-do-you-join-three-or-more-tables-efficiently",children:"Q19: How do you join three or more tables efficiently?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Basic multi-table join"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n    o.id AS order_id,\n    c.name AS customer,\n    p.name AS product,\n    oi.quantity,\n    oi.quantity * p.price AS total\nFROM orders o\nJOIN customers c ON o.customer_id = c.id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE o.order_date >= '2025-01-01';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Optimization strategies"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Join order matters"}),": Start with smallest result set"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Bad: Starts with large table\nSELECT * FROM orders o\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE p.category = 'Electronics';  -- Filters at the end\n\n-- Good: Filters early\nSELECT * FROM products p\nJOIN order_items oi ON p.id = oi.product_id\nJOIN orders o ON oi.order_id = o.id\nWHERE p.category = 'Electronics';  -- Filters first\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Index join columns"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_customer_id ON orders(customer_id);\nCREATE INDEX idx_order_id ON order_items(order_id);\nCREATE INDEX idx_product_id ON order_items(product_id);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use appropriate join types"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Only get customers with orders\nINNER JOIN\n\n-- Get all customers, show order info if available\nLEFT JOIN\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Subquery for pre-filtering"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Instead of joining all, filter first\nSELECT o.*, c.name, p.name\nFROM orders o\nJOIN customers c ON o.customer_id = c.id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN (\n    SELECT id, name FROM products WHERE category = 'Electronics'\n) p ON oi.product_id = p.id;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use EXPLAIN to analyze"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT o.id, c.name, p.name\nFROM orders o\nJOIN customers c ON o.customer_id = c.id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q20-explain-case-when-usage-in-sql-for-conditional-logic",children:"Q20: Explain CASE WHEN usage in SQL for conditional logic"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Simple CASE"})," (equality check):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name,\n    CASE department_id\n        WHEN 1 THEN 'Engineering'\n        WHEN 2 THEN 'Sales'\n        WHEN 3 THEN 'Marketing'\n        ELSE 'Other'\n    END AS department_name\nFROM employees;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Searched CASE"})," (conditional logic):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, salary,\n    CASE\n        WHEN salary < 40000 THEN 'Junior'\n        WHEN salary BETWEEN 40000 AND 80000 THEN 'Mid-level'\n        WHEN salary > 80000 THEN 'Senior'\n        ELSE 'Unknown'\n    END AS seniority\nFROM employees;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world examples"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Conditional aggregation"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n    department,\n    COUNT(*) AS total_employees,\n    SUM(CASE WHEN salary > 60000 THEN 1 ELSE 0 END) AS high_earners,\n    SUM(CASE WHEN hire_date > '2024-01-01' THEN 1 ELSE 0 END) AS new_hires\nFROM employees\nGROUP BY department;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic sorting"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM products\nORDER BY\n    CASE\n        WHEN @sort_by = 'price' THEN price\n        WHEN @sort_by = 'name' THEN name\n        ELSE id\n    END;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Conditional updates"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"UPDATE employees\nSET bonus = CASE\n    WHEN performance_rating = 'Excellent' THEN salary * 0.15\n    WHEN performance_rating = 'Good' THEN salary * 0.10\n    WHEN performance_rating = 'Average' THEN salary * 0.05\n    ELSE 0\nEND;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pivot table simulation"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT\n    product_id,\n    SUM(CASE WHEN MONTH(order_date) = 1 THEN quantity ELSE 0 END) AS jan_sales,\n    SUM(CASE WHEN MONTH(order_date) = 2 THEN quantity ELSE 0 END) AS feb_sales,\n    SUM(CASE WHEN MONTH(order_date) = 3 THEN quantity ELSE 0 END) AS mar_sales\nFROM order_items\nGROUP BY product_id;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/Spring Boot tie-in"}),": CASE expressions are useful for creating DTO projections with computed fields:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Query("SELECT new com.example.EmployeeDTO(e.name, " +\n       "CASE WHEN e.salary > 60000 THEN \'Senior\' ELSE \'Junior\' END) " +\n       "FROM Employee e")\nList<EmployeeDTO> getEmployeesWithLevel();\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-3-advanced-sql-used-in-enterprise-java-projects",children:"\ud83e\udde9 3. Advanced SQL (used in Enterprise Java Projects)"}),"\n",(0,r.jsx)(n.h3,{id:"q21-what-are-window-functions-row_number-rank-dense_rank",children:"Q21: What are window functions (ROW_NUMBER(), RANK(), DENSE_RANK())?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Window functions"}),": Perform calculations across a set of rows related to the current row without collapsing the result set."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ROW_NUMBER()"}),": Assigns unique sequential numbers (1, 2, 3, ...)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, salary,\n    ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num\nFROM employees;\n-- Output: Alice-100k-1, Bob-95k-2, Charlie-95k-3\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"RANK()"}),": Assigns ranks with gaps for ties (1, 2, 2, 4, ...)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, salary,\n    RANK() OVER (ORDER BY salary DESC) AS rank\nFROM employees;\n-- Output: Alice-100k-1, Bob-95k-2, Charlie-95k-2, David-90k-4\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"DENSE_RANK()"}),": Assigns ranks without gaps (1, 2, 2, 3, ...)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, salary,\n    DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_rank\nFROM employees;\n-- Output: Alice-100k-1, Bob-95k-2, Charlie-95k-2, David-90k-3\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world examples"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Top N per group"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Top 3 earners per department\nWITH ranked AS (\n    SELECT name, department, salary,\n        ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS rn\n    FROM employees\n)\nSELECT * FROM ranked WHERE rn <= 3;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Running totals"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT order_date, amount,\n    SUM(amount) OVER (ORDER BY order_date) AS running_total\nFROM orders;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Moving average"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT order_date, amount,\n    AVG(amount) OVER (\n        ORDER BY order_date\n        ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n    ) AS moving_avg_7days\nFROM daily_sales;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lag/Lead (compare with previous/next row)"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, salary,\n    LAG(salary) OVER (ORDER BY salary) AS prev_salary,\n    LEAD(salary) OVER (ORDER BY salary) AS next_salary,\n    salary - LAG(salary) OVER (ORDER BY salary) AS diff_from_prev\nFROM employees;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Percentile calculation"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT name, salary,\n    PERCENT_RANK() OVER (ORDER BY salary) AS percentile\nFROM employees;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java tie-in"}),": These queries are perfect for dashboard APIs showing rankings, trends, and analytics."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q22-explain-transactions-and-acid-properties",children:"Q22: Explain transactions and ACID properties"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Transaction"}),": A unit of work that either completes entirely or not at all."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\n    UPDATE accounts SET balance = balance + 100 WHERE id = 2;\nCOMMIT;\n\n-- Or if something goes wrong:\nROLLBACK;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ACID Properties"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"A - Atomicity"}),": All or nothing. Either all operations succeed or all fail."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Both updates happen or neither happens\nSTART TRANSACTION;\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\n    UPDATE accounts SET balance = balance + 100 WHERE id = 2;\n    -- If second update fails, first is rolled back\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"C - Consistency"}),": Database moves from one valid state to another. Constraints are never violated."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Constraint ensures balance never negative\nALTER TABLE accounts ADD CONSTRAINT chk_balance CHECK (balance >= 0);\n\nSTART TRANSACTION;\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\n    -- If this violates constraint, transaction fails\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"I - Isolation"}),": Concurrent transactions don't interfere with each other."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Transaction 1\nSTART TRANSACTION;\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\n    -- Other transactions don't see this change until COMMIT\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"D - Durability"}),": Once committed, changes are permanent (even after crashes)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"COMMIT;  -- Changes written to disk, survive system failures\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world example"}),": E-commerce order placement"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    -- Deduct inventory\n    UPDATE products SET stock = stock - 1 WHERE id = 101;\n\n    -- Create order\n    INSERT INTO orders (customer_id, total) VALUES (1, 999.99);\n\n    -- Process payment\n    INSERT INTO payments (order_id, amount) VALUES (LAST_INSERT_ID(), 999.99);\n\n    -- If any step fails, all changes are rolled back\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/Spring Boot tie-in"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Transactional\npublic void placeOrder(Long customerId, Long productId) {\n    productRepository.decrementStock(productId);\n    Order order = orderRepository.save(new Order(customerId));\n    paymentRepository.save(new Payment(order.getId()));\n    // If any operation fails, Spring rolls back automatically\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q23-what-is-the-difference-between-commit-and-rollback",children:"Q23: What is the difference between commit and rollback?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"COMMIT"}),": Permanently saves all changes made in the current transaction."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    INSERT INTO orders (customer_id, amount) VALUES (1, 500);\n    UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 10;\nCOMMIT;  -- Changes are now permanent\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ROLLBACK"}),": Undoes all changes made in the current transaction."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    DELETE FROM orders WHERE id = 100;\n    -- Oops, wrong order!\nROLLBACK;  -- Deletion is undone, order still exists\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use cases"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error handling"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    UPDATE accounts SET balance = balance - 1000 WHERE id = 1;\n\n    -- Check if balance went negative\n    IF (SELECT balance FROM accounts WHERE id = 1) < 0 THEN\n        ROLLBACK;  -- Undo the withdrawal\n    ELSE\n        COMMIT;    -- Confirm the withdrawal\n    END IF;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Savepoints"})," (partial rollback):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    INSERT INTO orders (customer_id) VALUES (1);\n    SAVEPOINT order_created;\n\n    INSERT INTO order_items (order_id, product_id) VALUES (1, 101);\n    SAVEPOINT items_added;\n\n    -- Oops, wrong item\n    ROLLBACK TO items_added;  -- Only rolls back items, keeps order\n\n    INSERT INTO order_items (order_id, product_id) VALUES (1, 102);\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Auto-commit behavior"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- By default, each statement auto-commits\nUPDATE users SET name = 'John' WHERE id = 1;  -- Auto-committed\n\n-- Disable auto-commit for transactions\nSET autocommit = 0;\nUPDATE users SET name = 'Jane' WHERE id = 1;\nROLLBACK;  -- Works because auto-commit is off\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java tie-in"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Transactional\npublic void processOrder(Order order) {\n    try {\n        orderRepository.save(order);\n        inventoryService.reduceStock(order);\n        paymentService.charge(order);\n        // Automatic COMMIT at method end\n    } catch (Exception e) {\n        // Automatic ROLLBACK on exception\n        throw e;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q24-explain-transaction-isolation-levels",children:"Q24: Explain transaction isolation levels"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Isolation levels"})," control how transaction changes are visible to other concurrent transactions."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"1. READ UNCOMMITTED"})," (Lowest isolation, highest performance)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Transactions can see uncommitted changes from other transactions"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Dirty reads"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n-- Transaction 1\nSTART TRANSACTION;\nUPDATE accounts SET balance = 5000 WHERE id = 1;\n-- Not committed yet\n\n-- Transaction 2 (can see uncommitted change)\nSELECT balance FROM accounts WHERE id = 1;  -- Returns 5000\n\n-- Transaction 1\nROLLBACK;  -- Transaction 2 saw data that never existed!\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2. READ COMMITTED"})," (Default in PostgreSQL, Oracle)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Transactions only see committed changes"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Non-repeatable reads"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET TRANSACTION ISOLATION LEVEL READ COMMITTED;\n\n-- Transaction 1\nSTART TRANSACTION;\nSELECT balance FROM accounts WHERE id = 1;  -- Returns 1000\n\n-- Transaction 2\nUPDATE accounts SET balance = 2000 WHERE id = 1;\nCOMMIT;\n\n-- Transaction 1 (reads again)\nSELECT balance FROM accounts WHERE id = 1;  -- Returns 2000 (different!)\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"3. REPEATABLE READ"})," (Default in MySQL)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Same query returns same results throughout transaction"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Phantom reads"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n\n-- Transaction 1\nSTART TRANSACTION;\nSELECT COUNT(*) FROM orders WHERE customer_id = 1;  -- Returns 5\n\n-- Transaction 2\nINSERT INTO orders (customer_id) VALUES (1);\nCOMMIT;\n\n-- Transaction 1\nSELECT COUNT(*) FROM orders WHERE customer_id = 1;  -- Still returns 5 (MySQL)\n-- But range scans might see new rows (phantom reads in some DBs)\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"4. SERIALIZABLE"})," (Highest isolation, lowest performance)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Transactions execute as if they were serial (one after another)"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No problems"}),": Prevents all anomalies"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\n-- Transactions are essentially queued\n-- Complete isolation but slower performance\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Comparison table"}),":"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Isolation Level"}),(0,r.jsx)(n.th,{children:"Dirty Read"}),(0,r.jsx)(n.th,{children:"Non-repeatable Read"}),(0,r.jsx)(n.th,{children:"Phantom Read"}),(0,r.jsx)(n.th,{children:"Performance"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"READ UNCOMMITTED"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Fastest"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"READ COMMITTED"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Fast"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"REPEATABLE READ"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Slower"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SERIALIZABLE"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"Slowest"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Banking transaction (needs SERIALIZABLE)\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nSTART TRANSACTION;\n    SELECT balance FROM accounts WHERE id = 1 FOR UPDATE;\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\nCOMMIT;\n\n-- Read-only report (can use READ COMMITTED)\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\nSTART TRANSACTION;\n    SELECT * FROM sales_report WHERE date = CURRENT_DATE;\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/Spring Boot tie-in"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Transactional(isolation = Isolation.SERIALIZABLE)\npublic void transferMoney(Long fromAccount, Long toAccount, BigDecimal amount) {\n    // Guaranteed no concurrent modifications\n}\n\n@Transactional(isolation = Isolation.READ_COMMITTED)\npublic List<Report> generateReport() {\n    // Acceptable for reports\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q25-how-do-you-handle-deadlocks-and-race-conditions",children:"Q25: How do you handle deadlocks and race conditions?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Deadlock"}),": Two or more transactions waiting for each other to release locks."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example of deadlock"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Transaction 1\nSTART TRANSACTION;\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;  -- Locks account 1\n-- Waiting to lock account 2...\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\n\n-- Transaction 2 (runs simultaneously)\nSTART TRANSACTION;\nUPDATE accounts SET balance = balance - 50 WHERE id = 2;   -- Locks account 2\n-- Waiting to lock account 1...\nUPDATE accounts SET balance = balance + 50 WHERE id = 1;\n\n-- DEADLOCK! Each waits for the other\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prevention strategies"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent lock ordering"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Always lock accounts in order of ID\nSTART TRANSACTION;\n    UPDATE accounts SET balance = balance - 100 WHERE id = LEAST(@from, @to);\n    UPDATE accounts SET balance = balance + 100 WHERE id = GREATEST(@from, @to);\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use timeout"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET innodb_lock_wait_timeout = 5;  -- Wait max 5 seconds\nSTART TRANSACTION;\n    -- If lock not acquired in 5 seconds, transaction fails\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lock all resources upfront"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    SELECT * FROM accounts WHERE id IN (1, 2) FOR UPDATE;  -- Lock both\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\n    UPDATE accounts SET balance = balance + 100 WHERE id = 2;\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deadlock detection and retry"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Database automatically detects deadlock and rolls back one transaction\n-- Application should retry\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Race conditions"}),": Multiple transactions accessing same data simultaneously."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Both transactions read balance = 1000\n-- Transaction 1: UPDATE accounts SET balance = 1000 + 100\n-- Transaction 2: UPDATE accounts SET balance = 1000 + 200\n-- Final balance = 1200 (should be 1300!)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optimistic locking"})," (version column):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Add version column\nALTER TABLE accounts ADD COLUMN version INT DEFAULT 0;\n\n-- Transaction reads version\nSTART TRANSACTION;\n    SELECT balance, version FROM accounts WHERE id = 1;  -- balance=1000, version=5\n\n    -- Update only if version hasn't changed\n    UPDATE accounts\n    SET balance = 1100, version = version + 1\n    WHERE id = 1 AND version = 5;\n\n    -- If 0 rows updated, someone else modified it - retry\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pessimistic locking"})," (explicit locks):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    SELECT balance FROM accounts WHERE id = 1 FOR UPDATE;  -- Exclusive lock\n    UPDATE accounts SET balance = balance + 100 WHERE id = 1;\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Atomic operations"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Single atomic operation (no race condition possible)\nUPDATE accounts SET balance = balance + 100 WHERE id = 1;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/Spring Boot tie-in"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Optimistic locking with JPA\n@Entity\npublic class Account {\n    @Id private Long id;\n    private BigDecimal balance;\n\n    @Version\n    private Long version;  // JPA handles optimistic locking\n}\n\n// Pessimistic locking\n@Lock(LockModeType.PESSIMISTIC_WRITE)\n@Query("SELECT a FROM Account a WHERE a.id = :id")\nAccount findByIdWithLock(@Param("id") Long id);\n\n// Retry logic for deadlocks\n@Retryable(value = {DeadlockLoserDataAccessException.class}, maxAttempts = 3)\n@Transactional\npublic void transferMoney(Long from, Long to, BigDecimal amount) {\n    // Transaction logic\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q26-how-do-you-ensure-data-consistency-in-concurrent-updates",children:"Q26: How do you ensure data consistency in concurrent updates?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Strategies for maintaining consistency"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database constraints"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Ensure balance never goes negative\nALTER TABLE accounts ADD CONSTRAINT chk_balance CHECK (balance >= 0);\n\n-- Ensure unique email\nALTER TABLE users ADD CONSTRAINT unique_email UNIQUE (email);\n\n-- Ensure foreign key integrity\nALTER TABLE orders\nADD CONSTRAINT fk_customer\nFOREIGN KEY (customer_id) REFERENCES customers(id);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Row-level locking with SELECT FOR UPDATE"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\n    -- Lock the row for update\n    SELECT balance FROM accounts WHERE id = 1 FOR UPDATE;\n\n    -- Only this transaction can modify this row until commit\n    UPDATE accounts SET balance = balance - 100 WHERE id = 1;\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Serializable isolation level"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\nSTART TRANSACTION;\n    -- Complete isolation from other transactions\n    SELECT * FROM inventory WHERE product_id = 1;\n    UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 1;\nCOMMIT;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application-level distributed locks"})," (Redis, etc.):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Using Redis for distributed locking\nRLock lock = redisson.getLock("account:" + accountId);\ntry {\n    lock.lock();\n    // Perform database operations\n    accountRepository.updateBalance(accountId, newBalance);\n} finally {\n    lock.unlock();\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event sourcing pattern"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Instead of updating balance directly, store events\nINSERT INTO account_events (account_id, type, amount, timestamp)\nVALUES (1, 'DEPOSIT', 100, NOW());\n\n-- Calculate balance from events\nSELECT SUM(CASE\n    WHEN type = 'DEPOSIT' THEN amount\n    WHEN type = 'WITHDRAWAL' THEN -amount\nEND) AS balance\nFROM account_events\nWHERE account_id = 1;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Two-phase commit"})," (distributed transactions):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Phase 1: Prepare\nPREPARE TRANSACTION 'txn_123';\n\n-- Phase 2: Commit (on all nodes) or Rollback\nCOMMIT PREPARED 'txn_123';\n-- Or: ROLLBACK PREPARED 'txn_123';\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Real-world example: Inventory management"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Problem: Multiple users buying last item simultaneously\n\n-- Solution 1: Optimistic locking\nUPDATE inventory\nSET quantity = quantity - 1, version = version + 1\nWHERE product_id = 101\n  AND quantity >= 1  -- Check stock available\n  AND version = @current_version;  -- Check no one else updated\n\n-- Solution 2: Pessimistic locking\nSTART TRANSACTION;\n    SELECT quantity FROM inventory\n    WHERE product_id = 101 FOR UPDATE;  -- Lock row\n\n    UPDATE inventory SET quantity = quantity - 1\n    WHERE product_id = 101 AND quantity >= 1;\nCOMMIT;\n\n-- Solution 3: Atomic decrement with check\nUPDATE inventory\nSET quantity = CASE\n    WHEN quantity > 0 THEN quantity - 1\n    ELSE quantity\nEND\nWHERE product_id = 101;\n\n-- Verify update succeeded\nSELECT quantity FROM inventory WHERE product_id = 101;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/Spring Boot best practices"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Transactional(isolation = Isolation.SERIALIZABLE)\npublic void purchaseProduct(Long productId, Long userId) {\n    Product product = productRepository.findByIdWithLock(productId);\n\n    if (product.getQuantity() < 1) {\n        throw new OutOfStockException();\n    }\n\n    product.setQuantity(product.getQuantity() - 1);\n    productRepository.save(product);\n\n    orderRepository.save(new Order(userId, productId));\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q27-what-are-stored-procedures-and-when-would-you-use-them-vs-java-business-logic",children:"Q27: What are stored procedures, and when would you use them vs Java business logic?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Stored Procedure"}),": Precompiled SQL code stored in the database."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create stored procedure\nDELIMITER //\nCREATE PROCEDURE transfer_money(\n    IN from_account INT,\n    IN to_account INT,\n    IN amount DECIMAL(10,2),\n    OUT result VARCHAR(50)\n)\nBEGIN\n    DECLARE current_balance DECIMAL(10,2);\n\n    START TRANSACTION;\n\n    -- Check balance\n    SELECT balance INTO current_balance\n    FROM accounts WHERE id = from_account FOR UPDATE;\n\n    IF current_balance < amount THEN\n        SET result = 'Insufficient funds';\n        ROLLBACK;\n    ELSE\n        UPDATE accounts SET balance = balance - amount WHERE id = from_account;\n        UPDATE accounts SET balance = balance + amount WHERE id = to_account;\n        SET result = 'Success';\n        COMMIT;\n    END IF;\nEND //\nDELIMITER ;\n\n-- Call stored procedure\nCALL transfer_money(1, 2, 100, @result);\nSELECT @result;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When to use stored procedures"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use stored procedures when"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Complex database operations requiring multiple queries"}),"\n",(0,r.jsx)(n.li,{children:"Heavy data processing better done in database"}),"\n",(0,r.jsx)(n.li,{children:"Need to minimize network round trips"}),"\n",(0,r.jsx)(n.li,{children:"Database-agnostic application layer"}),"\n",(0,r.jsx)(n.li,{children:"Shared logic across multiple applications"}),"\n",(0,r.jsx)(n.li,{children:"Performance-critical bulk operations"}),"\n",(0,r.jsx)(n.li,{children:"Legacy systems requiring database-centric logic"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Good use case: Complex report generation\nCREATE PROCEDURE generate_monthly_report(IN month INT, IN year INT)\nBEGIN\n    -- Multiple complex aggregations\n    -- Temporary tables\n    -- Joins across many tables\n    -- Better performed in DB than fetching to Java\nEND;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use Java business logic when"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Complex business rules requiring external services"}),"\n",(0,r.jsx)(n.li,{children:"Need to integrate with APIs, message queues, etc."}),"\n",(0,r.jsx)(n.li,{children:"Logic frequently changes (easier to deploy Java than DB changes)"}),"\n",(0,r.jsx)(n.li,{children:"Better testability (unit tests, mocking)"}),"\n",(0,r.jsx)(n.li,{children:"Better maintainability (version control, code review)"}),"\n",(0,r.jsx)(n.li,{children:"Team expertise in Java over SQL"}),"\n",(0,r.jsx)(n.li,{children:"Need to log, monitor, or trace business logic"}),"\n",(0,r.jsx)(n.li,{children:"Microservices architecture"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Good use case: Order processing with external systems\n@Service\npublic class OrderService {\n    public void processOrder(Order order) {\n        // Validate with external service\n        paymentService.validateCard(order.getPaymentInfo());\n\n        // Business logic\n        if (order.getTotal() > 1000) {\n            order.setStatus(OrderStatus.NEEDS_APPROVAL);\n        }\n\n        // Save to database\n        orderRepository.save(order);\n\n        // Send notification\n        emailService.sendOrderConfirmation(order);\n\n        // Publish event\n        eventPublisher.publish(new OrderCreatedEvent(order));\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Comparison"}),":"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"Stored Procedures"}),(0,r.jsx)(n.th,{children:"Java Business Logic"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Performance"})}),(0,r.jsx)(n.td,{children:"Faster for DB-heavy ops"}),(0,r.jsx)(n.td,{children:"Faster for complex logic"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Network"})}),(0,r.jsx)(n.td,{children:"Fewer round trips"}),(0,r.jsx)(n.td,{children:"More round trips"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Maintainability"})}),(0,r.jsx)(n.td,{children:"Harder to version/test"}),(0,r.jsx)(n.td,{children:"Easier to maintain"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Portability"})}),(0,r.jsx)(n.td,{children:"DB-specific syntax"}),(0,r.jsx)(n.td,{children:"Database agnostic"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Debugging"})}),(0,r.jsx)(n.td,{children:"Limited tools"}),(0,r.jsx)(n.td,{children:"Rich debugging tools"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Integration"})}),(0,r.jsx)(n.td,{children:"Limited to database"}),(0,r.jsx)(n.td,{children:"Full ecosystem access"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Deployment"})}),(0,r.jsx)(n.td,{children:"Requires DB access"}),(0,r.jsx)(n.td,{children:"Standard app deployment"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hybrid approach"})," (best of both worlds):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Java handles orchestration and business logic\n@Service\npublic class ReportService {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    public Report generateMonthlyReport(int month, int year) {\n        // Java handles validation and orchestration\n        if (month < 1 || month > 12) {\n            throw new InvalidMonthException();\n        }\n\n        // Stored procedure handles heavy DB operations\n        jdbcTemplate.call(\n            connection -> connection.prepareCall("{call generate_monthly_report(?, ?)}"),\n            month, year\n        );\n\n        // Java handles post-processing\n        Report report = fetchReportData();\n        emailService.sendReport(report);\n        return report;\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Modern best practice"}),": Favor Java business logic with optimized SQL queries. Use stored procedures sparingly for performance-critical database operations."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q28-how-do-you-handle-soft-deletes-in-sql",children:"Q28: How do you handle soft deletes in SQL?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Soft delete"}),": Marking records as deleted instead of physically removing them."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add deleted flag"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE users ADD COLUMN deleted BOOLEAN DEFAULT FALSE;\nALTER TABLE users ADD COLUMN deleted_at TIMESTAMP NULL;\n\n-- Soft delete\nUPDATE users SET deleted = TRUE, deleted_at = NOW() WHERE id = 1;\n\n-- Query active users\nSELECT * FROM users WHERE deleted = FALSE;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Better approach with status enum"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE users ADD COLUMN status ENUM('ACTIVE', 'DELETED', 'SUSPENDED') DEFAULT 'ACTIVE';\n\n-- Soft delete\nUPDATE users SET status = 'DELETED', deleted_at = NOW() WHERE id = 1;\n\n-- Query\nSELECT * FROM users WHERE status = 'ACTIVE';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Advantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Data recovery possible"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Audit trail maintained"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Historical data preserved for analytics"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Referential integrity maintained"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Disadvantages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c Queries must always filter deleted records"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Unique constraints become complex"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Database grows larger"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Performance impact on large tables"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handling unique constraints"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Problem: Can't reuse email after soft delete\nALTER TABLE users ADD CONSTRAINT unique_email UNIQUE (email);\n\n-- Solution 1: Partial index (PostgreSQL)\nCREATE UNIQUE INDEX unique_active_email\nON users(email) WHERE deleted = FALSE;\n\n-- Solution 2: Include deleted flag in constraint\nALTER TABLE users ADD CONSTRAINT unique_email_active\nUNIQUE (email, deleted);\n\n-- Solution 3: Nullable email on delete\nUPDATE users SET email = NULL, deleted = TRUE WHERE id = 1;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Indexes for soft deletes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Add index on deleted flag\nCREATE INDEX idx_deleted ON users(deleted);\n\n-- Composite index for common queries\nCREATE INDEX idx_status_created ON users(status, created_at);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Views for convenience"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create view of active users\nCREATE VIEW active_users AS\nSELECT * FROM users WHERE deleted = FALSE;\n\n-- Query becomes simpler\nSELECT * FROM active_users WHERE email LIKE '%@example.com';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Automated archiving"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Move old deleted records to archive table\nCREATE TABLE users_archive LIKE users;\n\n-- Archive records deleted > 1 year ago\nINSERT INTO users_archive\nSELECT * FROM users\nWHERE deleted = TRUE AND deleted_at < DATE_SUB(NOW(), INTERVAL 1 YEAR);\n\nDELETE FROM users\nWHERE deleted = TRUE AND deleted_at < DATE_SUB(NOW(), INTERVAL 1 YEAR);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/JPA implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "users")\n@Where(clause = "deleted = false")  // Hibernate @Where annotation\n@SQLDelete(sql = "UPDATE users SET deleted = true, deleted_at = NOW() WHERE id = ?")\npublic class User {\n    @Id\n    private Long id;\n\n    private String email;\n\n    @Column(name = "deleted")\n    private Boolean deleted = false;\n\n    @Column(name = "deleted_at")\n    private LocalDateTime deletedAt;\n}\n\n// Repository automatically filters deleted users\npublic interface UserRepository extends JpaRepository<User, Long> {\n    // This query automatically excludes deleted users\n    List<User> findByEmail(String email);\n\n    // To include deleted users\n    @Query("SELECT u FROM User u WHERE u.email = :email")\n    List<User> findByEmailIncludingDeleted(@Param("email") String email);\n}\n\n// Service layer\n@Service\npublic class UserService {\n    public void softDelete(Long userId) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new UserNotFoundException());\n        user.setDeleted(true);\n        user.setDeletedAt(LocalDateTime.now());\n        userRepository.save(user);\n    }\n\n    public void hardDelete(Long userId) {\n        userRepository.deleteById(userId);  // Physical delete\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handling foreign keys"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Allow references to soft-deleted records\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    user_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n    -- No ON DELETE CASCADE needed\n);\n\n-- Query active orders with active users\nSELECT o.*\nFROM orders o\nJOIN users u ON o.user_id = u.id\nWHERE o.deleted = FALSE AND u.deleted = FALSE;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q29-explain-on-delete-cascade-and-on-update-cascade",children:"Q29: Explain ON DELETE CASCADE and ON UPDATE CASCADE"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Foreign key actions"})," that automatically maintain referential integrity."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ON DELETE CASCADE"}),": Automatically delete child records when parent is deleted."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE departments (\n    id INT PRIMARY KEY,\n    name VARCHAR(100)\n);\n\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    department_id INT,\n    FOREIGN KEY (department_id)\n        REFERENCES departments(id)\n        ON DELETE CASCADE  -- Delete employees when department deleted\n);\n\n-- Delete department\nDELETE FROM departments WHERE id = 1;\n-- All employees with department_id = 1 are automatically deleted\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ON UPDATE CASCADE"}),": Automatically update child records when parent key changes."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    department_id INT,\n    FOREIGN KEY (department_id)\n        REFERENCES departments(id)\n        ON UPDATE CASCADE  -- Update employees when department id changes\n);\n\n-- Update department id\nUPDATE departments SET id = 100 WHERE id = 1;\n-- All employees with department_id = 1 are automatically updated to 100\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Other foreign key actions"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- ON DELETE SET NULL: Set foreign key to NULL when parent deleted\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    department_id INT,\n    FOREIGN KEY (department_id)\n        REFERENCES departments(id)\n        ON DELETE SET NULL\n);\n-- Result: Employees remain but department_id becomes NULL\n\n-- ON DELETE SET DEFAULT: Set to default value\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    department_id INT DEFAULT 1,\n    FOREIGN KEY (department_id)\n        REFERENCES departments(id)\n        ON DELETE SET DEFAULT\n);\n\n-- ON DELETE RESTRICT (default): Prevent deletion if children exist\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    department_id INT,\n    FOREIGN KEY (department_id)\n        REFERENCES departments(id)\n        ON DELETE RESTRICT\n);\n-- DELETE FROM departments WHERE id = 1; -- ERROR if employees exist\n\n-- ON DELETE NO ACTION: Same as RESTRICT but check can be deferred\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    department_id INT,\n    FOREIGN KEY (department_id)\n        REFERENCES departments(id)\n        ON DELETE NO ACTION\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Real-world examples"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CASCADE - Blog with comments"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE posts (\n    id INT PRIMARY KEY,\n    title VARCHAR(200)\n);\n\nCREATE TABLE comments (\n    id INT PRIMARY KEY,\n    post_id INT,\n    content TEXT,\n    FOREIGN KEY (post_id)\n        REFERENCES posts(id)\n        ON DELETE CASCADE  -- Delete comments when post deleted\n);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SET NULL - Employee-Manager relationship"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    manager_id INT,\n    FOREIGN KEY (manager_id)\n        REFERENCES employees(id)\n        ON DELETE SET NULL  -- Don't delete employee if manager leaves\n);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RESTRICT - Orders system"})," (prevent accidental deletions):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE customers (\n    id INT PRIMARY KEY,\n    name VARCHAR(100)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    customer_id INT,\n    FOREIGN KEY (customer_id)\n        REFERENCES customers(id)\n        ON DELETE RESTRICT  -- Can't delete customer with existing orders\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multiple cascading levels"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Three-level cascade\nCREATE TABLE departments (id INT PRIMARY KEY);\n\nCREATE TABLE teams (\n    id INT PRIMARY KEY,\n    dept_id INT,\n    FOREIGN KEY (dept_id) REFERENCES departments(id) ON DELETE CASCADE\n);\n\nCREATE TABLE employees (\n    id INT PRIMARY KEY,\n    team_id INT,\n    FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE\n);\n\n-- Delete department \u2192 deletes teams \u2192 deletes employees (cascades down)\nDELETE FROM departments WHERE id = 1;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance considerations"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- CASCADE can be slow on large tables\n-- Consider indexing foreign keys\nCREATE INDEX idx_employee_dept ON employees(department_id);\n\n-- Check cascade impact before delete\nSELECT COUNT(*) FROM employees WHERE department_id = 1;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/JPA equivalent"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\npublic class Department {\n    @Id\n    private Long id;\n\n    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL, orphanRemoval = true)\n    private List<Employee> employees;\n}\n\n@Entity\npublic class Employee {\n    @Id\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = "department_id")\n    private Department department;\n}\n\n// Deleting department automatically deletes employees\ndepartmentRepository.deleteById(1L);\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Best practices"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Use CASCADE for truly dependent data (comments on posts)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Use SET NULL for optional relationships"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Use RESTRICT to prevent accidental data loss"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Avoid deep cascading chains (performance issues)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Be careful with CASCADE in production (can delete more than intended)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"q30-how-would-you-debug-a-slow-query-in-production",children:"Q30: How would you debug a slow query in production?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Answer:"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Step-by-step debugging process"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"1. Use EXPLAIN to analyze query execution"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SELECT e.name, d.name\nFROM employees e\nJOIN departments d ON e.dept_id = d.id\nWHERE e.salary > 50000;\n\n-- Better: EXPLAIN ANALYZE (shows actual execution)\nEXPLAIN ANALYZE SELECT e.name, d.name\nFROM employees e\nJOIN departments d ON e.dept_id = d.id\nWHERE e.salary > 50000;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reading EXPLAIN output"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'| id | select_type | table | type  | key          | rows  | Extra                 |\n|----|-------------|-------|-------|--------------|-------|-----------------------|\n| 1  | SIMPLE      | e     | ALL   | NULL         | 10000 | Using where           |\n| 1  | SIMPLE      | d     | eq_ref| PRIMARY      | 1     | NULL                  |\n\nProblems to look for:\n- type: ALL (full table scan) - BAD\n- type: index, range, ref, eq_ref - GOOD\n- key: NULL (no index used) - BAD\n- rows: Large number - investigate further\n- Extra: "Using filesort", "Using temporary" - can be slow\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2. Identify missing indexes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Check existing indexes\nSHOW INDEXES FROM employees;\n\n-- Add missing indexes\nCREATE INDEX idx_salary ON employees(salary);\nCREATE INDEX idx_dept_id ON employees(dept_id);\n\n-- Re-run EXPLAIN\nEXPLAIN SELECT * FROM employees WHERE salary > 50000;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"3. Check query statistics"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- MySQL: Enable profiling\nSET profiling = 1;\nSELECT * FROM employees WHERE salary > 50000;\nSHOW PROFILES;\nSHOW PROFILE FOR QUERY 1;\n\n-- PostgreSQL: pg_stat_statements\nSELECT query, calls, total_time, mean_time\nFROM pg_stat_statements\nORDER BY mean_time DESC\nLIMIT 10;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"4. Look for common issues"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"**Issue 1: SELECT ***"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Bad: Fetches all columns\nSELECT * FROM employees;\n\n-- Good: Fetch only needed columns\nSELECT id, name, email FROM employees;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue 2: No index on WHERE/JOIN columns"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Slow: No index on email\nSELECT * FROM users WHERE email = 'john@example.com';\n\n-- Fix\nCREATE INDEX idx_email ON users(email);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue 3: Function on indexed column"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Bad: Function prevents index usage\nSELECT * FROM users WHERE UPPER(email) = 'JOHN@EXAMPLE.COM';\n\n-- Good: Use functional index or change query\nCREATE INDEX idx_email_upper ON users(UPPER(email));\n-- Or\nSELECT * FROM users WHERE email = LOWER('JOHN@EXAMPLE.COM');\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue 4: OR conditions"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Slow: OR prevents efficient index usage\nSELECT * FROM employees\nWHERE department_id = 1 OR department_id = 2 OR department_id = 3;\n\n-- Faster: Use IN\nSELECT * FROM employees\nWHERE department_id IN (1, 2, 3);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue 5: NOT IN with NULL values"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Slow and incorrect with NULLs\nSELECT * FROM employees\nWHERE id NOT IN (SELECT manager_id FROM employees);\n\n-- Faster\nSELECT * FROM employees e\nWHERE NOT EXISTS (SELECT 1 FROM employees m WHERE m.manager_id = e.id);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue 6: Implicit type conversion"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Slow: id is INT but comparing with string\nSELECT * FROM users WHERE id = '123';\n\n-- Fast: Use correct type\nSELECT * FROM users WHERE id = 123;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"5. Optimize joins"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue: Unnecessary joins"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Bad: Joins table but doesn't use it\nSELECT o.id, o.total\nFROM orders o\nJOIN customers c ON o.customer_id = c.id;\n\n-- Good: Remove unnecessary join\nSELECT id, total FROM orders;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Issue: Joining on non-indexed columns"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create indexes on join columns\nCREATE INDEX idx_customer_id ON orders(customer_id);\nCREATE INDEX idx_order_id ON order_items(order_id);\n\n-- Multiple join optimization\nSELECT o.id, SUM(oi.quantity * p.price) AS total\nFROM orders o\nJOIN order_items oi ON o.id = oi.order_id  -- Indexed\nJOIN products p ON oi.product_id = p.id     -- Indexed\nWHERE o.order_date >= '2025-01-01';\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"6. Monitor real-time query performance"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- MySQL: Check running processes\nSHOW PROCESSLIST;\n-- Look for queries with State "Copying to tmp table" or "Sorting result"\n\n-- Kill slow query if needed\nKILL 123;\n\n-- PostgreSQL: View active queries\nSELECT pid, now() - pg_stat_activity.query_start AS duration, query\nFROM pg_stat_activity\nWHERE (now() - pg_stat_activity.query_start) > interval \'5 minutes\';\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"7. Use query caching (with caution)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- MySQL query cache\nSET QUERY_CACHE_SIZE = 10000000;  -- 10MB\nRESET QUERY_CACHE;\n\n-- Monitor cache performance\nSHOW STATUS LIKE 'Qcache%';\n\n-- Note: Query cache deprecated in MySQL 5.7+, removed in 8.0\n-- Use Redis instead for modern applications\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"8. Archive old data"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Slow query on large table with historical data\nSELECT * FROM orders WHERE created_at >= '2025-01-01';\n\n-- Create archive table\nCREATE TABLE orders_2024 LIKE orders;\nINSERT INTO orders_2024 SELECT * FROM orders WHERE YEAR(created_at) = 2024;\nDELETE FROM orders WHERE YEAR(created_at) = 2024;\n\n-- Add partitioning\nALTER TABLE orders\nPARTITION BY RANGE (YEAR(created_at)) (\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p2025 VALUES LESS THAN (2026),\n    PARTITION pmax VALUES LESS THAN MAXVALUE\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"9. Common anti-patterns to avoid"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- BAD: N+1 Query Problem\n// Java: Loop fetches one employee at a time\nfor (int i = 1; i <= 1000; i++) {\n    Employee emp = employeeRepository.findById(i);  // 1000 separate queries!\n}\n\n-- GOOD: Fetch all at once\nList<Employee> employees = employeeRepository.findAll();\n\n-- BAD: Cartesian product\nSELECT * FROM orders o, customers c, products p;\n-- Results in orders \xd7 customers \xd7 products rows!\n\n-- GOOD: Use explicit joins\nSELECT * FROM orders o\nJOIN customers c ON o.customer_id = c.id\nJOIN products p ON ...;\n\n-- BAD: UPDATE without WHERE (updates entire table!)\nUPDATE employees SET salary = salary + 1000;\n\n-- GOOD: Add WHERE clause\nUPDATE employees SET salary = salary + 1000 WHERE department_id = 5;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"10. Production monitoring tools"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create slow query log\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 2;  -- Log queries taking > 2 seconds\n\n-- Analyze slow query log\nmysqldumpslow -s at /var/log/mysql/slow.log | head -20;\n\n-- PostgreSQL: Enable logging\nALTER SYSTEM SET log_min_duration_statement = 1000;  -- 1 second\nSELECT pg_reload_conf();\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-4-fullstack-oriented-sql-scenarios-detailed",children:"\ud83d\udd17 4. Fullstack-Oriented SQL Scenarios (Detailed)"}),"\n",(0,r.jsx)(n.h3,{id:"1-user-management-system-expanded",children:"1. User Management System (Expanded)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Schema with best practices"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    status ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED') DEFAULT 'ACTIVE',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    INDEX idx_email (email),\n    INDEX idx_status (status)\n);\n\nCREATE TABLE roles (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) UNIQUE NOT NULL,\n    description TEXT\n);\n\nCREATE TABLE user_roles (\n    user_id INT NOT NULL,\n    role_id INT NOT NULL,\n    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n    INDEX idx_role_id (role_id)\n);\n\nCREATE TABLE permissions (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) UNIQUE NOT NULL\n);\n\nCREATE TABLE role_permissions (\n    role_id INT NOT NULL,\n    permission_id INT NOT NULL,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Common queries"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Get user with all roles and permissions\nSELECT u.id, u.name, u.email,\n       GROUP_CONCAT(r.name) AS roles,\n       GROUP_CONCAT(p.name) AS permissions\nFROM users u\nLEFT JOIN user_roles ur ON u.id = ur.user_id\nLEFT JOIN roles r ON ur.role_id = r.id\nLEFT JOIN role_permissions rp ON r.id = rp.role_id\nLEFT JOIN permissions p ON rp.permission_id = p.id\nWHERE u.id = 1\nGROUP BY u.id;\n\n-- Find users with specific role\nSELECT DISTINCT u.* FROM users u\nJOIN user_roles ur ON u.id = ur.user_id\nJOIN roles r ON ur.role_id = r.id\nWHERE r.name = 'Admin' AND u.status = 'ACTIVE';\n\n-- Check if user has permission\nSELECT EXISTS (\n    SELECT 1 FROM user_roles ur\n    JOIN role_permissions rp ON ur.role_id = rp.role_id\n    JOIN permissions p ON rp.permission_id = p.id\n    WHERE ur.user_id = 1 AND p.name = 'DELETE_USER'\n) AS has_permission;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Java/Spring integration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    @Query("SELECT u FROM User u LEFT JOIN FETCH u.roles WHERE u.id = :id")\n    Optional<User> findByIdWithRoles(@Param("id") Long id);\n\n    @Query("SELECT u FROM User u WHERE u.status = \'ACTIVE\'")\n    List<User> findActiveUsers();\n}\n\n@Service\npublic class UserService {\n    public UserDTO getUserWithRoles(Long userId) {\n        return userRepository.findByIdWithRoles(userId)\n            .map(this::mapToDTO)\n            .orElseThrow(() -> new UserNotFoundException());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-order--product-system-expanded",children:"2. Order & Product System (Expanded)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Complete schema"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE customers (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    phone VARCHAR(20),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_email (email)\n);\n\nCREATE TABLE products (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(255) NOT NULL,\n    sku VARCHAR(100) UNIQUE NOT NULL,\n    price DECIMAL(10,2) NOT NULL CHECK (price > 0),\n    stock INT NOT NULL DEFAULT 0 CHECK (stock >= 0),\n    category VARCHAR(100),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_category (category),\n    INDEX idx_sku (sku)\n);\n\nCREATE TABLE orders (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    customer_id INT NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    status ENUM('PENDING', 'CONFIRMED', 'SHIPPED', 'DELIVERED', 'CANCELLED') DEFAULT 'PENDING',\n    total_amount DECIMAL(12,2),\n    FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE RESTRICT,\n    INDEX idx_customer_id (customer_id),\n    INDEX idx_order_date (order_date),\n    INDEX idx_status (status)\n);\n\nCREATE TABLE order_items (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL CHECK (quantity > 0),\n    price_at_purchase DECIMAL(10,2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE RESTRICT,\n    INDEX idx_order_id (order_id),\n    INDEX idx_product_id (product_id)\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Advanced queries"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Orders with totals and product details\nSELECT\n    o.id AS order_id,\n    c.name AS customer_name,\n    p.name AS product_name,\n    oi.quantity,\n    oi.price_at_purchase,\n    (oi.quantity * oi.price_at_purchase) AS item_total,\n    SUM(oi.quantity * oi.price_at_purchase) OVER (PARTITION BY o.id) AS order_total\nFROM orders o\nJOIN customers c ON o.customer_id = c.id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE o.order_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)\nORDER BY o.order_date DESC;\n\n-- Revenue by product\nSELECT\n    p.id,\n    p.name,\n    COUNT(DISTINCT o.id) AS orders_count,\n    SUM(oi.quantity) AS total_quantity,\n    SUM(oi.quantity * oi.price_at_purchase) AS total_revenue,\n    AVG(oi.price_at_purchase) AS avg_price\nFROM products p\nLEFT JOIN order_items oi ON p.id = oi.product_id\nLEFT JOIN orders o ON oi.order_id = o.id AND o.status != 'CANCELLED'\nGROUP BY p.id, p.name\nORDER BY total_revenue DESC;\n\n-- Top customers by spending\nSELECT\n    c.id,\n    c.name,\n    COUNT(o.id) AS order_count,\n    SUM(oi.quantity * oi.price_at_purchase) AS total_spent,\n    AVG(oi.quantity * oi.price_at_purchase) AS avg_order_value,\n    MAX(o.order_date) AS last_order_date\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nJOIN order_items oi ON o.id = oi.order_id\nWHERE o.status != 'CANCELLED'\nGROUP BY c.id\nHAVING total_spent > 1000\nORDER BY total_spent DESC\nLIMIT 20;\n\n-- Inventory alerts (low stock)\nSELECT\n    id,\n    name,\n    sku,\n    stock,\n    CASE\n        WHEN stock = 0 THEN 'OUT_OF_STOCK'\n        WHEN stock < 10 THEN 'LOW_STOCK'\n        WHEN stock < 50 THEN 'MEDIUM_STOCK'\n        ELSE 'HEALTHY'\n    END AS stock_status\nFROM products\nWHERE stock < 50\nORDER BY stock ASC;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-pagination-api-deep-dive",children:"3. Pagination API Deep Dive"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Offset pagination with Spring Data"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/employees")\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    // Traditional pagination\n    @GetMapping\n    public Page<Employee> getEmployees(\n        @RequestParam(defaultValue = "0") int page,\n        @RequestParam(defaultValue = "10") int size,\n        @RequestParam(defaultValue = "id,desc") String sort\n    ) {\n        Pageable pageable = PageRequest.of(page, size, Sort.by("id").descending());\n        return employeeRepository.findAll(pageable);\n    }\n\n    // With filtering\n    @GetMapping("/by-department")\n    public Page<Employee> getEmployeesByDepartment(\n        @RequestParam Long departmentId,\n        Pageable pageable\n    ) {\n        return employeeRepository.findByDepartmentId(departmentId, pageable);\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SQL for offset pagination"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Page 0 (rows 0-9)\nSELECT * FROM employees ORDER BY id LIMIT 10 OFFSET 0;\n\n-- Page 5 (rows 50-59)\nSELECT * FROM employees ORDER BY id LIMIT 10 OFFSET 50;\n\n-- Performance: OFFSET scans N rows before limiting\n-- With 1M rows on page 100,000: Scans 1M rows!\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Keyset pagination (cursor-based)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- First request\nSELECT * FROM employees ORDER BY id LIMIT 11;\n-- Returns rows 1-11, last ID is cursor for next page\n\n-- Second request (cursor = 11)\nSELECT * FROM employees WHERE id > 11 ORDER BY id LIMIT 11;\n-- Returns rows 12-22\n\n-- Multi-column cursor\nSELECT * FROM employees\nWHERE (department_id, id) > (5, 100)\nORDER BY department_id, id\nLIMIT 10;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"React infinite scroll implementation"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Using keyset pagination\nconst [employees, setEmployees] = useState([]);\nconst [lastId, setLastId] = useState(null);\nconst [hasMore, setHasMore] = useState(true);\n\nconst loadMore = async () => {\n    const response = await fetch(\n        `/api/employees?lastId=${lastId}&limit=20`\n    );\n    const data = await response.json();\n\n    setEmployees(prev => [...prev, ...data]);\n    setLastId(data[data.length - 1].id);\n    setHasMore(data.length === 20);\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-5-performance--optimization-advanced",children:"\u26a1 5. Performance & Optimization (Advanced)"}),"\n",(0,r.jsx)(n.h3,{id:"index-deep-dive",children:"Index Deep Dive"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"B-tree index structure"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- How indexes organize data\nRoot Node\n\u251c\u2500\u2500 [1-100]\n\u2502   \u251c\u2500\u2500 Leaf: [1, 5, 15, 25, 50, 75, 100]\n\u251c\u2500\u2500 [100-200]\n\u2502   \u251c\u2500\u2500 Leaf: [101, 120, 150, 175, 200]\n\u2514\u2500\u2500 [200-300]\n    \u2514\u2500\u2500 Leaf: [210, 250, 275, 300]\n\n-- Binary search through tree is O(log n)\n-- Scan of values is O(k) where k = results\n-- Total: O(log n + k)\n\n-- Example: Find employees with id between 100-200\nSELECT * FROM employees WHERE id BETWEEN 100 AND 200;\n-- Finds starting node in B-tree (log n)\n-- Scans linked leaf nodes (k results)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hash index usage"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Hash index: Perfect for equality, useless for ranges\nCREATE INDEX idx_email_hash ON users (email) USING HASH;\n\n-- Good: Equality\nSELECT * FROM users WHERE email = 'john@example.com';\n-- Uses hash index directly\n\n-- Bad: Range query (full scan)\nSELECT * FROM users WHERE email LIKE 'john%';\n-- Hash index can't help, falls back to full table scan\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Covering index optimization"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Regular index (requires row lookup)\nCREATE INDEX idx_salary ON employees(salary);\n\nSELECT id, name, salary FROM employees WHERE salary > 50000;\n-- 1. Find rows using index (O(log n + k))\n-- 2. Lookup full row for each result\n-- 3. Extract needed columns\n\n-- Covering index (no row lookup)\nCREATE INDEX idx_salary_covering ON employees(salary, id, name);\n\n-- Now all columns are in index - no row lookup needed!\n-- Pure index scan: O(log n + k), faster\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Partial index for filtering"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Index only active users\nCREATE INDEX idx_email_active ON users(email)\nWHERE status = 'ACTIVE';\n\n-- Saves space and speeds up queries on active users\nSELECT * FROM users WHERE email = 'john@example.com' AND status = 'ACTIVE';\n\n-- But slows down:\nSELECT * FROM users WHERE email = 'john@example.com' AND status = 'DELETED';\n-- Partial index doesn't help\n"})}),"\n",(0,r.jsx)(n.h3,{id:"n1-query-problem",children:"N+1 Query Problem"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The problem"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// N+1 queries: 1 query for employees + N queries for departments\nList<Employee> employees = employeeRepository.findAll();  // Query 1\nfor (Employee emp : employees) {\n    Department dept = emp.getDepartment();  // Query 2, 3, 4... N+1\n}\n\n// Resulting SQL:\n// Query 1: SELECT * FROM employees;  (1000 rows)\n// Query 2-1001: SELECT * FROM departments WHERE id = ?;  (1000 queries!)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solutions"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JOIN FETCH (Eager loading)"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Query("SELECT e FROM Employee e JOIN FETCH e.department")\nList<Employee> findAllWithDepartments();\n\n// Single query with join\n// SELECT e.*, d.* FROM employees e JOIN departments d\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"@EntityGraph"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@EntityGraph(attributePaths = {"department", "manager"})\n@Query("SELECT e FROM Employee e")\nList<Employee> findAllEager();\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Manual JOIN"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Fetch employees with departments\nSELECT e.*, d.* FROM employees e\nLEFT JOIN departments d ON e.dept_id = d.id;\n\n-- Then map to objects in Java\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Projection queries"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public interface EmployeeSummary {\n    Long getId();\n    String getName();\n    String getDepartmentName();\n}\n\n@Query("SELECT new map(e.id, e.name, d.name as departmentName) " +\n       "FROM Employee e JOIN e.department d")\nList<EmployeeSummary> findEmployeeSummaries();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"lazy-vs-eager-loading",children:"Lazy vs Eager Loading"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Lazy loading"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Entity\npublic class Employee {\n    @ManyToOne(fetch = FetchType.LAZY)  // Default\n    private Department department;\n}\n\n// Only loads when accessed\nEmployee emp = employeeRepository.findById(1);\nemp.getDepartment();  // Second query executed here\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Eager loading"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Entity\npublic class Employee {\n    @ManyToOne(fetch = FetchType.EAGER)\n    private Department department;\n}\n\n// Loads immediately\nEmployee emp = employeeRepository.findById(1);  // Already loaded\nemp.getDepartment();  // No second query\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Best practice"}),": Default to lazy loading, use JOIN FETCH in specific queries when needed."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-6-java-integration---advanced-topics",children:"\ud83e\uddf0 6. Java Integration - Advanced Topics"}),"\n",(0,r.jsx)(n.h3,{id:"connection-pooling-with-hikaricp",children:"Connection Pooling with HikariCP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Hikari configuration\n@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    public DataSource dataSource() {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl("jdbc:mysql://localhost:3306/mydb");\n        config.setUsername("root");\n        config.setPassword("password");\n        config.setMaximumPoolSize(20);        // Max connections\n        config.setMinimumIdle(5);             // Min idle connections\n        config.setConnectionTimeout(20000);   // 20 seconds\n        config.setIdleTimeout(300000);        // 5 minutes\n        config.setMaxLifetime(1200000);       // 20 minutes\n\n        return new HikariDataSource(config);\n    }\n}\n\n// Connection pooling benefits\n// Without: Create connection for each request (~500ms per connection)\n// With HikariCP: Reuse existing connections (~1ms)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Batch insert\n@Repository\npublic interface ProductRepository extends JpaRepository<Product, Long> {\n\n    @Modifying\n    @Query(value = "INSERT INTO products (name, price, stock) VALUES (?, ?, ?)",\n           nativeQuery = true)\n    void batchInsert(List<Object[]> data);\n}\n\n@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository repository;\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    public void importProducts(List<Product> products) {\n        List<Object[]> batch = products.stream()\n            .map(p -> new Object[]{p.getName(), p.getPrice(), p.getStock()})\n            .collect(Collectors.toList());\n\n        // Execute batch insert\n        String sql = "INSERT INTO products (name, price, stock) VALUES (?, ?, ?)";\n        jdbcTemplate.batchUpdate(sql, batch);\n    }\n\n    // Batch update\n    public void updatePrices(Map<Long, BigDecimal> priceUpdates) {\n        List<Object[]> batch = priceUpdates.entrySet().stream()\n            .map(e -> new Object[]{e.getValue(), e.getKey()})\n            .collect(Collectors.toList());\n\n        String sql = "UPDATE products SET price = ? WHERE id = ?";\n        jdbcTemplate.batchUpdate(sql, batch);\n    }\n}\n\n// Enable batch processing in application.properties\nspring.jpa.properties.hibernate.jdbc.batch_size=20\nspring.jpa.properties.hibernate.order_inserts=true\nspring.jpa.properties.hibernate.order_updates=true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pagination-with-spring-data-jpa",children:"Pagination with Spring Data JPA"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/employees")\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeRepository repository;\n\n    // Pageable automatically handles page, size, sort\n    @GetMapping\n    public ResponseEntity<Page<Employee>> listEmployees(\n        Pageable pageable\n    ) {\n        Page<Employee> page = repository.findAll(pageable);\n        return ResponseEntity.ok(page);\n    }\n\n    // Usage: /api/employees?page=0&size=20&sort=salary,desc\n    // Returns: {\n    //   "content": [...],\n    //   "pageable": {...},\n    //   "totalElements": 1000,\n    //   "totalPages": 50,\n    //   "currentPage": 0\n    // }\n\n    // Filtering + pagination\n    @GetMapping("/by-department/{deptId}")\n    public ResponseEntity<Page<Employee>> listByDepartment(\n        @PathVariable Long deptId,\n        Pageable pageable\n    ) {\n        Page<Employee> page = repository.findByDepartmentId(deptId, pageable);\n        return ResponseEntity.ok(page);\n    }\n}\n\n@Repository\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n\n    @Query("SELECT e FROM Employee e WHERE e.department.id = :deptId")\n    Page<Employee> findByDepartmentId(@Param("deptId") Long deptId, Pageable pageable);\n\n    // Custom query with projection\n    @Query("SELECT new com.example.EmployeeDTO(e.id, e.name, e.salary) " +\n           "FROM Employee e WHERE e.salary > :minSalary")\n    Page<EmployeeDTO> findHighEarners(@Param("minSalary") BigDecimal minSalary, Pageable pageable);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sql-injection-prevention",children:"SQL Injection Prevention"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// VULNERABLE: String concatenation\nString query = "SELECT * FROM users WHERE email = \'" + email + "\'";\n// Input: " OR \'1\'=\'1\n// Result: SELECT * FROM users WHERE email = \'\' OR \'1\'=\'1\' -- Returns all users!\n\n// SAFE: PreparedStatement with parameterization\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n    @Query("SELECT u FROM User u WHERE u.email = :email")\n    Optional<User> findByEmail(@Param("email") String email);  // Parameterized\n}\n\n// SAFE: Native query with parameterization\n@Query(value = "SELECT * FROM users WHERE email = ?1", nativeQuery = true)\nOptional<User> findByEmailNative(String email);  // Parameter substitution\n\n// Java code example\nString email = userInput;  // Could be malicious\nUser user = userRepository.findByEmail(email);  // Safe - parameterized\n\n// How PreparedStatement works:\n// 1. Send query structure to database: "SELECT * FROM users WHERE email = ?"\n// 2. Send parameters separately: ["malicious\']\n// Database treats parameter as data, not code - injection impossible\n'})}),"\n",(0,r.jsx)(n.h3,{id:"transactional-best-practices",children:"@Transactional Best Practices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\npublic class OrderService {\n\n    // Basic transactional method\n    @Transactional\n    public Order createOrder(Long customerId, List<OrderItem> items) {\n        Customer customer = customerRepository.findById(customerId)\n            .orElseThrow();\n\n        Order order = new Order(customer);\n        orderRepository.save(order);\n\n        items.forEach(item -> {\n            item.setOrder(order);\n            orderItemRepository.save(item);\n        });\n\n        return order;\n        // Auto-commit on success, auto-rollback on exception\n    }\n\n    // Specify isolation level for critical operations\n    @Transactional(isolation = Isolation.SERIALIZABLE)\n    public void transferMoney(Long fromId, Long toId, BigDecimal amount) {\n        // Complete isolation from other transactions\n    }\n\n    // Read-only optimization\n    @Transactional(readOnly = true)\n    public Order getOrderDetails(Long orderId) {\n        // No locks acquired, optimized for read\n        return orderRepository.findById(orderId).orElseThrow();\n    }\n\n    // Specify rollback conditions\n    @Transactional(rollbackFor = Exception.class)\n    public void risky Operation() {\n        // Rollback on any exception\n    }\n\n    // Propagation levels\n    @Transactional(propagation = Propagation.REQUIRES_NEW)\n    public void independentOperation() {\n        // Creates new transaction, independent of caller\n    }\n\n    // Timeout\n    @Transactional(timeout = 30)  // 30 seconds\n    public void longRunningOperation() {\n        // Auto-rollback if takes > 30 seconds\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-query-projections",children:"Custom Query Projections"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// DTO projection\npublic class EmployeeDTO {\n    private Long id;\n    private String name;\n    private String department;\n\n    public EmployeeDTO(Long id, String name, String department) {\n        this.id = id;\n        this.name = name;\n        this.department = department;\n    }\n}\n\n@Repository\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n\n    // Constructor projection\n    @Query("SELECT new com.example.EmployeeDTO(e.id, e.name, d.name) " +\n           "FROM Employee e JOIN e.department d")\n    List<EmployeeDTO> findAllWithDepartment();\n\n    // Interface projection\n    public interface EmployeeSummary {\n        Long getId();\n        String getName();\n        String getDepartmentName();\n    }\n\n    @Query("SELECT e.id, e.name, d.name as departmentName FROM Employee e JOIN e.department d")\n    List<EmployeeSummary> findEmployeeSummaries();\n\n    // Dynamic projection\n    <T> List<T> findAll(Class<T> type);  // Can project to any class\n\n    // Usage\n    List<EmployeeDTO> dtos = repository.findAllWithDepartment();\n    List<EmployeeSummary> summaries = repository.findEmployeeSummaries();\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary-of-best-practices",children:"Summary of Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Always index foreign keys"})," - Required for join performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use appropriate join types"})," - INNER vs LEFT JOIN matters"]}),"\n",(0,r.jsx)(n.li,{children:"**Avoid SELECT *** - Fetch only needed columns"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use prepared statements"})," - Prevents SQL injection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor query performance"})," - Regular EXPLAIN analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement soft deletes carefully"})," - Update queries accordingly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use transactions properly"})," - ACID guarantees matter"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Profile before optimizing"})," - Data-driven decisions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consider database design"})," - Normalization vs denormalization trade-offs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep logic in application"})," - When appropriate, easier to maintain and test"]}),"\n"]})]})}function E(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);