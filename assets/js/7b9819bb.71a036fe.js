"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[41853],{28453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var i=a(96540);const s={},r=i.createContext(s);function t(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(r.Provider,{value:n},e.children)}},31205:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=a(74848),s=a(28453);const r={},t="Liquibase with Spring Boot",l={id:"Database/Liquibase with Spring Boot",title:"Liquibase with Spring Boot",description:"Introduction",source:"@site/docs/Database/Liquibase with Spring Boot.mdx",sourceDirName:"Database",slug:"/Database/Liquibase with Spring Boot",permalink:"/docs/Database/Liquibase with Spring Boot",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Database/Liquibase with Spring Boot.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Full-Text Search & Inverted Index",permalink:"/docs/Database/Full-Text Search & Inverted Index"},next:{title:"PostgreSQL Comprehensive Notes",permalink:"/docs/Database/PostgreSQL Comprehensive Notes"}},o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Why Use Liquibase?",id:"why-use-liquibase",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Project Setup",id:"project-setup",level:3},{value:"Maven Dependencies",id:"maven-dependencies",level:4},{value:"Gradle Dependencies",id:"gradle-dependencies",level:4},{value:"Application Configuration",id:"application-configuration",level:3},{value:"Creating Your First Migration",id:"creating-your-first-migration",level:2},{value:"Directory Structure",id:"directory-structure",level:3},{value:"Master Changelog",id:"master-changelog",level:3},{value:"Creating Tables",id:"creating-tables",level:3},{value:"Spring Boot Entities",id:"spring-boot-entities",level:2},{value:"Common Liquibase Operations",id:"common-liquibase-operations",level:2},{value:"Adding a Column",id:"adding-a-column",level:3},{value:"Modifying a Column",id:"modifying-a-column",level:3},{value:"Creating an Index",id:"creating-an-index",level:3},{value:"Inserting Data",id:"inserting-data",level:3},{value:"Rollback Configuration",id:"rollback-configuration",level:3},{value:"Using SQL Format",id:"using-sql-format",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Never Modify Existing ChangeSets",id:"1-never-modify-existing-changesets",level:3},{value:"2. Use Meaningful IDs",id:"2-use-meaningful-ids",level:3},{value:"3. Use Contexts for Environment-Specific Changes",id:"3-use-contexts-for-environment-specific-changes",level:3},{value:"4. Use Preconditions",id:"4-use-preconditions",level:3},{value:"5. Tag Important Releases",id:"5-tag-important-releases",level:3},{value:"Testing",id:"testing",level:2},{value:"Disabling Liquibase",id:"disabling-liquibase",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Command Line Operations",id:"command-line-operations",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"liquibase-with-spring-boot",children:"Liquibase with Spring Boot"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Liquibase is a database schema change management solution that enables you to track, version, and deploy database changes. When integrated with Spring Boot, it provides a seamless way to manage your database migrations as part of your application lifecycle."}),"\n",(0,i.jsx)(n.h2,{id:"why-use-liquibase",children:"Why Use Liquibase?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version Control"}),": Track database changes alongside your code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database Independence"}),": Write changes once, deploy to multiple database platforms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rollback Support"}),": Easily revert changes when needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Team Collaboration"}),": Avoid conflicts when multiple developers modify the database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automated Deployment"}),": Integrate database changes into your CI/CD pipeline"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Java 17 or higher"}),"\n",(0,i.jsx)(n.li,{children:"Spring Boot 3.x"}),"\n",(0,i.jsx)(n.li,{children:"Maven or Gradle"}),"\n",(0,i.jsx)(n.li,{children:"A database (PostgreSQL, MySQL, H2, etc.)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"project-setup",children:"Project Setup"}),"\n",(0,i.jsx)(n.h4,{id:"maven-dependencies",children:"Maven Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following dependencies to your ",(0,i.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    \x3c!-- Spring Boot Starter --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n\n    \x3c!-- Liquibase --\x3e\n    <dependency>\n        <groupId>org.liquibase</groupId>\n        <artifactId>liquibase-core</artifactId>\n    </dependency>\n\n    \x3c!-- Database Driver (example: PostgreSQL) --\x3e\n    <dependency>\n        <groupId>org.postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"gradle-dependencies",children:"Gradle Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"build.gradle"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"dependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.liquibase:liquibase-core'\n    runtimeOnly 'org.postgresql:postgresql'\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"application-configuration",children:"Application Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Configure your database and Liquibase in ",(0,i.jsx)(n.code,{children:"application.properties"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"# Database Configuration\nspring.datasource.url=jdbc:postgresql://localhost:5432/myapp\nspring.datasource.username=myuser\nspring.datasource.password=mypassword\n\n# JPA Configuration\nspring.jpa.hibernate.ddl-auto=none\nspring.jpa.show-sql=true\n\n# Liquibase Configuration\nspring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml\nspring.liquibase.enabled=true\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Or in ",(0,i.jsx)(n.code,{children:"application.yml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/myapp\n    username: myuser\n    password: mypassword\n\n  jpa:\n    hibernate:\n      ddl-auto: none\n    show-sql: true\n\n  liquibase:\n    change-log: classpath:db/changelog/db.changelog-master.yaml\n    enabled: true\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-your-first-migration",children:"Creating Your First Migration"}),"\n",(0,i.jsx)(n.h3,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.p,{children:"Create the following directory structure in your resources folder:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"src/main/resources/\n\u2514\u2500\u2500 db/\n    \u2514\u2500\u2500 changelog/\n        \u251c\u2500\u2500 db.changelog-master.yaml\n        \u2514\u2500\u2500 changes/\n            \u251c\u2500\u2500 001-create-user-table.yaml\n            \u2514\u2500\u2500 002-create-product-table.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"master-changelog",children:"Master Changelog"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"db.changelog-master.yaml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - include:\n      file: db/changelog/changes/001-create-user-table.yaml\n  - include:\n      file: db/changelog/changes/002-create-product-table.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-tables",children:"Creating Tables"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"001-create-user-table.yaml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 001-create-user-table\n      author: john.doe\n      changes:\n        - createTable:\n            tableName: users\n            columns:\n              - column:\n                  name: id\n                  type: BIGINT\n                  autoIncrement: true\n                  constraints:\n                    primaryKey: true\n                    nullable: false\n              - column:\n                  name: username\n                  type: VARCHAR(100)\n                  constraints:\n                    nullable: false\n                    unique: true\n              - column:\n                  name: email\n                  type: VARCHAR(255)\n                  constraints:\n                    nullable: false\n                    unique: true\n              - column:\n                  name: created_at\n                  type: TIMESTAMP\n                  defaultValueComputed: CURRENT_TIMESTAMP\n              - column:\n                  name: updated_at\n                  type: TIMESTAMP\n                  defaultValueComputed: CURRENT_TIMESTAMP\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"002-create-product-table.yaml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 002-create-product-table\n      author: john.doe\n      changes:\n        - createTable:\n            tableName: products\n            columns:\n              - column:\n                  name: id\n                  type: BIGINT\n                  autoIncrement: true\n                  constraints:\n                    primaryKey: true\n                    nullable: false\n              - column:\n                  name: name\n                  type: VARCHAR(200)\n                  constraints:\n                    nullable: false\n              - column:\n                  name: description\n                  type: TEXT\n              - column:\n                  name: price\n                  type: DECIMAL(10,2)\n                  constraints:\n                    nullable: false\n              - column:\n                  name: user_id\n                  type: BIGINT\n                  constraints:\n                    nullable: false\n        - addForeignKeyConstraint:\n            baseTableName: products\n            baseColumnNames: user_id\n            referencedTableName: users\n            referencedColumnNames: id\n            constraintName: fk_products_users\n"})}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-entities",children:"Spring Boot Entities"}),"\n",(0,i.jsx)(n.p,{children:"Create corresponding JPA entities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "users")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String username;\n\n    @Column(nullable = false, unique = true)\n    private String email;\n\n    @Column(name = "created_at")\n    private LocalDateTime createdAt;\n\n    @Column(name = "updated_at")\n    private LocalDateTime updatedAt;\n\n    @OneToMany(mappedBy = "user")\n    private List<Product> products;\n\n    // Getters and setters\n}\n\n@Entity\n@Table(name = "products")\npublic class Product {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String name;\n\n    private String description;\n\n    @Column(nullable = false)\n    private BigDecimal price;\n\n    @ManyToOne\n    @JoinColumn(name = "user_id", nullable = false)\n    private User user;\n\n    // Getters and setters\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-liquibase-operations",children:"Common Liquibase Operations"}),"\n",(0,i.jsx)(n.h3,{id:"adding-a-column",children:"Adding a Column"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 003-add-phone-to-users\n      author: john.doe\n      changes:\n        - addColumn:\n            tableName: users\n            columns:\n              - column:\n                  name: phone\n                  type: VARCHAR(20)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"modifying-a-column",children:"Modifying a Column"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 004-modify-username-length\n      author: john.doe\n      changes:\n        - modifyDataType:\n            tableName: users\n            columnName: username\n            newDataType: VARCHAR(150)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-an-index",children:"Creating an Index"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 005-create-email-index\n      author: john.doe\n      changes:\n        - createIndex:\n            indexName: idx_users_email\n            tableName: users\n            columns:\n              - column:\n                  name: email\n"})}),"\n",(0,i.jsx)(n.h3,{id:"inserting-data",children:"Inserting Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 006-insert-default-users\n      author: john.doe\n      changes:\n        - insert:\n            tableName: users\n            columns:\n              - column:\n                  name: username\n                  value: admin\n              - column:\n                  name: email\n                  value: admin@example.com\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rollback-configuration",children:"Rollback Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 007-add-status-column\n      author: john.doe\n      changes:\n        - addColumn:\n            tableName: users\n            columns:\n              - column:\n                  name: status\n                  type: VARCHAR(20)\n                  defaultValue: ACTIVE\n      rollback:\n        - dropColumn:\n            tableName: users\n            columnName: status\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-sql-format",children:"Using SQL Format"}),"\n",(0,i.jsx)(n.p,{children:"You can also write migrations in SQL:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 008-custom-sql\n      author: john.doe\n      changes:\n        - sqlFile:\n            path: db/changelog/sql/008-custom-migration.sql\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then create ",(0,i.jsx)(n.code,{children:"db/changelog/sql/008-custom-migration.sql"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS orders (\n    id BIGSERIAL PRIMARY KEY,\n    order_number VARCHAR(50) UNIQUE NOT NULL,\n    user_id BIGINT NOT NULL,\n    total_amount DECIMAL(10,2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-never-modify-existing-changesets",children:"1. Never Modify Existing ChangeSets"}),"\n",(0,i.jsx)(n.p,{children:"Once a changeSet has been deployed, never modify it. Instead, create a new changeSet to make changes."}),"\n",(0,i.jsx)(n.h3,{id:"2-use-meaningful-ids",children:"2. Use Meaningful IDs"}),"\n",(0,i.jsx)(n.p,{children:"Use descriptive IDs that indicate what the changeSet does:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"id: 001-create-user-table  # Good\nid: 1                       # Bad\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-use-contexts-for-environment-specific-changes",children:"3. Use Contexts for Environment-Specific Changes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 009-insert-test-data\n      author: john.doe\n      context: test\n      changes:\n        - insert:\n            tableName: users\n            columns:\n              - column:\n                  name: username\n                  value: testuser\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then control execution:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"spring.liquibase.contexts=development,test\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-use-preconditions",children:"4. Use Preconditions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: 010-conditional-change\n      author: john.doe\n      preConditions:\n        - onFail: MARK_RAN\n        - not:\n            - tableExists:\n                tableName: audit_log\n      changes:\n        - createTable:\n            tableName: audit_log\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-tag-important-releases",children:"5. Tag Important Releases"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"databaseChangeLog:\n  - changeSet:\n      id: tag-version-1.0\n      author: john.doe\n      changes:\n        - tagDatabase:\n            tag: version-1.0\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.p,{children:"Create a test configuration with H2:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"# application-test.properties\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.liquibase.enabled=true\n"})}),"\n",(0,i.jsx)(n.h2,{id:"disabling-liquibase",children:"Disabling Liquibase"}),"\n",(0,i.jsx)(n.p,{children:"For certain environments or testing scenarios:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"spring.liquibase.enabled=false\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),": ChangeSets run every time"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure your database connection is persistent and not in-memory"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),": Checksum validation failed"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": If you must modify a changeSet, use ",(0,i.jsx)(n.code,{children:"validCheckSum"})," or run ",(0,i.jsx)(n.code,{children:"liquibase clearCheckSums"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue"}),": Foreign key constraint errors"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure proper order of changeSets and tables are created before adding foreign keys"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"command-line-operations",children:"Command Line Operations"}),"\n",(0,i.jsx)(n.p,{children:"You can also use Liquibase Maven plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<plugin>\n    <groupId>org.liquibase</groupId>\n    <artifactId>liquibase-maven-plugin</artifactId>\n    <version>4.24.0</version>\n    <configuration>\n        <propertyFile>liquibase.properties</propertyFile>\n    </configuration>\n</plugin>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mvn liquibase:update\nmvn liquibase:rollback -Dliquibase.rollbackCount=1\nmvn liquibase:status\nmvn liquibase:diff\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Liquibase with Spring Boot provides a robust solution for managing database migrations. By following these patterns and best practices, you can maintain a clean, version-controlled database schema that evolves with your application."}),"\n",(0,i.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.liquibase.com/",children:"Liquibase Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.data-initialization.migration-tool.liquibase",children:"Spring Boot Liquibase Reference"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.liquibase.org/get-started/best-practices",children:"Liquibase Best Practices"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);