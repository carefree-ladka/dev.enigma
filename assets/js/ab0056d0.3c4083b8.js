"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6231],{9153:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=n(4848),r=n(8453);const t={},o="API Communication & Data Fetching",l={id:"Frontend System Design/APICommunication",title:"API Communication & Data Fetching",description:"1. REST (Representational State Transfer)",source:"@site/docs/Frontend System Design/APICommunication.mdx",sourceDirName:"Frontend System Design",slug:"/Frontend System Design/APICommunication",permalink:"/js.enigma/docs/Frontend System Design/APICommunication",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Frontend System Design/APICommunication.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Frontend System Design",permalink:"/js.enigma/docs/category/frontend-system-design"},next:{title:"Microservices vs Monolith vs Serverless",permalink:"/js.enigma/docs/Frontend System Design/ArchitectureChoices"}},c={},d=[{value:"1. REST (Representational State Transfer)",id:"1-rest-representational-state-transfer",level:2},{value:"<strong>Theory</strong>",id:"theory",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases",level:3},{value:"<strong>Limitations</strong>",id:"limitations",level:3},{value:"2. GraphQL",id:"2-graphql",level:2},{value:"<strong>Theory</strong>",id:"theory-1",level:3},{value:"<strong>How It Works?</strong>",id:"how-it-works",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-1",level:3},{value:"<strong>Limitations</strong>",id:"limitations-1",level:3},{value:"3. API Caching",id:"3-api-caching",level:2},{value:"<strong>Theory</strong>",id:"theory-2",level:3},{value:"<strong>Types of Caching</strong>",id:"types-of-caching",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-2",level:3},{value:"<strong>Limitations</strong>",id:"limitations-2",level:3},{value:"4. WebSockets",id:"4-websockets",level:2},{value:"<strong>Theory</strong>",id:"theory-3",level:3},{value:"<strong>How It Works?</strong>",id:"how-it-works-1",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-3",level:3},{value:"<strong>Limitations</strong>",id:"limitations-3",level:3},{value:"5. gRPC (Google Remote Procedure Call)",id:"5-grpc-google-remote-procedure-call",level:2},{value:"<strong>Theory</strong>",id:"theory-4",level:3},{value:"<strong>How It Works?</strong>",id:"how-it-works-2",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-4",level:3},{value:"<strong>Limitations</strong>",id:"limitations-4",level:3},{value:"<strong>Comparison Table</strong>",id:"comparison-table",level:2}];function a(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"api-communication--data-fetching",children:"API Communication & Data Fetching"})}),"\n",(0,i.jsx)(s.h2,{id:"1-rest-representational-state-transfer",children:"1. REST (Representational State Transfer)"}),"\n",(0,i.jsx)(s.h3,{id:"theory",children:(0,i.jsx)(s.strong,{children:"Theory"})}),"\n",(0,i.jsx)(s.p,{children:"REST is an architectural style that uses HTTP methods (GET, POST, PUT, DELETE) to interact with resources. It follows a stateless, client-server model where each request contains all necessary information."}),"\n",(0,i.jsx)(s.h3,{id:"use-cases",children:(0,i.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(s.p,{children:["\u2705 Simple, well-structured APIs for CRUD operations.",(0,i.jsx)(s.br,{}),"\n","\u2705 Public APIs and microservices.",(0,i.jsx)(s.br,{}),"\n","\u2705 Scalable systems with caching mechanisms."]}),"\n",(0,i.jsx)(s.h3,{id:"limitations",children:(0,i.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,i.jsxs)(s.p,{children:["\u274c Over-fetching or under-fetching of data.",(0,i.jsx)(s.br,{}),"\n","\u274c Multiple round trips needed for complex data queries."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"2-graphql",children:"2. GraphQL"}),"\n",(0,i.jsx)(s.h3,{id:"theory-1",children:(0,i.jsx)(s.strong,{children:"Theory"})}),"\n",(0,i.jsxs)(s.p,{children:["GraphQL is a query language that allows clients to request only the data they need. Unlike REST, which relies on multiple endpoints, GraphQL operates on a ",(0,i.jsx)(s.strong,{children:"single endpoint"})," with flexible queries."]}),"\n",(0,i.jsx)(s.h3,{id:"how-it-works",children:(0,i.jsx)(s.strong,{children:"How It Works?"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Clients specify what data they need in a structured query."}),"\n",(0,i.jsx)(s.li,{children:"The server responds with only the requested data."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"use-cases-1",children:(0,i.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(s.p,{children:["\u2705 Optimized data fetching (avoids over-fetching & under-fetching).",(0,i.jsx)(s.br,{}),"\n","\u2705 Suitable for complex relationships (e.g., social media platforms).",(0,i.jsx)(s.br,{}),"\n","\u2705 Ideal for mobile applications with limited bandwidth."]}),"\n",(0,i.jsx)(s.h3,{id:"limitations-1",children:(0,i.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,i.jsxs)(s.p,{children:["\u274c Requires additional setup (GraphQL server, schema).",(0,i.jsx)(s.br,{}),"\n","\u274c Caching is more complex than REST."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"3-api-caching",children:"3. API Caching"}),"\n",(0,i.jsx)(s.h3,{id:"theory-2",children:(0,i.jsx)(s.strong,{children:"Theory"})}),"\n",(0,i.jsxs)(s.p,{children:["Caching stores frequently requested data to ",(0,i.jsx)(s.strong,{children:"reduce load times"})," and improve performance. It can be applied at different levels (client-side, server-side, or CDN)."]}),"\n",(0,i.jsx)(s.h3,{id:"types-of-caching",children:(0,i.jsx)(s.strong,{children:"Types of Caching"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Client-side caching:"})," Uses browser storage (LocalStorage, IndexedDB, etc.)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Server-side caching:"})," Stores responses in memory (Redis, Memcached)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"CDN caching:"})," Stores static resources closer to users."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"use-cases-2",children:(0,i.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(s.p,{children:["\u2705 Improving API performance and reducing server load.",(0,i.jsx)(s.br,{}),"\n","\u2705 Optimizing repeated queries (e.g., user profile data, product listings).",(0,i.jsx)(s.br,{}),"\n","\u2705 Reducing network latency."]}),"\n",(0,i.jsx)(s.h3,{id:"limitations-2",children:(0,i.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,i.jsxs)(s.p,{children:["\u274c Stale data if caching is not invalidated properly.",(0,i.jsx)(s.br,{}),"\n","\u274c Complexity in maintaining consistency."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"4-websockets",children:"4. WebSockets"}),"\n",(0,i.jsx)(s.h3,{id:"theory-3",children:(0,i.jsx)(s.strong,{children:"Theory"})}),"\n",(0,i.jsx)(s.p,{children:"WebSockets provide a persistent, full-duplex communication channel over TCP, allowing real-time data exchange between the client and server."}),"\n",(0,i.jsx)(s.h3,{id:"how-it-works-1",children:(0,i.jsx)(s.strong,{children:"How It Works?"})}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"The client establishes a WebSocket connection."}),"\n",(0,i.jsx)(s.li,{children:"Both client and server can send and receive messages at any time."}),"\n",(0,i.jsx)(s.li,{children:"The connection remains open until explicitly closed."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"use-cases-3",children:(0,i.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(s.p,{children:["\u2705 Real-time chat applications.",(0,i.jsx)(s.br,{}),"\n","\u2705 Live notifications and stock price updates.",(0,i.jsx)(s.br,{}),"\n","\u2705 Multiplayer gaming, collaborative tools (Google Docs-style editing)."]}),"\n",(0,i.jsx)(s.h3,{id:"limitations-3",children:(0,i.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,i.jsxs)(s.p,{children:["\u274c Not suitable for one-time requests.",(0,i.jsx)(s.br,{}),"\n","\u274c Requires maintaining open connections, which increases server load."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"5-grpc-google-remote-procedure-call",children:"5. gRPC (Google Remote Procedure Call)"}),"\n",(0,i.jsx)(s.h3,{id:"theory-4",children:(0,i.jsx)(s.strong,{children:"Theory"})}),"\n",(0,i.jsxs)(s.p,{children:["gRPC is a high-performance, language-agnostic framework that enables communication between services using ",(0,i.jsx)(s.strong,{children:"protocol buffers (protobufs)"})," instead of JSON."]}),"\n",(0,i.jsx)(s.h3,{id:"how-it-works-2",children:(0,i.jsx)(s.strong,{children:"How It Works?"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Uses HTTP/2 for faster, multiplexed connections."}),"\n",(0,i.jsxs)(s.li,{children:["Defines service methods using ",(0,i.jsx)(s.code,{children:".proto"})," files."]}),"\n",(0,i.jsx)(s.li,{children:"Generates client and server code automatically."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"use-cases-4",children:(0,i.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(s.p,{children:["\u2705 Microservices communication.",(0,i.jsx)(s.br,{}),"\n","\u2705 High-performance, low-latency APIs.",(0,i.jsx)(s.br,{}),"\n","\u2705 Streaming data and real-time messaging."]}),"\n",(0,i.jsx)(s.h3,{id:"limitations-4",children:(0,i.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,i.jsxs)(s.p,{children:["\u274c Not human-readable (uses binary format instead of JSON).",(0,i.jsx)(s.br,{}),"\n","\u274c Requires gRPC clients for non-browser environments."]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"comparison-table",children:(0,i.jsx)(s.strong,{children:"Comparison Table"})}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Feature"}),(0,i.jsx)(s.th,{children:"REST"}),(0,i.jsx)(s.th,{children:"GraphQL"}),(0,i.jsx)(s.th,{children:"API Caching"}),(0,i.jsx)(s.th,{children:"WebSockets"}),(0,i.jsx)(s.th,{children:"gRPC"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Real-time"})}),(0,i.jsx)(s.td,{children:"\u274c No"}),(0,i.jsx)(s.td,{children:"\u274c No"}),(0,i.jsx)(s.td,{children:"\u274c No"}),(0,i.jsx)(s.td,{children:"\u2705 Yes"}),(0,i.jsx)(s.td,{children:"\u2705 Yes"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Data Fetching"})}),(0,i.jsx)(s.td,{children:"Fixed endpoints"}),(0,i.jsx)(s.td,{children:"Flexible queries"}),(0,i.jsx)(s.td,{children:"Cached responses"}),(0,i.jsx)(s.td,{children:"Event-based"}),(0,i.jsx)(s.td,{children:"RPC calls"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Best For"})}),(0,i.jsx)(s.td,{children:"Traditional APIs"}),(0,i.jsx)(s.td,{children:"Complex queries"}),(0,i.jsx)(s.td,{children:"Performance boosts"}),(0,i.jsx)(s.td,{children:"Live updates"}),(0,i.jsx)(s.td,{children:"Microservices"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Transport"})}),(0,i.jsx)(s.td,{children:"HTTP"}),(0,i.jsx)(s.td,{children:"HTTP"}),(0,i.jsx)(s.td,{children:"HTTP"}),(0,i.jsx)(s.td,{children:"TCP"}),(0,i.jsx)(s.td,{children:"HTTP/2"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Performance"})}),(0,i.jsx)(s.td,{children:"\u26a0\ufe0f Medium"}),(0,i.jsx)(s.td,{children:"\u2705 Optimized"}),(0,i.jsx)(s.td,{children:"\u2705 Fast"}),(0,i.jsx)(s.td,{children:"\u2705 Low latency"}),(0,i.jsx)(s.td,{children:"\u2705 Very fast"})]})]})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:["\ud83d\ude80 ",(0,i.jsx)(s.strong,{children:"Conclusion"}),"\nChoosing the right API communication method depends on the application\u2019s needs. ",(0,i.jsx)(s.strong,{children:"REST"})," is great for simplicity, ",(0,i.jsx)(s.strong,{children:"GraphQL"})," is best for efficient data fetching, ",(0,i.jsx)(s.strong,{children:"WebSockets"})," enable real-time communication, ",(0,i.jsx)(s.strong,{children:"gRPC"})," excels in microservices, and ",(0,i.jsx)(s.strong,{children:"API Caching"})," enhances performance by reducing redundant queries."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var i=n(6540);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);