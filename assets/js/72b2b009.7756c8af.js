"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[2127],{28453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>o});var s=i(96540);const t={},r=s.createContext(t);function l(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),s.createElement(r.Provider,{value:e},n.children)}},33791:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=i(74848),t=i(28453);const r={},l="Jenkins for Beginners - Spring Boot Development Guide",o={id:"Java/Jenkins for Beginners - Spring Boot Development Guide",title:"Jenkins for Beginners - Spring Boot Development Guide",description:"What is Jenkins?",source:"@site/docs/Java/Jenkins for Beginners - Spring Boot Development Guide.mdx",sourceDirName:"Java",slug:"/Java/Jenkins for Beginners - Spring Boot Development Guide",permalink:"/dev.enigma/docs/Java/Jenkins for Beginners - Spring Boot Development Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Jenkins for Beginners - Spring Boot Development Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Wrapper Classes, Lambda, Regex & Annotations",permalink:"/dev.enigma/docs/Java/JavaWrapperClassesLambdaRegex&Annotations"},next:{title:"MockMvc Spring Boot Testing Guide",permalink:"/dev.enigma/docs/Java/MockMvc Spring Boot Testing Guide"}},a={},c=[{value:"What is Jenkins?",id:"what-is-jenkins",level:2},{value:"Why Jenkins for Spring Boot?",id:"why-jenkins-for-spring-boot",level:3},{value:"Core Jenkins Concepts",id:"core-jenkins-concepts",level:2},{value:"Key Terminology",id:"key-terminology",level:3},{value:"Jenkins Architecture",id:"jenkins-architecture",level:3},{value:"Jenkins Installation",id:"jenkins-installation",level:2},{value:"Local Installation (Development)",id:"local-installation-development",level:3},{value:"Option 1: Download WAR File",id:"option-1-download-war-file",level:4},{value:"Option 2: Docker (Recommended for beginners)",id:"option-2-docker-recommended-for-beginners",level:4},{value:"Option 3: Docker Compose",id:"option-3-docker-compose",level:4},{value:"Initial Setup Steps",id:"initial-setup-steps",level:3},{value:"Essential Plugins for Spring Boot Development",id:"essential-plugins-for-spring-boot-development",level:2},{value:"Must-Have Plugins",id:"must-have-plugins",level:3},{value:"Installation via UI",id:"installation-via-ui",level:3},{value:"Installation via Plugin Manager",id:"installation-via-plugin-manager",level:3},{value:"Creating Your First Spring Boot Job",id:"creating-your-first-spring-boot-job",level:2},{value:"Freestyle Project (Beginner-Friendly)",id:"freestyle-project-beginner-friendly",level:3},{value:"Step 1: Create New Job",id:"step-1-create-new-job",level:4},{value:"Step 2: Configure Source Code Management",id:"step-2-configure-source-code-management",level:4},{value:"Step 3: Build Triggers",id:"step-3-build-triggers",level:4},{value:"Step 4: Build Environment",id:"step-4-build-environment",level:4},{value:"Step 5: Build Steps",id:"step-5-build-steps",level:4},{value:"Step 6: Post-Build Actions",id:"step-6-post-build-actions",level:4},{value:"Sample Spring Boot Application Structure",id:"sample-spring-boot-application-structure",level:3},{value:"Jenkins Pipelines for Spring Boot",id:"jenkins-pipelines-for-spring-boot",level:2},{value:"Declarative Pipeline (Recommended for Beginners)",id:"declarative-pipeline-recommended-for-beginners",level:3},{value:"Basic Jenkinsfile",id:"basic-jenkinsfile",level:4},{value:"Advanced Pipeline with Docker",id:"advanced-pipeline-with-docker",level:4},{value:"Multi-Branch Pipeline Setup",id:"multi-branch-pipeline-setup",level:2},{value:"Step 1: Create Multi-Branch Pipeline",id:"step-1-create-multi-branch-pipeline",level:3},{value:"Step 2: Branch Strategy",id:"step-2-branch-strategy",level:3},{value:"Jenkins Configuration for Spring Boot",id:"jenkins-configuration-for-spring-boot",level:2},{value:"Global Tool Configuration",id:"global-tool-configuration",level:3},{value:"Maven Configuration",id:"maven-configuration",level:4},{value:"JDK Configuration",id:"jdk-configuration",level:4},{value:"Git Configuration",id:"git-configuration",level:4},{value:"System Configuration",id:"system-configuration",level:3},{value:"Global Properties",id:"global-properties",level:4},{value:"Spring Boot Specific Configurations",id:"spring-boot-specific-configurations",level:2},{value:"Maven Settings for Jenkins",id:"maven-settings-for-jenkins",level:3},{value:"Application Properties for Testing",id:"application-properties-for-testing",level:3},{value:"POM.xml Configuration for Jenkins",id:"pomxml-configuration-for-jenkins",level:3},{value:"Testing Strategies in Jenkins",id:"testing-strategies-in-jenkins",level:2},{value:"Unit Tests with JUnit",id:"unit-tests-with-junit",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Database Testing",id:"database-testing",level:3},{value:"Deployment Strategies",id:"deployment-strategies",level:2},{value:"Simple Deployment",id:"simple-deployment",level:3},{value:"Docker Deployment",id:"docker-deployment",level:3},{value:"Blue-Green Deployment",id:"blue-green-deployment",level:3},{value:"Monitoring and Notifications",id:"monitoring-and-notifications",level:2},{value:"Email Notifications",id:"email-notifications",level:3},{value:"Slack Integration",id:"slack-integration",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Build Failures",id:"build-failures",level:3},{value:"Maven Issues",id:"maven-issues",level:4},{value:"Test Failures",id:"test-failures",level:4},{value:"Permission Issues",id:"permission-issues",level:4},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Best Practices for Spring Boot with Jenkins",id:"best-practices-for-spring-boot-with-jenkins",level:2},{value:"1. Pipeline Structure",id:"1-pipeline-structure",level:3},{value:"2. Environment Management",id:"2-environment-management",level:3},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"4. Security",id:"4-security",level:3},{value:"5. Resource Cleanup",id:"5-resource-cleanup",level:3},{value:"Jenkins Security Best Practices",id:"jenkins-security-best-practices",level:2},{value:"1. User Management",id:"1-user-management",level:3},{value:"2. Plugin Security",id:"2-plugin-security",level:3},{value:"3. Pipeline Security",id:"3-pipeline-security",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"jenkins-for-beginners---spring-boot-development-guide",children:"Jenkins for Beginners - Spring Boot Development Guide"})}),"\n",(0,s.jsx)(e.h2,{id:"what-is-jenkins",children:"What is Jenkins?"}),"\n",(0,s.jsx)(e.p,{children:"Jenkins is an open-source automation server that enables Continuous Integration (CI) and Continuous Deployment (CD) for software development. It helps automate the building, testing, and deployment of Spring Boot applications."}),"\n",(0,s.jsx)(e.h3,{id:"why-jenkins-for-spring-boot",children:"Why Jenkins for Spring Boot?"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Automation"}),": Automatically build and test your Spring Boot apps on code changes"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Integration"}),": Works seamlessly with Maven/Gradle, Git, Docker"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Flexibility"}),": Extensive plugin ecosystem"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Scalability"}),": Can handle multiple projects and environments"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Free"}),": Open-source with strong community support"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"core-jenkins-concepts",children:"Core Jenkins Concepts"}),"\n",(0,s.jsx)(e.h3,{id:"key-terminology",children:"Key Terminology"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Job/Project"}),": A runnable task in Jenkins (e.g., build Spring Boot app)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Build"}),": Single execution of a job"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Workspace"}),": Directory where Jenkins runs your job"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Node/Agent"}),": Machine where Jenkins executes jobs"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Pipeline"}),": Code-based job definition using Groovy"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Plugin"}),": Extension that adds functionality to Jenkins"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"jenkins-architecture",children:"Jenkins Architecture"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Jenkins Master \u2502  \u2190 Web UI, Job scheduling, Plugin management\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Jenkins Agents \u2502  \u2190 Execute jobs, can be on different machines\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Source Code    \u2502  \u2190 Git repositories\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Artifacts      \u2502  \u2190 JAR files, Docker images\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(e.h2,{id:"jenkins-installation",children:"Jenkins Installation"}),"\n",(0,s.jsx)(e.h3,{id:"local-installation-development",children:"Local Installation (Development)"}),"\n",(0,s.jsx)(e.h4,{id:"option-1-download-war-file",children:"Option 1: Download WAR File"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Download Jenkins WAR\nwget https://get.jenkins.io/war-stable/latest/jenkins.war\n\n# Run Jenkins\njava -jar jenkins.war --httpPort=8080\n\n# Access: http://localhost:8080\n"})}),"\n",(0,s.jsx)(e.h4,{id:"option-2-docker-recommended-for-beginners",children:"Option 2: Docker (Recommended for beginners)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Pull Jenkins image\ndocker pull jenkins/jenkins:lts\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v jenkins_home:/var/jenkins_home \\\n  jenkins/jenkins:lts\n\n# Access: http://localhost:8080\n"})}),"\n",(0,s.jsx)(e.h4,{id:"option-3-docker-compose",children:"Option 3: Docker Compose"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# docker-compose.yml\nversion: '3.8'\n\nservices:\n  jenkins:\n    image: jenkins/jenkins:lts\n    container_name: jenkins\n    ports:\n      - '8080:8080'\n      - '50000:50000'\n    volumes:\n      - jenkins_home:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      - JENKINS_OPTS=\"--httpPort=8080\"\n    restart: unless-stopped\n\nvolumes:\n  jenkins_home:\n"})}),"\n",(0,s.jsx)(e.h3,{id:"initial-setup-steps",children:"Initial Setup Steps"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Access Jenkins"}),": Navigate to ",(0,s.jsx)(e.code,{children:"http://localhost:8080"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Unlock Jenkins"}),": Use initial admin password from logs"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Install Plugins"}),': Choose "Install suggested plugins"']}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Create Admin User"}),": Set up your admin account"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Configure Instance"}),": Set Jenkins URL"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"essential-plugins-for-spring-boot-development",children:"Essential Plugins for Spring Boot Development"}),"\n",(0,s.jsx)(e.h3,{id:"must-have-plugins",children:"Must-Have Plugins"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Core plugins for Spring Boot\n- Git Plugin                    # Git integration\n- Maven Integration Plugin      # Maven support\n- Gradle Plugin                # Gradle support\n- JUnit Plugin                 # Test result visualization\n- Jacoco Plugin                # Code coverage\n- SonarQube Scanner            # Code quality\n- Docker Plugin                # Docker integration\n- Blue Ocean                   # Modern UI\n- Pipeline Plugin              # Pipeline as Code\n- Credentials Plugin           # Secure credential storage\n- SSH Agent Plugin             # SSH key management\n"})}),"\n",(0,s.jsx)(e.h3,{id:"installation-via-ui",children:"Installation via UI"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Manage Jenkins"})," \u2192 ",(0,s.jsx)(e.strong,{children:"Manage Plugins"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Available"})," tab \u2192 Search for plugins"]}),"\n",(0,s.jsxs)(e.li,{children:["Select plugins \u2192 ",(0,s.jsx)(e.strong,{children:"Install without restart"})]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"installation-via-plugin-manager",children:"Installation via Plugin Manager"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// plugins.txt (for automated installation)\ngit:latest\nmaven-plugin:latest\ngradle:latest\njunit:latest\njacoco:latest\nsonar:latest\ndocker-plugin:latest\nblueocean:latest\nworkflow-aggregator:latest\n"})}),"\n",(0,s.jsx)(e.h2,{id:"creating-your-first-spring-boot-job",children:"Creating Your First Spring Boot Job"}),"\n",(0,s.jsx)(e.h3,{id:"freestyle-project-beginner-friendly",children:"Freestyle Project (Beginner-Friendly)"}),"\n",(0,s.jsx)(e.h4,{id:"step-1-create-new-job",children:"Step 1: Create New Job"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"New Item"})," \u2192 Enter name: ",(0,s.jsx)(e.code,{children:"springboot-hello-world"})]}),"\n",(0,s.jsxs)(e.li,{children:["Select ",(0,s.jsx)(e.strong,{children:"Freestyle project"})," \u2192 ",(0,s.jsx)(e.strong,{children:"OK"})]}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"step-2-configure-source-code-management",children:"Step 2: Configure Source Code Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Git Configuration\nRepository URL: https://github.com/yourusername/spring-boot-demo.git\nCredentials: Add your Git credentials\nBranch: */main\n"})}),"\n",(0,s.jsx)(e.h4,{id:"step-3-build-triggers",children:"Step 3: Build Triggers"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Options:\n\u2611 GitHub hook trigger for GITScm polling    # Webhook-based\n\u2611 Poll SCM: H/5 * * * *                     # Every 5 minutes\n\u2611 Build periodically: H 2 * * *             # Daily at 2 AM\n"})}),"\n",(0,s.jsx)(e.h4,{id:"step-4-build-environment",children:"Step 4: Build Environment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"\u2611 Delete workspace before build starts\n\u2611 Add timestamps to the Console Output\n"})}),"\n",(0,s.jsx)(e.h4,{id:"step-5-build-steps",children:"Step 5: Build Steps"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Add Build Step \u2192 Invoke top-level Maven targets\nGoals: clean compile test package\nAdvanced:\n  - Maven Version: (Default)\n  - Settings file: settings.xml (if needed)\n  - Global Settings: (Default)\n"})}),"\n",(0,s.jsx)(e.h4,{id:"step-6-post-build-actions",children:"Step 6: Post-Build Actions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Add post-build action \u2192 Archive the artifacts\nFiles to archive: target/*.jar\n\n# Add post-build action \u2192 Publish JUnit test result report\nTest report XMLs: target/surefire-reports/*.xml\n\n# Add post-build action \u2192 Record jacoco coverage report\nPath to exec files: target/jacoco.exec\nClass Dirs: target/classes\nSource Dirs: src/main/java\n"})}),"\n",(0,s.jsx)(e.h3,{id:"sample-spring-boot-application-structure",children:"Sample Spring Boot Application Structure"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"spring-boot-demo/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/example/demo/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 DemoApplication.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u2514\u2500\u2500 application.properties\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/demo/\n\u2502               \u2514\u2500\u2500 DemoApplicationTests.java\n\u2514\u2500\u2500 Jenkinsfile (for Pipeline)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"jenkins-pipelines-for-spring-boot",children:"Jenkins Pipelines for Spring Boot"}),"\n",(0,s.jsx)(e.h3,{id:"declarative-pipeline-recommended-for-beginners",children:"Declarative Pipeline (Recommended for Beginners)"}),"\n",(0,s.jsx)(e.h4,{id:"basic-jenkinsfile",children:"Basic Jenkinsfile"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"pipeline {\n    agent any\n\n    tools {\n        maven 'Maven-3.9'\n        jdk 'JDK-17'\n    }\n\n    environment {\n        SPRING_PROFILES_ACTIVE = 'test'\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                git branch: 'main',\n                    url: 'https://github.com/yourusername/spring-boot-demo.git'\n            }\n        }\n\n        stage('Build') {\n            steps {\n                sh 'mvn clean compile'\n            }\n        }\n\n        stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n            post {\n                always {\n                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'\n                    publishCoverage adapters: [\n                        jacocoAdapter('target/site/jacoco/jacoco.xml')\n                    ]\n                }\n            }\n        }\n\n        stage('Package') {\n            steps {\n                sh 'mvn package -DskipTests'\n            }\n            post {\n                success {\n                    archiveArtifacts artifacts: 'target/*.jar',\n                                   fingerprint: true\n                }\n            }\n        }\n\n        stage('SonarQube Analysis') {\n            steps {\n                withSonarQubeEnv('SonarQube') {\n                    sh 'mvn sonar:sonar'\n                }\n            }\n        }\n\n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                echo 'Deploying to staging environment...'\n                sh 'java -jar target/*.jar --server.port=8081 &'\n                sh 'sleep 30' // Wait for app to start\n                sh 'curl -f http://localhost:8081/actuator/health || exit 1'\n            }\n        }\n\n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input message: 'Deploy to production?', ok: 'Deploy'\n                echo 'Deploying to production environment...'\n                // Add production deployment steps\n            }\n        }\n    }\n\n    post {\n        always {\n            cleanWs()\n        }\n        success {\n            emailext (\n                subject: \"\u2705 Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build succeeded: ${env.BUILD_URL}\",\n                to: \"developer@company.com\"\n            )\n        }\n        failure {\n            emailext (\n                subject: \"\u274c Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build failed: ${env.BUILD_URL}\",\n                to: \"developer@company.com\"\n            )\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h4,{id:"advanced-pipeline-with-docker",children:"Advanced Pipeline with Docker"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"pipeline {\n    agent any\n\n    environment {\n        DOCKER_IMAGE = \"myapp\"\n        DOCKER_TAG = \"${BUILD_NUMBER}\"\n        REGISTRY_URL = \"your-registry.com\"\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n\n        stage('Build & Test') {\n            parallel {\n                stage('Maven Build') {\n                    steps {\n                        sh 'mvn clean package'\n                    }\n                }\n                stage('Unit Tests') {\n                    steps {\n                        sh 'mvn test'\n                    }\n                    post {\n                        always {\n                            publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'\n                        }\n                    }\n                }\n                stage('Integration Tests') {\n                    steps {\n                        sh 'mvn verify -P integration-tests'\n                    }\n                }\n            }\n        }\n\n        stage('Code Quality') {\n            parallel {\n                stage('SonarQube') {\n                    steps {\n                        withSonarQubeEnv('SonarQube') {\n                            sh 'mvn sonar:sonar'\n                        }\n                    }\n                }\n                stage('Security Scan') {\n                    steps {\n                        sh 'mvn org.owasp:dependency-check-maven:check'\n                    }\n                }\n            }\n        }\n\n        stage('Docker Build') {\n            steps {\n                script {\n                    def image = docker.build(\"${DOCKER_IMAGE}:${DOCKER_TAG}\")\n                    docker.withRegistry(\"https://${REGISTRY_URL}\", 'docker-registry-credentials') {\n                        image.push()\n                        image.push('latest')\n                    }\n                }\n            }\n        }\n\n        stage('Deploy') {\n            when {\n                anyOf {\n                    branch 'main'\n                    branch 'develop'\n                }\n            }\n            steps {\n                script {\n                    def environment = env.BRANCH_NAME == 'main' ? 'production' : 'staging'\n                    sh \"docker run -d --name ${environment}-${BUILD_NUMBER} -p 808${BUILD_NUMBER % 10}:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}\"\n\n                    // Health check\n                    sh \"sleep 30\"\n                    sh \"curl -f http://localhost:808${BUILD_NUMBER % 10}/actuator/health\"\n                }\n            }\n        }\n    }\n\n    post {\n        always {\n            // Clean up Docker containers\n            sh \"docker stop \\$(docker ps -aq) || true\"\n            sh \"docker rm \\$(docker ps -aq) || true\"\n            cleanWs()\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"multi-branch-pipeline-setup",children:"Multi-Branch Pipeline Setup"}),"\n",(0,s.jsx)(e.h3,{id:"step-1-create-multi-branch-pipeline",children:"Step 1: Create Multi-Branch Pipeline"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"New Item"})," \u2192 ",(0,s.jsx)(e.strong,{children:"Multibranch Pipeline"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Branch Sources"})," \u2192 ",(0,s.jsx)(e.strong,{children:"Git"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Project Repository"}),": Your Git URL"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Credentials"}),": Your Git credentials"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Scan Multibranch Pipeline Triggers"}),": Periodically"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"step-2-branch-strategy",children:"Step 2: Branch Strategy"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Jenkinsfile - Branch-specific deployment\npipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn clean package'\n            }\n        }\n\n        stage('Deploy') {\n            parallel {\n                stage('Deploy to Dev') {\n                    when { branch 'feature/*' }\n                    steps {\n                        echo \"Deploying feature branch to dev environment\"\n                    }\n                }\n                stage('Deploy to Staging') {\n                    when { branch 'develop' }\n                    steps {\n                        echo \"Deploying to staging environment\"\n                    }\n                }\n                stage('Deploy to Production') {\n                    when { branch 'main' }\n                    steps {\n                        input message: 'Deploy to production?'\n                        echo \"Deploying to production environment\"\n                    }\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"jenkins-configuration-for-spring-boot",children:"Jenkins Configuration for Spring Boot"}),"\n",(0,s.jsx)(e.h3,{id:"global-tool-configuration",children:"Global Tool Configuration"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Manage Jenkins"})," \u2192 ",(0,s.jsx)(e.strong,{children:"Global Tool Configuration"})]}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"maven-configuration",children:"Maven Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"Name: Maven-3.9\nInstall automatically: \u2713\nVersion: 3.9.0\n"})}),"\n",(0,s.jsx)(e.h4,{id:"jdk-configuration",children:"JDK Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"Name: JDK-17\nInstall automatically: \u2713\nAdd Installer: Install from adoptium.net\nVersion: jdk-17.0.7+7\n"})}),"\n",(0,s.jsx)(e.h4,{id:"git-configuration",children:"Git Configuration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"Name: Default\nPath to Git executable: git (or /usr/bin/git)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"system-configuration",children:"System Configuration"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Manage Jenkins"})," \u2192 ",(0,s.jsx)(e.strong,{children:"Configure System"})]}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"global-properties",children:"Global Properties"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"Environment variables:\n- JAVA_HOME: /opt/java/openjdk\n- MAVEN_HOME: /opt/maven\n- PATH: $MAVEN_HOME/bin:$JAVA_HOME/bin:$PATH\n"})}),"\n",(0,s.jsx)(e.h2,{id:"spring-boot-specific-configurations",children:"Spring Boot Specific Configurations"}),"\n",(0,s.jsx)(e.h3,{id:"maven-settings-for-jenkins",children:"Maven Settings for Jenkins"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:'\x3c!-- settings.xml --\x3e\n<?xml version="1.0" encoding="UTF-8"?>\n<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0">\n    <profiles>\n        <profile>\n            <id>jenkins</id>\n            <properties>\n                <spring.profiles.active>jenkins</spring.profiles.active>\n                <skipTests>false</skipTests>\n            </properties>\n        </profile>\n    </profiles>\n\n    <activeProfiles>\n        <activeProfile>jenkins</activeProfile>\n    </activeProfiles>\n</settings>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"application-properties-for-testing",children:"Application Properties for Testing"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-properties",children:"# application-jenkins.properties\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\n\n# Disable security for testing\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration\n\n# Logging\nlogging.level.com.example=DEBUG\nlogging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n"})}),"\n",(0,s.jsx)(e.h3,{id:"pomxml-configuration-for-jenkins",children:"POM.xml Configuration for Jenkins"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<properties>\n    <maven.compiler.source>17</maven.compiler.source>\n    <maven.compiler.target>17</maven.compiler.target>\n    <spring-boot.version>3.1.0</spring-boot.version>\n    <jacoco.version>0.8.8</jacoco.version>\n</properties>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n\n        \x3c!-- Surefire for unit tests --\x3e\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <configuration>\n                <testFailureIgnore>false</testFailureIgnore>\n                <skipTests>${skipTests}</skipTests>\n            </configuration>\n        </plugin>\n\n        \x3c!-- Failsafe for integration tests --\x3e\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-failsafe-plugin</artifactId>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>integration-test</goal>\n                        <goal>verify</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n\n        \x3c!-- JaCoCo for code coverage --\x3e\n        <plugin>\n            <groupId>org.jacoco</groupId>\n            <artifactId>jacoco-maven-plugin</artifactId>\n            <version>${jacoco.version}</version>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>prepare-agent</goal>\n                    </goals>\n                </execution>\n                <execution>\n                    <id>report</id>\n                    <phase>test</phase>\n                    <goals>\n                        <goal>report</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n"})}),"\n",(0,s.jsx)(e.h2,{id:"testing-strategies-in-jenkins",children:"Testing Strategies in Jenkins"}),"\n",(0,s.jsx)(e.h3,{id:"unit-tests-with-junit",children:"Unit Tests with JUnit"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"stage('Unit Tests') {\n    steps {\n        sh 'mvn clean test'\n    }\n    post {\n        always {\n            publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'\n            publishCoverage adapters: [\n                jacocoAdapter('target/site/jacoco/jacoco.xml')\n            ], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"stage('Integration Tests') {\n    steps {\n        sh 'mvn verify -P integration-tests'\n    }\n    post {\n        always {\n            publishTestResults testResultsPattern: 'target/failsafe-reports/*.xml'\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"database-testing",children:"Database Testing"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"pipeline {\n    agent any\n\n    services {\n        postgres {\n            image 'postgres:13'\n            environment {\n                POSTGRES_PASSWORD = 'test'\n                POSTGRES_DB = 'testdb'\n            }\n        }\n    }\n\n    stages {\n        stage('Database Tests') {\n            environment {\n                SPRING_DATASOURCE_URL = 'jdbc:postgresql://postgres:5432/testdb'\n                SPRING_DATASOURCE_USERNAME = 'postgres'\n                SPRING_DATASOURCE_PASSWORD = 'test'\n            }\n            steps {\n                sh 'mvn test -P database-tests'\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"deployment-strategies",children:"Deployment Strategies"}),"\n",(0,s.jsx)(e.h3,{id:"simple-deployment",children:"Simple Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"stage('Deploy') {\n    steps {\n        sh '''\n            # Stop existing application\n            pkill -f \"spring-boot-demo\" || true\n\n            # Deploy new version\n            nohup java -jar target/*.jar --server.port=8080 > app.log 2>&1 &\n\n            # Health check\n            sleep 30\n            curl -f http://localhost:8080/actuator/health\n        '''\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"docker-deployment",children:"Docker Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"stage('Docker Deploy') {\n    steps {\n        script {\n            // Build image\n            def image = docker.build(\"myapp:${BUILD_NUMBER}\")\n\n            // Stop existing container\n            sh 'docker stop myapp-container || true'\n            sh 'docker rm myapp-container || true'\n\n            // Run new container\n            sh \"\"\"\n                docker run -d \\\n                    --name myapp-container \\\n                    -p 8080:8080 \\\n                    -e SPRING_PROFILES_ACTIVE=production \\\n                    myapp:${BUILD_NUMBER}\n            \"\"\"\n\n            // Health check\n            sh 'sleep 30'\n            sh 'curl -f http://localhost:8080/actuator/health'\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"blue-green-deployment",children:"Blue-Green Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:'stage(\'Blue-Green Deploy\') {\n    steps {\n        script {\n            def newPort = env.CURRENT_PORT == \'8080\' ? \'8081\' : \'8080\'\n\n            // Deploy to new port\n            sh """\n                docker run -d \\\n                    --name myapp-${newPort} \\\n                    -p ${newPort}:8080 \\\n                    myapp:${BUILD_NUMBER}\n            """\n\n            // Health check\n            sh "sleep 30"\n            sh "curl -f http://localhost:${newPort}/actuator/health"\n\n            // Switch traffic (update load balancer)\n            sh "echo \'Switching traffic to port ${newPort}\'"\n\n            // Stop old version\n            sh "docker stop myapp-${env.CURRENT_PORT} || true"\n\n            // Update current port\n            env.CURRENT_PORT = newPort\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"monitoring-and-notifications",children:"Monitoring and Notifications"}),"\n",(0,s.jsx)(e.h3,{id:"email-notifications",children:"Email Notifications"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:'post {\n    always {\n        emailext (\n            subject: "Build ${currentBuild.result}: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",\n            body: """\n                Build ${currentBuild.result}\n\n                Job: ${env.JOB_NAME}\n                Build: ${env.BUILD_NUMBER}\n                URL: ${env.BUILD_URL}\n\n                Changes:\n                ${env.CHANGE_LOG}\n            """,\n            recipientProviders: [\n                [$class: \'DevelopersRecipientProvider\'],\n                [$class: \'RequesterRecipientProvider\']\n            ]\n        )\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"slack-integration",children:"Slack Integration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"post {\n    success {\n        slackSend(\n            channel: '#deployments',\n            color: 'good',\n            message: \"\u2705 Deploy Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\"\n        )\n    }\n    failure {\n        slackSend(\n            channel: '#deployments',\n            color: 'danger',\n            message: \"\u274c Deploy Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\"\n        )\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,s.jsx)(e.h3,{id:"build-failures",children:"Build Failures"}),"\n",(0,s.jsx)(e.h4,{id:"maven-issues",children:"Maven Issues"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Problem: Maven not found\nSolution: Configure Maven in Global Tool Configuration\n\n# Problem: Java version mismatch\nSolution: Set JAVA_HOME correctly in pipeline:\nenvironment {\n    JAVA_HOME = tool('JDK-17')\n    PATH = \"${JAVA_HOME}/bin:${env.PATH}\"\n}\n\n# Problem: Dependencies not downloading\nSolution: Clear Maven cache:\nsh 'rm -rf ~/.m2/repository'\n"})}),"\n",(0,s.jsx)(e.h4,{id:"test-failures",children:"Test Failures"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Problem: Tests failing in Jenkins but passing locally\nstage('Debug Tests') {\n    steps {\n        sh 'mvn test -X'  // Debug mode\n        sh 'cat target/surefire-reports/*.txt'  // View test output\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h4,{id:"permission-issues",children:"Permission Issues"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Problem: Permission denied\nSolution: Fix file permissions:\nsh 'chmod +x mvnw'\n"})}),"\n",(0,s.jsx)(e.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Problem: Slow builds\n// Solution: Use parallel execution\npipeline {\n    agent any\n    stages {\n        stage('Parallel Tasks') {\n            parallel {\n                stage('Unit Tests') {\n                    steps { sh 'mvn test' }\n                }\n                stage('Static Analysis') {\n                    steps { sh 'mvn checkstyle:check' }\n                }\n                stage('Security Scan') {\n                    steps { sh 'mvn dependency-check:check' }\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices-for-spring-boot-with-jenkins",children:"Best Practices for Spring Boot with Jenkins"}),"\n",(0,s.jsx)(e.h3,{id:"1-pipeline-structure",children:"1. Pipeline Structure"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Good: Clear, readable stages\npipeline {\n    agent any\n    stages {\n        stage('Prepare') { ... }\n        stage('Build') { ... }\n        stage('Test') { ... }\n        stage('Quality') { ... }\n        stage('Package') { ... }\n        stage('Deploy') { ... }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-environment-management",children:"2. Environment Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Good: Environment-specific configurations\nenvironment {\n    SPRING_PROFILES_ACTIVE = \"${env.BRANCH_NAME == 'main' ? 'prod' : 'dev'}\"\n    DATABASE_URL = credentials('database-url')\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Good: Proper error handling\nstage('Deploy') {\n    steps {\n        script {\n            try {\n                sh 'deploy.sh'\n            } catch (Exception e) {\n                currentBuild.result = 'FAILURE'\n                sh 'rollback.sh'\n                throw e\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"4-security",children:"4. Security"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Good: Use credentials plugin\nenvironment {\n    DB_PASSWORD = credentials('database-password')\n    API_KEY = credentials('external-api-key')\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"5-resource-cleanup",children:"5. Resource Cleanup"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Good: Always clean up\npost {\n    always {\n        sh 'docker container prune -f'\n        sh 'docker image prune -f'\n        cleanWs()\n    }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"jenkins-security-best-practices",children:"Jenkins Security Best Practices"}),"\n",(0,s.jsx)(e.h3,{id:"1-user-management",children:"1. User Management"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Enable matrix-based security"}),"\n",(0,s.jsx)(e.li,{children:"Create role-based access"}),"\n",(0,s.jsx)(e.li,{children:"Use LDAP/Active Directory integration"}),"\n",(0,s.jsx)(e.li,{children:"Regular password policy updates"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-plugin-security",children:"2. Plugin Security"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Keep plugins updated"}),"\n",(0,s.jsx)(e.li,{children:"Remove unused plugins"}),"\n",(0,s.jsx)(e.li,{children:"Review plugin permissions"}),"\n",(0,s.jsx)(e.li,{children:"Use security scanning plugins"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"3-pipeline-security",children:"3. Pipeline Security"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:"// Secure credential usage\npipeline {\n    agent any\n    environment {\n        SECRET_KEY = credentials('secret-key-id')\n    }\n    stages {\n        stage('Build') {\n            steps {\n                withCredentials([string(credentialsId: 'api-key', variable: 'API_KEY')]) {\n                    sh 'echo \"Using API key: $API_KEY\"'\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"This comprehensive guide provides everything a beginner needs to start using Jenkins effectively with Spring Boot applications, from basic setup to advanced CI/CD pipelines."})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);