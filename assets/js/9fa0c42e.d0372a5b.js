"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5595],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},42652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=t(74848),o=t(28453);const a={},s="Reflect and Proxy",l={id:"WebDev/JavaScript/ReflectProxy",title:"Reflect and Proxy",description:"Reflect API",source:"@site/docs/WebDev/JavaScript/ReflectProxy.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/ReflectProxy",permalink:"/dev.enigma/docs/WebDev/JavaScript/ReflectProxy",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/ReflectProxy.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ProxyReflect",permalink:"/dev.enigma/docs/WebDev/JavaScript/ProxyReflect"},next:{title:"Regular Expressions Cheatsheet",permalink:"/dev.enigma/docs/WebDev/JavaScript/Regex"}},c={},i=[{value:"Reflect API",id:"reflect-api",level:2},{value:"Core Reflect Methods",id:"core-reflect-methods",level:3},{value:"1. Reflect.get()",id:"1-reflectget",level:4},{value:"2. Reflect.set()",id:"2-reflectset",level:4},{value:"3. Reflect.has()",id:"3-reflecthas",level:4},{value:"4. Reflect.deleteProperty()",id:"4-reflectdeleteproperty",level:4},{value:"5. Reflect.construct()",id:"5-reflectconstruct",level:4},{value:"Proxy API",id:"proxy-api",level:2},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"1. Validation",id:"1-validation",level:4},{value:"2. Logging",id:"2-logging",level:4},{value:"3. Default Values",id:"3-default-values",level:4},{value:"4. Read-Only Properties",id:"4-read-only-properties",level:4},{value:"5. Private Properties",id:"5-private-properties",level:4},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Method Decorators with Proxy",id:"method-decorators-with-proxy",level:3},{value:"Reactive Properties",id:"reactive-properties",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Additional Reflection Methods",id:"additional-reflection-methods",level:2},{value:"Object.setPrototypeOf() and Reflect.setPrototypeOf()",id:"objectsetprototypeof-and-reflectsetprototypeof",level:3},{value:"Object.getPrototypeOf() and Reflect.getPrototypeOf()",id:"objectgetprototypeof-and-reflectgetprototypeof",level:3},{value:"Object.defineProperty() and Reflect.defineProperty()",id:"objectdefineproperty-and-reflectdefineproperty",level:3},{value:"Object.getOwnPropertyNames() and Object.getOwnPropertySymbols()",id:"objectgetownpropertynames-and-objectgetownpropertysymbols",level:3},{value:"Object.getOwnPropertyDescriptor() and Reflect.getOwnPropertyDescriptor()",id:"objectgetownpropertydescriptor-and-reflectgetownpropertydescriptor",level:3},{value:"Practical Use Cases",id:"practical-use-cases",level:3},{value:"Creating an Immutable Object",id:"creating-an-immutable-object",level:4},{value:"Property Observer Pattern",id:"property-observer-pattern",level:4},{value:"Safe Property Access with Reflect",id:"safe-property-access-with-reflect",level:4}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"reflect-and-proxy",children:"Reflect and Proxy"})}),"\n",(0,r.jsx)(n.h2,{id:"reflect-api",children:"Reflect API"}),"\n",(0,r.jsx)(n.p,{children:"The Reflect API provides methods for interceptable JavaScript operations. It's a global object that helps with forwarding default operations from the handler to the target."}),"\n",(0,r.jsx)(n.h3,{id:"core-reflect-methods",children:"Core Reflect Methods"}),"\n",(0,r.jsx)(n.h4,{id:"1-reflectget",children:"1. Reflect.get()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const person = { name: 'John' };\nconsole.log(Reflect.get(person, 'name')); // 'John'\n\n// With receiver (this binding)\nconst user = {\n  _name: 'Alice',\n  get name() {\n    return this._name;\n  },\n};\nconst proxy = new Proxy(user, {});\nconsole.log(Reflect.get(user, 'name', proxy)); // 'Alice'\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-reflectset",children:"2. Reflect.set()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const person = { age: 30 };\nReflect.set(person, 'age', 31);\nconsole.log(person.age); // 31\n\n// With receiver\nconst user = {\n  _age: 25,\n  set age(value) {\n    this._age = value;\n  },\n};\nReflect.set(user, 'age', 26, user);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-reflecthas",children:"3. Reflect.has()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const person = { name: 'John' };\nconsole.log(Reflect.has(person, 'name')); // true\nconsole.log(Reflect.has(person, 'age')); // false\n"})}),"\n",(0,r.jsx)(n.h4,{id:"4-reflectdeleteproperty",children:"4. Reflect.deleteProperty()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const person = { name: 'John', age: 30 };\nReflect.deleteProperty(person, 'age');\nconsole.log(person); // { name: 'John' }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"5-reflectconstruct",children:"5. Reflect.construct()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function Person(name) {\n  this.name = name;\n}\n\nconst person = Reflect.construct(Person, ['John']);\nconsole.log(person.name); // 'John'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"proxy-api",children:"Proxy API"}),"\n",(0,r.jsx)(n.p,{children:"Proxy allows you to create an object that can intercept and redefine fundamental operations for another object (like property lookup, assignment, enumeration, function invocation, etc.)."}),"\n",(0,r.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsx)(n.h4,{id:"1-validation",children:"1. Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const validator = {\n  set(target, property, value) {\n    if (property === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('Age must be an integer');\n      }\n      if (value < 0 || value > 120) {\n        throw new RangeError('Age must be between 0 and 120');\n      }\n    }\n    return Reflect.set(target, property, value);\n  },\n};\n\nconst person = new Proxy({}, validator);\nperson.age = 30; // Works\n// person.age = -1; // Throws RangeError\n// person.age = 'young'; // Throws TypeError\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-logging",children:"2. Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const handler = {\n  get(target, property) {\n    console.log(`Accessing property: ${property}`);\n    return Reflect.get(target, property);\n  },\n  set(target, property, value) {\n    console.log(`Setting property: ${property} = ${value}`);\n    return Reflect.set(target, property, value);\n  },\n};\n\nconst user = new Proxy({}, handler);\nuser.name = \'John\'; // Logs: "Setting property: name = John"\nconsole.log(user.name); // Logs: "Accessing property: name", then "John"\n'})}),"\n",(0,r.jsx)(n.h4,{id:"3-default-values",children:"3. Default Values"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const handler = {\n  get(target, property) {\n    return Reflect.get(target, property) ?? 'Property not found';\n  },\n};\n\nconst obj = new Proxy({}, handler);\nconsole.log(obj.nonexistent); // 'Property not found'\n"})}),"\n",(0,r.jsx)(n.h4,{id:"4-read-only-properties",children:"4. Read-Only Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const handler = {\n  set(target, property) {\n    throw new Error(`Property ${property} is read-only`);\n  },\n};\n\nconst readOnly = new Proxy({ data: 'protected' }, handler);\n// readOnly.data = 'new value'; // Throws Error\n"})}),"\n",(0,r.jsx)(n.h4,{id:"5-private-properties",children:"5. Private Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const handler = {\n  get(target, property) {\n    if (property.startsWith('_')) {\n      throw new Error('Access to private property denied');\n    }\n    return Reflect.get(target, property);\n  },\n  set(target, property, value) {\n    if (property.startsWith('_')) {\n      throw new Error('Cannot modify private property');\n    }\n    return Reflect.set(target, property, value);\n  },\n};\n\nconst obj = new Proxy(\n  {\n    _private: 'secret',\n    public: 'accessible',\n  },\n  handler\n);\n\nconsole.log(obj.public); // 'accessible'\n// console.log(obj._private); // Throws Error\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"method-decorators-with-proxy",children:"Method Decorators with Proxy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function measureTime(target) {\n  const handler = {\n    apply(target, thisArg, args) {\n      const start = performance.now();\n      const result = Reflect.apply(target, thisArg, args);\n      const end = performance.now();\n      console.log(`Execution time: ${end - start}ms`);\n      return result;\n    },\n  };\n\n  return new Proxy(target, handler);\n}\n\nconst slowFunction = measureTime(function (n) {\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result += i;\n  }\n  return result;\n});\n\nslowFunction(1000000); // Logs execution time\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reactive-properties",children:"Reactive Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'function reactive(obj) {\n  return new Proxy(obj, {\n    set(target, property, value) {\n      const oldValue = target[property];\n      const result = Reflect.set(target, property, value);\n      if (oldValue !== value) {\n        console.log(\n          `Property ${property} changed from ${oldValue} to ${value}`\n        );\n        // Could trigger UI updates or other reactions here\n      }\n      return result;\n    },\n  });\n}\n\nconst state = reactive({\n  count: 0,\n});\n\nstate.count++; // Logs: "Property count changed from 0 to 1"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Always Use Reflect with Proxy"}),": When implementing Proxy handlers, use Reflect methods instead of direct object operations to maintain proper behavior and handle edge cases correctly."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle Edge Cases"}),": Consider what happens with special properties like Symbol.iterator, toString, etc."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Preserve Invariants"}),": Make sure your Proxy handlers maintain JavaScript's fundamental invariants (e.g., non-configurable properties can't be deleted)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Considerations"}),": Be mindful that Proxies add overhead. Use them judiciously, especially in performance-critical code."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"this Binding"}),": Be careful with methods that use ",(0,r.jsx)(n.code,{children:"this"}),". The ",(0,r.jsx)(n.code,{children:"this"})," value inside a method might refer to the Proxy instead of the target object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prototype Chain"}),": Remember that Proxies don't automatically proxy the prototype chain."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Non-Extensible Objects"}),": Some operations are restricted on non-extensible objects, sealed objects, or frozen objects."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Example of this binding issue\nconst target = {\n  name: 'John',\n  getName() {\n    return this.name;\n  },\n};\n\nconst handler = {\n  get(target, property) {\n    return Reflect.get(target, property);\n  },\n};\n\nconst proxy = new Proxy(target, handler);\nconst { getName } = proxy; // Destructuring breaks this binding\nconsole.log(getName()); // undefined - this is not bound correctly\nconsole.log(proxy.getName()); // 'John' - works correctly\n"})}),"\n",(0,r.jsx)(n.h2,{id:"additional-reflection-methods",children:"Additional Reflection Methods"}),"\n",(0,r.jsx)(n.h3,{id:"objectsetprototypeof-and-reflectsetprototypeof",children:"Object.setPrototypeOf() and Reflect.setPrototypeOf()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Using Object.setPrototypeOf\nconst animal = {\n  makeSound() {\n    return 'Some sound';\n  },\n};\n\nconst dog = {\n  bark() {\n    return 'Woof!';\n  },\n};\n\nObject.setPrototypeOf(dog, animal);\n// OR\nReflect.setPrototypeOf(dog, animal);\n\nconsole.log(dog.makeSound()); // 'Some sound'\nconsole.log(dog.bark()); // 'Woof!'\n\n// Checking prototype chain\nconsole.log(Object.getPrototypeOf(dog) === animal); // true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"objectgetprototypeof-and-reflectgetprototypeof",children:"Object.getPrototypeOf() and Reflect.getPrototypeOf()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"class Parent {\n  parentMethod() {\n    return 'Parent method';\n  }\n}\n\nclass Child extends Parent {\n  childMethod() {\n    return 'Child method';\n  }\n}\n\nconst child = new Child();\n\nconsole.log(Object.getPrototypeOf(child) === Child.prototype); // true\nconsole.log(Reflect.getPrototypeOf(child) === Child.prototype); // true\n\n// Getting full prototype chain\nfunction getPrototypeChain(obj) {\n  const chain = [];\n  let currentProto = Object.getPrototypeOf(obj);\n\n  while (currentProto !== null) {\n    chain.push(currentProto);\n    currentProto = Object.getPrototypeOf(currentProto);\n  }\n\n  return chain;\n}\n\nconsole.log(getPrototypeChain(child)); // [Child.prototype, Parent.prototype, Object.prototype]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"objectdefineproperty-and-reflectdefineproperty",children:"Object.defineProperty() and Reflect.defineProperty()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const person = {};\n\n// Using Object.defineProperty\nObject.defineProperty(person, 'name', {\n  value: 'John',\n  writable: false,\n  enumerable: true,\n  configurable: false,\n});\n\n// Using Reflect.defineProperty\nReflect.defineProperty(person, 'age', {\n  value: 30,\n  writable: true,\n  enumerable: true,\n  configurable: true,\n});\n\n// Advanced usage with getters and setters\nlet internalValue = 0;\nReflect.defineProperty(person, 'score', {\n  get() {\n    return internalValue;\n  },\n  set(value) {\n    if (value < 0) throw new Error('Score cannot be negative');\n    internalValue = value;\n  },\n  enumerable: true,\n  configurable: true,\n});\n\n// Usage\nperson.score = 100;\nconsole.log(person.score); // 100\n// person.score = -1; // Throws Error\n"})}),"\n",(0,r.jsx)(n.h3,{id:"objectgetownpropertynames-and-objectgetownpropertysymbols",children:"Object.getOwnPropertyNames() and Object.getOwnPropertySymbols()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const sym1 = Symbol('sym1');\nconst sym2 = Symbol('sym2');\n\nconst obj = {\n  prop1: 'value1',\n  prop2: 'value2',\n  [sym1]: 'symbol value 1',\n  [sym2]: 'symbol value 2',\n};\n\n// Get all string property names\nconsole.log(Object.getOwnPropertyNames(obj)); // ['prop1', 'prop2']\n\n// Get all symbol properties\nconsole.log(Object.getOwnPropertySymbols(obj)); // [Symbol(sym1), Symbol(sym2)]\n\n// Combining both\nconst allProps = [\n  ...Object.getOwnPropertyNames(obj),\n  ...Object.getOwnPropertySymbols(obj),\n];\n\n// Getting property descriptors\nconst fullPropDetails = allProps.reduce((acc, prop) => {\n  acc[prop] = Object.getOwnPropertyDescriptor(obj, prop);\n  return acc;\n}, {});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"objectgetownpropertydescriptor-and-reflectgetownpropertydescriptor",children:"Object.getOwnPropertyDescriptor() and Reflect.getOwnPropertyDescriptor()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const obj = {};\n\nObject.defineProperty(obj, 'name', {\n  value: 'John',\n  writable: false,\n  enumerable: true,\n  configurable: false,\n});\n\n// Using Object method\nconst descriptor1 = Object.getOwnPropertyDescriptor(obj, 'name');\nconsole.log(descriptor1);\n// {\n//   value: 'John',\n//   writable: false,\n//   enumerable: true,\n//   configurable: false\n// }\n\n// Using Reflect method\nconst descriptor2 = Reflect.getOwnPropertyDescriptor(obj, 'name');\nconsole.log(descriptor2); // Same output as above\n"})}),"\n",(0,r.jsx)(n.h3,{id:"practical-use-cases",children:"Practical Use Cases"}),"\n",(0,r.jsx)(n.h4,{id:"creating-an-immutable-object",children:"Creating an Immutable Object"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function makeImmutable(obj) {\n  const props = Object.getOwnPropertyNames(obj);\n  const symbols = Object.getOwnPropertySymbols(obj);\n\n  [...props, ...symbols].forEach(prop => {\n    Object.defineProperty(obj, prop, {\n      writable: false,\n      configurable: false,\n    });\n  });\n\n  Object.preventExtensions(obj);\n  return obj;\n}\n\nconst config = makeImmutable({\n  apiKey: '12345',\n  endpoint: 'https://api.example.com',\n});\n\n// config.apiKey = 'new key'; // Throws error in strict mode\n// config.newProp = 'value'; // Throws error\n"})}),"\n",(0,r.jsx)(n.h4,{id:"property-observer-pattern",children:"Property Observer Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function observeProperty(obj, prop, callback) {\n  let value = obj[prop];\n\n  Object.defineProperty(obj, prop, {\n    get() {\n      return value;\n    },\n    set(newValue) {\n      const oldValue = value;\n      value = newValue;\n      callback(prop, oldValue, newValue);\n    },\n    enumerable: true,\n    configurable: true,\n  });\n}\n\nconst user = {\n  name: 'John',\n  age: 30,\n};\n\nobserveProperty(user, 'name', (prop, oldVal, newVal) => {\n  console.log(`${prop} changed from ${oldVal} to ${newVal}`);\n});\n\nuser.name = 'Jane'; // Logs: \"name changed from John to Jane\"\n"})}),"\n",(0,r.jsx)(n.h4,{id:"safe-property-access-with-reflect",children:"Safe Property Access with Reflect"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function safeGetProperty(obj, prop) {\n  if (Reflect.has(obj, prop)) {\n    return {\n      value: Reflect.get(obj, prop),\n      exists: true,\n    };\n  }\n  return {\n    value: undefined,\n    exists: false,\n  };\n}\n\nconst data = {\n  user: {\n    name: 'John',\n  },\n};\n\nconsole.log(safeGetProperty(data, 'user')); // { value: { name: 'John' }, exists: true }\nconsole.log(safeGetProperty(data, 'age')); // { value: undefined, exists: false }\n"})}),"\n",(0,r.jsx)(n.p,{children:"These methods provide powerful tools for metaprogramming in JavaScript, allowing you to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Manipulate object prototypes"}),"\n",(0,r.jsx)(n.li,{children:"Define and modify property attributes"}),"\n",(0,r.jsx)(n.li,{children:"Inspect object properties and their descriptors"}),"\n",(0,r.jsx)(n.li,{children:"Create advanced patterns like property observation and immutability"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Remember that while these methods are powerful, they should be used judiciously as they can make code harder to understand and maintain if overused."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);