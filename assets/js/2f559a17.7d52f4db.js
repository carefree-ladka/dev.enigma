"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[475],{5614:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});var s=i(4848),a=i(8453);const l={},r="0/1 Knapsack and Unbounded Knapsack",t={id:"DSA/KnapsackDP",title:"0/1 Knapsack and Unbounded Knapsack",description:"0/1 Knapsack Problems",source:"@site/docs/DSA/KnapsackDP.mdx",sourceDirName:"DSA",slug:"/DSA/KnapsackDP",permalink:"/js.enigma/docs/DSA/KnapsackDP",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/KnapsackDP.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kadane's Algorithm Tutorial",permalink:"/js.enigma/docs/DSA/Kadane"},next:{title:"Kruskal's Algorithm",permalink:"/js.enigma/docs/DSA/Kruskal'sAlgorithm"}},c={},d=[{value:"0/1 Knapsack Problems",id:"01-knapsack-problems",level:2},{value:"Classic 0/1 Problems",id:"classic-01-problems",level:3},{value:"Subset Problems (0/1 Variants)",id:"subset-problems-01-variants",level:3},{value:"Unbounded Knapsack Problems",id:"unbounded-knapsack-problems",level:2},{value:"Classic Unbounded Problems",id:"classic-unbounded-problems",level:3},{value:"Combination Problems (Unbounded Variants)",id:"combination-problems-unbounded-variants",level:3},{value:"Implementation Tips",id:"implementation-tips",level:2},{value:"0/1 Knapsack Template",id:"01-knapsack-template",level:3},{value:"Unbounded Knapsack Template",id:"unbounded-knapsack-template",level:3},{value:"Key Differences",id:"key-differences",level:2},{value:"Common Patterns to Watch For",id:"common-patterns-to-watch-for",level:2},{value:"Fractional Knapsack Problems",id:"fractional-knapsack-problems",level:2},{value:"Key Characteristics",id:"key-characteristics",level:3},{value:"Implementation Template",id:"implementation-template",level:3},{value:"Related Problems",id:"related-problems",level:3},{value:"Comparison with Other Knapsack Types",id:"comparison-with-other-knapsack-types",level:3},{value:"Time Complexity",id:"time-complexity",level:4},{value:"Space Complexity",id:"space-complexity",level:4},{value:"Solution Approach",id:"solution-approach",level:4},{value:"When to Use Each Type",id:"when-to-use-each-type",level:3},{value:"Implementation Differences",id:"implementation-differences",level:3},{value:"Optimization Tips",id:"optimization-tips",level:3}];function o(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"01-knapsack-and-unbounded-knapsack",children:"0/1 Knapsack and Unbounded Knapsack"})}),"\n",(0,s.jsx)(e.h2,{id:"01-knapsack-problems",children:"0/1 Knapsack Problems"}),"\n",(0,s.jsx)(e.p,{children:"In 0/1 Knapsack, each item can be used at most once."}),"\n",(0,s.jsx)(e.h3,{id:"classic-01-problems",children:"Classic 0/1 Problems"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Partition Equal Subset Sum"})," (LC-416) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Given array nums, determine if it can be partitioned into two equal sum subsets"}),"\n",(0,s.jsx)(e.li,{children:"Classic 0/1 where target sum is total/2"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"canPartition([1,5,11,5]) // true -> [1,5,5] and [11]\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Target Sum"})," (LC-494) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Assign + or - to each number to achieve target sum"}),"\n",(0,s.jsx)(e.li,{children:"0/1 where each number must be used exactly once"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"findTargetSum([1,1,1,1,1], 3) // 5 ways\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Last Stone Weight II"})," (LC-1049) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Smash stones together to minimize final weight"}),"\n",(0,s.jsx)(e.li,{children:"Transforms into finding closest possible partition"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"lastStoneWeightII([2,7,4,1,8,1]) // 1\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Ones and Zeroes"})," (LC-474) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Find largest subset with limited 0s and 1s"}),"\n",(0,s.jsx)(e.li,{children:"0/1 with two constraints (m zeros, n ones)"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'findMaxForm(["10","0001","111001","1","0"], m=5, n=3)\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"subset-problems-01-variants",children:"Subset Problems (0/1 Variants)"}),"\n",(0,s.jsxs)(e.ol,{start:"5",children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Subsets II"})," (LC-90) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Generate all possible subsets with duplicates"}),"\n",(0,s.jsx)(e.li,{children:"Each number can be used 0 or 1 times"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"subsetsWithDup([1,2,2]) // [[],[1],[2],[1,2],[2,2],[1,2,2]]\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Partition to K Equal Sum Subsets"})," (LC-698) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Partition array into k subsets with equal sums"}),"\n",(0,s.jsx)(e.li,{children:"Each number must be used exactly once"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"canPartitionKSubsets([4,3,2,3,5,2,1], k=4) // true\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"unbounded-knapsack-problems",children:"Unbounded Knapsack Problems"}),"\n",(0,s.jsx)(e.p,{children:"In Unbounded Knapsack, items can be used multiple times."}),"\n",(0,s.jsx)(e.h3,{id:"classic-unbounded-problems",children:"Classic Unbounded Problems"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Coin Change"})," (LC-322) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Minimum coins needed to make amount"}),"\n",(0,s.jsx)(e.li,{children:"Each coin can be used unlimited times"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"coinChange([1,2,5], amount=11) // 3 coins\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Coin Change II"})," (LC-518) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Number of ways to make amount using coins"}),"\n",(0,s.jsx)(e.li,{children:"Unlimited use of each coin"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"change(amount=5, coins=[1,2,5]) // 4 ways\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Perfect Squares"})," (LC-279) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Minimum number of perfect squares that sum to n"}),"\n",(0,s.jsx)(e.li,{children:"Can use same square multiple times"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"numSquares(12) // 3 (4+4+4)\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Integer Break"})," (LC-343) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Break integer into sum of numbers to maximize product"}),"\n",(0,s.jsx)(e.li,{children:"Can reuse numbers"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"integerBreak(10) // 36 (3+3+4)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"combination-problems-unbounded-variants",children:"Combination Problems (Unbounded Variants)"}),"\n",(0,s.jsxs)(e.ol,{start:"5",children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Combination Sum"})," (LC-39) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Find all combinations that sum to target"}),"\n",(0,s.jsx)(e.li,{children:"Can reuse numbers"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"combinationSum([2,3,6,7], target=7) // [[2,2,3],[7]]\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Combination Sum IV"})," (LC-377) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Number of possible combinations that sum to target"}),"\n",(0,s.jsx)(e.li,{children:"Order matters (true combinations)"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"combinationSum4([1,2,3], target=4) // 7 combinations\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"implementation-tips",children:"Implementation Tips"}),"\n",(0,s.jsx)(e.h3,{id:"01-knapsack-template",children:"0/1 Knapsack Template"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"function knapsack01(values, weights, capacity) {\n    const n = values.length;\n    const dp = Array(capacity + 1).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let w = capacity; w >= weights[i]; w--) {\n            dp[w] = Math.max(dp[w], dp[w - weights[i]] + values[i]);\n        }\n    }\n    \n    return dp[capacity];\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"unbounded-knapsack-template",children:"Unbounded Knapsack Template"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"function unboundedKnapsack(values, weights, capacity) {\n    const n = values.length;\n    const dp = Array(capacity + 1).fill(0);\n    \n    for (let w = 1; w <= capacity; w++) {\n        for (let i = 0; i < n; i++) {\n            if (weights[i] <= w) {\n                dp[w] = Math.max(dp[w], dp[w - weights[i]] + values[i]);\n            }\n        }\n    }\n    \n    return dp[capacity];\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"key-differences",children:"Key Differences"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Iteration Order"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"0/1: Must iterate capacity backwards to avoid reusing items"}),"\n",(0,s.jsx)(e.li,{children:"Unbounded: Can iterate forwards since reuse is allowed"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"State Transition"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"0/1: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight[i]] + value[i])"}),"\n",(0,s.jsx)(e.li,{children:"Unbounded: dp[w] = max(dp[w], dp[w-weight[i]] + value[i])"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Space Optimization"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"0/1: Can optimize to 1D array but must iterate backwards"}),"\n",(0,s.jsx)(e.li,{children:"Unbounded: Naturally uses 1D array with forward iteration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"common-patterns-to-watch-for",children:"Common Patterns to Watch For"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Sum Division Problems"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"If problem involves dividing sum into parts"}),"\n",(0,s.jsx)(e.li,{children:"Usually 0/1 Knapsack variant"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Minimizing Differences"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Finding minimum difference between partitions"}),"\n",(0,s.jsx)(e.li,{children:"Transform into 0/1 Knapsack"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Combination Problems"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"If order doesn't matter: Usually 0/1"}),"\n",(0,s.jsx)(e.li,{children:"If order matters or reuse allowed: Usually Unbounded"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Multiple Constraints"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"May need multiple dp arrays"}),"\n",(0,s.jsx)(e.li,{children:"Example: Ones and Zeroes problem"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"fractional-knapsack-problems",children:"Fractional Knapsack Problems"}),"\n",(0,s.jsx)(e.p,{children:"In Fractional Knapsack, items can be broken into smaller units (unlike 0/1 and unbounded)."}),"\n",(0,s.jsx)(e.h3,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Items can be divided into fractions"}),"\n",(0,s.jsx)(e.li,{children:"Usually requires sorting by value/weight ratio"}),"\n",(0,s.jsx)(e.li,{children:"Greedy approach works (unlike 0/1 and unbounded)"}),"\n",(0,s.jsx)(e.li,{children:"Optimal solution always includes the best ratio items first"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"implementation-template",children:"Implementation Template"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"function fractionalKnapsack(values, weights, capacity) {\n    const n = values.length;\n    const items = [];\n    \n    // Create items with value/weight ratio\n    for (let i = 0; i < n; i++) {\n        items.push({\n            value: values[i],\n            weight: weights[i],\n            ratio: values[i] / weights[i]\n        });\n    }\n    \n    // Sort by value/weight ratio in descending order\n    items.sort((a, b) => b.ratio - a.ratio);\n    \n    let totalValue = 0;\n    let currentWeight = 0;\n    \n    for (let item of items) {\n        if (currentWeight + item.weight <= capacity) {\n            // Take whole item\n            currentWeight += item.weight;\n            totalValue += item.value;\n        } else {\n            // Take fraction of the item\n            const remainingCapacity = capacity - currentWeight;\n            totalValue += item.value * (remainingCapacity / item.weight);\n            break;\n        }\n    }\n    \n    return totalValue;\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"related-problems",children:"Related Problems"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Container With Most Water"})," (LC-11) [Medium]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"While not strictly fractional knapsack, uses similar principles"}),"\n",(0,s.jsx)(e.li,{children:'Area represents "value" that can be partially used'}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"maxArea([1,8,6,2,5,4,8,3,7]) // 49\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Minimum Number of Refueling Stops"})," (LC-871) [Hard]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Car with initial fuel capacity"}),"\n",(0,s.jsx)(e.li,{children:"Can take partial fuel from stations"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"minRefuelStops(target, startFuel, stations)\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Maximum Performance of a Team"})," (LC-1383) [Hard]"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Select team members with speed/efficiency ratios"}),"\n",(0,s.jsx)(e.li,{children:"Partial contribution to team performance"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"maxPerformance(n, speed, efficiency, k)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"comparison-with-other-knapsack-types",children:"Comparison with Other Knapsack Types"}),"\n",(0,s.jsx)(e.h4,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"0/1 Knapsack: O(nW) - Dynamic Programming"}),"\n",(0,s.jsx)(e.li,{children:"Unbounded Knapsack: O(nW) - Dynamic Programming"}),"\n",(0,s.jsx)(e.li,{children:"Fractional Knapsack: O(n log n) - Greedy with sorting"}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"0/1 Knapsack: O(W) or O(nW)"}),"\n",(0,s.jsx)(e.li,{children:"Unbounded Knapsack: O(W)"}),"\n",(0,s.jsx)(e.li,{children:"Fractional Knapsack: O(n) for storing items"}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"solution-approach",children:"Solution Approach"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"0/1 Knapsack: Dynamic Programming"}),"\n",(0,s.jsx)(e.li,{children:"Unbounded Knapsack: Dynamic Programming"}),"\n",(0,s.jsx)(e.li,{children:"Fractional Knapsack: Greedy Algorithm"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"when-to-use-each-type",children:"When to Use Each Type"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Use 0/1 Knapsack when:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Items must be used completely or not at all"}),"\n",(0,s.jsx)(e.li,{children:"Each item can be used at most once"}),"\n",(0,s.jsx)(e.li,{children:"Example: Filling a backpack with indivisible items"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Use Unbounded Knapsack when:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Items must be used completely"}),"\n",(0,s.jsx)(e.li,{children:"Items can be used multiple times"}),"\n",(0,s.jsx)(e.li,{children:"Example: Making change with coins"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Use Fractional Knapsack when:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Items can be divided into smaller units"}),"\n",(0,s.jsx)(e.li,{children:"Value is proportional to the amount used"}),"\n",(0,s.jsx)(e.li,{children:"Example: Filling a container with liquids"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"implementation-differences",children:"Implementation Differences"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Different approaches for each type\nfunction compareKnapsackTypes(values, weights, capacity) {\n    // 0/1 Knapsack - Dynamic Programming\n    function knapsack01() {\n        const dp = Array(capacity + 1).fill(0);\n        for (let i = 0; i < values.length; i++) {\n            for (let w = capacity; w >= weights[i]; w--) {\n                dp[w] = Math.max(dp[w], dp[w - weights[i]] + values[i]);\n            }\n        }\n        return dp[capacity];\n    }\n\n    // Unbounded Knapsack - Dynamic Programming\n    function unboundedKnapsack() {\n        const dp = Array(capacity + 1).fill(0);\n        for (let w = 1; w <= capacity; w++) {\n            for (let i = 0; i < values.length; i++) {\n                if (weights[i] <= w) {\n                    dp[w] = Math.max(dp[w], dp[w - weights[i]] + values[i]);\n                }\n            }\n        }\n        return dp[capacity];\n    }\n\n    // Fractional Knapsack - Greedy\n    function fractionalKnapsack() {\n        const items = values.map((v, i) => ({\n            value: v,\n            weight: weights[i],\n            ratio: v / weights[i]\n        }));\n        items.sort((a, b) => b.ratio - a.ratio);\n        \n        let totalValue = 0;\n        let currentWeight = 0;\n        \n        for (let item of items) {\n            if (currentWeight + item.weight <= capacity) {\n                currentWeight += item.weight;\n                totalValue += item.value;\n            } else {\n                const remaining = capacity - currentWeight;\n                totalValue += item.value * (remaining / item.weight);\n                break;\n            }\n        }\n        return totalValue;\n    }\n\n    return {\n        zeroOne: knapsack01(),\n        unbounded: unboundedKnapsack(),\n        fractional: fractionalKnapsack()\n    };\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"optimization-tips",children:"Optimization Tips"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"For Fractional Knapsack:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Pre-calculate and store ratios"}),"\n",(0,s.jsx)(e.li,{children:"Use quick select instead of sorting for k largest ratios"}),"\n",(0,s.jsx)(e.li,{children:"Consider using a heap for large datasets"}),"\n",(0,s.jsx)(e.li,{children:"Cache ratio calculations if used multiple times"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Common Optimizations Across All Types:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Early termination when capacity is filled"}),"\n",(0,s.jsx)(e.li,{children:"Preprocessing to remove invalid items"}),"\n",(0,s.jsx)(e.li,{children:"Space optimization in DP solutions"}),"\n",(0,s.jsx)(e.li,{children:"Bit manipulation for small weights"}),"\n"]}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>t});var s=i(6540);const a={},l=s.createContext(a);function r(n){const e=s.useContext(l);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(l.Provider,{value:e},n.children)}}}]);