"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2641],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(96540);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}},85254:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>E,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var a=s(74848),r=s(28453);const t={},i="SQL Essentials for Java Backend Developers",o={id:"Database/SQL Essentials for Java Backend Developers",title:"SQL Essentials for Java Backend Developers",description:"1. Core CRUD Operations (90% of your queries)",source:"@site/docs/Database/SQL Essentials for Java Backend Developers.mdx",sourceDirName:"Database",slug:"/Database/SQL Essentials for Java Backend Developers",permalink:"/js.enigma/docs/Database/SQL Essentials for Java Backend Developers",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Database/SQL Essentials for Java Backend Developers.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL Comprehensive Notes",permalink:"/js.enigma/docs/Database/PostgreSQL Comprehensive Notes"},next:{title:"Sharding vs Replication vs Partitioning",permalink:"/js.enigma/docs/Database/Sharding vs Replication vs Partitioning"}},l={},d=[{value:"1. Core CRUD Operations (90% of your queries)",id:"1-core-crud-operations-90-of-your-queries",level:2},{value:"Create",id:"create",level:3},{value:"Read (Most Important)",id:"read-most-important",level:3},{value:"Update",id:"update",level:3},{value:"Delete",id:"delete",level:3},{value:"2. JOINs (Critical for Backend APIs)",id:"2-joins-critical-for-backend-apis",level:2},{value:"3. Aggregation (For Dashboard/Analytics APIs)",id:"3-aggregation-for-dashboardanalytics-apis",level:2},{value:"4. Table Creation (For Migrations)",id:"4-table-creation-for-migrations",level:2},{value:"5. Indexes (Performance Essentials)",id:"5-indexes-performance-essentials",level:2},{value:"6. Java Integration Patterns",id:"6-java-integration-patterns",level:2},{value:"With JDBC PreparedStatement",id:"with-jdbc-preparedstatement",level:3},{value:"Common Query Patterns in Java Backend",id:"common-query-patterns-in-java-backend",level:3},{value:"7. Date/Time Queries (Common in Business Logic)",id:"7-datetime-queries-common-in-business-logic",level:2},{value:"8. Transactions (Critical for Data Integrity)",id:"8-transactions-critical-for-data-integrity",level:2},{value:"What You Can Skip Initially",id:"what-you-can-skip-initially",level:2},{value:"Key Tips for Java Developers",id:"key-tips-for-java-developers",level:2},{value:"Most Frequent Backend Patterns",id:"most-frequent-backend-patterns",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sql-essentials-for-java-backend-developers",children:"SQL Essentials for Java Backend Developers"})}),"\n",(0,a.jsx)(n.h2,{id:"1-core-crud-operations-90-of-your-queries",children:"1. Core CRUD Operations (90% of your queries)"}),"\n",(0,a.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"INSERT INTO users (name, email, age) VALUES ('John', 'john@example.com', 25);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"read-most-important",children:"Read (Most Important)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Basic select\nSELECT * FROM users;\nSELECT name, email FROM users WHERE id = ?;\n\n-- Filtering (very common in APIs)\nSELECT * FROM users WHERE status = 'active' AND age > 18;\nSELECT * FROM users WHERE email LIKE '%@gmail.com';\n\n-- Pagination (essential for REST APIs)\nSELECT * FROM users ORDER BY created_at DESC LIMIT 10 OFFSET 20;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE users SET status = 'inactive' WHERE id = ?;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DELETE FROM users WHERE id = ?;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"2-joins-critical-for-backend-apis",children:"2. JOINs (Critical for Backend APIs)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- INNER JOIN (most common)\nSELECT u.name, o.total, o.created_at\nFROM users u\nINNER JOIN orders o ON u.id = o.user_id\nWHERE u.id = ?;\n\n-- LEFT JOIN (when you need all records from left table)\nSELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nGROUP BY u.id;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"3-aggregation-for-dashboardanalytics-apis",children:"3. Aggregation (For Dashboard/Analytics APIs)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Common aggregates\nSELECT COUNT(*) FROM users WHERE status = 'active';\nSELECT AVG(total) FROM orders WHERE created_at > '2024-01-01';\nSELECT SUM(total) FROM orders WHERE user_id = ?;\n\n-- GROUP BY (for reporting endpoints)\nSELECT DATE(created_at) as date, COUNT(*) as daily_orders\nFROM orders\nGROUP BY DATE(created_at)\nORDER BY date DESC;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"4-table-creation-for-migrations",children:"4. Table Creation (For Migrations)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    status ENUM('active', 'inactive') DEFAULT 'active',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\n-- Foreign Key\nCREATE TABLE orders (\n    id BIGINT AUTO_INCREMENT PRIMARY KEY,\n    user_id BIGINT NOT NULL,\n    total DECIMAL(10,2) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"5-indexes-performance-essentials",children:"5. Indexes (Performance Essentials)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Most important indexes for Java backend\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_orders_created_at ON orders(created_at);\n\n-- Composite index (for complex WHERE clauses)\nCREATE INDEX idx_users_status_created ON users(status, created_at);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"6-java-integration-patterns",children:"6. Java Integration Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"with-jdbc-preparedstatement",children:"With JDBC PreparedStatement"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// \u2705 Always use PreparedStatement\nString sql = "SELECT * FROM users WHERE email = ? AND status = ?";\nPreparedStatement stmt = connection.prepareStatement(sql);\nstmt.setString(1, email);\nstmt.setString(2, "active");\nResultSet rs = stmt.executeQuery();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"common-query-patterns-in-java-backend",children:"Common Query Patterns in Java Backend"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- User authentication\nSELECT id, password_hash FROM users WHERE email = ?;\n\n-- Fetch user with profile\nSELECT u.*, p.bio, p.avatar_url\nFROM users u\nLEFT JOIN profiles p ON u.id = p.user_id\nWHERE u.id = ?;\n\n-- Paginated list for REST API\nSELECT * FROM products\nWHERE category = ? AND price BETWEEN ? AND ?\nORDER BY created_at DESC\nLIMIT ? OFFSET ?;\n\n-- Check if exists (before insert)\nSELECT COUNT(*) FROM users WHERE email = ?;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"7-datetime-queries-common-in-business-logic",children:"7. Date/Time Queries (Common in Business Logic)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- Recent records\nSELECT * FROM orders WHERE created_at >= NOW() - INTERVAL 30 DAY;\n\n-- Date range filtering\nSELECT * FROM orders\nWHERE created_at BETWEEN '2024-01-01' AND '2024-12-31';\n\n-- Group by date\nSELECT DATE(created_at) as order_date, COUNT(*)\nFROM orders\nGROUP BY DATE(created_at);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"8-transactions-critical-for-data-integrity",children:"8. Transactions (Critical for Data Integrity)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"START TRANSACTION;\nUPDATE accounts SET balance = balance - 100 WHERE id = 1;\nUPDATE accounts SET balance = balance + 100 WHERE id = 2;\nCOMMIT; -- or ROLLBACK on error;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"what-you-can-skip-initially",children:"What You Can Skip Initially"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Advanced window functions"})," - Learn later when you need analytics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Stored procedures"})," - Most Java teams prefer business logic in Java"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Triggers"})," - Usually avoided in modern architectures"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Complex CTEs"})," - Start with basic queries first"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Database-specific functions"})," - Stick to standard SQL initially"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"key-tips-for-java-developers",children:"Key Tips for Java Developers"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Always use PreparedStatement"})," - Never concatenate user input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Index your WHERE clauses"})," - Especially foreign keys and commonly filtered columns"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"LIMIT your queries"})," - Always paginate in APIs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use transactions"})," - For any multi-table operations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test queries separately"})," - Use MySQL Workbench/phpMyAdmin before coding"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Learn JPA/Hibernate"})," - But understand the SQL it generates"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"most-frequent-backend-patterns",children:"Most Frequent Backend Patterns"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- 1. Find by ID (single record)\nSELECT * FROM users WHERE id = ?;\n\n-- 2. List with filters (paginated)\nSELECT * FROM products\nWHERE category = ? AND status = 'active'\nORDER BY created_at DESC\nLIMIT 20 OFFSET 0;\n\n-- 3. Count for pagination metadata\nSELECT COUNT(*) FROM products WHERE category = ?;\n\n-- 4. Update single field\nUPDATE users SET last_login = NOW() WHERE id = ?;\n\n-- 5. Soft delete\nUPDATE users SET status = 'deleted' WHERE id = ?;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Focus on these patterns first - they cover 90% of what you'll need in Java backend development!"})]})}function E(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);