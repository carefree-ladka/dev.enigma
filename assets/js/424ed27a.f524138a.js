"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7238],{1673:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var i=t(4848),r=t(8453);const s={},l="Fisher-Yates Shuffle Algorithm",a={id:"DSA/FisherYates",title:"Fisher-Yates Shuffle Algorithm",description:"The Fisher-Yates Shuffle algorithm is an efficient method for randomly shuffling a finite sequence of items. It ensures that each permutation of the sequence is equally likely.",source:"@site/docs/DSA/FisherYates.mdx",sourceDirName:"DSA",slug:"/DSA/FisherYates",permalink:"/js.enigma/docs/DSA/FisherYates",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/FisherYates.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fenwick Tree Tutorial",permalink:"/js.enigma/docs/DSA/Fenwick"},next:{title:"Flood Fill Algorithm",permalink:"/js.enigma/docs/DSA/FloodFill"}},h={},o=[{value:"Overview",id:"overview",level:2},{value:"Algorithm Steps",id:"algorithm-steps",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"JavaScript Implementation",id:"javascript-implementation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fisher-yates-shuffle-algorithm",children:"Fisher-Yates Shuffle Algorithm"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Fisher-Yates Shuffle"})," algorithm is an efficient method for randomly shuffling a finite sequence of items. It ensures that each permutation of the sequence is equally likely."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Fisher-Yates Shuffle algorithm iterates through the sequence from the end to the beginning, swapping each element with a randomly chosen element that comes before it (including itself). This ensures that all permutations of the sequence are equally probable."}),"\n",(0,i.jsx)(n.h2,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Initialization"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start with the last element of the sequence."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Iteration"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For each element, generate a random index from the current position to the beginning of the sequence."}),"\n",(0,i.jsx)(n.li,{children:"Swap the current element with the element at the random index."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Termination"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Continue until you have processed the entire sequence."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,i.jsx)(n.p,{children:"The time complexity of the Fisher-Yates Shuffle algorithm is O(n), where n is the number of items in the sequence. This is because each element is swapped exactly once."}),"\n",(0,i.jsx)(n.h2,{id:"javascript-implementation",children:"JavaScript Implementation"}),"\n",(0,i.jsx)(n.p,{children:"Here is a simple JavaScript implementation of the Fisher-Yates Shuffle algorithm:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function fisherYatesShuffle(array) {\n  let m = array.length;\n  \n  // While there remain elements to shuffle\n  while (m > 1) {\n    // Pick a remaining element\n    const i = Math.floor(Math.random() * m--);\n    \n    // Swap it with the current element\n    [array[m], array[i]] = [array[i], array[m]];\n  }\n  \n  return array;\n}\n\n// Example usage\nconst array = [1, 2, 3, 4, 5];\nconst shuffledArray = fisherYatesShuffle(array);\nconsole.log(shuffledArray); // Output: [3, 1, 5, 4, 2] (random order)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);