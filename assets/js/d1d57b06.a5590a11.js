"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7150],{1753:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var t=n(4848),s=n(8453);const i={},a="TypeScript Operators",o={id:"WebDev/TypeScript/TypeScriptOperators",title:"TypeScript Operators",description:"Optional Chaining Operator (?.)",source:"@site/docs/WebDev/TypeScript/TypeScriptOperators.mdx",sourceDirName:"WebDev/TypeScript",slug:"/WebDev/TypeScript/TypeScriptOperators",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptOperators",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/TypeScript/TypeScriptOperators.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Cheatsheet",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptIntroduction"},next:{title:"Authentication & Authorization Security",permalink:"/js.enigma/docs/WebDev/Web Parts/AuthAndAuthorization"}},l={},p=[{value:"Optional Chaining Operator (?.)",id:"optional-chaining-operator-",level:2},{value:"Nullish Coalescing Operator (??)",id:"nullish-coalescing-operator-",level:2},{value:"Non-null Assertion Operator (!)",id:"non-null-assertion-operator-",level:2},{value:"Satisfies Operator",id:"satisfies-operator",level:2},{value:"Type Operators",id:"type-operators",level:2},{value:"Template Literal Types",id:"template-literal-types",level:2},{value:"Index Operators",id:"index-operators",level:2},{value:"Logical Operators in Types",id:"logical-operators-in-types",level:2},{value:"in Operator",id:"in-operator",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"typescript-operators",children:"TypeScript Operators"})}),"\n",(0,t.jsx)(r.h2,{id:"optional-chaining-operator-",children:"Optional Chaining Operator (?.)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Without optional chaining\r\nconst streetName = user && user.address && user.address.street;\r\n\r\n// With optional chaining\r\nconst streetName = user?.address?.street;\r\n\r\n// With method calls\r\nconst result = obj.method?.();\r\n\r\n// With array elements\r\nconst item = arr?.[0];\n"})}),"\n",(0,t.jsx)(r.h2,{id:"nullish-coalescing-operator-",children:"Nullish Coalescing Operator (??)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Returns right-hand value only if left-hand is null or undefined\r\nconst value = someValue ?? defaultValue;\r\n\r\n// Different from OR operator\r\nconst count = 0 || 5;  // Returns 5\r\nconst count = 0 ?? 5;  // Returns 0\r\n\r\n// Combining with optional chaining\r\nconst value = obj?.prop ?? defaultValue;\n"})}),"\n",(0,t.jsx)(r.h2,{id:"non-null-assertion-operator-",children:"Non-null Assertion Operator (!)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Tells TypeScript that a value cannot be null/undefined\r\nfunction process(value: string | null) {\r\n  // TypeScript knows value! is string\r\n  const length = value!.length;\r\n}\r\n\r\n// Common with DOM elements\r\nconst element = document.querySelector('.my-class')!;\r\n\r\n// With class properties\r\nclass User {\r\n  name!: string;  // Will be initialized after constructor\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"satisfies-operator",children:"Satisfies Operator"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Ensures type safety while preserving literal types\r\ntype RGB = [red: number, green: number, blue: number];\r\ntype Color = RGB | string;\r\n\r\n// Without satisfies\r\nconst palette = {\r\n  red: [255, 0, 0],\r\n  blue: '#0000FF'\r\n} as const;\r\n// Type is lost for specific arrays/strings\r\n\r\n// With satisfies\r\nconst palette2 = {\r\n  red: [255, 0, 0],\r\n  blue: '#0000FF'\r\n} satisfies Record<string, Color>;\r\n// Type information is preserved\n"})}),"\n",(0,t.jsx)(r.h2,{id:"type-operators",children:"Type Operators"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:'// keyof operator\r\ninterface User {\r\n  name: string;\r\n  age: number;\r\n}\r\ntype UserKeys = keyof User;  // "name" | "age"\r\n\r\n// typeof operator\r\nconst user = { name: "John", age: 30 };\r\ntype UserType = typeof user;  // { name: string; age: number; }\r\n\r\n// instanceof operator with type guards\r\nclass Dog {\r\n  bark() {}\r\n}\r\nclass Cat {\r\n  meow() {}\r\n}\r\nfunction makeSound(animal: Dog | Cat) {\r\n  if (animal instanceof Dog) {\r\n    animal.bark();\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"template-literal-types",children:"Template Literal Types"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Basic template literal type\r\ntype Greeting = `Hello ${string}`;\r\nlet greeting: Greeting = 'Hello World';  // OK\r\nlet invalid: Greeting = 'Hi World';      // Error\r\n\r\n// With unions\r\ntype Color = 'red' | 'blue';\r\ntype Size = 'small' | 'large';\r\ntype Product = `${Size}-${Color}`;  // \"small-red\" | \"small-blue\" | \"large-red\" | \"large-blue\"\r\n\r\n// With template literal modification\r\ntype GetterName<T extends string> = `get${Capitalize<T>}`;\r\ntype SetterName<T extends string> = `set${Capitalize<T>}`;\n"})}),"\n",(0,t.jsx)(r.h2,{id:"index-operators",children:"Index Operators"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Index access types\r\ntype Person = { age: number; name: string; alive: boolean };\r\ntype Age = Person['age'];  // number\r\n\r\n// Accessing multiple properties\r\ntype NameAndAge = Person['name' | 'age'];  // string | number\r\n\r\n// With arrays\r\nconst MyArray = [\r\n  { name: 'Alice', age: 25 },\r\n  { name: 'Bob', age: 30 },\r\n];\r\ntype Person = typeof MyArray[number];  // { name: string; age: number }\n"})}),"\n",(0,t.jsx)(r.h2,{id:"logical-operators-in-types",children:"Logical Operators in Types"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Conditional types with logical operators\r\ntype IsString<T> = T extends string ? true : false;\r\n\r\n// And condition\r\ntype And<A, B> = A extends true \r\n  ? B extends true \r\n    ? true \r\n    : false \r\n  : false;\r\n\r\n// Or condition\r\ntype Or<A, B> = A extends true \r\n  ? true \r\n  : B extends true \r\n    ? true \r\n    : false;\r\n\r\n// Not condition\r\ntype Not<T> = T extends true ? false : true;\n"})}),"\n",(0,t.jsx)(r.h2,{id:"in-operator",children:"in Operator"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Type narrowing with 'in'\r\ninterface Admin {\r\n  id: number;\r\n  role: string;\r\n}\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n}\r\n\r\nfunction redirect(user: Admin | User) {\r\n  if ('role' in user) {\r\n    // TypeScript knows this is Admin\r\n    console.log(user.role);\r\n  } else {\r\n    // TypeScript knows this is User\r\n    console.log(user.email);\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"These operators make TypeScript more expressive and help in writing safer, more concise code. The operators provide ways to:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Handle nullable values safely (?., ??, !)"}),"\n",(0,t.jsx)(r.li,{children:"Ensure type safety while preserving literal types (satisfies)"}),"\n",(0,t.jsx)(r.li,{children:"Create complex type relationships (template literals, index operators)"}),"\n",(0,t.jsx)(r.li,{children:"Narrow types in control flow (instanceof, in)"}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);