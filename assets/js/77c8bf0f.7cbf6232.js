"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[27614],{25702:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>o});var t=i(74848),a=i(28453);const s={},l="Parking Lot System",r={id:"Low Level design/Parking Lot System",title:"Parking Lot System",description:"Table of Contents",source:"@site/docs/Low Level design/Parking Lot System.mdx",sourceDirName:"Low Level design",slug:"/Low Level design/Parking Lot System",permalink:"/docs/Low Level design/Parking Lot System",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Low Level design/Parking Lot System.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Notification System Design",permalink:"/docs/Low Level design/Notification System Design"},next:{title:"Vending Machine System",permalink:"/docs/Low Level design/Vending Machine System"}},c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Requirements Clarification",id:"requirements-clarification",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"Scope Boundaries",id:"scope-boundaries",level:3},{value:"Included",id:"included",level:4},{value:"Excluded",id:"excluded",level:4},{value:"Core Entities &amp; Relationships",id:"core-entities--relationships",level:2},{value:"Main Entities",id:"main-entities",level:3},{value:"Key Relationships",id:"key-relationships",level:3},{value:"Class Design",id:"class-design",level:2},{value:"Core Classes with Responsibilities",id:"core-classes-with-responsibilities",level:3},{value:"UML Class Diagram",id:"uml-class-diagram",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Enums",id:"enums",level:3},{value:"VehicleType.java",id:"vehicletypejava",level:4},{value:"SpotStatus.java",id:"spotstatusjava",level:4},{value:"PaymentStatus.java",id:"paymentstatusjava",level:4},{value:"PaymentMethod.java",id:"paymentmethodjava",level:4},{value:"Vehicle Classes",id:"vehicle-classes",level:3},{value:"Vehicle.java (Abstract)",id:"vehiclejava-abstract",level:4},{value:"Car.java",id:"carjava",level:4},{value:"Motorcycle.java",id:"motorcyclejava",level:4},{value:"Truck.java",id:"truckjava",level:4},{value:"Bus.java",id:"busjava",level:4},{value:"Parking Spot Classes",id:"parking-spot-classes",level:3},{value:"ParkingSpot.java (Abstract)",id:"parkingspotjava-abstract",level:4},{value:"CompactSpot.java",id:"compactspotjava",level:4},{value:"LargeSpot.java",id:"largespotjava",level:4},{value:"HandicappedSpot.java",id:"handicappedspotjava",level:4},{value:"ElectricSpot.java",id:"electricspotjava",level:4},{value:"Core System Classes",id:"core-system-classes",level:3},{value:"Level.java",id:"leveljava",level:4},{value:"ParkingTicket.java",id:"parkingticketjava",level:4},{value:"Payment.java",id:"paymentjava",level:4},{value:"EntryGate.java",id:"entrygatejava",level:4},{value:"ExitGate.java",id:"exitgatejava",level:4},{value:"Strategy Pattern",id:"strategy-pattern",level:3},{value:"ParkingStrategy.java (Interface)",id:"parkingstrategyjava-interface",level:4},{value:"NearestSpotStrategy.java",id:"nearestspotstrategyjava",level:4},{value:"Main Parking Lot System",id:"main-parking-lot-system",level:3},{value:"ParkingLot.java (Singleton)",id:"parkinglotjava-singleton",level:4},{value:"Demo Class",id:"demo-class",level:3},{value:"ParkingLotDemo.java",id:"parkinglotdemojava",level:4},{value:"Design Patterns &amp; Best Practices",id:"design-patterns--best-practices",level:2},{value:"Design Patterns Used",id:"design-patterns-used",level:3},{value:"SOLID Principles",id:"solid-principles",level:3},{value:"Thread Safety",id:"thread-safety",level:3},{value:"Edge Cases &amp; Extensions",id:"edge-cases--extensions",level:2},{value:"Edge Cases Handled",id:"edge-cases-handled",level:3},{value:"Possible Extensions",id:"possible-extensions",level:3},{value:"1. Monthly Pass System",id:"1-monthly-pass-system",level:4},{value:"2. Reservation System",id:"2-reservation-system",level:4},{value:"3. Dynamic Pricing",id:"3-dynamic-pricing",level:4},{value:"4. Valet Parking Service",id:"4-valet-parking-service",level:4},{value:"5. Advanced Search and Analytics",id:"5-advanced-search-and-analytics",level:4},{value:"6. Notification System",id:"6-notification-system",level:4},{value:"7. Security and Access Control",id:"7-security-and-access-control",level:4},{value:"Scalability Improvements",id:"scalability-improvements",level:3},{value:"1. Database Integration",id:"1-database-integration",level:4},{value:"2. Caching Layer",id:"2-caching-layer",level:4},{value:"3. Microservices Architecture",id:"3-microservices-architecture",level:4},{value:"4. Load Balancing",id:"4-load-balancing",level:4},{value:"Performance Optimizations",id:"performance-optimizations",level:3},{value:"1. Spot Indexing",id:"1-spot-indexing",level:4},{value:"2. Concurrent Collections",id:"2-concurrent-collections",level:4},{value:"Additional Features",id:"additional-features",level:3},{value:"1. Mobile App Integration API",id:"1-mobile-app-integration-api",level:4},{value:"2. Customer Management",id:"2-customer-management",level:4},{value:"3. Loyalty Program",id:"3-loyalty-program",level:4},{value:"Summary",id:"summary",level:2},{value:"Key Features Implemented",id:"key-features-implemented",level:3},{value:"Design Principles Applied",id:"design-principles-applied",level:3},{value:"Production Considerations",id:"production-considerations",level:3},{value:"Time &amp; Space Complexity",id:"time--space-complexity",level:3},{value:"Potential Optimizations",id:"potential-optimizations",level:3},{value:"Interview Tips",id:"interview-tips",level:2},{value:"Common Follow-up Questions",id:"common-follow-up-questions",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"parking-lot-system",children:"Parking Lot System"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#requirements-clarification",children:"Requirements Clarification"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#core-entities--relationships",children:"Core Entities & Relationships"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#class-design",children:"Class Design"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#uml-class-diagram",children:"UML Class Diagram"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#implementation",children:"Implementation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#design-patterns--best-practices",children:"Design Patterns & Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#edge-cases--extensions",children:"Edge Cases & Extensions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#summary",children:"Summary"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"requirements-clarification",children:"Requirements Clarification"}),"\n",(0,t.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple Entry/Exit Gates"}),": Support multiple entry and exit points"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vehicle Types"}),": Support different vehicle types (Car, Motorcycle, Truck, Bus)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spot Types"}),": Different parking spot sizes (Compact, Large, Handicapped, Electric)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parking Assignment"}),": Automatically assign nearest available spot based on vehicle type"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fee Calculation"}),": Calculate parking fees based on vehicle type and duration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Payment Processing"}),": Support multiple payment methods (Cash, Credit Card, UPI)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spot Management"}),": Track available and occupied spots in real-time"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ticket Generation"}),": Issue parking tickets with entry time and assigned spot"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Support multiple floors and large number of spots"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Fast spot allocation (< 100ms)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Concurrency"}),": Thread-safe operations for simultaneous entries/exits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Availability"}),": System should be highly available"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring"}),": Real-time tracking of occupancy rates"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"scope-boundaries",children:"Scope Boundaries"}),"\n",(0,t.jsx)(n.h4,{id:"included",children:"Included"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Multi-level parking support"}),"\n",(0,t.jsx)(n.li,{children:"Real-time spot availability tracking"}),"\n",(0,t.jsx)(n.li,{children:"Dynamic pricing based on vehicle type"}),"\n",(0,t.jsx)(n.li,{children:"Hourly rate calculation"}),"\n",(0,t.jsx)(n.li,{children:"Payment processing simulation"}),"\n",(0,t.jsx)(n.li,{children:"Spot reservation (optional)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"excluded",children:"Excluded"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Online booking system"}),"\n",(0,t.jsx)(n.li,{children:"Mobile app integration"}),"\n",(0,t.jsx)(n.li,{children:"CCTV/Security integration"}),"\n",(0,t.jsx)(n.li,{children:"Automated payment gateway integration"}),"\n",(0,t.jsx)(n.li,{children:"Vehicle damage tracking"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"core-entities--relationships",children:"Core Entities & Relationships"}),"\n",(0,t.jsx)(n.h3,{id:"main-entities",children:"Main Entities"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingLot"}),": Singleton managing the entire parking system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Level"}),": Represents a floor/level in the parking lot"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingSpot"}),": Individual parking space (Abstract class)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vehicle"}),": Represents a parked vehicle (Abstract class)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingTicket"}),": Ticket issued when vehicle enters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Payment"}),": Handles payment processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"EntryGate"}),": Handles vehicle entry"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ExitGate"}),": Handles vehicle exit and payment"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-relationships",children:"Key Relationships"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["ParkingLot ",(0,t.jsx)(n.strong,{children:"HAS-MANY"})," Level (Composition)"]}),"\n",(0,t.jsxs)(n.li,{children:["Level ",(0,t.jsx)(n.strong,{children:"HAS-MANY"})," ParkingSpot (Composition)"]}),"\n",(0,t.jsxs)(n.li,{children:["ParkingSpot ",(0,t.jsx)(n.strong,{children:"HAS-ONE"})," Vehicle (Association)"]}),"\n",(0,t.jsxs)(n.li,{children:["Vehicle ",(0,t.jsx)(n.strong,{children:"HAS-ONE"})," ParkingTicket (Association)"]}),"\n",(0,t.jsxs)(n.li,{children:["ParkingTicket ",(0,t.jsx)(n.strong,{children:"HAS-ONE"})," Payment (Association)"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"class-design",children:"Class Design"}),"\n",(0,t.jsx)(n.h3,{id:"core-classes-with-responsibilities",children:"Core Classes with Responsibilities"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingLot"}),": Singleton orchestrating the system, manages levels and gates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Level"}),": Manages parking spots on a specific floor"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingSpot"}),": Tracks spot status (Available, Occupied, Reserved)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vehicle"}),": Stores vehicle information (license plate, type)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingTicket"}),": Records entry time, spot assignment, and parking duration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Payment"}),": Calculates fees and processes payments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ParkingStrategy"}),": Strategy for spot assignment (nearest, random, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"uml-class-diagram",children:"UML Class Diagram"}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\n    class ParkingLot {\n        -String name\n        -Address address\n        -List~Level~ levels\n        -List~EntryGate~ entryGates\n        -List~ExitGate~ exitGates\n        -ParkingStrategy strategy\n        +getInstance() ParkingLot\n        +addLevel(Level) boolean\n        +getAvailableSpot(VehicleType) ParkingSpot\n        +parkVehicle(Vehicle, EntryGate) ParkingTicket\n        +unparkVehicle(ParkingTicket, ExitGate) Payment\n        +getAvailableSpotCount() int\n    }\n\n    class Level {\n        -int floor\n        -List~ParkingSpot~ spots\n        +addSpot(ParkingSpot) boolean\n        +getAvailableSpot(VehicleType) ParkingSpot\n        +getAvailableSpotCount() int\n    }\n\n    class ParkingSpot {\n        <<abstract>>\n        -String spotId\n        -SpotStatus status\n        -Vehicle currentVehicle\n        +isAvailable() boolean\n        +assignVehicle(Vehicle) boolean\n        +removeVehicle() boolean\n        +canFitVehicle(Vehicle) boolean\n    }\n\n    class CompactSpot {\n        +canFitVehicle(Vehicle) boolean\n    }\n\n    class LargeSpot {\n        +canFitVehicle(Vehicle) boolean\n    }\n\n    class HandicappedSpot {\n        +canFitVehicle(Vehicle) boolean\n    }\n\n    class ElectricSpot {\n        +canFitVehicle(Vehicle) boolean\n    }\n\n    class Vehicle {\n        <<abstract>>\n        -String licensePlate\n        -VehicleType type\n        +getType() VehicleType\n    }\n\n    class Car {\n    }\n\n    class Motorcycle {\n    }\n\n    class Truck {\n    }\n\n    class Bus {\n    }\n\n    class ParkingTicket {\n        -String ticketId\n        -Vehicle vehicle\n        -ParkingSpot spot\n        -LocalDateTime entryTime\n        -LocalDateTime exitTime\n        +calculateDuration() long\n    }\n\n    class Payment {\n        -String paymentId\n        -ParkingTicket ticket\n        -double amount\n        -PaymentStatus status\n        -PaymentMethod method\n        -LocalDateTime paymentTime\n        +processPayment() boolean\n        +calculateAmount() double\n    }\n\n    class EntryGate {\n        -String gateId\n        -String location\n        +issueTicket(Vehicle) ParkingTicket\n    }\n\n    class ExitGate {\n        -String gateId\n        -String location\n        +processExit(ParkingTicket) Payment\n    }\n\n    class ParkingStrategy {\n        <<interface>>\n        +findSpot(List~Level~, VehicleType) ParkingSpot\n    }\n\n    class NearestSpotStrategy {\n        +findSpot(List~Level~, VehicleType) ParkingSpot\n    }\n\n    class VehicleType {\n        <<enumeration>>\n        CAR\n        MOTORCYCLE\n        TRUCK\n        BUS\n    }\n\n    class SpotStatus {\n        <<enumeration>>\n        AVAILABLE\n        OCCUPIED\n        RESERVED\n        OUT_OF_SERVICE\n    }\n\n    class PaymentStatus {\n        <<enumeration>>\n        PENDING\n        COMPLETED\n        FAILED\n        REFUNDED\n    }\n\n    class PaymentMethod {\n        <<enumeration>>\n        CASH\n        CREDIT_CARD\n        DEBIT_CARD\n        UPI\n    }\n\n    ParkingLot "1" --\x3e "*" Level : contains\n    ParkingLot "1" --\x3e "*" EntryGate : has\n    ParkingLot "1" --\x3e "*" ExitGate : has\n    ParkingLot --\x3e ParkingStrategy : uses\n    Level "1" --\x3e "*" ParkingSpot : contains\n    ParkingSpot <|-- CompactSpot : inherits\n    ParkingSpot <|-- LargeSpot : inherits\n    ParkingSpot <|-- HandicappedSpot : inherits\n    ParkingSpot <|-- ElectricSpot : inherits\n    ParkingSpot "1" --\x3e "0..1" Vehicle : parks\n    Vehicle <|-- Car : inherits\n    Vehicle <|-- Motorcycle : inherits\n    Vehicle <|-- Truck : inherits\n    Vehicle <|-- Bus : inherits\n    ParkingTicket "1" --\x3e "1" Vehicle : for\n    ParkingTicket "1" --\x3e "1" ParkingSpot : assigns\n    Payment "1" --\x3e "1" ParkingTicket : for\n    EntryGate --\x3e ParkingTicket : issues\n    ExitGate --\x3e Payment : processes\n    ParkingSpot --\x3e SpotStatus : has\n    Payment --\x3e PaymentStatus : has\n    Payment --\x3e PaymentMethod : uses\n    Vehicle --\x3e VehicleType : has\n    ParkingStrategy <|.. NearestSpotStrategy : implements'}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,t.jsx)(n.h4,{id:"vehicletypejava",children:"VehicleType.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public enum VehicleType {\n    MOTORCYCLE,\n    CAR,\n    TRUCK,\n    BUS\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"spotstatusjava",children:"SpotStatus.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public enum SpotStatus {\n    AVAILABLE,\n    OCCUPIED,\n    RESERVED,\n    OUT_OF_SERVICE\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"paymentstatusjava",children:"PaymentStatus.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public enum PaymentStatus {\n    PENDING,\n    COMPLETED,\n    FAILED,\n    REFUNDED\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"paymentmethodjava",children:"PaymentMethod.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public enum PaymentMethod {\n    CASH,\n    CREDIT_CARD,\n    DEBIT_CARD,\n    UPI\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"vehicle-classes",children:"Vehicle Classes"}),"\n",(0,t.jsx)(n.h4,{id:"vehiclejava-abstract",children:"Vehicle.java (Abstract)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public abstract class Vehicle {\n    private String licensePlate;\n    private VehicleType type;\n\n    public Vehicle(String licensePlate, VehicleType type) {\n        this.licensePlate = licensePlate;\n        this.type = type;\n    }\n\n    public String getLicensePlate() {\n        return licensePlate;\n    }\n\n    public VehicleType getType() {\n        return type;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"carjava",children:"Car.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Car extends Vehicle {\n    public Car(String licensePlate) {\n        super(licensePlate, VehicleType.CAR);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"motorcyclejava",children:"Motorcycle.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Motorcycle extends Vehicle {\n    public Motorcycle(String licensePlate) {\n        super(licensePlate, VehicleType.MOTORCYCLE);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"truckjava",children:"Truck.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Truck extends Vehicle {\n    public Truck(String licensePlate) {\n        super(licensePlate, VehicleType.TRUCK);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"busjava",children:"Bus.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Bus extends Vehicle {\n    public Bus(String licensePlate) {\n        super(licensePlate, VehicleType.BUS);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"parking-spot-classes",children:"Parking Spot Classes"}),"\n",(0,t.jsx)(n.h4,{id:"parkingspotjava-abstract",children:"ParkingSpot.java (Abstract)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public abstract class ParkingSpot {\n    private String spotId;\n    private SpotStatus status;\n    private Vehicle currentVehicle;\n\n    public ParkingSpot(String spotId) {\n        this.spotId = spotId;\n        this.status = SpotStatus.AVAILABLE;\n    }\n\n    public synchronized boolean isAvailable() {\n        return status == SpotStatus.AVAILABLE;\n    }\n\n    public synchronized boolean assignVehicle(Vehicle vehicle) {\n        if (!isAvailable()) {\n            return false;\n        }\n        if (!canFitVehicle(vehicle)) {\n            return false;\n        }\n        this.currentVehicle = vehicle;\n        this.status = SpotStatus.OCCUPIED;\n        return true;\n    }\n\n    public synchronized boolean removeVehicle() {\n        if (status != SpotStatus.OCCUPIED) {\n            return false;\n        }\n        this.currentVehicle = null;\n        this.status = SpotStatus.AVAILABLE;\n        return true;\n    }\n\n    public abstract boolean canFitVehicle(Vehicle vehicle);\n\n    public String getSpotId() {\n        return spotId;\n    }\n\n    public SpotStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(SpotStatus status) {\n        this.status = status;\n    }\n\n    public Vehicle getCurrentVehicle() {\n        return currentVehicle;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"compactspotjava",children:"CompactSpot.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class CompactSpot extends ParkingSpot {\n    public CompactSpot(String spotId) {\n        super(spotId);\n    }\n\n    @Override\n    public boolean canFitVehicle(Vehicle vehicle) {\n        return vehicle.getType() == VehicleType.MOTORCYCLE ||\n               vehicle.getType() == VehicleType.CAR;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"largespotjava",children:"LargeSpot.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class LargeSpot extends ParkingSpot {\n    public LargeSpot(String spotId) {\n        super(spotId);\n    }\n\n    @Override\n    public boolean canFitVehicle(Vehicle vehicle) {\n        return true; // Can fit all vehicle types\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"handicappedspotjava",children:"HandicappedSpot.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class HandicappedSpot extends ParkingSpot {\n    public HandicappedSpot(String spotId) {\n        super(spotId);\n    }\n\n    @Override\n    public boolean canFitVehicle(Vehicle vehicle) {\n        return vehicle.getType() == VehicleType.CAR;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"electricspotjava",children:"ElectricSpot.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class ElectricSpot extends ParkingSpot {\n    private boolean chargingAvailable;\n\n    public ElectricSpot(String spotId) {\n        super(spotId);\n        this.chargingAvailable = true;\n    }\n\n    @Override\n    public boolean canFitVehicle(Vehicle vehicle) {\n        return vehicle.getType() == VehicleType.CAR ||\n               vehicle.getType() == VehicleType.MOTORCYCLE;\n    }\n\n    public boolean isChargingAvailable() {\n        return chargingAvailable;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"core-system-classes",children:"Core System Classes"}),"\n",(0,t.jsx)(n.h4,{id:"leveljava",children:"Level.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Level {\n    private int floor;\n    private List<ParkingSpot> spots;\n\n    public Level(int floor) {\n        this.floor = floor;\n        this.spots = new ArrayList<>();\n    }\n\n    public boolean addSpot(ParkingSpot spot) {\n        return spots.add(spot);\n    }\n\n    public synchronized ParkingSpot getAvailableSpot(VehicleType vehicleType) {\n        for (ParkingSpot spot : spots) {\n            if (spot.isAvailable()) {\n                // Create a temporary vehicle to check compatibility\n                Vehicle tempVehicle = createTempVehicle(vehicleType);\n                if (spot.canFitVehicle(tempVehicle)) {\n                    return spot;\n                }\n            }\n        }\n        return null;\n    }\n\n    private Vehicle createTempVehicle(VehicleType type) {\n        switch (type) {\n            case CAR:\n                return new Car("TEMP");\n            case MOTORCYCLE:\n                return new Motorcycle("TEMP");\n            case TRUCK:\n                return new Truck("TEMP");\n            case BUS:\n                return new Bus("TEMP");\n            default:\n                return null;\n        }\n    }\n\n    public int getAvailableSpotCount() {\n        int count = 0;\n        for (ParkingSpot spot : spots) {\n            if (spot.isAvailable()) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int getFloor() {\n        return floor;\n    }\n\n    public List<ParkingSpot> getSpots() {\n        return spots;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"parkingticketjava",children:"ParkingTicket.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.time.LocalDateTime;\nimport java.time.Duration;\nimport java.util.UUID;\n\npublic class ParkingTicket {\n    private String ticketId;\n    private Vehicle vehicle;\n    private ParkingSpot spot;\n    private LocalDateTime entryTime;\n    private LocalDateTime exitTime;\n\n    public ParkingTicket(Vehicle vehicle, ParkingSpot spot) {\n        this.ticketId = UUID.randomUUID().toString();\n        this.vehicle = vehicle;\n        this.spot = spot;\n        this.entryTime = LocalDateTime.now();\n    }\n\n    public long calculateDuration() {\n        LocalDateTime end = (exitTime != null) ? exitTime : LocalDateTime.now();\n        Duration duration = Duration.between(entryTime, end);\n        return duration.toHours() + (duration.toMinutesPart() > 0 ? 1 : 0); // Round up\n    }\n\n    public void setExitTime(LocalDateTime exitTime) {\n        this.exitTime = exitTime;\n    }\n\n    public String getTicketId() {\n        return ticketId;\n    }\n\n    public Vehicle getVehicle() {\n        return vehicle;\n    }\n\n    public ParkingSpot getSpot() {\n        return spot;\n    }\n\n    public LocalDateTime getEntryTime() {\n        return entryTime;\n    }\n\n    public LocalDateTime getExitTime() {\n        return exitTime;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"paymentjava",children:"Payment.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\nimport java.util.UUID;\n\npublic class Payment {\n    private String paymentId;\n    private ParkingTicket ticket;\n    private double amount;\n    private PaymentStatus status;\n    private PaymentMethod method;\n    private LocalDateTime paymentTime;\n\n    // Hourly rates based on vehicle type\n    private static final double MOTORCYCLE_RATE = 10.0;\n    private static final double CAR_RATE = 20.0;\n    private static final double TRUCK_RATE = 40.0;\n    private static final double BUS_RATE = 50.0;\n\n    public Payment(ParkingTicket ticket, PaymentMethod method) {\n        this.paymentId = UUID.randomUUID().toString();\n        this.ticket = ticket;\n        this.method = method;\n        this.amount = calculateAmount();\n        this.status = PaymentStatus.PENDING;\n    }\n\n    public double calculateAmount() {\n        long hours = ticket.calculateDuration();\n        VehicleType vehicleType = ticket.getVehicle().getType();\n\n        double rate;\n        switch (vehicleType) {\n            case MOTORCYCLE:\n                rate = MOTORCYCLE_RATE;\n                break;\n            case CAR:\n                rate = CAR_RATE;\n                break;\n            case TRUCK:\n                rate = TRUCK_RATE;\n                break;\n            case BUS:\n                rate = BUS_RATE;\n                break;\n            default:\n                rate = CAR_RATE;\n        }\n\n        return hours * rate;\n    }\n\n    public boolean processPayment() {\n        // Simulate payment processing\n        try {\n            // In real system, integrate with payment gateway\n            System.out.println("Processing payment of $" + amount + " via " + method);\n            this.paymentTime = LocalDateTime.now();\n            this.status = PaymentStatus.COMPLETED;\n            return true;\n        } catch (Exception e) {\n            this.status = PaymentStatus.FAILED;\n            return false;\n        }\n    }\n\n    public String getPaymentId() {\n        return paymentId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public PaymentStatus getStatus() {\n        return status;\n    }\n\n    public PaymentMethod getMethod() {\n        return method;\n    }\n\n    public ParkingTicket getTicket() {\n        return ticket;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"entrygatejava",children:"EntryGate.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class EntryGate {\n    private String gateId;\n    private String location;\n\n    public EntryGate(String gateId, String location) {\n        this.gateId = gateId;\n        this.location = location;\n    }\n\n    public ParkingTicket issueTicket(Vehicle vehicle, ParkingSpot spot) {\n        if (spot == null) {\n            System.out.println("No available spot for vehicle: " + vehicle.getLicensePlate());\n            return null;\n        }\n\n        ParkingTicket ticket = new ParkingTicket(vehicle, spot);\n        System.out.println("Ticket issued at gate " + gateId + " for vehicle: " +\n                         vehicle.getLicensePlate() + " at spot: " + spot.getSpotId());\n        return ticket;\n    }\n\n    public String getGateId() {\n        return gateId;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"exitgatejava",children:"ExitGate.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\n\npublic class ExitGate {\n    private String gateId;\n    private String location;\n\n    public ExitGate(String gateId, String location) {\n        this.gateId = gateId;\n        this.location = location;\n    }\n\n    public Payment processExit(ParkingTicket ticket, PaymentMethod paymentMethod) {\n        ticket.setExitTime(LocalDateTime.now());\n\n        Payment payment = new Payment(ticket, paymentMethod);\n        System.out.println("Processing exit at gate " + gateId);\n        System.out.println("Duration: " + ticket.calculateDuration() + " hours");\n        System.out.println("Amount: $" + payment.getAmount());\n\n        return payment;\n    }\n\n    public String getGateId() {\n        return gateId;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"strategy-pattern",children:"Strategy Pattern"}),"\n",(0,t.jsx)(n.h4,{id:"parkingstrategyjava-interface",children:"ParkingStrategy.java (Interface)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.util.List;\n\npublic interface ParkingStrategy {\n    ParkingSpot findSpot(List<Level> levels, VehicleType vehicleType);\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"nearestspotstrategyjava",children:"NearestSpotStrategy.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.util.List;\n\npublic class NearestSpotStrategy implements ParkingStrategy {\n    @Override\n    public ParkingSpot findSpot(List<Level> levels, VehicleType vehicleType) {\n        // Find spot from lowest floor first\n        for (Level level : levels) {\n            ParkingSpot spot = level.getAvailableSpot(vehicleType);\n            if (spot != null) {\n                return spot;\n            }\n        }\n        return null;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"main-parking-lot-system",children:"Main Parking Lot System"}),"\n",(0,t.jsx)(n.h4,{id:"parkinglotjava-singleton",children:"ParkingLot.java (Singleton)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class ParkingLot {\n    private static ParkingLot instance;\n    private String name;\n    private List<Level> levels;\n    private List<EntryGate> entryGates;\n    private List<ExitGate> exitGates;\n    private ParkingStrategy strategy;\n\n    private ParkingLot(String name) {\n        this.name = name;\n        this.levels = new ArrayList<>();\n        this.entryGates = new ArrayList<>();\n        this.exitGates = new ArrayList<>();\n        this.strategy = new NearestSpotStrategy();\n    }\n\n    public static synchronized ParkingLot getInstance(String name) {\n        if (instance == null) {\n            instance = new ParkingLot(name);\n        }\n        return instance;\n    }\n\n    public void addLevel(Level level) {\n        levels.add(level);\n    }\n\n    public void addEntryGate(EntryGate gate) {\n        entryGates.add(gate);\n    }\n\n    public void addExitGate(ExitGate gate) {\n        exitGates.add(gate);\n    }\n\n    public ParkingSpot getAvailableSpot(VehicleType vehicleType) {\n        return strategy.findSpot(levels, vehicleType);\n    }\n\n    public synchronized ParkingTicket parkVehicle(Vehicle vehicle, EntryGate gate) {\n        ParkingSpot spot = getAvailableSpot(vehicle.getType());\n        if (spot == null) {\n            System.out.println("No available spot for vehicle type: " + vehicle.getType());\n            return null;\n        }\n\n        if (spot.assignVehicle(vehicle)) {\n            return gate.issueTicket(vehicle, spot);\n        }\n\n        return null;\n    }\n\n    public synchronized Payment unparkVehicle(ParkingTicket ticket, ExitGate gate,\n                                             PaymentMethod paymentMethod) {\n        ParkingSpot spot = ticket.getSpot();\n        spot.removeVehicle();\n\n        Payment payment = gate.processExit(ticket, paymentMethod);\n\n        if (payment.processPayment()) {\n            System.out.println("Payment successful! Have a nice day.");\n            return payment;\n        } else {\n            System.out.println("Payment failed!");\n            return null;\n        }\n    }\n\n    public int getAvailableSpotCount() {\n        int count = 0;\n        for (Level level : levels) {\n            count += level.getAvailableSpotCount();\n        }\n        return count;\n    }\n\n    public void displayAvailability() {\n        System.out.println("\\n=== Parking Lot Status ===");\n        for (Level level : levels) {\n            System.out.println("Floor " + level.getFloor() + ": " +\n                             level.getAvailableSpotCount() + " spots available");\n        }\n        System.out.println("==========================\\n");\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"demo-class",children:"Demo Class"}),"\n",(0,t.jsx)(n.h4,{id:"parkinglotdemojava",children:"ParkingLotDemo.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ParkingLotDemo {\n    public static void main(String[] args) {\n        // Initialize parking lot\n        ParkingLot parkingLot = ParkingLot.getInstance("City Center Parking");\n\n        // Create levels\n        Level level1 = new Level(1);\n        Level level2 = new Level(2);\n\n        // Add spots to level 1\n        level1.addSpot(new CompactSpot("L1-C001"));\n        level1.addSpot(new CompactSpot("L1-C002"));\n        level1.addSpot(new LargeSpot("L1-L001"));\n        level1.addSpot(new HandicappedSpot("L1-H001"));\n        level1.addSpot(new ElectricSpot("L1-E001"));\n\n        // Add spots to level 2\n        level2.addSpot(new CompactSpot("L2-C001"));\n        level2.addSpot(new LargeSpot("L2-L001"));\n        level2.addSpot(new LargeSpot("L2-L002"));\n\n        // Add levels to parking lot\n        parkingLot.addLevel(level1);\n        parkingLot.addLevel(level2);\n\n        // Create gates\n        EntryGate entryGate1 = new EntryGate("EG1", "Main Entrance");\n        EntryGate entryGate2 = new EntryGate("EG2", "Side Entrance");\n        ExitGate exitGate1 = new ExitGate("XG1", "Main Exit");\n        ExitGate exitGate2 = new ExitGate("XG2", "Side Exit");\n\n        parkingLot.addEntryGate(entryGate1);\n        parkingLot.addEntryGate(entryGate2);\n        parkingLot.addExitGate(exitGate1);\n        parkingLot.addExitGate(exitGate2);\n\n        System.out.println("=== Parking Lot System Demo ===\\n");\n\n        // Display initial availability\n        parkingLot.displayAvailability();\n\n        // Create vehicles\n        Vehicle car1 = new Car("ABC-1234");\n        Vehicle motorcycle1 = new Motorcycle("XYZ-5678");\n        Vehicle truck1 = new Truck("TRK-9999");\n        Vehicle car2 = new Car("DEF-4567");\n\n        // Park vehicles\n        System.out.println("--- Parking Vehicles ---");\n        ParkingTicket ticket1 = parkingLot.parkVehicle(car1, entryGate1);\n        ParkingTicket ticket2 = parkingLot.parkVehicle(motorcycle1, entryGate1);\n        ParkingTicket ticket3 = parkingLot.parkVehicle(truck1, entryGate2);\n        ParkingTicket ticket4 = parkingLot.parkVehicle(car2, entryGate2);\n\n        // Display availability after parking\n        parkingLot.displayAvailability();\n\n        // Simulate some time passing\n        System.out.println("\\n--- Simulating 3 hours of parking ---\\n");\n\n        // Unpark vehicles\n        System.out.println("--- Vehicles Exiting ---");\n\n        if (ticket1 != null) {\n            Payment payment1 = parkingLot.unparkVehicle(ticket1, exitGate1,\n                                                       PaymentMethod.CREDIT_CARD);\n        }\n\n        if (ticket2 != null) {\n            Payment payment2 = parkingLot.unparkVehicle(ticket2, exitGate1,\n                                                       PaymentMethod.CASH);\n        }\n\n        // Display final availability\n        parkingLot.displayAvailability();\n\n        // Try to park when spots are available\n        System.out.println("--- Parking New Vehicle ---");\n        Vehicle car3 = new Car("GHI-7890");\n        ParkingTicket ticket5 = parkingLot.parkVehicle(car3, entryGate1);\n\n        parkingLot.displayAvailability();\n\n        System.out.println("\\n=== Demo Complete ===");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"design-patterns--best-practices",children:"Design Patterns & Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"design-patterns-used",children:"Design Patterns Used"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Singleton Pattern"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ParkingLot"})," class ensures single instance"]}),"\n",(0,t.jsx)(n.li,{children:"Thread-safe implementation with double-checked locking"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Strategy Pattern"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ParkingStrategy"})," interface for flexible spot allocation"]}),"\n",(0,t.jsx)(n.li,{children:"Easy to add new strategies (RandomSpotStrategy, OptimalSpotStrategy)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Abstract Factory Pattern"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Vehicle hierarchy (Car, Motorcycle, Truck, Bus)"}),"\n",(0,t.jsx)(n.li,{children:"ParkingSpot hierarchy (Compact, Large, Handicapped, Electric)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Object Pool Pattern"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can be applied to manage parking spots as reusable resources"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"solid-principles",children:"SOLID Principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single Responsibility"}),": Each class has one clear purpose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Open/Closed"}),": Easy to extend with new vehicle/spot types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Liskov Substitution"}),": Subclasses can replace parent classes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interface Segregation"}),": Focused interfaces like ParkingStrategy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependency Inversion"}),": Depends on abstractions (Vehicle, ParkingSpot)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Synchronized methods in critical sections\npublic synchronized boolean assignVehicle(Vehicle vehicle) {\n    // Thread-safe spot assignment\n}\n\npublic synchronized ParkingTicket parkVehicle(Vehicle vehicle, EntryGate gate) {\n    // Thread-safe parking operation\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"edge-cases--extensions",children:"Edge Cases & Extensions"}),"\n",(0,t.jsx)(n.h3,{id:"edge-cases-handled",children:"Edge Cases Handled"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Concurrent Access"}),": Synchronized methods prevent race conditions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Available Spots"}),": Returns null and appropriate message"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vehicle Type Mismatch"}),": Spots validate vehicle compatibility"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Invalid Ticket"}),": Validation before processing exit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Payment Failure"}),": Graceful handling with status updates"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"possible-extensions",children:"Possible Extensions"}),"\n",(0,t.jsx)(n.h4,{id:"1-monthly-pass-system",children:"1. Monthly Pass System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class MonthlyPass {\n    private String passId;\n    private Vehicle vehicle;\n    private LocalDate validFrom;\n    private LocalDate validUntil;\n\n    public boolean isValid() {\n        LocalDate today = LocalDate.now();\n        return !today.isBefore(validFrom) && !today.isAfter(validUntil);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-reservation-system",children:"2. Reservation System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class SpotReservation {\n    private String reservationId;\n    private Vehicle vehicle;\n    private ParkingSpot spot;\n    private LocalDateTime reservationTime;\n    private LocalDateTime expiryTime;\n\n    public boolean isExpired() {\n        return LocalDateTime.now().isAfter(expiryTime);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-dynamic-pricing",children:"3. Dynamic Pricing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class DynamicPricingStrategy {\n    private static final double PEAK_MULTIPLIER = 1.5;\n    private static final double OFF_PEAK_MULTIPLIER = 0.8;\n\n    public double calculatePrice(ParkingTicket ticket, int occupancyRate) {\n        double basePrice = new Payment(ticket, PaymentMethod.CASH).calculateAmount();\n\n        // Peak hours: 8 AM - 6 PM\n        int hour = ticket.getEntryTime().getHour();\n        boolean isPeakHour = hour >= 8 && hour <= 18;\n\n        // High occupancy: > 80%\n        boolean isHighOccupancy = occupancyRate > 80;\n\n        if (isPeakHour && isHighOccupancy) {\n            return basePrice * PEAK_MULTIPLIER;\n        } else if (!isPeakHour) {\n            return basePrice * OFF_PEAK_MULTIPLIER;\n        }\n\n        return basePrice;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-valet-parking-service",children:"4. Valet Parking Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ValetService {\n    private Map<String, ParkingTicket> valetTickets;\n\n    public ValetService() {\n        this.valetTickets = new HashMap<>();\n    }\n\n    public String acceptVehicle(Vehicle vehicle, Customer customer) {\n        // Valet parks the vehicle\n        ParkingLot parkingLot = ParkingLot.getInstance("City Center Parking");\n        ParkingTicket ticket = parkingLot.parkVehicle(vehicle, null);\n\n        String valetToken = UUID.randomUUID().toString();\n        valetTickets.put(valetToken, ticket);\n\n        System.out.println("Valet service: Vehicle accepted. Token: " + valetToken);\n        return valetToken;\n    }\n\n    public Vehicle retrieveVehicle(String valetToken) {\n        ParkingTicket ticket = valetTickets.get(valetToken);\n        if (ticket != null) {\n            return ticket.getVehicle();\n        }\n        return null;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"5-advanced-search-and-analytics",children:"5. Advanced Search and Analytics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class ParkingAnalytics {\n    private ParkingLot parkingLot;\n\n    public ParkingAnalytics(ParkingLot parkingLot) {\n        this.parkingLot = parkingLot;\n    }\n\n    public int getOccupancyRate() {\n        int totalSpots = getTotalSpots();\n        int occupiedSpots = totalSpots - parkingLot.getAvailableSpotCount();\n        return (occupiedSpots * 100) / totalSpots;\n    }\n\n    public Map<VehicleType, Integer> getVehicleDistribution() {\n        Map<VehicleType, Integer> distribution = new HashMap<>();\n        // Implementation to track vehicle types\n        return distribution;\n    }\n\n    public double getAverageRevenue() {\n        // Calculate average revenue per vehicle\n        return 0.0;\n    }\n\n    private int getTotalSpots() {\n        // Calculate total spots across all levels\n        return 0;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"6-notification-system",children:"6. Notification System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public interface NotificationService {\n    void sendNotification(String message, String recipient);\n}\n\npublic class EmailNotification implements NotificationService {\n    @Override\n    public void sendNotification(String message, String recipient) {\n        System.out.println("Email sent to " + recipient + ": " + message);\n    }\n}\n\npublic class SMSNotification implements NotificationService {\n    @Override\n    public void sendNotification(String message, String recipient) {\n        System.out.println("SMS sent to " + recipient + ": " + message);\n    }\n}\n\npublic class NotificationManager {\n    private List<NotificationService> services;\n\n    public NotificationManager() {\n        this.services = new ArrayList<>();\n        services.add(new EmailNotification());\n        services.add(new SMSNotification());\n    }\n\n    public void notifySpotAvailable(Customer customer, ParkingSpot spot) {\n        String message = "Your reserved spot " + spot.getSpotId() + " is now available!";\n        for (NotificationService service : services) {\n            service.sendNotification(message, customer.getEmail());\n        }\n    }\n\n    public void notifyPaymentDue(Customer customer, double amount) {\n        String message = "Payment of $" + amount + " is pending for your vehicle.";\n        for (NotificationService service : services) {\n            service.sendNotification(message, customer.getEmail());\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"7-security-and-access-control",children:"7. Security and Access Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class SecuritySystem {\n    private Map<String, AccessCard> accessCards;\n    private List<SecurityIncident> incidents;\n\n    public SecuritySystem() {\n        this.accessCards = new HashMap<>();\n        this.incidents = new ArrayList<>();\n    }\n\n    public boolean validateAccess(String cardId, String gateId) {\n        AccessCard card = accessCards.get(cardId);\n        if (card == null || !card.isActive()) {\n            logIncident("Unauthorized access attempt at gate: " + gateId);\n            return false;\n        }\n        return true;\n    }\n\n    private void logIncident(String description) {\n        SecurityIncident incident = new SecurityIncident(description, LocalDateTime.now());\n        incidents.add(incident);\n        System.out.println("Security Alert: " + description);\n    }\n}\n\npublic class AccessCard {\n    private String cardId;\n    private String ownerId;\n    private boolean active;\n    private LocalDate expiryDate;\n\n    public boolean isActive() {\n        return active && LocalDate.now().isBefore(expiryDate);\n    }\n}\n\npublic class SecurityIncident {\n    private String description;\n    private LocalDateTime timestamp;\n    private String severity;\n\n    public SecurityIncident(String description, LocalDateTime timestamp) {\n        this.description = description;\n        this.timestamp = timestamp;\n        this.severity = "LOW";\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"scalability-improvements",children:"Scalability Improvements"}),"\n",(0,t.jsx)(n.h4,{id:"1-database-integration",children:"1. Database Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Example repository pattern\npublic interface ParkingSpotRepository {\n    ParkingSpot findById(String spotId);\n    List<ParkingSpot> findAvailableSpots(VehicleType type);\n    void save(ParkingSpot spot);\n    void update(ParkingSpot spot);\n}\n\npublic class DatabaseParkingSpotRepository implements ParkingSpotRepository {\n    // Implementation with JPA/Hibernate\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-caching-layer",children:"2. Caching Layer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class CacheManager {\n    private Map<String, ParkingSpot> spotCache;\n    private Map<String, ParkingTicket> ticketCache;\n\n    public CacheManager() {\n        this.spotCache = new ConcurrentHashMap<>();\n        this.ticketCache = new ConcurrentHashMap<>();\n    }\n\n    public ParkingSpot getCachedSpot(String spotId) {\n        return spotCache.get(spotId);\n    }\n\n    public void cacheSpot(ParkingSpot spot) {\n        spotCache.put(spot.getSpotId(), spot);\n    }\n\n    public void invalidateSpotCache(String spotId) {\n        spotCache.remove(spotId);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-microservices-architecture",children:"3. Microservices Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Services:\n- Spot Management Service\n- Payment Service\n- Notification Service\n- Analytics Service\n- Reservation Service\n\nCommunication:\n- REST APIs\n- Message Queue (RabbitMQ/Kafka)\n- Service Discovery (Eureka)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-load-balancing",children:"4. Load Balancing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class LoadBalancer {\n    private List<EntryGate> entryGates;\n    private int currentIndex = 0;\n\n    public EntryGate getNextAvailableGate() {\n        // Round-robin load balancing\n        EntryGate gate = entryGates.get(currentIndex);\n        currentIndex = (currentIndex + 1) % entryGates.size();\n        return gate;\n    }\n\n    public EntryGate getLeastBusyGate() {\n        // Implementation based on queue length\n        return entryGates.get(0);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,t.jsx)(n.h4,{id:"1-spot-indexing",children:"1. Spot Indexing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class SpotIndex {\n    private Map<VehicleType, List<ParkingSpot>> spotsByType;\n    private Map<Integer, List<ParkingSpot>> spotsByFloor;\n\n    public SpotIndex() {\n        this.spotsByType = new HashMap<>();\n        this.spotsByFloor = new HashMap<>();\n        initializeIndex();\n    }\n\n    private void initializeIndex() {\n        for (VehicleType type : VehicleType.values()) {\n            spotsByType.put(type, new ArrayList<>());\n        }\n    }\n\n    public List<ParkingSpot> getSpotsByType(VehicleType type) {\n        return spotsByType.getOrDefault(type, new ArrayList<>());\n    }\n\n    public void addSpot(ParkingSpot spot, int floor) {\n        // Add to appropriate indices for fast lookup\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-concurrent-collections",children:"2. Concurrent Collections"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class ThreadSafeParkingLot extends ParkingLot {\n    private ConcurrentHashMap<String, ParkingTicket> activeTickets;\n    private CopyOnWriteArrayList<Level> levels;\n\n    // Thread-safe operations without explicit synchronization\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"additional-features",children:"Additional Features"}),"\n",(0,t.jsx)(n.h4,{id:"1-mobile-app-integration-api",children:"1. Mobile App Integration API"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ParkingLotAPI {\n\n    @GET("/api/spots/available")\n    public Response getAvailableSpots(@QueryParam("vehicleType") VehicleType type) {\n        ParkingLot parkingLot = ParkingLot.getInstance("City Center Parking");\n        int count = parkingLot.getAvailableSpotCount();\n        return Response.ok(count).build();\n    }\n\n    @POST("/api/tickets/reserve")\n    public Response reserveSpot(@RequestBody ReservationRequest request) {\n        // Implementation for online reservation\n        return Response.ok().build();\n    }\n\n    @POST("/api/payment/process")\n    public Response processPayment(@RequestBody PaymentRequest request) {\n        // Implementation for online payment\n        return Response.ok().build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-customer-management",children:"2. Customer Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Customer {\n    private String customerId;\n    private String name;\n    private String email;\n    private String phone;\n    private List<Vehicle> vehicles;\n    private PaymentMethod preferredPaymentMethod;\n    private boolean hasMonthlyPass;\n\n    public Customer(String customerId, String name, String email, String phone) {\n        this.customerId = customerId;\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.vehicles = new ArrayList<>();\n    }\n\n    public void addVehicle(Vehicle vehicle) {\n        vehicles.add(vehicle);\n    }\n\n    public List<Vehicle> getVehicles() {\n        return vehicles;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-loyalty-program",children:"3. Loyalty Program"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class LoyaltyProgram {\n    private Map<String, Integer> customerPoints;\n    private static final int POINTS_PER_HOUR = 10;\n    private static final int DISCOUNT_THRESHOLD = 100;\n\n    public LoyaltyProgram() {\n        this.customerPoints = new HashMap<>();\n    }\n\n    public void addPoints(String customerId, long hours) {\n        int points = (int) (hours * POINTS_PER_HOUR);\n        customerPoints.merge(customerId, points, Integer::sum);\n    }\n\n    public double getDiscount(String customerId) {\n        int points = customerPoints.getOrDefault(customerId, 0);\n        if (points >= DISCOUNT_THRESHOLD) {\n            return 0.10; // 10% discount\n        }\n        return 0.0;\n    }\n\n    public int getPoints(String customerId) {\n        return customerPoints.getOrDefault(customerId, 0);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.h3,{id:"key-features-implemented",children:"Key Features Implemented"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Multi-level parking support"})," with flexible spot allocation\n\u2705 ",(0,t.jsx)(n.strong,{children:"Multiple vehicle types"})," (Car, Motorcycle, Truck, Bus)\n\u2705 ",(0,t.jsx)(n.strong,{children:"Different spot types"})," (Compact, Large, Handicapped, Electric)\n\u2705 ",(0,t.jsx)(n.strong,{children:"Dynamic spot assignment"})," using Strategy pattern\n\u2705 ",(0,t.jsx)(n.strong,{children:"Automated fee calculation"})," based on vehicle type and duration\n\u2705 ",(0,t.jsx)(n.strong,{children:"Multiple payment methods"})," (Cash, Card, UPI)\n\u2705 ",(0,t.jsx)(n.strong,{children:"Thread-safe operations"})," for concurrent access\n\u2705 ",(0,t.jsx)(n.strong,{children:"Entry/Exit gate management"})," with ticket system"]}),"\n",(0,t.jsx)(n.h3,{id:"design-principles-applied",children:"Design Principles Applied"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SOLID Principles"}),": Single Responsibility, Open/Closed, Liskov Substitution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Design Patterns"}),": Singleton, Strategy, Abstract Factory"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clean Code"}),": Meaningful names, small methods, clear responsibilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Encapsulation"}),": Private fields with controlled access"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extensibility"}),": Easy to add new vehicle types, spot types, payment methods"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database Integration"}),": PostgreSQL/MySQL for persistence"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": Redis for fast spot lookup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Message Queue"}),": Kafka for async notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring"}),": Prometheus + Grafana for metrics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"API Gateway"}),": For mobile/web integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Load Balancer"}),": Distribute traffic across multiple instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security"}),": Authentication, authorization, encryption"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Backup"}),": Regular database backups and disaster recovery"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time--space-complexity",children:"Time & Space Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Time Complexity"}),(0,t.jsx)(n.th,{children:"Space Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Park Vehicle"}),(0,t.jsx)(n.td,{children:"O(n*m)"}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Unpark Vehicle"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Find Spot"}),(0,t.jsx)(n.td,{children:"O(n*m)"}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Payment Calculation"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"n = number of levels"}),"\n",(0,t.jsx)(n.li,{children:"m = average spots per level"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"potential-optimizations",children:"Potential Optimizations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spot Indexing"}),": Maintain separate lists for each vehicle type (O(1) lookup)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Priority Queue"}),": For optimal spot selection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Distributed Cache"}),": For multi-instance deployments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Sourcing"}),": Track all parking events for analytics"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CQRS"}),": Separate read/write models for better performance"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"interview-tips",children:"Interview Tips"}),"\n",(0,t.jsx)(n.p,{children:"When discussing this design in interviews:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with requirements"}),": Clarify functional and non-functional requirements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identify entities"}),": List main objects and their relationships"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Draw diagrams"}),": Use UML class diagrams to visualize"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discuss patterns"}),": Explain why specific patterns were chosen"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle edge cases"}),": Show you've thought about concurrency, failures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Discuss how to scale to millions of vehicles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trade-offs"}),": Explain design decisions and alternatives"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"common-follow-up-questions",children:"Common Follow-up Questions"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: How would you handle peak hours with high traffic?"}),"\nA: Implement queue management, dynamic pricing, pre-booking system, multiple entry points"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: How to prevent overbooking?"}),"\nA: Use pessimistic locking, distributed locks (Redis), database transactions"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: How to handle payment failures?"}),"\nA: Implement retry mechanism, manual override by staff, grace period for payment"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: How to scale to multiple cities?"}),"\nA: Multi-tenant architecture, separate databases per city, centralized analytics"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: How to optimize for electric vehicles?"}),"\nA: Dedicated EV zones, charging status tracking, priority allocation"]}),"\n",(0,t.jsxs)(n.p,{children:["This design is ",(0,t.jsx)(n.strong,{children:"production-ready"})," and demonstrates strong understanding of OOP, design patterns, and system design principles!"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var t=i(96540);const a={},s=t.createContext(a);function l(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);