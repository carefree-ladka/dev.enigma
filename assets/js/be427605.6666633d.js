"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[99308],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},85642:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=t(74848),r=t(28453);const i={},s="__proto__ vs prototype",c={id:"WebDev/JavaScript/ProtoVSPrototype",title:"__proto__ vs prototype",description:"Quick Reference",source:"@site/docs/WebDev/JavaScript/ProtoVSPrototype.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/ProtoVSPrototype",permalink:"/docs/WebDev/JavaScript/ProtoVSPrototype",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/ProtoVSPrototype.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Promise Fundamentals",permalink:"/docs/WebDev/JavaScript/PromisePolyfills"},next:{title:"Prototypal Inheritance",permalink:"/docs/WebDev/JavaScript/PrototypalInheritance"}},a={},l=[{value:"Quick Reference",id:"quick-reference",level:2},{value:"<code>__proto__</code> Deep Dive",id:"__proto__-deep-dive",level:2},{value:"What is <code>__proto__</code>?",id:"what-is-__proto__",level:3},{value:"Prototype Chain Example",id:"prototype-chain-example",level:3},{value:"Modern Alternatives to <code>__proto__</code>",id:"modern-alternatives-to-__proto__",level:3},{value:"<code>prototype</code> Deep Dive",id:"prototype-deep-dive",level:2},{value:"Function&#39;s Prototype",id:"functions-prototype",level:3},{value:"Constructor Functions vs Classes",id:"constructor-functions-vs-classes",level:3},{value:"Prototype Chain Relationships",id:"prototype-chain-relationships",level:2},{value:"Understanding the Chain",id:"understanding-the-chain",level:3},{value:"Inheritance Patterns",id:"inheritance-patterns",level:3},{value:"Classical Inheritance",id:"classical-inheritance",level:4},{value:"Class-based Inheritance",id:"class-based-inheritance",level:4},{value:"Common Patterns and Best Practices",id:"common-patterns-and-best-practices",level:2},{value:"Method Borrowing",id:"method-borrowing",level:3},{value:"Mixins",id:"mixins",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Property Lookup Chain",id:"property-lookup-chain",level:3},{value:"Optimizing Property Access",id:"optimizing-property-access",level:3},{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"Inspecting Prototypes",id:"inspecting-prototypes",level:3},{value:"Common Gotchas",id:"common-gotchas",level:2},{value:"Property Shadowing",id:"property-shadowing",level:3},{value:"<code>instanceof</code> vs <code>isPrototypeOf</code>",id:"instanceof-vs-isprototypeof",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"__proto__-vs-prototype",children:[(0,o.jsx)(n.code,{children:"__proto__"})," vs ",(0,o.jsx)(n.code,{children:"prototype"})]})}),"\n",(0,o.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Feature"}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.code,{children:"__proto__"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.code,{children:"prototype"})})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Purpose"}),(0,o.jsx)(n.td,{children:"Links an object to its prototype"}),(0,o.jsxs)(n.td,{children:["Contains properties that will become ",(0,o.jsx)(n.code,{children:"__proto__"})," for instances"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Found On"}),(0,o.jsx)(n.td,{children:"All objects"}),(0,o.jsx)(n.td,{children:"Function objects only"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Modifiable"}),(0,o.jsx)(n.td,{children:"Yes (but not recommended)"}),(0,o.jsx)(n.td,{children:"Yes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Standard"}),(0,o.jsx)(n.td,{children:"No (deprecated)"}),(0,o.jsx)(n.td,{children:"Yes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Creation Time"}),(0,o.jsx)(n.td,{children:"Object instantiation"}),(0,o.jsx)(n.td,{children:"Function definition"})]})]})]}),"\n",(0,o.jsxs)(n.h2,{id:"__proto__-deep-dive",children:[(0,o.jsx)(n.code,{children:"__proto__"})," Deep Dive"]}),"\n",(0,o.jsxs)(n.h3,{id:"what-is-__proto__",children:["What is ",(0,o.jsx)(n.code,{children:"__proto__"}),"?"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Every object has a __proto__ property\nconst obj = {};\nconsole.log(obj.__proto__ === Object.prototype); // true\n\n// Creating object with specific prototype\nconst parent = { name: 'parent' };\nconst child = Object.create(parent);\nconsole.log(child.__proto__ === parent); // true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"prototype-chain-example",children:"Prototype Chain Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const grandparent = { family: 'Smith' };\nconst parent = Object.create(grandparent);\nconst child = Object.create(parent);\n\nconsole.log(child.__proto__ === parent); // true\nconsole.log(child.__proto__.__proto__ === grandparent); // true\nconsole.log(child.__proto__.__proto__.__proto__ === Object.prototype); // true\nconsole.log(child.__proto__.__proto__.__proto__.__proto__ === null); // true\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"modern-alternatives-to-__proto__",children:["Modern Alternatives to ",(0,o.jsx)(n.code,{children:"__proto__"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Instead of obj.__proto__\nObject.getPrototypeOf(obj);\n\n// Instead of obj.__proto__ = value\nObject.setPrototypeOf(obj, value);\n\n// Creating objects with specific prototype\nObject.create(protoObj);\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"prototype-deep-dive",children:[(0,o.jsx)(n.code,{children:"prototype"})," Deep Dive"]}),"\n",(0,o.jsx)(n.h3,{id:"functions-prototype",children:"Function's Prototype"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function Person(name) {\n  this.name = name;\n}\n\n// Adding methods to prototype\nPerson.prototype.sayHello = function () {\n  return `Hello, I'm ${this.name}`;\n};\n\nconst john = new Person('John');\nconsole.log(john.sayHello()); // \"Hello, I'm John\"\n"})}),"\n",(0,o.jsx)(n.h3,{id:"constructor-functions-vs-classes",children:"Constructor Functions vs Classes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Constructor Function\nfunction Animal(name) {\n  this.name = name;\n}\nAnimal.prototype.makeSound = function () {\n  console.log('Some sound');\n};\n\n// Equivalent Class\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    console.log('Some sound');\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"prototype-chain-relationships",children:"Prototype Chain Relationships"}),"\n",(0,o.jsx)(n.h3,{id:"understanding-the-chain",children:"Understanding the Chain"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function Dog(name) {\n  this.name = name;\n}\n\nconst max = new Dog('Max');\n\nconsole.log(\n  max.__proto__ === Dog.prototype, // true\n  Dog.prototype.__proto__ === Object.prototype, // true\n  Dog.__proto__ === Function.prototype, // true\n  Function.prototype.__proto__ === Object.prototype // true\n);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"inheritance-patterns",children:"Inheritance Patterns"}),"\n",(0,o.jsx)(n.h4,{id:"classical-inheritance",children:"Classical Inheritance"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function Animal(name) {\n  this.name = name;\n}\n\nfunction Dog(name, breed) {\n  Animal.call(this, name);\n  this.breed = breed;\n}\n\n// Set up inheritance\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n\nconst max = new Dog('Max', 'Labrador');\n"})}),"\n",(0,o.jsx)(n.h4,{id:"class-based-inheritance",children:"Class-based Inheritance"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name);\n    this.breed = breed;\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-patterns-and-best-practices",children:"Common Patterns and Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"method-borrowing",children:"Method Borrowing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const methods = {\n  sayHello() {\n    return `Hello, ${this.name}`;\n  },\n};\n\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype = Object.create(methods);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"mixins",children:"Mixins"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const speakerMixin = {\n  speak() {\n    console.log(`${this.name} is speaking`);\n  },\n};\n\nconst walkerMixin = {\n  walk() {\n    console.log(`${this.name} is walking`);\n  },\n};\n\nfunction Person(name) {\n  this.name = name;\n}\n\nObject.assign(Person.prototype, speakerMixin, walkerMixin);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsx)(n.h3,{id:"property-lookup-chain",children:"Property Lookup Chain"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n  prop: 'own property',\n};\n\n// Fast - direct property access\nobj.prop;\n\n// Slower - must traverse prototype chain\nobj.toString();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"optimizing-property-access",children:"Optimizing Property Access"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Cache prototype methods in local scope\nconst toString = Object.prototype.toString;\n\n// Faster than repeatedly accessing through prototype chain\ntoString.call(obj);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,o.jsx)(n.h3,{id:"inspecting-prototypes",children:"Inspecting Prototypes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// View prototype chain\nfunction getPrototypeChain(obj) {\n  const chain = [];\n  let current = obj;\n\n  while (current) {\n    chain.push(current);\n    current = Object.getPrototypeOf(current);\n  }\n\n  return chain;\n}\n\n// Check if property exists in prototype chain\nfunction hasInPrototypeChain(obj, prop) {\n  let current = obj;\n\n  while (current) {\n    if (current.hasOwnProperty(prop)) return true;\n    current = Object.getPrototypeOf(current);\n  }\n\n  return false;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-gotchas",children:"Common Gotchas"}),"\n",(0,o.jsx)(n.h3,{id:"property-shadowing",children:"Property Shadowing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function Person() {}\nPerson.prototype.skills = ['reading'];\n\nconst person1 = new Person();\nconst person2 = new Person();\n\n// Modifies prototype property\nperson1.skills.push('writing');\nconsole.log(person2.skills); // ['reading', 'writing']\n\n// Creates own property\nperson1.skills = ['coding'];\nconsole.log(person2.skills); // ['reading', 'writing']\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"instanceof-vs-isprototypeof",children:[(0,o.jsx)(n.code,{children:"instanceof"})," vs ",(0,o.jsx)(n.code,{children:"isPrototypeOf"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"function Parent() {}\nfunction Child() {}\nChild.prototype = Object.create(Parent.prototype);\n\nconst child = new Child();\n\nconsole.log(child instanceof Child); // true\nconsole.log(child instanceof Parent); // true\nconsole.log(Parent.prototype.isPrototypeOf(child)); // true\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);