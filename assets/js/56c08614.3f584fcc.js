"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[3502],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},51891:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var s=i(74848),r=i(28453);const t={},l="SOLID Principles in React",c={id:"WebDev/React/SOLIDPrinciples",title:"SOLID Principles in React",description:"Overview",source:"@site/docs/WebDev/React/SOLIDPrinciples.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/SOLIDPrinciples",permalink:"/docs/WebDev/React/SOLIDPrinciples",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/SOLIDPrinciples.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rendering Strategies Types",permalink:"/docs/WebDev/React/RenderingTypes"},next:{title:"TypeScript Generics",permalink:"/docs/WebDev/TypeScript/TypeScriptGenerics"}},o={},a=[{value:"Overview",id:"overview",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Single Responsibility Principle",id:"single-responsibility-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice-",level:3},{value:"Good Practice \u2705",id:"good-practice-",level:3},{value:"Open-Closed Principle",id:"open-closed-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--1",level:3},{value:"Good Practice \u2705",id:"good-practice--1",level:3},{value:"Liskov Substitution Principle",id:"liskov-substitution-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--2",level:3},{value:"Good Practice \u2705",id:"good-practice--2",level:3},{value:"Interface Segregation Principle",id:"interface-segregation-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--3",level:3},{value:"Good Practice \u2705",id:"good-practice--3",level:3},{value:"Dependency Inversion Principle",id:"dependency-inversion-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--4",level:3},{value:"Good Practice \u2705",id:"good-practice--4",level:3},{value:"Best Practices for SOLID in React",id:"best-practices-for-solid-in-react",level:2},{value:"1. Component Organization",id:"1-component-organization",level:3},{value:"2. Props Design",id:"2-props-design",level:3},{value:"3. State Management",id:"3-state-management",level:3},{value:"4. Testing",id:"4-testing",level:3},{value:"Common Anti-patterns to Avoid",id:"common-anti-patterns-to-avoid",level:2},{value:"Tools and Libraries that Help Follow SOLID",id:"tools-and-libraries-that-help-follow-solid",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"solid-principles-in-react",children:"SOLID Principles in React"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"SOLID is an acronym for five design principles that help make software designs more understandable, flexible, and maintainable. Let's explore how these principles apply to React development."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#single-responsibility-principle",children:"Single Responsibility Principle (SRP)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#open-closed-principle",children:"Open-Closed Principle (OCP)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#liskov-substitution-principle",children:"Liskov Substitution Principle (LSP)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#interface-segregation-principle",children:"Interface Segregation Principle (ISP)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#dependency-inversion-principle",children:"Dependency Inversion Principle (DIP)"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"single-responsibility-principle",children:"Single Responsibility Principle"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"A component should have only one reason to change."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bad-practice-",children:"Bad Practice \u274c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const UserDashboard = () => {\n  const [user, setUser] = useState(null);\n  const [orders, setOrders] = useState([]);\n\n  useEffect(() => {\n    // Fetching user data\n    fetch('/api/user')\n      .then(res => res.json())\n      .then(setUser);\n\n    // Fetching orders\n    fetch('/api/orders')\n      .then(res => res.json())\n      .then(setOrders);\n  }, []);\n\n  const handleUpdateProfile = data => {\n    // Update profile logic\n  };\n\n  const handleOrderCancel = orderId => {\n    // Cancel order logic\n  };\n\n  return (\n    <div>\n      <UserProfile user={user} onUpdate={handleUpdateProfile} />\n      <OrderHistory orders={orders} onCancel={handleOrderCancel} />\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"good-practice-",children:"Good Practice \u2705"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// UserProfileContainer.jsx\nconst UserProfileContainer = () => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    fetchUser().then(setUser);\n  }, []);\n\n  return <UserProfile user={user} />;\n};\n\n// OrderHistoryContainer.jsx\nconst OrderHistoryContainer = () => {\n  const [orders, setOrders] = useState([]);\n\n  useEffect(() => {\n    fetchOrders().then(setOrders);\n  }, []);\n\n  return <OrderHistory orders={orders} />;\n};\n\n// Dashboard.jsx\nconst Dashboard = () => (\n  <div>\n    <UserProfileContainer />\n    <OrderHistoryContainer />\n  </div>\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"open-closed-principle",children:"Open-Closed Principle"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Software entities should be open for extension but closed for modification."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bad-practice--1",children:"Bad Practice \u274c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const Button = ({ type, children }) => {\n  switch (type) {\n    case 'primary':\n      return <button className=\"bg-blue-500\">{children}</button>;\n    case 'secondary':\n      return <button className=\"bg-gray-500\">{children}</button>;\n    case 'danger':\n      return <button className=\"bg-red-500\">{children}</button>;\n    default:\n      return <button>{children}</button>;\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"good-practice--1",children:"Good Practice \u2705"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'const Button = ({ className, children, ...props }) => (\n  <button className={className} {...props}>\n    {children}\n  </button>\n);\n\n// Usage\nconst PrimaryButton = props => <Button className="bg-blue-500" {...props} />;\n\nconst SecondaryButton = props => <Button className="bg-gray-500" {...props} />;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"liskov-substitution-principle",children:"Liskov Substitution Principle"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Subtypes must be substitutable for their base types."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bad-practice--2",children:"Bad Practice \u274c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"class Animal extends React.Component {\n  speak() {\n    return 'Some sound';\n  }\n\n  render() {\n    return <div>{this.speak()}</div>;\n  }\n}\n\nclass Cat extends Animal {\n  speak() {\n    return 'Meow';\n  }\n}\n\nclass Fish extends Animal {\n  // Violates LSP as Fish can't speak\n  speak() {\n    throw new Error(\"Fish can't speak!\");\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"good-practice--2",children:"Good Practice \u2705"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'interface AnimalProps {\n  makeSound: () => string;\n}\n\nconst Animal: React.FC<AnimalProps> = ({ makeSound }) => (\n  <div>{makeSound()}</div>\n);\n\nconst Cat = () => (\n  <Animal makeSound={() => "Meow"} />\n);\n\nconst Fish = () => (\n  <Animal makeSound={() => "Blub"} />\n);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"interface-segregation-principle",children:"Interface Segregation Principle"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Clients should not be forced to depend on interfaces they do not use."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bad-practice--3",children:"Bad Practice \u274c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"interface UserProps {\n  name: string;\n  email: string;\n  address: string;\n  paymentDetails: object;\n  orderHistory: array;\n  preferences: object;\n}\n\nconst UserProfile: React.FC<UserProps> = ({\n  name,\n  email,\n  address,\n  paymentDetails,\n  orderHistory,\n  preferences\n}) => {\n  // Component using all props\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"good-practice--3",children:"Good Practice \u2705"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"interface UserBasicInfo {\n  name: string;\n  email: string;\n}\n\ninterface UserAddressInfo {\n  address: string;\n}\n\ninterface UserPaymentInfo {\n  paymentDetails: object;\n}\n\nconst UserProfile: React.FC<UserBasicInfo> = ({ name, email }) => {\n  // Only uses basic info\n};\n\nconst UserAddress: React.FC<UserAddressInfo> = ({ address }) => {\n  // Only uses address info\n};\n\nconst UserPayment: React.FC<UserPaymentInfo> = ({ paymentDetails }) => {\n  // Only uses payment info\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dependency-inversion-principle",children:"Dependency Inversion Principle"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"High-level modules should not depend on low-level modules. Both should depend on abstractions."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bad-practice--4",children:"Bad Practice \u274c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"const UserList = () => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    // Direct dependency on fetch implementation\n    fetch('/api/users')\n      .then(res => res.json())\n      .then(setUsers);\n  }, []);\n\n  return (\n    <ul>\n      {users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"good-practice--4",children:"Good Practice \u2705"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// api.ts\ninterface UserAPI {\n  getUsers: () => Promise<User[]>;\n}\n\n// Implementation\nconst apiClient: UserAPI = {\n  getUsers: () => fetch('/api/users').then(res => res.json())\n};\n\n// Hook\nconst useUsers = (api: UserAPI) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    api.getUsers().then(setUsers);\n  }, [api]);\n\n  return users;\n};\n\n// Component\nconst UserList = ({ api }) => {\n  const users = useUsers(api);\n\n  return (\n    <ul>\n      {users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-for-solid-in-react",children:"Best Practices for SOLID in React"}),"\n",(0,s.jsx)(n.h3,{id:"1-component-organization",children:"1. Component Organization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create small, focused components"}),"\n",(0,s.jsx)(n.li,{children:"Use container/presenter pattern"}),"\n",(0,s.jsx)(n.li,{children:"Separate business logic from presentation"}),"\n",(0,s.jsx)(n.li,{children:"Use custom hooks for reusable logic"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-props-design",children:"2. Props Design"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep props minimal and focused"}),"\n",(0,s.jsx)(n.li,{children:"Use TypeScript for better interface definitions"}),"\n",(0,s.jsx)(n.li,{children:"Avoid prop drilling with Context or state management"}),"\n",(0,s.jsx)(n.li,{children:"Use composition over inheritance"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-state-management",children:"3. State Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use appropriate state management tools"}),"\n",(0,s.jsx)(n.li,{children:"Keep state close to where it's used"}),"\n",(0,s.jsx)(n.li,{children:"Implement clear data flow patterns"}),"\n",(0,s.jsx)(n.li,{children:"Use reducers for complex state logic"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-testing",children:"4. Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write unit tests for isolated components"}),"\n",(0,s.jsx)(n.li,{children:"Use integration tests for component interactions"}),"\n",(0,s.jsx)(n.li,{children:"Mock dependencies appropriately"}),"\n",(0,s.jsx)(n.li,{children:"Test business logic separately from UI"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-anti-patterns-to-avoid",children:"Common Anti-patterns to Avoid"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Huge components with multiple responsibilities"}),"\n",(0,s.jsx)(n.li,{children:"Tight coupling between components"}),"\n",(0,s.jsx)(n.li,{children:"Direct API calls in components"}),"\n",(0,s.jsx)(n.li,{children:"Prop drilling through many levels"}),"\n",(0,s.jsx)(n.li,{children:"Complex inheritance hierarchies"}),"\n",(0,s.jsx)(n.li,{children:"Mixed concerns in single components"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"tools-and-libraries-that-help-follow-solid",children:"Tools and Libraries that Help Follow SOLID"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"TypeScript - For better interface definitions"}),"\n",(0,s.jsx)(n.li,{children:"ESLint - For enforcing code patterns"}),"\n",(0,s.jsx)(n.li,{children:"React Testing Library - For behavior-driven tests"}),"\n",(0,s.jsx)(n.li,{children:"Redux Toolkit - For organized state management"}),"\n",(0,s.jsx)(n.li,{children:"React Query - For data fetching abstraction"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Following SOLID principles in React leads to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"More maintainable code"}),"\n",(0,s.jsx)(n.li,{children:"Better testability"}),"\n",(0,s.jsx)(n.li,{children:"Easier refactoring"}),"\n",(0,s.jsx)(n.li,{children:"Cleaner component architecture"}),"\n",(0,s.jsx)(n.li,{children:"More reusable components"}),"\n",(0,s.jsx)(n.li,{children:"Better separation of concerns"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);