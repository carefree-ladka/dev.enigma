"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5368],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const s={},l=i.createContext(s);function o(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(l.Provider,{value:n},e.children)}},87090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var i=t(74848),s=t(28453);const l={},o="Fast and Slow Pointers Technique",a={id:"DSA/DSA with JavaScript/SlowFastPointer",title:"Fast and Slow Pointers Technique",description:"The Fast and Slow Pointers technique, also known as the Tortoise and Hare algorithm, is a powerful method for solving problems involving linked lists and cyclic structures. It uses two pointers that move at different speeds to detect cycles, find the middle of a list, and solve other related problems efficiently.",source:"@site/docs/DSA/DSA with JavaScript/SlowFastPointer.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/SlowFastPointer",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/SlowFastPointer",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/SlowFastPointer.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sliding Window Technique",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/SlidingWindow"},next:{title:"SortedList",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/SortedList"}},r={},d=[{value:"Overview",id:"overview",level:2},{value:"Common Applications",id:"common-applications",level:2},{value:"JavaScript Implementations",id:"javascript-implementations",level:2},{value:"1. Cycle Detection in a Linked List",id:"1-cycle-detection-in-a-linked-list",level:3},{value:"Finding the Middle of a Linked List",id:"finding-the-middle-of-a-linked-list",level:3},{value:"Finding the Starting Node of the Cycle",id:"finding-the-starting-node-of-the-cycle",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fast-and-slow-pointers-technique",children:"Fast and Slow Pointers Technique"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Fast and Slow Pointers"})," technique, also known as the ",(0,i.jsx)(n.strong,{children:"Tortoise and Hare"})," algorithm, is a powerful method for solving problems involving linked lists and cyclic structures. It uses two pointers that move at different speeds to detect cycles, find the middle of a list, and solve other related problems efficiently."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Fast and Slow pointers technique involves using two pointers:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slow Pointer"}),": Moves one step at a time."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Pointer"}),": Moves two steps at a time."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By moving the pointers at different speeds, you can often detect patterns or solve problems more efficiently."}),"\n",(0,i.jsx)(n.h2,{id:"common-applications",children:"Common Applications"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cycle Detection"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Detect if a linked list contains a cycle."}),"\n",(0,i.jsx)(n.li,{children:"Find the starting node of the cycle if it exists."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Finding the Middle of a Linked List"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Find the middle node of a linked list in a single pass."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Finding the Starting Node of the Cycle"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Given a cycle in a linked list, find the starting node of the cycle."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"javascript-implementations",children:"JavaScript Implementations"}),"\n",(0,i.jsx)(n.h3,{id:"1-cycle-detection-in-a-linked-list",children:"1. Cycle Detection in a Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class ListNode {\n  constructor(value = 0, next = null) {\n    this.value = value;\n    this.next = next;\n  }\n}\n\nfunction hasCycle(head) {\n  let slow = head;\n  let fast = head;\n\n  while (fast !== null && fast.next !== null) {\n    slow = slow.next;\n    fast = fast.next.next;\n\n    if (slow === fast) {\n      return true; // Cycle detected\n    }\n  }\n\n  return false; // No cycle\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"finding-the-middle-of-a-linked-list",children:"Finding the Middle of a Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"function findMiddle(head) {\n  let slow = head;\n  let fast = head;\n\n  while (fast !== null && fast.next !== null) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n\n  return slow; // Middle node\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"finding-the-starting-node-of-the-cycle",children:"Finding the Starting Node of the Cycle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"function detectCycle(head) {\n  let slow = head;\n  let fast = head;\n\n  // Phase 1: Detect if a cycle exists\n  while (fast !== null && fast.next !== null) {\n    slow = slow.next;\n    fast = fast.next.next;\n\n    if (slow === fast) {\n      // Phase 2: Find the starting node of the cycle\n      let start = head;\n      while (start !== slow) {\n        start = start.next;\n        slow = slow.next;\n      }\n      return start; // Starting node of the cycle\n    }\n  }\n\n  return null; // No cycle\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);