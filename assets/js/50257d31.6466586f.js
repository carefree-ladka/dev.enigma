"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[99466],{28453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>o});var s=n(96540);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}},65264:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=n(74848),i=n(28453);const t={},l="Tree Problems - Comprehensive Guide",o={id:"DSA/DSA Problems/Tree Problems - Comprehensive Guide",title:"Tree Problems - Comprehensive Guide",description:"Binary Tree | BST | N-ary Tree",source:"@site/docs/DSA/DSA Problems/Tree Problems - Comprehensive Guide.mdx",sourceDirName:"DSA/DSA Problems",slug:"/DSA/DSA Problems/Tree Problems - Comprehensive Guide",permalink:"/docs/DSA/DSA Problems/Tree Problems - Comprehensive Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA Problems/Tree Problems - Comprehensive Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"String Problems - Comprehensive Guide",permalink:"/docs/DSA/DSA Problems/String Problems - Comprehensive Guide"},next:{title:"Complete Guide to Graph Cycles",permalink:"/docs/DSA/Graph Cycles"}},d={},c=[{value:"Binary Tree | BST | N-ary Tree",id:"binary-tree--bst--n-ary-tree",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Tree Traversal",id:"1-tree-traversal",level:2},{value:"Depth First Search (DFS)",id:"depth-first-search-dfs",level:3},{value:"Breadth First Search (BFS)",id:"breadth-first-search-bfs",level:3},{value:"2. Tree Construction",id:"2-tree-construction",level:2},{value:"3. Tree Properties",id:"3-tree-properties",level:2},{value:"4. Path Problems",id:"4-path-problems",level:2},{value:"5. Tree Modification",id:"5-tree-modification",level:2},{value:"6. Binary Search Tree (BST)",id:"6-binary-search-tree-bst",level:2},{value:"Basic BST Operations",id:"basic-bst-operations",level:3},{value:"BST Properties",id:"bst-properties",level:3},{value:"BST Conversion &amp; Construction",id:"bst-conversion--construction",level:3},{value:"Advanced BST",id:"advanced-bst",level:3},{value:"7. Lowest Common Ancestor (LCA)",id:"7-lowest-common-ancestor-lca",level:2},{value:"8. Tree Depth &amp; Height",id:"8-tree-depth--height",level:2},{value:"9. Tree Views",id:"9-tree-views",level:2},{value:"10. Serialize &amp; Deserialize",id:"10-serialize--deserialize",level:2},{value:"11. N-ary Tree",id:"11-n-ary-tree",level:2},{value:"12. Trie (Prefix Tree)",id:"12-trie-prefix-tree",level:2},{value:"13. Segment Tree &amp; Binary Indexed Tree",id:"13-segment-tree--binary-indexed-tree",level:2},{value:"Segment Tree",id:"segment-tree",level:3},{value:"Binary Indexed Tree (Fenwick Tree)",id:"binary-indexed-tree-fenwick-tree",level:3},{value:"14. Advanced Tree Problems",id:"14-advanced-tree-problems",level:2},{value:"Common Patterns &amp; Techniques",id:"common-patterns--techniques",level:2},{value:"1. <strong>DFS Templates</strong>",id:"1-dfs-templates",level:3},{value:"2. <strong>BFS Template</strong>",id:"2-bfs-template",level:3},{value:"3. <strong>BST Search Template</strong>",id:"3-bst-search-template",level:3},{value:"4. <strong>Tree Height/Depth</strong>",id:"4-tree-heightdepth",level:3},{value:"5. <strong>Path Sum Pattern</strong>",id:"5-path-sum-pattern",level:3},{value:"6. <strong>LCA Pattern</strong>",id:"6-lca-pattern",level:3},{value:"7. <strong>Tree Construction Pattern</strong>",id:"7-tree-construction-pattern",level:3},{value:"Practice Strategy",id:"practice-strategy",level:2},{value:"<strong>Phase 1: Fundamentals (Week 1-2)</strong>",id:"phase-1-fundamentals-week-1-2",level:3},{value:"<strong>Phase 2: BST Mastery (Week 3)</strong>",id:"phase-2-bst-mastery-week-3",level:3},{value:"<strong>Phase 3: Intermediate Patterns (Week 4-5)</strong>",id:"phase-3-intermediate-patterns-week-4-5",level:3},{value:"<strong>Phase 4: Advanced Topics (Week 6-7)</strong>",id:"phase-4-advanced-topics-week-6-7",level:3},{value:"<strong>Phase 5: Specialized Trees (Week 8+)</strong>",id:"phase-5-specialized-trees-week-8",level:3},{value:"Time &amp; Space Complexity",id:"time--space-complexity",level:2},{value:"Common Operations",id:"common-operations",level:3},{value:"Key Concepts &amp; Tips",id:"key-concepts--tips",level:2},{value:"Tree Traversal Summary",id:"tree-traversal-summary",level:3},{value:"When to Use Which Traversal",id:"when-to-use-which-traversal",level:3},{value:"BST Properties to Remember",id:"bst-properties-to-remember",level:3},{value:"Common Edge Cases",id:"common-edge-cases",level:3},{value:"Tree Problem-Solving Checklist",id:"tree-problem-solving-checklist",level:3},{value:"Important Algorithms",id:"important-algorithms",level:2},{value:"1. <strong>Morris Traversal (Threaded Binary Tree)</strong>",id:"1-morris-traversal-threaded-binary-tree",level:3},{value:"2. <strong>Floyd&#39;s Cycle Detection</strong> (Applied to Trees)",id:"2-floyds-cycle-detection-applied-to-trees",level:3},{value:"3. <strong>Tree Diameter Algorithm</strong>",id:"3-tree-diameter-algorithm",level:3},{value:"4. <strong>LCA (Lowest Common Ancestor)</strong>",id:"4-lca-lowest-common-ancestor",level:3},{value:"5. <strong>Tree Serialization</strong>",id:"5-tree-serialization",level:3},{value:"6. <strong>Vertical Order Traversal</strong>",id:"6-vertical-order-traversal",level:3},{value:"7. <strong>Tree Construction Algorithms</strong>",id:"7-tree-construction-algorithms",level:3},{value:"Problem-Solving Strategies",id:"problem-solving-strategies",level:2},{value:"Strategy 1: Divide and Conquer",id:"strategy-1-divide-and-conquer",level:3},{value:"Strategy 2: Top-Down DFS (Preorder)",id:"strategy-2-top-down-dfs-preorder",level:3},{value:"Strategy 3: Bottom-Up DFS (Postorder)",id:"strategy-3-bottom-up-dfs-postorder",level:3},{value:"Strategy 4: Level Order BFS",id:"strategy-4-level-order-bfs",level:3},{value:"Strategy 5: BST In-order for Sorted Processing",id:"strategy-5-bst-in-order-for-sorted-processing",level:3},{value:"Strategy 6: Parent Tracking",id:"strategy-6-parent-tracking",level:3},{value:"Advanced Techniques",id:"advanced-techniques",level:2},{value:"1. <strong>Path Compression (Tree DP)</strong>",id:"1-path-compression-tree-dp",level:3},{value:"2. <strong>State Tracking</strong>",id:"2-state-tracking",level:3},{value:"3. <strong>Global Variables for Cross-Node Communication</strong>",id:"3-global-variables-for-cross-node-communication",level:3},{value:"4. <strong>Coordinate System</strong>",id:"4-coordinate-system",level:3},{value:"5. <strong>Two-Pass Algorithms</strong>",id:"5-two-pass-algorithms",level:3},{value:"Interview Tips",id:"interview-tips",level:2},{value:"Before Coding",id:"before-coding",level:3},{value:"During Coding",id:"during-coding",level:3},{value:"After Coding",id:"after-coding",level:3},{value:"Common Mistakes to Avoid",id:"common-mistakes-to-avoid",level:2},{value:"Resources &amp; Next Steps",id:"resources--next-steps",level:2},{value:"Practice Platforms",id:"practice-platforms",level:3},{value:"Study Plan",id:"study-plan",level:3},{value:"Advanced Topics to Explore",id:"advanced-topics-to-explore",level:3},{value:"Quick Reference Card",id:"quick-reference-card",level:2},{value:"Must-Know Problems (Top 20)",id:"must-know-problems-top-20",level:3},{value:"Templates Cheat Sheet",id:"templates-cheat-sheet",level:3},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"tree-problems---comprehensive-guide",children:"Tree Problems - Comprehensive Guide"})}),"\n",(0,s.jsx)(r.h2,{id:"binary-tree--bst--n-ary-tree",children:"Binary Tree | BST | N-ary Tree"}),"\n",(0,s.jsx)(r.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#1-tree-traversal",children:"Tree Traversal"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#2-tree-construction",children:"Tree Construction"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#3-tree-properties",children:"Tree Properties"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#4-path-problems",children:"Path Problems"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#5-tree-modification",children:"Tree Modification"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#6-binary-search-tree-bst",children:"Binary Search Tree (BST)"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#7-lowest-common-ancestor-lca",children:"Lowest Common Ancestor (LCA)"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#8-tree-depth--height",children:"Tree Depth & Height"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#9-tree-views",children:"Tree Views"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#10-serialize--deserialize",children:"Serialize & Deserialize"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#11-n-ary-tree",children:"N-ary Tree"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#12-trie-prefix-tree",children:"Trie (Prefix Tree)"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#13-segment-tree--binary-indexed-tree",children:"Segment Tree & Binary Indexed Tree"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#14-advanced-tree-problems",children:"Advanced Tree Problems"})}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"1-tree-traversal",children:"1. Tree Traversal"}),"\n",(0,s.jsx)(r.h3,{id:"depth-first-search-dfs",children:"Depth First Search (DFS)"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/",children:"Binary Tree Inorder Traversal"})})," - Left \u2192 Root \u2192 Right (iterative & recursive)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-preorder-traversal/",children:"Binary Tree Preorder Traversal"})})," - Root \u2192 Left \u2192 Right"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-postorder-traversal/",children:"Binary Tree Postorder Traversal"})})," - Left \u2192 Right \u2192 Root"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal/",children:"Binary Tree Level Order Traversal"})})," - BFS level by level"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/",children:"Binary Tree Level Order Traversal II"})})," - Bottom-up level order"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/",children:"Binary Tree Zigzag Level Order Traversal"})})," - Alternate left-right direction"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",children:"Vertical Order Traversal of a Binary Tree"})})," - Column-wise traversal"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-right-side-view/",children:"Binary Tree Right Side View"})})," - Rightmost node at each level"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/",children:"Binary Tree Left Side View"})})," - Leftmost node at each level"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/boundary-of-binary-tree/",children:"Boundary Traversal of Binary Tree"})})," - Left boundary + leaves + right boundary"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://practice.geeksforgeeks.org/problems/diagonal-traversal-of-binary-tree/",children:"Diagonal Traversal of Binary Tree"})})," - Traverse diagonally"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/",children:"Morris Traversal"})})," - O(1) space traversal"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"breadth-first-search-bfs",children:"Breadth First Search (BFS)"}),"\n",(0,s.jsxs)(r.ol,{start:"13",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/average-of-levels-in-binary-tree/",children:"Average of Levels in Binary Tree"})})," - Average value at each level"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal/",children:"N-ary Tree Level Order Traversal"})})," - Level order for n-ary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-width-of-binary-tree/",children:"Maximum Width of Binary Tree"})})," - Max width at any level"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/find-largest-value-in-each-tree-row/",children:"Find Largest Value in Each Tree Row"})})," - Max value per level"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"2-tree-construction",children:"2. Tree Construction"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",children:"Construct Binary Tree from Preorder and Inorder Traversal"})})," - Build tree from traversals"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",children:"Construct Binary Tree from Inorder and Postorder Traversal"})})," - Build from inorder + postorder"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/",children:"Construct Binary Tree from Preorder and Postorder Traversal"})})," - Build from preorder + postorder"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/",children:"Convert Sorted Array to Binary Search Tree"})})," - Create balanced BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/",children:"Convert Sorted List to Binary Search Tree"})})," - Linked list to BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/construct-string-from-binary-tree/",children:"Construct String from Binary Tree"})})," - Tree to string with parentheses"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-binary-tree/",children:"Maximum Binary Tree"})})," - Construct from array with max as root"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/recover-binary-search-tree/",children:"Recover Binary Search Tree"})})," - Fix two swapped nodes in BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/all-possible-full-binary-trees/",children:"All Possible Full Binary Trees"})})," - Generate all full binary trees"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/unique-binary-search-trees-ii/",children:"Unique Binary Search Trees II"})})," - Generate all unique BSTs"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"3-tree-properties",children:"3. Tree Properties"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",children:"Maximum Depth of Binary Tree"})})," - Height of tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/minimum-depth-of-binary-tree/",children:"Minimum Depth of Binary Tree"})})," - Shortest path to leaf"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/balanced-binary-tree/",children:"Balanced Binary Tree"})})," - Check if height-balanced"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/symmetric-tree/",children:"Symmetric Tree"})})," - Check if tree is mirror of itself"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/same-tree/",children:"Same Tree"})})," - Check if two trees are identical"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/subtree-of-another-tree/",children:"Subtree of Another Tree"})})," - Check if subtree exists"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/invert-binary-tree/",children:"Invert Binary Tree"})})," - Mirror/flip the tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/diameter-of-binary-tree/",children:"Diameter of Binary Tree"})})," - Longest path between any two nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/count-complete-tree-nodes/",children:"Count Complete Tree Nodes"})})," - Count nodes in complete tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/sum-of-left-leaves/",children:"Sum of Left Leaves"})})," - Sum all left leaf values"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/find-bottom-left-tree-value/",children:"Find Bottom Left Tree Value"})})," - Leftmost value in last row"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/check-completeness-of-a-binary-tree/",children:"Check Completeness of a Binary Tree"})})," - Verify complete binary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/univalued-binary-tree/",children:"Univalued Binary Tree"})})," - Check if all nodes have same value"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/cousins-in-binary-tree/",children:"Cousins in Binary Tree"})})," - Check if nodes are cousins"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/leaf-similar-trees/",children:"Leaf-Similar Trees"})})," - Compare leaf sequences"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"4-path-problems",children:"4. Path Problems"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-paths/",children:"Binary Tree Paths"})})," - Find all root-to-leaf paths"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/path-sum/",children:"Path Sum"})})," - Check if root-to-leaf path sums to target"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/path-sum-ii/",children:"Path Sum II"})})," - Find all root-to-leaf paths with target sum"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/path-sum-iii/",children:"Path Sum III"})})," - Count paths with target sum (any start/end)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-maximum-path-sum/",children:"Binary Tree Maximum Path Sum"})})," - Maximum path sum between any two nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/sum-root-to-leaf-numbers/",children:"Sum Root to Leaf Numbers"})})," - Sum all root-to-leaf numbers"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/smallest-string-starting-from-leaf/",children:"Smallest String Starting From Leaf"})})," - Find lexicographically smallest string"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/longest-univalue-path/",children:"Longest Univalue Path"})})," - Longest path with same values"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/most-frequent-subtree-sum/",children:"Most Frequent Subtree Sum"})})," - Find most common subtree sum"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/",children:"Maximum Difference Between Node and Ancestor"})})," - Max |ancestor.val - node.val|"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/",children:"Step-By-Step Directions From a Binary Tree Node to Another"})})," - Find path between nodes"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"5-tree-modification",children:"5. Tree Modification"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/",children:"Flatten Binary Tree to Linked List"})})," - Convert to right-skewed list"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/",children:"Populating Next Right Pointers in Each Node"})})," - Connect nodes at same level"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/",children:"Populating Next Right Pointers in Each Node II"})})," - Connect level (not perfect tree)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/delete-node-in-a-bst/",children:"Delete Node in a BST"})})," - Remove node from BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/trim-a-binary-search-tree/",children:"Trim a Binary Search Tree"})})," - Trim BST to range [low, high]"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/add-one-row-to-tree/",children:"Add One Row to Tree"})})," - Insert row at depth"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/merge-two-binary-trees/",children:"Merge Two Binary Trees"})})," - Merge by summing overlapping nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/increasing-order-search-tree/",children:"Increasing Order Search Tree"})})," - Rearrange to right-skewed tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-pruning/",children:"Binary Tree Pruning"})})," - Remove subtrees with all zeros"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/delete-leaves-with-a-given-value/",children:"Delete Leaves With a Given Value"})})," - Remove leaf nodes with target value"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/convert-bst-to-greater-tree/",children:"Convert BST to Greater Tree"})})," - Add greater values to each node"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"6-binary-search-tree-bst",children:"6. Binary Search Tree (BST)"}),"\n",(0,s.jsx)(r.h3,{id:"basic-bst-operations",children:"Basic BST Operations"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/search-in-a-binary-search-tree/",children:"Search in a Binary Search Tree"})})," - Find node in BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/insert-into-a-binary-search-tree/",children:"Insert into a Binary Search Tree"})})," - Add node to BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/delete-node-in-a-bst/",children:"Delete Node in a BST"})})," - Remove node from BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/validate-binary-search-tree/",children:"Validate Binary Search Tree"})})," - Check if valid BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/minimum-absolute-difference-in-bst/",children:"Minimum Absolute Difference in BST"})})," - Min diff between any two nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/range-sum-of-bst/",children:"Range Sum of BST"})})," - Sum of values in range [low, high]"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"bst-properties",children:"BST Properties"}),"\n",(0,s.jsxs)(r.ol,{start:"7",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst/",children:"Kth Smallest Element in a BST"})})," - Find kth smallest value"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/two-sum-iv-input-is-a-bst/",children:"Two Sum IV - Input is a BST"})})," - Find two nodes that sum to target"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/find-mode-in-binary-search-tree/",children:"Find Mode in Binary Search Tree"})})," - Find most frequent values"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/closest-binary-search-tree-value/",children:"Closest Binary Search Tree Value"})})," - Find closest value to target"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/inorder-successor-in-bst/",children:"Inorder Successor in BST"})})," - Find next node in inorder"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://practice.geeksforgeeks.org/problems/predecessor-and-successor/",children:"Inorder Predecessor in BST"})})," - Find previous node in inorder"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"bst-conversion--construction",children:"BST Conversion & Construction"}),"\n",(0,s.jsxs)(r.ol,{start:"13",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/",children:"Convert Sorted Array to Binary Search Tree"})})," - Array to balanced BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/convert-bst-to-greater-tree/",children:"Convert BST to Greater Tree"})})," - Add greater values"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/balance-a-binary-search-tree/",children:"Balance a Binary Search Tree"})})," - Convert to balanced BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/recover-binary-search-tree/",children:"Recover Binary Search Tree"})})," - Fix two swapped nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/unique-binary-search-trees/",children:"Unique Binary Search Trees"})})," - Count structurally unique BSTs"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/unique-binary-search-trees-ii/",children:"Unique Binary Search Trees II"})})," - Generate all unique BSTs"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/",children:"Binary Search Tree to Greater Sum Tree"})})," - Transform BST"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"advanced-bst",children:"Advanced BST"}),"\n",(0,s.jsxs)(r.ol,{start:"20",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/contains-duplicate-iii/",children:"Contains Duplicate III"})})," - Use BST for sliding window"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self/",children:"Count of Smaller Numbers After Self"})})," - BST-based solution"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/",children:"Maximum Sum BST in Binary Tree"})})," - Find max sum BST subtree"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"7-lowest-common-ancestor-lca",children:"7. Lowest Common Ancestor (LCA)"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/",children:"Lowest Common Ancestor of a Binary Tree"})})," - LCA in binary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",children:"Lowest Common Ancestor of a Binary Search Tree"})})," - LCA in BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/",children:"Lowest Common Ancestor of Deepest Leaves"})})," - LCA of deepest nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/",children:"Lowest Common Ancestor of a Binary Tree II"})})," - Nodes may not exist"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/",children:"Lowest Common Ancestor of a Binary Tree III"})})," - With parent pointers"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/",children:"Lowest Common Ancestor of a Binary Tree IV"})})," - LCA of multiple nodes"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"8-tree-depth--height",children:"8. Tree Depth & Height"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",children:"Maximum Depth of Binary Tree"})})," - Tree height"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/minimum-depth-of-binary-tree/",children:"Minimum Depth of Binary Tree"})})," - Shortest root-to-leaf path"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-depth-of-n-ary-tree/",children:"Maximum Depth of N-ary Tree"})})," - N-ary tree height"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/balanced-binary-tree/",children:"Balanced Binary Tree"})})," - Check balance using height"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/diameter-of-binary-tree/",children:"Diameter of Binary Tree"})})," - Longest path using heights"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-tilt/",children:"Binary Tree Tilt"})})," - Sum of all tilts"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/",children:"All Nodes Distance K in Binary Tree"})})," - Nodes at distance K"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"9-tree-views",children:"9. Tree Views"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-right-side-view/",children:"Binary Tree Right Side View"})})," - Right side view"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/",children:"Binary Tree Left Side View"})})," - Left side view"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/",children:"Binary Tree Top View"})})," - Top view"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://practice.geeksforgeeks.org/problems/bottom-view-of-binary-tree/",children:"Binary Tree Bottom View"})})," - Bottom view"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",children:"Vertical Order Traversal of a Binary Tree"})})," - Vertical view"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/boundary-of-binary-tree/",children:"Boundary of Binary Tree"})})," - Boundary traversal"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"10-serialize--deserialize",children:"10. Serialize & Deserialize"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/",children:"Serialize and Deserialize Binary Tree"})})," - Encode/decode binary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/serialize-and-deserialize-bst/",children:"Serialize and Deserialize BST"})})," - Encode/decode BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/",children:"Serialize and Deserialize N-ary Tree"})})," - Encode/decode N-ary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree/",children:"Encode N-ary Tree to Binary Tree"})})," - Convert N-ary to binary"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/find-duplicate-subtrees/",children:"Find Duplicate Subtrees"})})," - Find duplicate subtrees using serialization"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/construct-string-from-binary-tree/",children:"Construct String from Binary Tree"})})," - Tree to string representation"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"11-n-ary-tree",children:"11. N-ary Tree"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/n-ary-tree-preorder-traversal/",children:"N-ary Tree Preorder Traversal"})})," - Preorder for N-ary"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/n-ary-tree-postorder-traversal/",children:"N-ary Tree Postorder Traversal"})})," - Postorder for N-ary"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal/",children:"N-ary Tree Level Order Traversal"})})," - Level order for N-ary"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-depth-of-n-ary-tree/",children:"Maximum Depth of N-ary Tree"})})," - Height of N-ary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/diameter-of-n-ary-tree/",children:"Diameter of N-Ary Tree"})})," - Longest path in N-ary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/clone-n-ary-tree/",children:"Clone N-ary Tree"})})," - Deep copy N-ary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree/",children:"Encode N-ary Tree to Binary Tree"})})," - Convert to binary tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/",children:"Serialize and Deserialize N-ary Tree"})})," - Encode/decode N-ary"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"12-trie-prefix-tree",children:"12. Trie (Prefix Tree)"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/implement-trie-prefix-tree/",children:"Implement Trie (Prefix Tree)"})})," - Basic trie implementation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/design-add-and-search-words-data-structure/",children:"Design Add and Search Words Data Structure"})})," - Trie with wildcard search"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/word-search-ii/",children:"Word Search II"})})," - Find words in board using trie"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/replace-words/",children:"Replace Words"})})," - Replace with shortest root"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/longest-word-in-dictionary/",children:"Longest Word in Dictionary"})})," - Find longest word built one char at a time"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/implement-magic-dictionary/",children:"Implement Magic Dictionary"})})," - Dictionary with one-char difference"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/",children:"Maximum XOR of Two Numbers in an Array"})})," - Binary trie for XOR"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/map-sum-pairs/",children:"Map Sum Pairs"})})," - Sum of values with prefix"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/palindrome-pairs/",children:"Palindrome Pairs"})})," - Find palindrome pairs using trie"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/stream-of-characters/",children:"Stream of Characters"})})," - Query stream with trie"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/search-suggestions-system/",children:"Search Suggestions System"})})," - Autocomplete system"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/word-break-ii/",children:"Word Break II"})})," - All word breaks using trie"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"13-segment-tree--binary-indexed-tree",children:"13. Segment Tree & Binary Indexed Tree"}),"\n",(0,s.jsx)(r.h3,{id:"segment-tree",children:"Segment Tree"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/range-sum-query-mutable/",children:"Range Sum Query - Mutable"})})," - Segment tree for range sum"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/count-of-range-sum/",children:"Count of Range Sum"})})," - Count ranges with sum in interval"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/range-sum-query-2d-mutable/",children:"Range Sum Query 2D - Mutable"})})," - 2D segment tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/my-calendar-i/",children:"My Calendar I"})})," - Interval scheduling"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/my-calendar-ii/",children:"My Calendar II"})})," - Allow double booking"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/my-calendar-iii/",children:"My Calendar III"})})," - Find max k-booking"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"binary-indexed-tree-fenwick-tree",children:"Binary Indexed Tree (Fenwick Tree)"}),"\n",(0,s.jsxs)(r.ol,{start:"7",children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/range-sum-query-mutable/",children:"Range Sum Query - Mutable"})})," - BIT for range sum"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self/",children:"Count of Smaller Numbers After Self"})})," - BIT solution"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/reverse-pairs/",children:"Reverse Pairs"})})," - Count reverse pairs with BIT"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/count-of-range-sum/",children:"Count of Range Sum"})})," - BIT-based solution"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"14-advanced-tree-problems",children:"14. Advanced Tree Problems"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-cameras/",children:"Binary Tree Cameras"})})," - Minimum cameras to monitor all nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/house-robber-iii/",children:"House Robber III"})})," - Rob houses in tree without adjacent"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/distribute-coins-in-binary-tree/",children:"Distribute Coins in Binary Tree"})})," - Minimum moves to distribute coins"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/",children:"Vertical Order Traversal of a Binary Tree"})})," - Complex sorting"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/",children:"All Nodes Distance K in Binary Tree"})})," - Find nodes at distance K"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/sum-of-distances-in-tree/",children:"Sum of Distances in Tree"})})," - Sum distances from each node"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/minimum-height-trees/",children:"Minimum Height Trees"})})," - Find tree centroids"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/count-good-nodes-in-binary-tree/",children:"Count Good Nodes in Binary Tree"})})," - Count nodes with max on path"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/linked-list-in-binary-tree/",children:"Linked List in Binary Tree"})})," - Check if linked list path exists"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/delete-nodes-and-return-forest/",children:"Delete Nodes And Return Forest"})})," - Remove nodes and split tree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/",children:"Maximum Difference Between Node and Ancestor"})})," - Max |ancestor - node|"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/",children:"Insufficient Nodes in Root to Leaf Paths"})})," - Remove paths below limit"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/",children:"Smallest Subtree with all the Deepest Nodes"})})," - Find smallest subtree"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/",children:"Maximum Level Sum of a Binary Tree"})})," - Level with max sum"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"https://leetcode.com/problems/time-needed-to-inform-all-employees/",children:"Time Needed to Inform All Employees"})})," - Tree propagation time"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"common-patterns--techniques",children:"Common Patterns & Techniques"}),"\n",(0,s.jsxs)(r.h3,{id:"1-dfs-templates",children:["1. ",(0,s.jsx)(r.strong,{children:"DFS Templates"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Recursive DFS (Preorder)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def dfs(node):\n    if not node:\n        return\n    # Process node\n    dfs(node.left)\n    dfs(node.right)\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Iterative DFS (Using Stack)"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def dfs_iterative(root):\n    if not root:\n        return\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        # Process node\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"2-bfs-template",children:["2. ",(0,s.jsx)(r.strong,{children:"BFS Template"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"from collections import deque\n\ndef bfs(root):\n    if not root:\n        return\n    queue = deque([root])\n    while queue:\n        level_size = len(queue)\n        for _ in range(level_size):\n            node = queue.popleft()\n            # Process node\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"3-bst-search-template",children:["3. ",(0,s.jsx)(r.strong,{children:"BST Search Template"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def search_bst(root, target):\n    if not root or root.val == target:\n        return root\n    if target < root.val:\n        return search_bst(root.left, target)\n    return search_bst(root.right, target)\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"4-tree-heightdepth",children:["4. ",(0,s.jsx)(r.strong,{children:"Tree Height/Depth"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def max_depth(root):\n    if not root:\n        return 0\n    return 1 + max(max_depth(root.left), max_depth(root.right))\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"5-path-sum-pattern",children:["5. ",(0,s.jsx)(r.strong,{children:"Path Sum Pattern"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def has_path_sum(root, target):\n    if not root:\n        return False\n    if not root.left and not root.right:\n        return root.val == target\n    target -= root.val\n    return has_path_sum(root.left, target) or has_path_sum(root.right, target)\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"6-lca-pattern",children:["6. ",(0,s.jsx)(r.strong,{children:"LCA Pattern"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def lca(root, p, q):\n    if not root or root == p or root == q:\n        return root\n    left = lca(root.left, p, q)\n    right = lca(root.right, p, q)\n    if left and right:\n        return root\n    return left or right\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"7-tree-construction-pattern",children:["7. ",(0,s.jsx)(r.strong,{children:"Tree Construction Pattern"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def build_tree(preorder, inorder):\n    if not preorder:\n        return None\n    root = TreeNode(preorder[0])\n    mid = inorder.index(root.val)\n    root.left = build_tree(preorder[1:mid+1], inorder[:mid])\n    root.right = build_tree(preorder[mid+1:], inorder[mid+1:])\n    return root\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"practice-strategy",children:"Practice Strategy"}),"\n",(0,s.jsx)(r.h3,{id:"phase-1-fundamentals-week-1-2",children:(0,s.jsx)(r.strong,{children:"Phase 1: Fundamentals (Week 1-2)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Goal"}),": Master traversals and basic operations"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Topics"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"All traversals (Inorder, Preorder, Postorder, Level Order)"}),"\n",(0,s.jsx)(r.li,{children:"Basic properties (height, depth, symmetric, same tree)"}),"\n",(0,s.jsx)(r.li,{children:"Simple path problems"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Key Problems"}),": 10-15 problems from sections 1, 3"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"phase-2-bst-mastery-week-3",children:(0,s.jsx)(r.strong,{children:"Phase 2: BST Mastery (Week 3)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Goal"}),": Understand BST properties and operations"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Topics"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"BST validation and search"}),"\n",(0,s.jsx)(r.li,{children:"BST insertion and deletion"}),"\n",(0,s.jsx)(r.li,{children:"Inorder successor/predecessor"}),"\n",(0,s.jsx)(r.li,{children:"BST conversion"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Key Problems"}),": 15 problems from section 6"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"phase-3-intermediate-patterns-week-4-5",children:(0,s.jsx)(r.strong,{children:"Phase 3: Intermediate Patterns (Week 4-5)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Goal"}),": Learn common patterns"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Topics"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Tree construction"}),"\n",(0,s.jsx)(r.li,{children:"Path sum variants"}),"\n",(0,s.jsx)(r.li,{children:"Tree modification"}),"\n",(0,s.jsx)(r.li,{children:"LCA problems"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Key Problems"}),": 15-20 problems from sections 2, 4, 5, 7"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"phase-4-advanced-topics-week-6-7",children:(0,s.jsx)(r.strong,{children:"Phase 4: Advanced Topics (Week 6-7)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Goal"}),": Handle complex scenarios"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Topics"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Serialize/Deserialize"}),"\n",(0,s.jsx)(r.li,{children:"Tree views"}),"\n",(0,s.jsx)(r.li,{children:"N-ary trees"}),"\n",(0,s.jsx)(r.li,{children:"Complex manipulation"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Key Problems"}),": 15-20 problems from sections 9, 10, 11, 14"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"phase-5-specialized-trees-week-8",children:(0,s.jsx)(r.strong,{children:"Phase 5: Specialized Trees (Week 8+)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Goal"}),": Master advanced data structures"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Topics"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Trie"}),"\n",(0,s.jsx)(r.li,{children:"Segment Tree"}),"\n",(0,s.jsx)(r.li,{children:"Binary Indexed Tree"}),"\n",(0,s.jsx)(r.li,{children:"Advanced problems"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Key Problems"}),": 15-20 problems from sections 12, 13, 14"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"time--space-complexity",children:"Time & Space Complexity"}),"\n",(0,s.jsx)(r.h3,{id:"common-operations",children:"Common Operations"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Operation"}),(0,s.jsx)(r.th,{children:"Average"}),(0,s.jsx)(r.th,{children:"Worst"}),(0,s.jsx)(r.th,{children:"Space"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Binary Tree"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Search"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Insertion"}),(0,s.jsx)(r.td,{children:"O(h)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Deletion"}),(0,s.jsx)(r.td,{children:"O(h)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Traversal"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h) or O(n)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"BST"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Search"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Insertion"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Deletion"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Balanced BST (AVL/Red-Black)"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Search"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Insertion"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Deletion"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(h)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Trie"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Search"}),(0,s.jsx)(r.td,{children:"O(m)"}),(0,s.jsx)(r.td,{children:"O(m)"}),(0,s.jsx)(r.td,{children:"O(alphabet_size * n * m)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Insert"}),(0,s.jsx)(r.td,{children:"O(m)"}),(0,s.jsx)(r.td,{children:"O(m)"}),(0,s.jsx)(r.td,{children:"O(alphabet_size * n * m)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Delete"}),(0,s.jsx)(r.td,{children:"O(m)"}),(0,s.jsx)(r.td,{children:"O(m)"}),(0,s.jsx)(r.td,{children:"O(alphabet_size * n * m)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Segment Tree"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Build"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Query"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Update"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(log n)"})]})]})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.em,{children:"where h = height, n = number of nodes, m = length of key"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"key-concepts--tips",children:"Key Concepts & Tips"}),"\n",(0,s.jsx)(r.h3,{id:"tree-traversal-summary",children:"Tree Traversal Summary"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Traversal"}),(0,s.jsx)(r.th,{children:"Order"}),(0,s.jsx)(r.th,{children:"Use Case"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Inorder"})}),(0,s.jsx)(r.td,{children:"Left \u2192 Root \u2192 Right"}),(0,s.jsx)(r.td,{children:"BST sorted order, expression trees"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Preorder"})}),(0,s.jsx)(r.td,{children:"Root \u2192 Left \u2192 Right"}),(0,s.jsx)(r.td,{children:"Create copy, prefix notation"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Postorder"})}),(0,s.jsx)(r.td,{children:"Left \u2192 Right \u2192 Root"}),(0,s.jsx)(r.td,{children:"Delete tree, postfix notation"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Level Order"})}),(0,s.jsx)(r.td,{children:"Level by level"}),(0,s.jsx)(r.td,{children:"BFS, shortest path, serialization"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"when-to-use-which-traversal",children:"When to Use Which Traversal"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Inorder"}),": BST operations, sorted output"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Preorder"}),": Tree copy, serialization, prefix expressions"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Postorder"}),": Tree deletion, calculating values, postfix"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Level Order"}),": Level-wise operations, shortest path"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"bst-properties-to-remember",children:"BST Properties to Remember"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Inorder traversal gives sorted sequence"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Left subtree < Root < Right subtree"})," (for all nodes)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"No duplicate values"})," (in standard BST)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Search/Insert/Delete in O(log n)"})," average case"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Can degenerate to linked list"})," in worst case"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"common-edge-cases",children:"Common Edge Cases"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Empty tree"})," (root = null)"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Single node tree"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Skewed tree"})," (all left or all right)"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Complete binary tree"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Perfect binary tree"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Nodes with one child"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Duplicate values"})," (depending on problem)"]}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"Negative values"})}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Very large values"})," (integer overflow)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"tree-problem-solving-checklist",children:"Tree Problem-Solving Checklist"}),"\n",(0,s.jsxs)(r.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Identify if it's BST or general binary tree"]}),"\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Choose appropriate traversal (DFS vs BFS)"]}),"\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Consider recursive vs iterative approach"]}),"\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Handle base cases (null, leaf nodes)"]}),"\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Think about space complexity (call stack)"]}),"\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Consider edge cases"]}),"\n",(0,s.jsxs)(r.li,{className:"task-list-item",children:[(0,s.jsx)(r.input,{type:"checkbox",disabled:!0})," ","Optimize if needed (Morris traversal for O(1) space)"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"important-algorithms",children:"Important Algorithms"}),"\n",(0,s.jsxs)(r.h3,{id:"1-morris-traversal-threaded-binary-tree",children:["1. ",(0,s.jsx)(r.strong,{children:"Morris Traversal (Threaded Binary Tree)"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": O(1)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Use"}),": Inorder/Preorder without recursion or stack"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Applications"}),": Space-optimized traversal"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"2-floyds-cycle-detection-applied-to-trees",children:["2. ",(0,s.jsx)(r.strong,{children:"Floyd's Cycle Detection"})," (Applied to Trees)"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Use"}),": Detect cycles in graphs treated as trees"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Problems"}),": Find duplicate number, happy number"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"3-tree-diameter-algorithm",children:["3. ",(0,s.jsx)(r.strong,{children:"Tree Diameter Algorithm"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Approach"}),": For each node, calculate max path through it"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Formula"}),": max(left_height + right_height + 1)"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"4-lca-lowest-common-ancestor",children:["4. ",(0,s.jsx)(r.strong,{children:"LCA (Lowest Common Ancestor)"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Binary Tree"}),": Recursive approach with null checks"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"BST"}),": Use BST property (compare values)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"With Parent Pointers"}),": Similar to linked list intersection"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"5-tree-serialization",children:["5. ",(0,s.jsx)(r.strong,{children:"Tree Serialization"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Preorder with null markers"}),": Easy reconstruction"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Level order"}),": BFS-based serialization"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"BST specific"}),": Can use preorder only (no null markers)"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"6-vertical-order-traversal",children:["6. ",(0,s.jsx)(r.strong,{children:"Vertical Order Traversal"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Use Hash Map"}),": Column \u2192 nodes mapping"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Track"}),": (row, col) coordinates"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Sort"}),": By column, then row, then value"]}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"7-tree-construction-algorithms",children:["7. ",(0,s.jsx)(r.strong,{children:"Tree Construction Algorithms"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"From Inorder + Preorder"}),": Root from preorder[0]"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"From Inorder + Postorder"}),": Root from postorder[-1]"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Array to BST"}),": Use middle element as root"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"problem-solving-strategies",children:"Problem-Solving Strategies"}),"\n",(0,s.jsx)(r.h3,{id:"strategy-1-divide-and-conquer",children:"Strategy 1: Divide and Conquer"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"When to use"}),": Problem can be broken into left and right subtrees"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Maximum depth"}),"\n",(0,s.jsx)(r.li,{children:"Balanced tree check"}),"\n",(0,s.jsx)(r.li,{children:"Diameter calculation"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pattern"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def solve(root):\n    if not root:\n        return base_case\n    left_result = solve(root.left)\n    right_result = solve(root.right)\n    return combine(left_result, right_result, root.val)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"strategy-2-top-down-dfs-preorder",children:"Strategy 2: Top-Down DFS (Preorder)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"When to use"}),": Need to pass information from parent to children"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Path sum"}),"\n",(0,s.jsx)(r.li,{children:"Root to leaf paths"}),"\n",(0,s.jsx)(r.li,{children:"Maximum path from root"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pattern"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def solve(root, current_state):\n    if not root:\n        return\n    # Process with current state\n    new_state = update(current_state, root.val)\n    solve(root.left, new_state)\n    solve(root.right, new_state)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"strategy-3-bottom-up-dfs-postorder",children:"Strategy 3: Bottom-Up DFS (Postorder)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"When to use"}),": Need information from children to process parent"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Tree height"}),"\n",(0,s.jsx)(r.li,{children:"Subtree sums"}),"\n",(0,s.jsx)(r.li,{children:"LCA"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pattern"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def solve(root):\n    if not root:\n        return base_case\n    left = solve(root.left)\n    right = solve(root.right)\n    # Process current node with children's results\n    return process(left, right, root.val)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"strategy-4-level-order-bfs",children:"Strategy 4: Level Order BFS"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"When to use"}),": Need to process level by level"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Level order traversal"}),"\n",(0,s.jsx)(r.li,{children:"Right side view"}),"\n",(0,s.jsx)(r.li,{children:"Zigzag traversal"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pattern"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def solve(root):\n    if not root:\n        return []\n    result = []\n    queue = deque([root])\n    while queue:\n        level_size = len(queue)\n        level = []\n        for _ in range(level_size):\n            node = queue.popleft()\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(level)\n    return result\n"})}),"\n",(0,s.jsx)(r.h3,{id:"strategy-5-bst-in-order-for-sorted-processing",children:"Strategy 5: BST In-order for Sorted Processing"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"When to use"}),": Need sorted order in BST"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Kth smallest element"}),"\n",(0,s.jsx)(r.li,{children:"Validate BST"}),"\n",(0,s.jsx)(r.li,{children:"Convert to sorted list"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pattern"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def inorder(root, result):\n    if not root:\n        return\n    inorder(root.left, result)\n    result.append(root.val)  # Process in sorted order\n    inorder(root.right, result)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"strategy-6-parent-tracking",children:"Strategy 6: Parent Tracking"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"When to use"}),": Need to traverse upward or find ancestors"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"All nodes at distance K"}),"\n",(0,s.jsx)(r.li,{children:"LCA with parent pointers"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pattern"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"# Build parent map first\ndef build_parent_map(root):\n    parent = {}\n    queue = deque([root])\n    while queue:\n        node = queue.popleft()\n        if node.left:\n            parent[node.left] = node\n            queue.append(node.left)\n        if node.right:\n            parent[node.right] = node\n            queue.append(node.right)\n    return parent\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"advanced-techniques",children:"Advanced Techniques"}),"\n",(0,s.jsxs)(r.h3,{id:"1-path-compression-tree-dp",children:["1. ",(0,s.jsx)(r.strong,{children:"Path Compression (Tree DP)"})]}),"\n",(0,s.jsx)(r.p,{children:"Store results at each node to avoid recomputation"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Example"}),": House Robber III"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def rob(root):\n    def dfs(node):\n        if not node:\n            return (0, 0)  # (rob, not_rob)\n        left = dfs(node.left)\n        right = dfs(node.right)\n        rob = node.val + left[1] + right[1]\n        not_rob = max(left) + max(right)\n        return (rob, not_rob)\n    return max(dfs(root))\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"2-state-tracking",children:["2. ",(0,s.jsx)(r.strong,{children:"State Tracking"})]}),"\n",(0,s.jsx)(r.p,{children:"Track state information during traversal"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Example"}),": Binary Tree Cameras"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Track if node is monitored, has camera, or needs monitoring"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"3-global-variables-for-cross-node-communication",children:["3. ",(0,s.jsx)(r.strong,{children:"Global Variables for Cross-Node Communication"})]}),"\n",(0,s.jsx)(r.p,{children:"Use when comparing across different paths"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Example"}),": Maximum Path Sum"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"max_sum = float('-inf')\n\ndef max_path_sum(root):\n    def dfs(node):\n        nonlocal max_sum\n        if not node:\n            return 0\n        left = max(0, dfs(node.left))\n        right = max(0, dfs(node.right))\n        max_sum = max(max_sum, left + right + node.val)\n        return max(left, right) + node.val\n    dfs(root)\n    return max_sum\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"4-coordinate-system",children:["4. ",(0,s.jsx)(r.strong,{children:"Coordinate System"})]}),"\n",(0,s.jsx)(r.p,{children:"Assign coordinates for spatial problems"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Example"}),": Vertical Order Traversal"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Use (row, col) coordinates"}),"\n",(0,s.jsx)(r.li,{children:"Hash map: col \u2192 list of (row, val)"}),"\n"]}),"\n",(0,s.jsxs)(r.h3,{id:"5-two-pass-algorithms",children:["5. ",(0,s.jsx)(r.strong,{children:"Two-Pass Algorithms"})]}),"\n",(0,s.jsx)(r.p,{children:"First pass collects info, second pass processes"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Example"}),": Sum of Distances in Tree"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"First pass: Calculate subtree sizes and initial sums"}),"\n",(0,s.jsx)(r.li,{children:"Second pass: Adjust sums based on parent's sum"}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"interview-tips",children:"Interview Tips"}),"\n",(0,s.jsx)(r.h3,{id:"before-coding",children:"Before Coding"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Clarify Problem"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Is it binary tree or BST?"}),"\n",(0,s.jsx)(r.li,{children:"Can values be negative/duplicate?"}),"\n",(0,s.jsx)(r.li,{children:"Is tree balanced?"}),"\n",(0,s.jsx)(r.li,{children:"What about empty tree?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Choose Approach"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"DFS (recursive/iterative) or BFS?"}),"\n",(0,s.jsx)(r.li,{children:"Top-down or bottom-up?"}),"\n",(0,s.jsx)(r.li,{children:"Need extra space (hash map, parent tracking)?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Discuss Trade-offs"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Time vs space complexity"}),"\n",(0,s.jsx)(r.li,{children:"Recursive (cleaner) vs iterative (no stack overflow)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"during-coding",children:"During Coding"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Start with Base Cases"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"if not root:\n    return None/0/[]/False\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Handle Edge Cases"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Single node"}),"\n",(0,s.jsx)(r.li,{children:"Leaf nodes"}),"\n",(0,s.jsx)(r.li,{children:"Skewed trees"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Use Helper Functions"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Separate traversal logic"}),"\n",(0,s.jsx)(r.li,{children:"Cleaner code structure"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"after-coding",children:"After Coding"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Test with Examples"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Empty tree"}),"\n",(0,s.jsx)(r.li,{children:"Single node"}),"\n",(0,s.jsx)(r.li,{children:"Balanced tree"}),"\n",(0,s.jsx)(r.li,{children:"Skewed tree"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Analyze Complexity"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Time: Usually O(n) for traversal"}),"\n",(0,s.jsx)(r.li,{children:"Space: O(h) for recursion, O(n) for BFS"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Optimize if Needed"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Morris traversal for O(1) space"}),"\n",(0,s.jsx)(r.li,{children:"Iterative instead of recursive"}),"\n",(0,s.jsx)(r.li,{children:"Early termination"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"common-mistakes-to-avoid",children:"Common Mistakes to Avoid"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Not handling null nodes"})," \u2192 Always check ",(0,s.jsx)(r.code,{children:"if not root"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Confusing node and node.val"})," \u2192 Be careful with references"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Wrong base case in recursion"})," \u2192 Think about leaf nodes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Stack overflow in deep trees"})," \u2192 Consider iterative approach"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Incorrect BST property"})," \u2192 Remember: left < root < right"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Modifying tree during traversal"})," \u2192 Be careful with deletions"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Forgetting to return values"})," \u2192 Check all paths return"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Off-by-one errors in level order"})," \u2192 Use ",(0,s.jsx)(r.code,{children:"len(queue)"})," correctly"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"resources--next-steps",children:"Resources & Next Steps"}),"\n",(0,s.jsx)(r.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"LeetCode"}),": Best for tree problems, explore cards"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"GeeksforGeeks"}),": Good explanations and variety"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"HackerRank"}),": Interview preparation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Codeforces"}),": Competitive programming"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"study-plan",children:"Study Plan"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Week 1-2"}),": Basic traversals + properties (30 problems)\n",(0,s.jsx)(r.strong,{children:"Week 3"}),": BST mastery (20 problems)\n",(0,s.jsx)(r.strong,{children:"Week 4-5"}),": Path problems + modifications (30 problems)\n",(0,s.jsx)(r.strong,{children:"Week 6"}),": Advanced topics (20 problems)\n",(0,s.jsx)(r.strong,{children:"Week 7-8"}),": Specialized trees (Trie, Segment Tree) (25 problems)"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Total"}),": ~125 problems over 8 weeks"]}),"\n",(0,s.jsx)(r.h3,{id:"advanced-topics-to-explore",children:"Advanced Topics to Explore"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"AVL Trees"})," - Self-balancing BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Red-Black Trees"})," - Another balanced BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"B-Trees"})," - Multi-way search trees"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Splay Trees"})," - Self-adjusting BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Treap"})," - Randomized BST"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Suffix Trees"})," - Pattern matching"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Interval Trees"})," - Interval queries"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"K-D Trees"})," - Multi-dimensional search"]}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"quick-reference-card",children:"Quick Reference Card"}),"\n",(0,s.jsx)(r.h3,{id:"must-know-problems-top-20",children:"Must-Know Problems (Top 20)"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Binary Tree Inorder Traversal"}),"\n",(0,s.jsx)(r.li,{children:"Maximum Depth of Binary Tree"}),"\n",(0,s.jsx)(r.li,{children:"Symmetric Tree"}),"\n",(0,s.jsx)(r.li,{children:"Path Sum"}),"\n",(0,s.jsx)(r.li,{children:"Invert Binary Tree"}),"\n",(0,s.jsx)(r.li,{children:"Lowest Common Ancestor of Binary Tree"}),"\n",(0,s.jsx)(r.li,{children:"Binary Tree Level Order Traversal"}),"\n",(0,s.jsx)(r.li,{children:"Validate Binary Search Tree"}),"\n",(0,s.jsx)(r.li,{children:"Kth Smallest Element in BST"}),"\n",(0,s.jsx)(r.li,{children:"Construct Binary Tree from Preorder and Inorder"}),"\n",(0,s.jsx)(r.li,{children:"Binary Tree Maximum Path Sum"}),"\n",(0,s.jsx)(r.li,{children:"Serialize and Deserialize Binary Tree"}),"\n",(0,s.jsx)(r.li,{children:"Implement Trie"}),"\n",(0,s.jsx)(r.li,{children:"Word Search II"}),"\n",(0,s.jsx)(r.li,{children:"Flatten Binary Tree to Linked List"}),"\n",(0,s.jsx)(r.li,{children:"Populating Next Right Pointers"}),"\n",(0,s.jsx)(r.li,{children:"Count Complete Tree Nodes"}),"\n",(0,s.jsx)(r.li,{children:"House Robber III"}),"\n",(0,s.jsx)(r.li,{children:"Binary Tree Cameras"}),"\n",(0,s.jsx)(r.li,{children:"All Nodes Distance K in Binary Tree"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"templates-cheat-sheet",children:"Templates Cheat Sheet"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"DFS Recursive"}),": Base case \u2192 Process \u2192 Recurse\n",(0,s.jsx)(r.strong,{children:"DFS Iterative"}),": Stack \u2192 Pop \u2192 Push children\n",(0,s.jsx)(r.strong,{children:"BFS"}),": Queue \u2192 Pop level \u2192 Add next level\n",(0,s.jsx)(r.strong,{children:"BST Search"}),": Compare \u2192 Go left/right\n",(0,s.jsx)(r.strong,{children:"LCA"}),": Find in left and right \u2192 Return appropriate node\n",(0,s.jsx)(r.strong,{children:"Path Tracking"}),": DFS with current path \u2192 Backtrack"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(r.p,{children:"Trees are fundamental to computer science and appear frequently in interviews. Master the basics first (traversals, properties), then move to patterns (BST operations, paths, modifications), and finally tackle advanced topics (specialized trees, complex algorithms)."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Key to Success"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Practice consistently (3-5 problems daily)"}),"\n",(0,s.jsx)(r.li,{children:"Understand patterns, not just solutions"}),"\n",(0,s.jsx)(r.li,{children:"Code without looking at solutions first"}),"\n",(0,s.jsx)(r.li,{children:"Review and optimize after solving"}),"\n",(0,s.jsx)(r.li,{children:"Teach others to solidify understanding"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Happy coding! \ud83c\udf33"})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);