"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9872],{8625:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(4848),i=r(8453);const o={title:"Quick Select Algorithm"},a=void 0,l={id:"tutorial-basics/QuickSelect",title:"Quick Select Algorithm",description:"Quick Select Algorithm",source:"@site/docs/tutorial-basics/QuickSelect.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/QuickSelect",permalink:"/js.enigma/docs/tutorial-basics/QuickSelect",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/QuickSelect.mdx",tags:[],version:"current",frontMatter:{title:"Quick Select Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Queue",permalink:"/js.enigma/docs/tutorial-basics/Queue"},next:{title:"Quick Sort",permalink:"/js.enigma/docs/tutorial-basics/QuickSort"}},s={},c=[{value:"Quick Select Algorithm",id:"quick-select-algorithm",level:2},{value:"Basic Version (Extra Space)",id:"basic-version-extra-space",level:3},{value:"Efficient Version (No Extra Space) : Works for number &amp; string",id:"efficient-version-no-extra-space--works-for-number--string",level:3},{value:"Another Partition Way",id:"another-partition-way",level:3},{value:"Problems to get your hands dirty :)",id:"problems-to-get-your-hands-dirty-",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"quick-select-algorithm",children:"Quick Select Algorithm"}),"\n",(0,n.jsx)(t.p,{children:"The Quick Select algorithm is an efficient selection algorithm to find the k-th smallest element in an unordered list. It's based on the Quick Sort algorithm and has an average time complexity of O(n)."}),"\n",(0,n.jsx)(t.h3,{id:"basic-version-extra-space",children:"Basic Version (Extra Space)"}),"\n",(0,n.jsx)(t.p,{children:"The following is a basic implementation of Quick Select in JavaScript. This version uses additional space for partitioning the array into smaller and larger elements:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-Javascript",children:"function quickSelect(A, k) {\r\n  // Base case: if the array has only one element, return it\r\n  if (A.length === 1) return A[0];\r\n\r\n  // Choose a pivot uniformly at random\r\n  const r = Math.floor(Math.random() * A.length);\r\n  const pivot = A[r];\r\n\r\n  // Initialize arrays for smaller and larger elements\r\n  const A1 = A.filter(x => x < pivot);\r\n  const A2 = A.filter(x => x > pivot);\r\n\r\n  const diff = A.length - A2.length;\r\n\r\n  // Determine the position of the k-th smallest element\r\n  if (k <= A1.length) {\r\n    // It's in the pile of small elements\r\n    return quickSelect(A1, k);\r\n  } else if (k > diff) {\r\n    // It's in the pile of big elements\r\n    return quickSelect(A2, k - diff);\r\n  } else {\r\n    // It's equal to the pivot\r\n    return pivot;\r\n  }\r\n}\r\n\r\nfunction findKthLargest(nums, k) {\r\n  return quickSelect(nums, nums.length - k + 1);\r\n}\r\n\r\nfunction findKthSmallest(nums, k) {\r\n  return quickSelect(nums, k);\r\n}\r\n\r\n// Example usage:\r\nconst nums = [3, 2, 1, 5, 6, 4];\r\nconst k = 1;\r\n\r\nconsole.log(findKthLargest(nums, k)); // Output: 6\r\nconsole.log(findKthSmallest(nums, k)); // Output: 1\n"})}),"\n",(0,n.jsx)(t.h3,{id:"efficient-version-no-extra-space--works-for-number--string",children:"Efficient Version (No Extra Space) : Works for number & string"}),"\n",(0,n.jsx)(t.p,{children:"The following is an efficient implementation of Quick Select in JavaScript. This version uses Hoare partition for partitioning the array into smaller and larger elements:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-JavaScript",children:"function partition(arr, lo, hi, compare) {\r\n    // Choose a random pivot and move it to the start\r\n    const randomIndex = Math.floor(Math.random() * (hi - lo + 1)) + lo;\r\n    swap(arr, lo, randomIndex);\r\n    const pivot = arr[lo];\r\n\r\n    let i = lo + 1; // Start just after the pivot\r\n    let j = hi;\r\n\r\n    while (i <= j) {\r\n        // Find the first element greater than or equal to the pivot\r\n        while (i <= hi && compare(arr[i], pivot) < 0) i++;\r\n\r\n        // Find the first element less than or equal to the pivot\r\n        while (j >= lo && compare(arr[j], pivot) > 0) j--;\r\n\r\n        if (i >= j) break;\r\n\r\n        swap(arr, i, j);\r\n        i++;\r\n        j--;\r\n    }\r\n\r\n    // Place the pivot in its correct position\r\n    swap(arr, lo, j);\r\n    return j; // Return the index of the pivot\r\n}\r\n\r\nconst swap = (arr, i, j) => [arr[i], arr[j]] = [arr[j], arr[i]];\r\n\r\nfunction quickSelect(arr, k, compare) {\r\n    let lo = 0;\r\n    let hi = arr.length - 1;\r\n\r\n    while (lo <= hi) {\r\n        const j = partition(arr, lo, hi, compare);\r\n        if (j === k) {\r\n            return arr[k];\r\n        } else if (j < k) {\r\n            lo = j + 1;\r\n        } else {\r\n            hi = j - 1;\r\n        }\r\n    }\r\n    return null; // In case k is out of bounds\r\n}\r\n\r\nconst compare = (a, b) => BigInt(a) - BigInt(b);\r\n\r\nfunction findKthLargest(arr, k) {\r\n    return quickSelect(arr, arr.length - k, compare);\r\n}\r\n\r\nfunction kthSmallest(arr, k) {\r\n    return quickSelect(arr, k - 1, compare);\r\n}\r\n\n"})}),"\n",(0,n.jsx)(t.h3,{id:"another-partition-way",children:"Another Partition Way"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-JavaScript",children:"function partition(nums, left, right) {\r\n  // Select a random index between left and right\r\n  const randomIndex = Math.floor(Math.random() * (right - left + 1)) + left;\r\n  \r\n  // Swap the element at the random index with the element at 'left' to use it as the pivot\r\n  swap(nums, left, randomIndex); \r\n  \r\n  // Set the pivot to the element at 'left'\r\n  const pivot = nums[left];\r\n  \r\n  // Initialize two pointers: 'low' starts just after 'left', 'high' starts at 'right'\r\n  let low = left + 1;\r\n  let high = right;\r\n\r\n  // Partition the array around the pivot\r\n  while (low <= high) {\r\n    // Move 'low' forward if the current element is less than or equal to the pivot\r\n    // Move 'high' backward if the current element is greater than or equal to the pivot\r\n    if (nums[low] > pivot && nums[high] < pivot) {\r\n      // Swap elements that are on the wrong side of the pivot\r\n      swap(nums, low, high);\r\n    }\r\n    \r\n    // Move 'low' pointer if the element is less than or equal to the pivot\r\n    if (nums[low] <= pivot) low++;\r\n    \r\n    // Move 'high' pointer if the element is greater than or equal to the pivot\r\n    if (nums[high] >= pivot) high--;\r\n  }\r\n\r\n  // Swap the pivot element into its correct position (all elements to the left are less than the pivot)\r\n  swap(nums, left, high);\r\n  \r\n  // Return the index of the pivot element after partitioning\r\n  return high;\r\n}\r\n\r\n// Swap function to exchange elements at indices i and j\r\nfunction swap(arr, i, j) {\r\n  const temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"problems-to-get-your-hands-dirty-",children:"Problems to get your hands dirty :)"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/kth-largest-element-in-an-array/description/",children:"Kth Largest Element in an Array"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array",children:"Find the Kth Largest Integer in the Array"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://leetcode.com/problems/k-closest-points-to-origin/description/",children:"K Closest Points to Origin"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://www.geeksforgeeks.org/problems/kth-smallest-element5635/1",children:"Kth Smallest Element"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>l});var n=r(6540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);