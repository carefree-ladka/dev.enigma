"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[886],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var r=i(96540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},54544:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var r=i(74848),s=i(28453);const t={title:"Uber System Design",description:"Complete system design for Uber ride-hailing platform",author:"System Design Template",date:"2025-10-05",tags:["system-design","uber","ride-hailing","geospatial","real-time"]},a="Uber System Design",d={id:"System Design Problems/Uber System Design",title:"Uber System Design",description:"Complete system design for Uber ride-hailing platform",source:"@site/docs/System Design Problems/Uber System Design.mdx",sourceDirName:"System Design Problems",slug:"/System Design Problems/Uber System Design",permalink:"/js.enigma/docs/System Design Problems/Uber System Design",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/System Design Problems/Uber System Design.mdx",tags:[{inline:!0,label:"system-design",permalink:"/js.enigma/docs/tags/system-design"},{inline:!0,label:"uber",permalink:"/js.enigma/docs/tags/uber"},{inline:!0,label:"ride-hailing",permalink:"/js.enigma/docs/tags/ride-hailing"},{inline:!0,label:"geospatial",permalink:"/js.enigma/docs/tags/geospatial"},{inline:!0,label:"real-time",permalink:"/js.enigma/docs/tags/real-time"}],version:"current",frontMatter:{title:"Uber System Design",description:"Complete system design for Uber ride-hailing platform",author:"System Design Template",date:"2025-10-05",tags:["system-design","uber","ride-hailing","geospatial","real-time"]},sidebar:"tutorialSidebar",previous:{title:"Twitter System Design",permalink:"/js.enigma/docs/System Design Problems/Twitter System Design"}},l={},c=[{value:"1. Requirements (~5 minutes)",id:"1-requirements-5-minutes",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-functional Requirements",id:"non-functional-requirements",level:3},{value:"Capacity Estimation",id:"capacity-estimation",level:3},{value:"2. Core Entities (~2 minutes)",id:"2-core-entities-2-minutes",level:2},{value:"User",id:"user",level:3},{value:"Driver",id:"driver",level:3},{value:"Vehicle",id:"vehicle",level:3},{value:"Ride",id:"ride",level:3},{value:"Location",id:"location",level:3},{value:"Payment",id:"payment",level:3},{value:"Rating",id:"rating",level:3},{value:"Pricing",id:"pricing",level:3},{value:"3. API Interface (~5 minutes)",id:"3-api-interface-5-minutes",level:2},{value:"Protocol Choice",id:"protocol-choice",level:3},{value:"API Endpoints",id:"api-endpoints",level:3},{value:"Rider APIs",id:"rider-apis",level:4},{value:"Driver APIs",id:"driver-apis",level:4},{value:"Admin/Analytics APIs",id:"adminanalytics-apis",level:4},{value:"4. Data Flow (~5 minutes)",id:"4-data-flow-5-minutes",level:2},{value:"Ride Request Flow",id:"ride-request-flow",level:3},{value:"Real-time Location Update Flow",id:"real-time-location-update-flow",level:3},{value:"5. High Level Design (~10-15 minutes)",id:"5-high-level-design-10-15-minutes",level:2},{value:"Architecture Components",id:"architecture-components",level:3},{value:"6. Architecture Diagram",id:"6-architecture-diagram",level:2},{value:"7. Data Models",id:"7-data-models",level:2},{value:"PostgreSQL - Users &amp; Payments",id:"postgresql---users--payments",level:3},{value:"Cassandra - Rides &amp; Location History",id:"cassandra---rides--location-history",level:3},{value:"Redis Data Structures",id:"redis-data-structures",level:3},{value:"MongoDB - Ratings &amp; Documents",id:"mongodb---ratings--documents",level:3},{value:"8. Deep Dives (~10 minutes)",id:"8-deep-dives-10-minutes",level:2},{value:"8.1 Geospatial Indexing &amp; Driver Matching",id:"81-geospatial-indexing--driver-matching",level:3},{value:"Approach 1: Geohashing",id:"approach-1-geohashing",level:4},{value:"Approach 2: QuadTree (In-Memory)",id:"approach-2-quadtree-in-memory",level:4},{value:"Approach 3: Google S2 (Uber&#39;s Choice)",id:"approach-3-google-s2-ubers-choice",level:4},{value:"8.2 Driver-Rider Matching Algorithm",id:"82-driver-rider-matching-algorithm",level:3},{value:"Matching Strategy",id:"matching-strategy",level:4},{value:"Handling Edge Cases",id:"handling-edge-cases",level:4},{value:"8.3 Real-time Location Tracking",id:"83-real-time-location-tracking",level:3},{value:"WebSocket Architecture",id:"websocket-architecture",level:4},{value:"8.4 ETA Calculation &amp; Routing",id:"84-eta-calculation--routing",level:3},{value:"1. Static Route Calculation",id:"1-static-route-calculation",level:4},{value:"2. Real-time Traffic Integration",id:"2-real-time-traffic-integration",level:4},{value:"3. Historical Data Learning",id:"3-historical-data-learning",level:4},{value:"4. Continuous ETA Updates",id:"4-continuous-eta-updates",level:4},{value:"8.5 Surge Pricing Algorithm",id:"85-surge-pricing-algorithm",level:3},{value:"Supply-Demand Calculation",id:"supply-demand-calculation",level:4},{value:"Surge Notification Strategy",id:"surge-notification-strategy",level:4},{value:"8.6 Payment Processing",id:"86-payment-processing",level:3},{value:"1. Pre-authorization",id:"1-pre-authorization",level:4},{value:"2. Fare Calculation",id:"2-fare-calculation",level:4},{value:"3. Payment Execution (Async)",id:"3-payment-execution-async",level:4},{value:"4. Retry &amp; Failure Handling",id:"4-retry--failure-handling",level:4},{value:"5. Driver Payouts",id:"5-driver-payouts",level:4},{value:"8.7 Notification System",id:"87-notification-system",level:3},{value:"1. Push Notifications (Mobile)",id:"1-push-notifications-mobile",level:4},{value:"2. SMS Notifications",id:"2-sms-notifications",level:4},{value:"3. In-App Notifications",id:"3-in-app-notifications",level:4},{value:"8.8 Fraud Detection &amp; Safety",id:"88-fraud-detection--safety",level:3},{value:"1. Fraud Detection",id:"1-fraud-detection",level:4},{value:"2. Safety Features",id:"2-safety-features",level:4},{value:"8.9 Analytics &amp; Business Intelligence",id:"89-analytics--business-intelligence",level:3},{value:"Real-time Dashboards",id:"real-time-dashboards",level:4},{value:"Data Pipeline",id:"data-pipeline",level:4},{value:"Machine Learning Applications",id:"machine-learning-applications",level:4},{value:"8.10 Scalability &amp; Performance Optimizations",id:"810-scalability--performance-optimizations",level:3},{value:"Database Sharding",id:"database-sharding",level:4},{value:"Caching Strategy",id:"caching-strategy",level:4},{value:"Read Replicas",id:"read-replicas",level:4},{value:"Connection Pooling",id:"connection-pooling",level:4},{value:"API Rate Limiting",id:"api-rate-limiting",level:4},{value:"Load Balancing",id:"load-balancing",level:4},{value:"8.11 Disaster Recovery &amp; High Availability",id:"811-disaster-recovery--high-availability",level:3},{value:"Multi-Region Architecture",id:"multi-region-architecture",level:4},{value:"Backup Strategy",id:"backup-strategy",level:4},{value:"Failover Procedures",id:"failover-procedures",level:4},{value:"Summary",id:"summary",level:2},{value:"Key Design Decisions",id:"key-design-decisions",level:3},{value:"Scalability Achieved",id:"scalability-achieved",level:3},{value:"Trade-offs &amp; Considerations",id:"trade-offs--considerations",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Additional Considerations",id:"additional-considerations",level:2},{value:"Data Privacy &amp; Compliance",id:"data-privacy--compliance",level:3},{value:"Accessibility Features",id:"accessibility-features",level:3},{value:"Environmental Impact",id:"environmental-impact",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"uber-system-design",children:"Uber System Design"})}),"\n",(0,r.jsx)(n.h2,{id:"1-requirements-5-minutes",children:"1. Requirements (~5 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 Riders should be able to ",(0,r.jsx)(n.strong,{children:"request a ride"})," with pickup and drop-off locations"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Drivers should be able to ",(0,r.jsx)(n.strong,{children:"accept/reject ride requests"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 System should ",(0,r.jsx)(n.strong,{children:"match riders with nearby available drivers"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Riders and drivers should see ",(0,r.jsx)(n.strong,{children:"real-time location updates"})," during the trip"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 System should calculate ",(0,r.jsx)(n.strong,{children:"estimated time of arrival (ETA)"})," and ",(0,r.jsx)(n.strong,{children:"fare estimation"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,r.jsx)(n.strong,{children:"view ride history"})," and ",(0,r.jsx)(n.strong,{children:"rate drivers"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Drivers should be able to ",(0,r.jsx)(n.strong,{children:"update availability status"})," (online/offline)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 System should support ",(0,r.jsx)(n.strong,{children:"multiple ride types"})," (UberX, UberXL, UberPool, etc.)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 The system should prioritize ",(0,r.jsx)(n.strong,{children:"availability"})," (riders should always get matched)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 The system should scale to support ",(0,r.jsx)(n.strong,{children:"100M+ users globally"}),", ",(0,r.jsx)(n.strong,{children:"10M rides/day"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Driver matching should happen in ",(0,r.jsx)(n.strong,{children:"< 3 seconds"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Location updates should be ",(0,r.jsx)(n.strong,{children:"near real-time"})," (< 5 seconds latency)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 The system should be ",(0,r.jsx)(n.strong,{children:"highly available"})," (99.99% uptime for core services)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ETA calculation should be ",(0,r.jsx)(n.strong,{children:"accurate"})," within 10% margin"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 The system should handle ",(0,r.jsx)(n.strong,{children:"peak hours"})," (morning/evening rush)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Data should be ",(0,r.jsx)(n.strong,{children:"geographically distributed"})," for low latency"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Payment processing should be ",(0,r.jsx)(n.strong,{children:"secure and reliable"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 The system should support ",(0,r.jsx)(n.strong,{children:"surge pricing"})," during high demand"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"capacity-estimation",children:"Capacity Estimation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Assumptions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Total Users: 100M (riders + drivers)"}),"\n",(0,r.jsx)(n.li,{children:"Daily Active Riders: 10M"}),"\n",(0,r.jsx)(n.li,{children:"Daily Active Drivers: 2M"}),"\n",(0,r.jsx)(n.li,{children:"Average rides per day: 10M"}),"\n",(0,r.jsx)(n.li,{children:"Average ride duration: 20 minutes"}),"\n",(0,r.jsx)(n.li,{children:"Driver location updates: Every 4 seconds"}),"\n",(0,r.jsx)(n.li,{children:"Rider tracking during ride: Every 5 seconds"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Daily Metrics:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Rides per day = 10M\nRides per second = 10M / 86400 = ~115 rides/sec\n\nConcurrent rides (peak) = 10M \xd7 20 min / (24 hrs \xd7 60 min) = ~140K concurrent rides\n\nDriver location updates = 2M drivers \xd7 (86400 / 4 sec) = 43.2B updates/day\nLocation update rate = 43.2B / 86400 = ~500K updates/sec\n\nRide tracking updates = 140K rides \xd7 2 users \xd7 (1 update / 5 sec) = 56K updates/sec\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Storage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Trip data per ride = 2 KB (pickup, dropoff, fare, time, etc.)\nDaily trip storage = 10M \xd7 2 KB = 20 GB/day\nAnnual storage = 20 GB \xd7 365 = 7.3 TB/year\n\nLocation history per ride = 20 min \xd7 (1 update / 4 sec) \xd7 100 bytes = 30 KB\nDaily location storage = 10M \xd7 30 KB = 300 GB/day\nAnnual location storage = 300 GB \xd7 365 = ~110 TB/year\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bandwidth:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Driver location upload = 500K updates/sec \xd7 100 bytes = 50 MB/s\nRider tracking = 56K updates/sec \xd7 100 bytes = 5.6 MB/s\nTotal upload = ~55 MB/s\n\nMap data download = 140K rides \xd7 500 KB = 70 GB concurrent\nETA queries = 115 rides/sec \xd7 5 KB = 575 KB/s\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-core-entities-2-minutes",children:"2. Core Entities (~2 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"user",children:"User"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userId"}),", ",(0,r.jsx)(n.code,{children:"name"}),", ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"phone"}),", ",(0,r.jsx)(n.code,{children:"userType"})," (RIDER/DRIVER), ",(0,r.jsx)(n.code,{children:"rating"}),", ",(0,r.jsx)(n.code,{children:"createdAt"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"driver",children:"Driver"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"driverId"}),", ",(0,r.jsx)(n.code,{children:"userId"}),", ",(0,r.jsx)(n.code,{children:"vehicleId"}),", ",(0,r.jsx)(n.code,{children:"currentLocation"})," (lat, lng), ",(0,r.jsx)(n.code,{children:"status"})," (AVAILABLE/BUSY/OFFLINE), ",(0,r.jsx)(n.code,{children:"rating"}),", ",(0,r.jsx)(n.code,{children:"totalTrips"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"vehicle",children:"Vehicle"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"vehicleId"}),", ",(0,r.jsx)(n.code,{children:"driverId"}),", ",(0,r.jsx)(n.code,{children:"type"})," (ECONOMY/PREMIUM/SUV), ",(0,r.jsx)(n.code,{children:"make"}),", ",(0,r.jsx)(n.code,{children:"model"}),", ",(0,r.jsx)(n.code,{children:"year"}),", ",(0,r.jsx)(n.code,{children:"licensePlate"}),", ",(0,r.jsx)(n.code,{children:"capacity"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ride",children:"Ride"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rideId"}),", ",(0,r.jsx)(n.code,{children:"riderId"}),", ",(0,r.jsx)(n.code,{children:"driverId"}),", ",(0,r.jsx)(n.code,{children:"pickupLocation"}),", ",(0,r.jsx)(n.code,{children:"dropoffLocation"}),", ",(0,r.jsx)(n.code,{children:"status"}),", ",(0,r.jsx)(n.code,{children:"requestedAt"}),", ",(0,r.jsx)(n.code,{children:"acceptedAt"}),", ",(0,r.jsx)(n.code,{children:"startedAt"}),", ",(0,r.jsx)(n.code,{children:"completedAt"}),", ",(0,r.jsx)(n.code,{children:"fare"}),", ",(0,r.jsx)(n.code,{children:"distance"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"location",children:"Location"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"entityId"}),", ",(0,r.jsx)(n.code,{children:"entityType"}),", ",(0,r.jsx)(n.code,{children:"latitude"}),", ",(0,r.jsx)(n.code,{children:"longitude"}),", ",(0,r.jsx)(n.code,{children:"timestamp"}),", ",(0,r.jsx)(n.code,{children:"heading"}),", ",(0,r.jsx)(n.code,{children:"speed"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"payment",children:"Payment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"paymentId"}),", ",(0,r.jsx)(n.code,{children:"rideId"}),", ",(0,r.jsx)(n.code,{children:"amount"}),", ",(0,r.jsx)(n.code,{children:"method"}),", ",(0,r.jsx)(n.code,{children:"status"}),", ",(0,r.jsx)(n.code,{children:"timestamp"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rating",children:"Rating"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ratingId"}),", ",(0,r.jsx)(n.code,{children:"rideId"}),", ",(0,r.jsx)(n.code,{children:"raterId"}),", ",(0,r.jsx)(n.code,{children:"rateeId"}),", ",(0,r.jsx)(n.code,{children:"score"})," (1-5), ",(0,r.jsx)(n.code,{children:"feedback"}),", ",(0,r.jsx)(n.code,{children:"timestamp"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pricing",children:"Pricing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rideType"}),", ",(0,r.jsx)(n.code,{children:"baseFare"}),", ",(0,r.jsx)(n.code,{children:"perKmRate"}),", ",(0,r.jsx)(n.code,{children:"perMinuteRate"}),", ",(0,r.jsx)(n.code,{children:"surgeFactor"}),", ",(0,r.jsx)(n.code,{children:"region"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-api-interface-5-minutes",children:"3. API Interface (~5 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"protocol-choice",children:"Protocol Choice"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"REST"})," for CRUD operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WebSocket"})," for real-time location updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gRPC"})," for internal microservice communication"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"api-endpoints",children:"API Endpoints"}),"\n",(0,r.jsx)(n.h4,{id:"rider-apis",children:"Rider APIs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/rides/request\nAuthorization: Bearer <rider_token>\nContent-Type: application/json\n\n{\n  "pickupLocation": {\n    "latitude": 37.7749,\n    "longitude": -122.4194,\n    "address": "123 Market St, SF"\n  },\n  "dropoffLocation": {\n    "latitude": 37.7849,\n    "longitude": -122.4094,\n    "address": "456 Mission St, SF"\n  },\n  "rideType": "UBERX",\n  "paymentMethod": "CARD_1234"\n}\n\nResponse: {\n  "rideId": "ride-123",\n  "estimatedFare": 12.50,\n  "estimatedETA": 5,\n  "status": "SEARCHING"\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /v1/rides/{rideId}\nAuthorization: Bearer <rider_token>\n\nResponse: {\n  "rideId": "ride-123",\n  "status": "IN_PROGRESS",\n  "driver": {\n    "driverId": "driver-456",\n    "name": "John Doe",\n    "rating": 4.8,\n    "vehicle": {\n      "make": "Toyota",\n      "model": "Camry",\n      "licensePlate": "ABC 1234"\n    },\n    "currentLocation": {\n      "latitude": 37.7750,\n      "longitude": -122.4195\n    }\n  },\n  "estimatedArrival": "2025-10-05T10:15:00Z"\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'PUT /v1/rides/{rideId}/cancel\nAuthorization: Bearer <rider_token>\n\n{\n  "reason": "Changed plans"\n}\n\nResponse: {\n  "success": true,\n  "cancellationFee": 5.00\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/rides/{rideId}/rating\nAuthorization: Bearer <rider_token>\n\n{\n  "score": 5,\n  "feedback": "Great driver!"\n}\n\nResponse: { "success": true }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /v1/rides/history?page=1&limit=20\nAuthorization: Bearer <rider_token>\n\nResponse: {\n  "rides": [Ride],\n  "nextPage": 2,\n  "total": 156\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /v1/fare/estimate\nAuthorization: Bearer <rider_token>\n\n{\n  "pickupLocation": { "latitude": 37.7749, "longitude": -122.4194 },\n  "dropoffLocation": { "latitude": 37.7849, "longitude": -122.4094 },\n  "rideType": "UBERX"\n}\n\nResponse: {\n  "estimatedFare": 12.50,\n  "distance": 3.2,\n  "duration": 8,\n  "surgeFactor": 1.0\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"driver-apis",children:"Driver APIs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/drivers/status\nAuthorization: Bearer <driver_token>\n\n{\n  "status": "AVAILABLE",\n  "currentLocation": {\n    "latitude": 37.7749,\n    "longitude": -122.4194\n  }\n}\n\nResponse: { "success": true }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/drivers/location\nAuthorization: Bearer <driver_token>\n\n{\n  "latitude": 37.7750,\n  "longitude": -122.4195,\n  "heading": 90,\n  "speed": 35\n}\n\nResponse: { "success": true }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /v1/drivers/rides/available\nAuthorization: Bearer <driver_token>\n\nResponse: {\n  "rides": [{\n    "rideId": "ride-123",\n    "pickupLocation": {...},\n    "dropoffLocation": {...},\n    "estimatedFare": 12.50,\n    "distance": 0.5,\n    "estimatedPickupTime": 2\n  }]\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/rides/{rideId}/accept\nAuthorization: Bearer <driver_token>\n\nResponse: {\n  "success": true,\n  "rider": {\n    "name": "Jane Smith",\n    "phone": "+1234567890",\n    "rating": 4.9\n  }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/rides/{rideId}/start\nAuthorization: Bearer <driver_token>\n\nResponse: { "success": true, "startTime": "2025-10-05T10:10:00Z" }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'POST /v1/rides/{rideId}/complete\nAuthorization: Bearer <driver_token>\n\n{\n  "endLocation": {\n    "latitude": 37.7849,\n    "longitude": -122.4094\n  }\n}\n\nResponse: {\n  "success": true,\n  "fare": 12.50,\n  "distance": 3.2\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"adminanalytics-apis",children:"Admin/Analytics APIs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /v1/analytics/supply-demand?region=SF&timestamp=now\n\nResponse: {\n  "availableDrivers": 1234,\n  "activeRides": 5678,\n  "waitingRiders": 234,\n  "surgeFactor": 1.5\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /v1/heatmap?region=SF&metric=demand\n\nResponse: {\n  "cells": [{\n    "geohash": "9q8yy",\n    "value": 45,\n    "surgeFactor": 1.8\n  }]\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-data-flow-5-minutes",children:"4. Data Flow (~5 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"ride-request-flow",children:"Ride Request Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rider Requests Ride"}),": App sends pickup/dropoff to Ride Service"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fare Estimation"}),": Pricing Service calculates fare based on distance, time, surge"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Find Available Drivers"}),": Location Service queries drivers within radius (QuadTree/Geohash)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Match Drivers"}),": Matching Service ranks drivers by distance, rating, acceptance rate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Notify Drivers"}),": Push notifications sent to top 5 nearby drivers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Driver Accepts"}),": First accepting driver gets the ride"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start Navigation"}),": Routing Service provides turn-by-turn directions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Track Location"}),": WebSocket streams real-time locations to rider"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complete Ride"}),": Driver marks complete, Payment Service processes payment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rating"}),": Both parties rate each other"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"real-time-location-update-flow",children:"Real-time Location Update Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Driver App"}),": Sends location every 4 seconds via WebSocket"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Location Service"}),": Updates driver location in Redis and Kafka"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"QuadTree Update"}),": Moves driver to new geo-cell if boundary crossed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Active Ride Check"}),": If driver on ride, broadcast location to rider"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ETA Recalculation"}),": Update ETA based on current location and traffic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics"}),": Stream location data to analytics pipeline"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-high-level-design-10-15-minutes",children:"5. High Level Design (~10-15 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"architecture-components",children:"Architecture Components"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Client Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rider App (iOS/Android/Web)"}),"\n",(0,r.jsx)(n.li,{children:"Driver App (iOS/Android)"}),"\n",(0,r.jsx)(n.li,{children:"Real-time WebSocket connections"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"API Gateway Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"API Gateway - routing, authentication, rate limiting"}),"\n",(0,r.jsx)(n.li,{children:"Load Balancer - geographic load distribution"}),"\n",(0,r.jsx)(n.li,{children:"CDN - static assets, maps tiles"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Service Layer (Microservices):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ride Service"})," - ride lifecycle management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Matching Service"})," - driver-rider matching algorithm"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Location Service"})," - tracks and queries driver locations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pricing Service"})," - fare calculation, surge pricing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Payment Service"})," - payment processing, wallet management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Notification Service"})," - push notifications, SMS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Routing Service"})," - ETA calculation, navigation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Service"})," - user profiles, authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics Service"})," - real-time metrics, surge detection"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PostgreSQL"})," - users, vehicles, payment methods (ACID required)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cassandra"})," - ride history, location history (high write throughput)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis"})," - active driver locations, ride state, cache"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MongoDB"})," - driver documents, ratings, flexible schema"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S3"})," - receipts, documents, driver photos"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Geospatial Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis Geospatial"})," - nearby driver queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Elasticsearch Geo"})," - historical location analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Google Maps API"})," - routing, traffic, ETA"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Messaging & Streaming:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kafka"})," - location events, ride events, analytics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RabbitMQ"})," - task queues, notifications"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis Pub/Sub"})," - real-time location broadcasting"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Background Workers:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Surge Pricing Calculator"})," - monitors supply/demand"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ETA Updater"})," - recalculates ETAs with traffic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Payment Processor"})," - processes payments asynchronously"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics Aggregator"})," - computes metrics"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-architecture-diagram",children:"6. Architecture Diagram"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Layer"\n        RiderApp[Rider Mobile App]\n        DriverApp[Driver Mobile App]\n        WebApp[Web App]\n    end\n\n    subgraph "CDN & Maps"\n        CDN[CDN<br/>Static Assets]\n        Maps[Google Maps API<br/>Routing & Traffic]\n    end\n\n    subgraph "API Gateway"\n        Gateway[API Gateway<br/>Auth, Rate Limiting]\n        LB[Geographic Load Balancer]\n    end\n\n    subgraph "Core Services"\n        RideSvc[Ride Service<br/>Lifecycle Management]\n        MatchSvc[Matching Service<br/>Driver-Rider Matching]\n        LocationSvc[Location Service<br/>Geospatial Queries]\n        PricingSvc[Pricing Service<br/>Fare & Surge]\n        PaymentSvc[Payment Service<br/>Transactions]\n        NotifSvc[Notification Service<br/>Push & SMS]\n        RoutingSvc[Routing Service<br/>ETA & Navigation]\n        UserSvc[User Service<br/>Profiles & Auth]\n    end\n\n    subgraph "Geospatial Layer"\n        RedisGeo[(Redis Geospatial<br/>Active Drivers)]\n        QuadTree[QuadTree/S2<br/>In-Memory Index]\n    end\n\n    subgraph "Cache Layer"\n        RedisCache[(Redis Cluster<br/>Ride State, Sessions)]\n    end\n\n    subgraph "Database Layer"\n        Postgres[(PostgreSQL<br/>Users, Payments)]\n        Cassandra[(Cassandra<br/>Ride History, Locations)]\n        MongoDB[(MongoDB<br/>Driver Docs, Ratings)]\n    end\n\n    subgraph "Storage"\n        S3[S3<br/>Documents, Receipts]\n    end\n\n    subgraph "Message Queue"\n        Kafka[Kafka<br/>Location Events, Ride Events]\n        RabbitMQ[RabbitMQ<br/>Notification Queue]\n    end\n\n    subgraph "Background Workers"\n        SurgeCalc[Surge Pricing<br/>Calculator]\n        ETAUpdater[ETA Updater<br/>Traffic Monitor]\n        PaymentProc[Payment Processor]\n        Analytics[Analytics Aggregator]\n    end\n\n    subgraph "Monitoring"\n        Metrics[Prometheus/Grafana<br/>Metrics Dashboard]\n        Logs[ELK Stack<br/>Centralized Logging]\n        Tracing[Jaeger<br/>Distributed Tracing]\n    end\n\n    %% Client connections\n    RiderApp --\x3e|REST API| Gateway\n    DriverApp --\x3e|REST API| Gateway\n    DriverApp --\x3e|WebSocket<br/>Location Stream| LocationSvc\n    RiderApp --\x3e|WebSocket<br/>Live Tracking| LocationSvc\n\n    RiderApp --\x3e CDN\n    RiderApp --\x3e Maps\n    DriverApp --\x3e Maps\n\n    %% API Gateway\n    Gateway --\x3e LB\n    LB --\x3e RideSvc\n    LB --\x3e LocationSvc\n    LB --\x3e UserSvc\n\n    %% Service interactions\n    RideSvc --\x3e MatchSvc\n    RideSvc --\x3e PricingSvc\n    RideSvc --\x3e PaymentSvc\n    RideSvc --\x3e NotifSvc\n\n    MatchSvc --\x3e LocationSvc\n    MatchSvc --\x3e RedisGeo\n    MatchSvc --\x3e QuadTree\n\n    LocationSvc --\x3e RedisGeo\n    LocationSvc --\x3e Kafka\n\n    RoutingSvc --\x3e Maps\n    PricingSvc --\x3e RedisCache\n\n    %% Database connections\n    RideSvc --\x3e Postgres\n    RideSvc --\x3e Cassandra\n    UserSvc --\x3e Postgres\n    PaymentSvc --\x3e Postgres\n    LocationSvc --\x3e Cassandra\n\n    %% Event streaming\n    LocationSvc --\x3e|Location Events| Kafka\n    RideSvc --\x3e|Ride Events| Kafka\n    Kafka --\x3e SurgeCalc\n    Kafka --\x3e ETAUpdater\n    Kafka --\x3e Analytics\n\n    NotifSvc --\x3e RabbitMQ\n    PaymentSvc --\x3e RabbitMQ\n    RabbitMQ --\x3e PaymentProc\n\n    %% Monitoring\n    RideSvc -.Metrics.-> Metrics\n    LocationSvc -.Logs.-> Logs\n    MatchSvc -.Traces.-> Tracing\n\n    style RiderApp fill:#e1f5ff\n    style DriverApp fill:#e1f5ff\n    style Kafka fill:#ffe1f5\n    style RedisGeo fill:#fff4e1\n    style QuadTree fill:#fff4e1\n    style Maps fill:#e1ffe1'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-data-models",children:"7. Data Models"}),"\n",(0,r.jsx)(n.h3,{id:"postgresql---users--payments",children:"PostgreSQL - Users & Payments"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"users:\n  id (PK) UUID,\n  name VARCHAR(100),\n  email VARCHAR(255) UNIQUE,\n  phone VARCHAR(20) UNIQUE,\n  user_type ENUM('RIDER', 'DRIVER'),\n  rating DECIMAL(3,2),\n  total_rides INT,\n  created_at TIMESTAMP,\n  updated_at TIMESTAMP\n\n  INDEX idx_email (email)\n  INDEX idx_phone (phone)\n\ndrivers:\n  id (PK) UUID,\n  user_id (FK -> users.id),\n  vehicle_id (FK -> vehicles.id),\n  status ENUM('AVAILABLE', 'BUSY', 'OFFLINE'),\n  current_location GEOGRAPHY(POINT),\n  rating DECIMAL(3,2),\n  acceptance_rate DECIMAL(5,2),\n  total_earnings DECIMAL(10,2),\n\n  INDEX idx_status (status)\n  INDEX idx_location GIST(current_location)\n\nvehicles:\n  id (PK) UUID,\n  driver_id (FK -> drivers.id),\n  type ENUM('ECONOMY', 'PREMIUM', 'SUV', 'LUXURY'),\n  make VARCHAR(50),\n  model VARCHAR(50),\n  year INT,\n  license_plate VARCHAR(20),\n  capacity INT,\n  color VARCHAR(20)\n\npayment_methods:\n  id (PK) UUID,\n  user_id (FK -> users.id),\n  type ENUM('CREDIT_CARD', 'DEBIT_CARD', 'WALLET', 'CASH'),\n  last_four VARCHAR(4),\n  is_default BOOLEAN,\n  created_at TIMESTAMP\n\npayments:\n  id (PK) UUID,\n  ride_id (FK -> rides.id),\n  amount DECIMAL(10,2),\n  method_id (FK -> payment_methods.id),\n  status ENUM('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED'),\n  transaction_id VARCHAR(100),\n  processed_at TIMESTAMP,\n\n  INDEX idx_ride (ride_id)\n  INDEX idx_status (status)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"cassandra---rides--location-history",children:"Cassandra - Rides & Location History"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"rides:\n  ride_id UUID (PK),\n  rider_id UUID,\n  driver_id UUID,\n  pickup_lat DOUBLE,\n  pickup_lng DOUBLE,\n  pickup_address TEXT,\n  dropoff_lat DOUBLE,\n  dropoff_lng DOUBLE,\n  dropoff_address TEXT,\n  status TEXT,\n  ride_type TEXT,\n  requested_at TIMESTAMP,\n  accepted_at TIMESTAMP,\n  started_at TIMESTAMP,\n  completed_at TIMESTAMP,\n  fare DECIMAL,\n  distance DOUBLE,\n  duration INT,\n\n  PRIMARY KEY (ride_id)\n\nride_history_by_rider:\n  rider_id UUID (Partition Key),\n  ride_id UUID (Clustering Key),\n  completed_at TIMESTAMP (Clustering Key),\n  driver_id UUID,\n  fare DECIMAL,\n  rating INT,\n\n  PRIMARY KEY ((rider_id), completed_at, ride_id)\n  WITH CLUSTERING ORDER BY (completed_at DESC)\n\nride_history_by_driver:\n  driver_id UUID (Partition Key),\n  ride_id UUID (Clustering Key),\n  completed_at TIMESTAMP (Clustering Key),\n  rider_id UUID,\n  fare DECIMAL,\n  earnings DECIMAL,\n  rating INT,\n\n  PRIMARY KEY ((driver_id), completed_at, ride_id)\n  WITH CLUSTERING ORDER BY (completed_at DESC)\n\ndriver_locations:\n  driver_id UUID (Partition Key),\n  timestamp TIMESTAMP (Clustering Key),\n  latitude DOUBLE,\n  longitude DOUBLE,\n  heading INT,\n  speed DOUBLE,\n\n  PRIMARY KEY ((driver_id), timestamp)\n  WITH CLUSTERING ORDER BY (timestamp DESC)\n\nride_locations:\n  ride_id UUID (Partition Key),\n  timestamp TIMESTAMP (Clustering Key),\n  driver_lat DOUBLE,\n  driver_lng DOUBLE,\n\n  PRIMARY KEY ((ride_id), timestamp)\n  WITH CLUSTERING ORDER BY (timestamp DESC)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"redis-data-structures",children:"Redis Data Structures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Active driver locations (Geospatial)\ndrivers:location -> GEOADD {longitude, latitude, driverId}\n\n# Driver status\ndriver:{driverId}:status -> {AVAILABLE|BUSY|OFFLINE}\n\n# Active ride state (Hash)\nride:{rideId} -> {\n  riderId, driverId, status,\n  pickupLat, pickupLng, dropoffLat, dropoffLng,\n  fare, startTime\n}\n\n# Ride queue for driver (List)\ndriver:{driverId}:ride_requests -> [rideId1, rideId2, ...]\nTTL: 30 seconds\n\n# Driver session (Hash)\nsession:{driverId} -> {\n  websocketId, lastSeen, currentRideId\n}\nTTL: 1 hour\n\n# Surge pricing by region (Hash)\nsurge:{regionId} -> {\n  factor: 1.5,\n  activeRides: 1234,\n  availableDrivers: 456,\n  updatedAt: timestamp\n}\nTTL: 5 minutes\n\n# ETA cache (String)\neta:{pickupGeohash}:{dropoffGeohash} -> estimatedSeconds\nTTL: 10 minutes\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mongodb---ratings--documents",children:"MongoDB - Ratings & Documents"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Ratings collection\n{\n  _id: ObjectId,\n  rideId: "ride-123",\n  raterId: "user-456",\n  rateeId: "driver-789",\n  raterType: "RIDER",\n  score: 5,\n  feedback: "Excellent driver!",\n  tags: ["friendly", "safe_driving"],\n  timestamp: ISODate("2025-10-05T10:00:00Z")\n}\n\n// Driver documents\n{\n  _id: ObjectId,\n  driverId: "driver-789",\n  documents: {\n    license: {\n      number: "DL123456",\n      expiryDate: ISODate("2026-12-31"),\n      verified: true,\n      imageUrl: "s3://..."\n    },\n    insurance: {\n      policyNumber: "INS789012",\n      expiryDate: ISODate("2026-06-30"),\n      verified: true\n    },\n    backgroundCheck: {\n      status: "CLEARED",\n      completedDate: ISODate("2025-01-01")\n    }\n  },\n  earnings: {\n    today: 145.50,\n    thisWeek: 892.75,\n    thisMonth: 3456.20\n  },\n  stats: {\n    totalRides: 1234,\n    acceptanceRate: 0.92,\n    cancellationRate: 0.03,\n    averageRating: 4.85\n  }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"8-deep-dives-10-minutes",children:"8. Deep Dives (~10 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"81-geospatial-indexing--driver-matching",children:"8.1 Geospatial Indexing & Driver Matching"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": How to efficiently find nearby drivers from millions of active drivers?"]}),"\n",(0,r.jsx)(n.h4,{id:"approach-1-geohashing",children:"Approach 1: Geohashing"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Concept"}),": Divide world into grid cells, each with unique string identifier"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Geohash Precision:\n1 char = \xb12500 km\n4 chars = \xb120 km\n6 chars = \xb10.61 km\n8 chars = \xb119 m\n\nExample: San Francisco = "9q8yy"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Strategy:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// When driver updates location\npublic void updateDriverLocation(String driverId, double lat, double lng) {\n    String geohash = GeohashUtils.encode(lat, lng, 6); // 6-char precision\n\n    // Store in Redis Geospatial\n    redisTemplate.opsForGeo().add(\n        "drivers:location",\n        new Point(lng, lat),\n        driverId\n    );\n\n    // Store geohash for quick filtering\n    redisTemplate.opsForSet().add("drivers:geohash:" + geohash, driverId);\n}\n\n// Find nearby drivers\npublic List<Driver> findNearbyDrivers(double lat, double lng, double radiusKm) {\n    // Search current cell and neighbors\n    String centerGeohash = GeohashUtils.encode(lat, lng, 6);\n    List<String> neighbors = GeohashUtils.getNeighbors(centerGeohash);\n\n    Set<String> candidateDriverIds = new HashSet<>();\n    for (String geohash : neighbors) {\n        candidateDriverIds.addAll(\n            redisTemplate.opsForSet().members("drivers:geohash:" + geohash)\n        );\n    }\n\n    // Use Redis GEORADIUS for precise distance filtering\n    GeoResults<RedisGeoCommands.GeoLocation<String>> results =\n        redisTemplate.opsForGeo().radius(\n            "drivers:location",\n            new Circle(new Point(lng, lat),\n                      new Distance(radiusKm, Metrics.KILOMETERS)),\n            GeoRadiusCommandArgs.newGeoRadiusArgs()\n                .includeDistance()\n                .sortAscending()\n                .limit(20)\n        );\n\n    return results.getContent().stream()\n        .map(result -> getDriverDetails(result.getContent().getName()))\n        .collect(Collectors.toList());\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"approach-2-quadtree-in-memory",children:"Approach 2: QuadTree (In-Memory)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Concept"}),": Hierarchical spatial index that divides space into quadrants"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fast in-memory queries (< 10ms)"}),"\n",(0,r.jsx)(n.li,{children:"Efficient for dynamic updates"}),"\n",(0,r.jsx)(n.li,{children:"Better for dense urban areas"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Each QuadTree node contains:\n- Boundary (lat/lng bounds)\n- Drivers in this region (up to capacity, e.g., 100)\n- 4 child quadrants (NW, NE, SW, SE)\n\nWhen node exceeds capacity, split into 4 children\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pseudo Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"class QuadTree {\n    private Boundary boundary;\n    private int capacity = 100;\n    private List<Driver> drivers;\n    private QuadTree[] children; // NW, NE, SW, SE\n\n    public boolean insert(Driver driver) {\n        if (!boundary.contains(driver.location)) return false;\n\n        if (drivers.size() < capacity) {\n            drivers.add(driver);\n            return true;\n        }\n\n        if (children == null) subdivide();\n\n        for (QuadTree child : children) {\n            if (child.insert(driver)) return true;\n        }\n        return false;\n    }\n\n    public List<Driver> queryRange(Circle range) {\n        List<Driver> found = new ArrayList<>();\n\n        if (!boundary.intersects(range)) return found;\n\n        for (Driver driver : drivers) {\n            if (range.contains(driver.location)) {\n                found.add(driver);\n            }\n        }\n\n        if (children != null) {\n            for (QuadTree child : children) {\n                found.addAll(child.queryRange(range));\n            }\n        }\n\n        return found;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"approach-3-google-s2-ubers-choice",children:"Approach 3: Google S2 (Uber's Choice)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why S2?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Handles edge cases near poles and date line"}),"\n",(0,r.jsx)(n.li,{children:"Hierarchical cell decomposition"}),"\n",(0,r.jsx)(n.li,{children:"Better for global coverage"}),"\n",(0,r.jsx)(n.li,{children:"Region covering algorithms"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Concepts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- World divided into 6 cube faces\n- Each face recursively divided into cells\n- Cell IDs are 64-bit integers\n- Enables efficient range queries\n\nCell Levels:\nLevel 10: ~100km\xb2\nLevel 13: ~1km\xb2\nLevel 15: ~100m\xb2\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"82-driver-rider-matching-algorithm",children:"8.2 Driver-Rider Matching Algorithm"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Goals:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Minimize pickup time (rider experience)"}),"\n",(0,r.jsx)(n.li,{children:"Maximize driver utilization (business)"}),"\n",(0,r.jsx)(n.li,{children:"Fair distribution of rides (driver satisfaction)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"matching-strategy",children:"Matching Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Find Candidate Drivers"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Query drivers within 5km radius"}),"\n",(0,r.jsx)(n.li,{children:"Filter by availability, vehicle type, rating > 4.0"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: Rank Drivers"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Score = W1 \xd7 Distance + W2 \xd7 (1 - AcceptanceRate) + W3 \xd7 (1 - Rating/5)\n\nWeights:\nW1 = 0.7 (distance most important)\nW2 = 0.2 (prefer reliable drivers)\nW3 = 0.1 (prefer highly rated drivers)\n\nLower score = better match\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Dispatch"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send ride request to top 5 drivers simultaneously"}),"\n",(0,r.jsx)(n.li,{children:"First to accept gets the ride"}),"\n",(0,r.jsx)(n.li,{children:"Timeout after 15 seconds, move to next batch"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Fallback"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If no acceptance, expand radius to 10km"}),"\n",(0,r.jsx)(n.li,{children:"Adjust fare estimation with surge pricing"}),"\n",(0,r.jsx)(n.li,{children:"Notify rider of longer wait time"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"handling-edge-cases",children:"Handling Edge Cases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"No Drivers Available:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add rider to waiting queue"}),"\n",(0,r.jsx)(n.li,{children:"Monitor for newly available drivers"}),"\n",(0,r.jsx)(n.li,{children:"Send ETA updates every 30 seconds"}),"\n",(0,r.jsx)(n.li,{children:"Option to increase offered fare"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Driver Cancellation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatically re-match with next best driver"}),"\n",(0,r.jsx)(n.li,{children:"Track cancellation rate, penalize habitual cancelers"}),"\n",(0,r.jsx)(n.li,{children:"Offer compensation to rider (credit/discount)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rider Cancellation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Free cancellation within 2 minutes"}),"\n",(0,r.jsx)(n.li,{children:"Cancellation fee after 2 minutes"}),"\n",(0,r.jsx)(n.li,{children:"Full fee if driver already arrived"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"83-real-time-location-tracking",children:"8.3 Real-time Location Tracking"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Challenge"}),": Track 2M drivers sending location updates every 4 seconds = 500K updates/sec"]}),"\n",(0,r.jsx)(n.h4,{id:"websocket-architecture",children:"WebSocket Architecture"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Connection Management:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class LocationWebSocketHandler extends TextWebSocketHandler {\n\n    private Map<String, WebSocketSession> driverSessions = new ConcurrentHashMap<>();\n\n    @Override\n    public void afterConnectionEstablished(WebSocketSession session) {\n        String driverId = extractDriverId(session);\n        driverSessions.put(driverId, session);\n\n        // Store session info in Redis\n        redisTemplate.opsForHash().put(\n            "driver:sessions",\n            driverId,\n            session.getId()\n        );\n    }\n\n    @Override\n    protected void handleTextMessage(WebSocketSession session, TextMessage message) {\n        LocationUpdate update = parseLocationUpdate(message);\n\n        // Async processing - don\'t block WebSocket thread\n        locationService.processLocationUpdate(update);\n    }\n\n    @Override\n    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {\n        String driverId = extractDriverId(session);\n        driverSessions.remove(driverId);\n\n        // Mark driver as offline if unexpected disconnect\n        if (status.getCode() != 1000) { // Not normal closure\n            driverService.markOffline(driverId);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Location Processing Pipeline:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1. WebSocket receives location\n2. Validate & sanitize data\n3. Update Redis Geospatial index (< 1ms)\n4. Publish to Kafka topic (async)\n5. If driver on active ride:\n   - Send to rider via WebSocket\n   - Update ETA calculation\n6. Background: Persist to Cassandra (batch every 30s)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Optimization Techniques:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Batching:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\npublic class LocationBatchProcessor {\n\n    private List<LocationUpdate> batch = new ArrayList<>();\n\n    @Scheduled(fixedRate = 30000) // Every 30 seconds\n    public void flushBatch() {\n        if (batch.isEmpty()) return;\n\n        // Batch write to Cassandra\n        BatchStatement batchStatement = new BatchStatement();\n        for (LocationUpdate update : batch) {\n            batchStatement.add(createInsertStatement(update));\n        }\n\n        cassandraTemplate.execute(batchStatement);\n        batch.clear();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Data Compression:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Protocol Buffers instead of JSON (50% size reduction)"}),"\n",(0,r.jsx)(n.li,{children:"Delta encoding (send only changes from last position)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Connection Pooling:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintain persistent WebSocket connections"}),"\n",(0,r.jsx)(n.li,{children:"Reuse connections to reduce handshake overhead"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Geographic Sharding:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Route drivers to nearest data center"}),"\n",(0,r.jsx)(n.li,{children:"San Francisco drivers \u2192 US-West servers"}),"\n",(0,r.jsx)(n.li,{children:"New York drivers \u2192 US-East servers"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"84-eta-calculation--routing",children:"8.4 ETA Calculation & Routing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Components:"})}),"\n",(0,r.jsx)(n.h4,{id:"1-static-route-calculation",children:"1. Static Route Calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Input: Pickup location, Dropoff location\nOutput: Distance, Estimated time, Route polyline\n\nUses: Google Maps Directions API / OSRM (Open Source Routing Machine)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-real-time-traffic-integration",children:"2. Real-time Traffic Integration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Approach:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Query current traffic conditions from Maps API"}),"\n",(0,r.jsx)(n.li,{children:"Apply traffic multiplier to base ETA"}),"\n",(0,r.jsx)(n.li,{children:"Cache frequent routes (15-minute TTL)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Formula:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"ETA = (Distance / AverageSpeed) \xd7 TrafficMultiplier\n\nWhere:\nAverageSpeed = Historical average for this route at this time\nTrafficMultiplier = Current traffic / Normal traffic (1.0 - 3.0)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-historical-data-learning",children:"3. Historical Data Learning"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Strategy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store actual vs. estimated times for completed rides"}),"\n",(0,r.jsx)(n.li,{children:"Train ML model to predict corrections"}),"\n",(0,r.jsx)(n.li,{children:"Apply learned adjustments to future ETAs"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features for ML Model:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Route distance and duration"}),"\n",(0,r.jsx)(n.li,{children:"Time of day, day of week"}),"\n",(0,r.jsx)(n.li,{children:"Weather conditions"}),"\n",(0,r.jsx)(n.li,{children:"Local events (concerts, sports games)"}),"\n",(0,r.jsx)(n.li,{children:"Historical traffic patterns"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"4-continuous-eta-updates",children:"4. Continuous ETA Updates"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"During Ride:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Scheduled(fixedRate = 30000) // Every 30 seconds\npublic void updateActiveRideETAs() {\n    List<ActiveRide> rides = getActiveRides();\n\n    rides.parallelStream().forEach(ride -> {\n        Location currentLocation = ride.getDriver().getCurrentLocation();\n        Location destination = ride.getDropoffLocation();\n\n        // Recalculate with current position\n        ETA newETA = routingService.calculateETA(\n            currentLocation,\n            destination,\n            true // includeTraffic\n        );\n\n        // Update rider if significant change (> 2 minutes)\n        if (Math.abs(newETA.getMinutes() - ride.getCurrentETA()) > 2) {\n            notificationService.sendETAUpdate(ride.getRiderId(), newETA);\n            ride.setCurrentETA(newETA.getMinutes());\n        }\n    });\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"85-surge-pricing-algorithm",children:"8.5 Surge Pricing Algorithm"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Goal"}),": Balance supply and demand by adjusting prices dynamically"]}),"\n",(0,r.jsx)(n.h4,{id:"supply-demand-calculation",children:"Supply-Demand Calculation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Per Geographic Cell (every 1-2 minutes):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Scheduled(fixedRate = 120000) // Every 2 minutes\npublic void calculateSurgePricing() {\n    List<String> regions = getAllRegions(); // Major cities divided into grids\n\n    regions.parallelStream().forEach(regionId -> {\n        // Count available drivers in region\n        long availableDrivers = locationService.countDriversInRegion(\n            regionId,\n            DriverStatus.AVAILABLE\n        );\n\n        // Count active rides\n        long activeRides = rideService.countActiveRidesInRegion(regionId);\n\n        // Count waiting ride requests\n        long waitingRequests = rideService.countWaitingRequestsInRegion(regionId);\n\n        // Calculate demand\n        long demand = activeRides + waitingRequests;\n\n        // Calculate surge factor\n        double surgeFactor = calculateSurgeFactor(availableDrivers, demand);\n\n        // Store in Redis\n        redisTemplate.opsForHash().put(\n            "surge:factors",\n            regionId,\n            surgeFactor\n        );\n\n        // Notify riders in region about surge\n        if (surgeFactor > 1.5) {\n            notificationService.notifySurgeInRegion(regionId, surgeFactor);\n        }\n    });\n}\n\nprivate double calculateSurgeFactor(long supply, long demand) {\n    if (supply == 0) return 3.0; // Max surge\n\n    double ratio = (double) demand / supply;\n\n    if (ratio < 1.0) return 1.0;      // No surge\n    else if (ratio < 1.5) return 1.2;\n    else if (ratio < 2.0) return 1.5;\n    else if (ratio < 3.0) return 2.0;\n    else if (ratio < 4.0) return 2.5;\n    else return 3.0;                   // Max surge\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"surge-notification-strategy",children:"Surge Notification Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Transparent Communication:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Show surge multiplier before requesting"}),"\n",(0,r.jsx)(n.li,{children:'Explain why surge is active ("High demand in your area")'}),"\n",(0,r.jsx)(n.li,{children:"Offer alternatives (wait for lower price, try different pickup location)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Gradual Rollout:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Don't apply full surge immediately"}),"\n",(0,r.jsx)(n.li,{children:"Ramp up over 5-10 minutes to avoid shock"}),"\n",(0,r.jsx)(n.li,{children:"Helps regulate demand naturally"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Geographic Boundaries:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Avoid sharp surge boundaries"}),"\n",(0,r.jsx)(n.li,{children:"Smooth transitions between regions"}),"\n",(0,r.jsx)(n.li,{children:"Suggest nearby lower-surge pickup locations"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"86-payment-processing",children:"8.6 Payment Processing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Flow:"})}),"\n",(0,r.jsx)(n.h4,{id:"1-pre-authorization",children:"1. Pre-authorization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"When ride starts:\n- Put hold on rider's payment method\n- Amount = Estimated fare \xd7 1.5 (buffer for longer routes)\n- Hold released after final charge\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-fare-calculation",children:"2. Fare Calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Final Fare = BaseFare + (Distance \xd7 PerKmRate) + (Duration \xd7 PerMinuteRate) \xd7 SurgeFactor\n\nAdditional charges:\n- Toll fees (auto-detected via GPS)\n- Airport fees\n- Cancellation fee\n- Tips (optional)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-payment-execution-async",children:"3. Payment Execution (Async)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class PaymentService {\n\n    public void processRidePayment(String rideId) {\n        Ride ride = rideRepository.findById(rideId);\n\n        PaymentRequest request = PaymentRequest.builder()\n            .rideId(rideId)\n            .amount(ride.getFare())\n            .riderId(ride.getRiderId())\n            .paymentMethodId(ride.getPaymentMethodId())\n            .build();\n\n        // Send to payment queue (non-blocking)\n        kafkaTemplate.send("payment-requests", request);\n    }\n}\n\n@KafkaListener(topics = "payment-requests")\npublic void processPaymentAsync(PaymentRequest request) {\n    try {\n        // Call payment gateway (Stripe/Braintree)\n        PaymentResponse response = paymentGateway.charge(\n            request.getPaymentMethodId(),\n            request.getAmount(),\n            request.getRideId()\n        );\n\n        if (response.isSuccess()) {\n            // Update payment status\n            paymentRepository.markCompleted(\n                request.getRideId(),\n                response.getTransactionId()\n            );\n\n            // Calculate driver earnings (deduct commission)\n            double commission = request.getAmount() * 0.25; // 25% commission\n            double driverEarnings = request.getAmount() - commission;\n\n            // Update driver balance\n            driverWalletService.credit(\n                request.getDriverId(),\n                driverEarnings\n            );\n\n            // Send receipt\n            receiptService.sendReceipt(request.getRideId());\n\n        } else {\n            // Retry logic\n            handlePaymentFailure(request);\n        }\n\n    } catch (Exception e) {\n        // Dead letter queue for manual review\n        kafkaTemplate.send("payment-failures", request);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"4-retry--failure-handling",children:"4. Retry & Failure Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Retry Strategy:\n- Attempt 1: Immediate\n- Attempt 2: After 5 minutes\n- Attempt 3: After 1 hour\n- Attempt 4: After 24 hours\n\nIf all fail:\n- Mark account with outstanding balance\n- Block future rides until payment resolved\n- Send notifications to update payment method\n"})}),"\n",(0,r.jsx)(n.h4,{id:"5-driver-payouts",children:"5. Driver Payouts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Options:\n- Instant payout (within 30 minutes, 1% fee)\n- Daily automatic transfer (free)\n- Weekly transfer (default)\n\nSecurity:\n- Bank account verification required\n- Anti-fraud checks\n- Minimum payout threshold ($10)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"87-notification-system",children:"8.7 Notification System"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Types of Notifications:"})}),"\n",(0,r.jsx)(n.h4,{id:"1-push-notifications-mobile",children:"1. Push Notifications (Mobile)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"High Priority (Immediate):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ride request for drivers"}),"\n",(0,r.jsx)(n.li,{children:"Driver accepted ride (for riders)"}),"\n",(0,r.jsx)(n.li,{children:"Driver arrived at pickup"}),"\n",(0,r.jsx)(n.li,{children:"Ride started/completed"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Medium Priority (Can be delayed 10-30s):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ETA updates"}),"\n",(0,r.jsx)(n.li,{children:"Surge pricing alerts"}),"\n",(0,r.jsx)(n.li,{children:"Payment confirmations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Low Priority (Batch):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Promotional offers"}),"\n",(0,r.jsx)(n.li,{children:"Weekly summaries"}),"\n",(0,r.jsx)(n.li,{children:"Rating reminders"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-sms-notifications",children:"2. SMS Notifications"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to use:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Critical updates if app not active"}),"\n",(0,r.jsx)(n.li,{children:"Verification codes"}),"\n",(0,r.jsx)(n.li,{children:"Emergency situations"}),"\n",(0,r.jsx)(n.li,{children:"Payment failures"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"3-in-app-notifications",children:"3. In-App Notifications"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Real-time updates:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Driver location on map"}),"\n",(0,r.jsx)(n.li,{children:"Chat messages"}),"\n",(0,r.jsx)(n.li,{children:"Route changes"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class NotificationService {\n\n    public void notifyDriverOfRideRequest(String driverId, Ride ride) {\n        // Multi-channel approach\n\n        // 1. Push notification (primary)\n        PushNotification push = PushNotification.builder()\n            .title("New Ride Request")\n            .body(String.format("Pickup in %d min", ride.getPickupETA()))\n            .data(Map.of("rideId", ride.getRideId(), "type", "RIDE_REQUEST"))\n            .priority("high")\n            .ttl(15) // 15 seconds to accept\n            .build();\n\n        fcmService.send(driverId, push);\n\n        // 2. WebSocket (if connected)\n        if (websocketService.isConnected(driverId)) {\n            websocketService.send(driverId, ride);\n        }\n\n        // 3. SMS fallback (if no response in 10 seconds)\n        scheduler.schedule(() -> {\n            if (!rideService.isAccepted(ride.getRideId())) {\n                smsService.send(\n                    getDriverPhone(driverId),\n                    "You have a new ride request. Open app to accept."\n                );\n            }\n        }, 10, TimeUnit.SECONDS);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notification Preferences:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Allow users to configure:\n- Notification types to receive\n- Quiet hours (no promotional messages)\n- Channel preferences (push vs. SMS vs. email)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"88-fraud-detection--safety",children:"8.8 Fraud Detection & Safety"}),"\n",(0,r.jsx)(n.h4,{id:"1-fraud-detection",children:"1. Fraud Detection"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common Fraud Patterns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"GPS spoofing (fake location)"}),"\n",(0,r.jsx)(n.li,{children:"Account sharing"}),"\n",(0,r.jsx)(n.li,{children:"Fake rides (driver and rider collude)"}),"\n",(0,r.jsx)(n.li,{children:"Payment fraud (stolen cards)"}),"\n",(0,r.jsx)(n.li,{children:"Promotional code abuse"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Detection Mechanisms:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class FraudDetectionService {\n\n    public FraudScore evaluateRide(Ride ride) {\n        double score = 0.0;\n        List<String> flags = new ArrayList<>();\n\n        // Check 1: Impossible speed\n        if (ride.getAverageSpeed() > 150) { // km/h\n            score += 0.3;\n            flags.add("IMPOSSIBLE_SPEED");\n        }\n\n        // Check 2: GPS jumps\n        List<Location> path = getLocationHistory(ride);\n        if (hasGPSJumps(path)) {\n            score += 0.4;\n            flags.add("GPS_ANOMALY");\n        }\n\n        // Check 3: Route deviation\n        double deviation = calculateRouteDeviation(ride);\n        if (deviation > 0.5) { // 50% longer than optimal\n            score += 0.2;\n            flags.add("ROUTE_DEVIATION");\n        }\n\n        // Check 4: Unusual timing\n        if (ride.getDuration() < 2 && ride.getDistance() > 10) {\n            score += 0.5;\n            flags.add("TIMING_MISMATCH");\n        }\n\n        // Check 5: Account behavior\n        if (isNewAccount(ride.getRiderId()) && ride.getFare() > 100) {\n            score += 0.2;\n            flags.add("NEW_ACCOUNT_HIGH_FARE");\n        }\n\n        return FraudScore.builder()\n            .score(score)\n            .flags(flags)\n            .action(score > 0.7 ? "BLOCK" : score > 0.4 ? "REVIEW" : "ALLOW")\n            .build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Actions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Score < 0.4: Allow"}),"\n",(0,r.jsx)(n.li,{children:"Score 0.4-0.7: Flag for manual review"}),"\n",(0,r.jsx)(n.li,{children:"Score > 0.7: Block payment, investigate account"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"2-safety-features",children:"2. Safety Features"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Real-time Safety:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Share trip with friends/family"}),"\n",(0,r.jsx)(n.li,{children:"Emergency button (contacts police/emergency services)"}),"\n",(0,r.jsx)(n.li,{children:"In-app safety toolkit"}),"\n",(0,r.jsx)(n.li,{children:"Two-way ratings"}),"\n",(0,r.jsx)(n.li,{children:"Background checks for drivers"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trip Monitoring:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class SafetyMonitoringService {\n\n    @Scheduled(fixedRate = 60000) // Every minute\n    public void monitorActiveTripsSafety() {\n        List<Ride> activeRides = rideService.getActiveRides();\n\n        activeRides.forEach(ride -> {\n            // Check for unusual stops\n            if (hasUnexpectedStop(ride)) {\n                alertSafetyTeam(ride, "UNEXPECTED_STOP");\n            }\n\n            // Check for route deviation\n            if (isOffRoute(ride)) {\n                notifyRider(ride.getRiderId(), "Your driver took a different route");\n            }\n\n            // Check for extended duration\n            if (isOvertime(ride)) {\n                alertSafetyTeam(ride, "EXTENDED_DURATION");\n            }\n        });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Driver Verification:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Government-issued ID"}),"\n",(0,r.jsx)(n.li,{children:"Background check (criminal record)"}),"\n",(0,r.jsx)(n.li,{children:"Driving record check"}),"\n",(0,r.jsx)(n.li,{children:"Vehicle inspection"}),"\n",(0,r.jsx)(n.li,{children:"Insurance verification"}),"\n",(0,r.jsx)(n.li,{children:"Annual re-verification"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"89-analytics--business-intelligence",children:"8.9 Analytics & Business Intelligence"}),"\n",(0,r.jsx)(n.h4,{id:"real-time-dashboards",children:"Real-time Dashboards"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Operations Dashboard:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Metrics displayed:\n- Active rides (current moment)\n- Available drivers by region\n- Average wait time\n- Surge pricing heatmap\n- System health (API latency, error rates)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Business Metrics:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- Gross booking value (GBV)\n- Take rate (commission %)\n- Customer acquisition cost (CAC)\n- Lifetime value (LTV)\n- Driver churn rate\n- Rider retention rate\n"})}),"\n",(0,r.jsx)(n.h4,{id:"data-pipeline",children:"Data Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Real-time Stream:\nLocation events \u2192 Kafka \u2192 Spark Streaming \u2192 Redis/Dashboard\n\nBatch Processing:\nRide events \u2192 Kafka \u2192 S3 (data lake) \u2192 Spark \u2192 Data Warehouse\n                                       \u2193\n                                    ML Training\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Analytics Queries:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Most profitable routes\nSELECT\n  pickup_location,\n  dropoff_location,\n  AVG(fare) as avg_fare,\n  COUNT(*) as ride_count,\n  SUM(fare) as total_revenue\nFROM rides\nWHERE completed_at > NOW() - INTERVAL '30 days'\nGROUP BY pickup_location, dropoff_location\nORDER BY total_revenue DESC\nLIMIT 100;\n\n-- Driver performance\nSELECT\n  driver_id,\n  COUNT(*) as total_rides,\n  AVG(rating) as avg_rating,\n  AVG(acceptance_rate) as acceptance_rate,\n  SUM(earnings) as total_earnings\nFROM driver_stats\nWHERE date >= CURRENT_DATE - 7\nGROUP BY driver_id\nHAVING total_rides > 20\nORDER BY avg_rating DESC;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"machine-learning-applications",children:"Machine Learning Applications"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Demand Prediction:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Predict ride requests for next hour by region"}),"\n",(0,r.jsx)(n.li,{children:"Proactively position drivers"}),"\n",(0,r.jsx)(n.li,{children:"Optimize driver supply"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Dynamic Pricing:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ML model predicts optimal surge factor"}),"\n",(0,r.jsx)(n.li,{children:"Considers: weather, events, historical patterns"}),"\n",(0,r.jsx)(n.li,{children:"Maximizes revenue while maintaining service quality"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. ETA Prediction:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Improve accuracy over time"}),"\n",(0,r.jsx)(n.li,{children:"Learn from actual vs. estimated times"}),"\n",(0,r.jsx)(n.li,{children:"Factor in local patterns"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Fraud Detection:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Anomaly detection models"}),"\n",(0,r.jsx)(n.li,{children:"Pattern recognition"}),"\n",(0,r.jsx)(n.li,{children:"Risk scoring"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. Driver-Rider Matching:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Predict best matches"}),"\n",(0,r.jsx)(n.li,{children:"Optimize for completion rate"}),"\n",(0,r.jsx)(n.li,{children:"Minimize cancellations"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"810-scalability--performance-optimizations",children:"8.10 Scalability & Performance Optimizations"}),"\n",(0,r.jsx)(n.h4,{id:"database-sharding",children:"Database Sharding"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PostgreSQL (Users & Payments):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Shard Key: user_id (hash-based)\n\nShard 1: user_id % 10 = 0\nShard 2: user_id % 10 = 1\n...\nShard 10: user_id % 10 = 9\n\nBenefits:\n- Distribute write load\n- Parallel query execution\n- Isolate failures\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cassandra (Rides & Locations):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Partition Key: rider_id or driver_id\nClustering Key: timestamp\n\nNatural sharding by design\n- Each user's data on separate partition\n- Time-based ordering within partition\n- Efficient range queries\n"})}),"\n",(0,r.jsx)(n.h4,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-Level Cache:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"L1: Application Cache (Caffeine)\n    - Driver details\n    - Vehicle info\n    - User profiles\n    TTL: 5 minutes, Size: 10K entries\n\nL2: Distributed Cache (Redis)\n    - Active ride states\n    - Driver locations\n    - Surge pricing\n    TTL: Varies by data type\n\nL3: CDN (CloudFront)\n    - Map tiles\n    - Static assets\n    - Profile images\n    TTL: 24 hours\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cache Warming:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Scheduled(cron = "0 0 * * * *") // Every hour\npublic void warmCache() {\n    // Pre-load top active drivers\n    List<String> activeDriverIds = driverService.getTopActiveDrivers(1000);\n\n    activeDriverIds.forEach(driverId -> {\n        Driver driver = driverRepository.findById(driverId);\n        redisTemplate.opsForValue().set(\n            "driver:" + driverId,\n            driver,\n            1,\n            TimeUnit.HOURS\n        );\n    });\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"read-replicas",children:"Read Replicas"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PostgreSQL:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 Primary (writes)"}),"\n",(0,r.jsx)(n.li,{children:"5 Read Replicas (reads)"}),"\n",(0,r.jsx)(n.li,{children:"Route reads to nearest replica"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Geographic Distribution:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"US-East: 2 replicas"}),"\n",(0,r.jsx)(n.li,{children:"US-West: 2 replicas"}),"\n",(0,r.jsx)(n.li,{children:"EU-West: 1 replica"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// HikariCP configuration\nspring.datasource.hikari.maximum-pool-size=100\nspring.datasource.hikari.minimum-idle=20\nspring.datasource.hikari.connection-timeout=30000\nspring.datasource.hikari.idle-timeout=600000\nspring.datasource.hikari.max-lifetime=1800000\n"})}),"\n",(0,r.jsx)(n.h4,{id:"api-rate-limiting",children:"API Rate Limiting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Per User Tier:\n- Free tier: 100 requests/minute\n- Driver: 500 requests/minute\n- Internal services: No limit\n\nPer Endpoint:\n- POST /rides/request: 10/minute per user\n- GET /rides/{id}: 100/minute per user\n- POST /drivers/location: Unlimited (critical path)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"load-balancing",children:"Load Balancing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Geographic Routing:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"DNS-based routing:\n- us-west.uber.com \u2192 US-West data center\n- us-east.uber.com \u2192 US-East data center\n- eu.uber.com \u2192 EU data center\n\nLatency-based routing:\n- Route to nearest healthy endpoint\n- Automatic failover on outage\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Service Mesh (Istio):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic load balancing"}),"\n",(0,r.jsx)(n.li,{children:"Circuit breaking"}),"\n",(0,r.jsx)(n.li,{children:"Retry logic"}),"\n",(0,r.jsx)(n.li,{children:"Canary deployments"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"811-disaster-recovery--high-availability",children:"8.11 Disaster Recovery & High Availability"}),"\n",(0,r.jsx)(n.h4,{id:"multi-region-architecture",children:"Multi-Region Architecture"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Active-Active Setup:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Region 1 (US-West):\n- Primary for West Coast users\n- Handles 40% of traffic\n- Full replica of databases\n\nRegion 2 (US-East):\n- Primary for East Coast users\n- Handles 40% of traffic\n- Full replica of databases\n\nRegion 3 (EU-West):\n- Primary for European users\n- Handles 20% of traffic\n- Full replica of databases\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cross-Region Replication:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"PostgreSQL:\n- Streaming replication (async)\n- RPO: 5 seconds\n- RTO: 2 minutes (automatic failover)\n\nCassandra:\n- Multi-datacenter setup\n- Consistency: LOCAL_QUORUM\n- Automatic data distribution\n\nRedis:\n- Redis Cluster with replicas\n- Sentinel for automatic failover\n"})}),"\n",(0,r.jsx)(n.h4,{id:"backup-strategy",children:"Backup Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Database Backups:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- Full backup: Daily at 2 AM\n- Incremental: Every 4 hours\n- Point-in-time recovery: 30 days\n- Geographic replication: 3 regions\n- Retention: 90 days\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Critical Data:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- User accounts: 3 copies across regions\n- Payment methods: Encrypted, 5 copies\n- Ride history: 2 copies + cold storage (S3 Glacier)\n- Location history: 1 copy + cold storage after 90 days\n"})}),"\n",(0,r.jsx)(n.h4,{id:"failover-procedures",children:"Failover Procedures"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Database Failover:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1. Health check detects failure\n2. Promote read replica to primary (automatic)\n3. Update DNS/load balancer\n4. Redirect writes to new primary\n5. Alert operations team\n\nTotal time: < 2 minutes\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Service Failover:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"1. Circuit breaker detects service failure\n2. Route traffic to healthy instances\n3. Auto-scale replacement instances\n4. Monitor recovery\n\nTotal time: < 30 seconds\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.h3,{id:"key-design-decisions",children:"Key Design Decisions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Geospatial Indexing"}),": Redis Geospatial + S2 cells for efficient driver queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-time Communication"}),": WebSocket for location updates, push notifications"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-Driven Architecture"}),": Kafka for location events, ride events, payments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Polyglot Persistence"}),": PostgreSQL (transactional), Cassandra (time-series), Redis (real-time)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Geographic Sharding"}),": Route users to nearest data center for low latency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Async Payment Processing"}),": Non-blocking payment flow with retry logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Pricing"}),": Real-time surge calculation based on supply-demand"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hybrid Matching"}),": Combine distance, ratings, acceptance rate for optimal matching"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scalability-achieved",children:"Scalability Achieved"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 100M users, 10M rides/day"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Driver matching in < 3 seconds"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 500K location updates/second"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Real-time tracking with < 5s latency"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 99.99% uptime for core services"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Global presence with multi-region deployment"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"trade-offs--considerations",children:"Trade-offs & Considerations"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Decision"}),(0,r.jsx)(n.th,{children:"Pro"}),(0,r.jsx)(n.th,{children:"Con"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"WebSocket for locations"}),(0,r.jsx)(n.td,{children:"Real-time updates, low latency"}),(0,r.jsx)(n.td,{children:"Stateful connections, scaling complexity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Redis Geospatial"}),(0,r.jsx)(n.td,{children:"Fast queries (< 10ms)"}),(0,r.jsx)(n.td,{children:"Limited to 2D coordinates, memory intensive"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Async payment processing"}),(0,r.jsx)(n.td,{children:"Non-blocking, better UX"}),(0,r.jsx)(n.td,{children:"Eventual consistency, retry complexity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Multi-region active-active"}),(0,r.jsx)(n.td,{children:"Low latency globally, HA"}),(0,r.jsx)(n.td,{children:"Data consistency challenges, higher cost"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Cassandra for locations"}),(0,r.jsx)(n.td,{children:"High write throughput"}),(0,r.jsx)(n.td,{children:"Eventually consistent, limited queries"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Surge pricing"}),(0,r.jsx)(n.td,{children:"Balances supply-demand"}),(0,r.jsx)(n.td,{children:"Potential rider dissatisfaction"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GPS tracking"}),(0,r.jsx)(n.td,{children:"Accurate routing, safety"}),(0,r.jsx)(n.td,{children:"Privacy concerns, battery drain"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Autonomous Vehicles"}),": Integration with self-driving car fleets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uber Air"}),": Flying taxi services (VTOL aircraft)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-modal Transport"}),": Combine ride-hailing with public transit, bikes, scooters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Subscription Plans"}),": Unlimited rides for flat monthly fee"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Carbon Neutral Rides"}),": EV prioritization, carbon offset programs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advanced Safety"}),": AI-powered incident detection, dashcam integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Blockchain Payments"}),": Cryptocurrency support, smart contracts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Predictive Pickup"}),": AI suggests optimal pickup time and location"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shared Autonomous Shuttles"}),": Fixed routes with dynamic stops"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Healthcare Rides"}),": Non-emergency medical transport integration"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"additional-considerations",children:"Additional Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"data-privacy--compliance",children:"Data Privacy & Compliance"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"GDPR Compliance:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Right to data portability (export user data)"}),"\n",(0,r.jsx)(n.li,{children:"Right to be forgotten (delete user data)"}),"\n",(0,r.jsx)(n.li,{children:"Consent for location tracking"}),"\n",(0,r.jsx)(n.li,{children:"Encrypted data storage"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Location Privacy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Anonymize historical location data after 7 days"}),"\n",(0,r.jsx)(n.li,{children:"Truncate precise coordinates for analytics"}),"\n",(0,r.jsx)(n.li,{children:"Allow users to delete location history"}),"\n",(0,r.jsx)(n.li,{children:"Transparent privacy policy"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"accessibility-features",children:"Accessibility Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Voice-guided navigation for visually impaired drivers"}),"\n",(0,r.jsx)(n.li,{children:"Wheelchair-accessible vehicle options"}),"\n",(0,r.jsx)(n.li,{children:"Deaf/hard-of-hearing communication tools"}),"\n",(0,r.jsx)(n.li,{children:"Multiple language support (100+ languages)"}),"\n",(0,r.jsx)(n.li,{children:"Text-to-speech for notifications"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"environmental-impact",children:"Environmental Impact"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sustainability Initiatives:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Electric vehicle incentives for drivers"}),"\n",(0,r.jsx)(n.li,{children:"Carbon footprint tracking"}),"\n",(0,r.jsx)(n.li,{children:"Green ride options (EVs only)"}),"\n",(0,r.jsx)(n.li,{children:"Ride-sharing to reduce emissions (UberPool)"}),"\n",(0,r.jsx)(n.li,{children:"Offset programs for carbon-neutral rides"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);