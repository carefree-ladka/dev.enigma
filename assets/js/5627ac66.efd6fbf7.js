"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2271],{2238:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var t=r(4848),l=r(8453);const o={},s="DFS & BFS on HTML",d={id:"WebDev/HTML5/BFSDFS",title:"DFS & BFS on HTML",description:"Find all descendants of a given element (DFS)",source:"@site/docs/WebDev/HTML5/BFSDFS.mdx",sourceDirName:"WebDev/HTML5",slug:"/WebDev/HTML5/BFSDFS",permalink:"/js.enigma/docs/WebDev/HTML5/BFSDFS",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/HTML5/BFSDFS.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tailwind CSS Cheatsheet",permalink:"/js.enigma/docs/WebDev/CSS3/TailwindCSS"},next:{title:"Browser Hinting Guide",permalink:"/js.enigma/docs/WebDev/HTML5/BrowserHinting"}},i={},a=[{value:"Find all descendants of a given element (DFS)",id:"find-all-descendants-of-a-given-element-dfs",level:2},{value:"Find all ancestors of a given element (DFS)",id:"find-all-ancestors-of-a-given-element-dfs",level:2},{value:"Level-order traversal of the DOM tree (BFS)",id:"level-order-traversal-of-the-dom-tree-bfs",level:2},{value:"Find all siblings of a given element (BFS/DFS)",id:"find-all-siblings-of-a-given-element-bfsdfs",level:2},{value:"Find all leaf nodes in the DOM (DFS)",id:"find-all-leaf-nodes-in-the-dom-dfs",level:2},{value:"Find the shortest path between two elements (BFS)",id:"find-the-shortest-path-between-two-elements-bfs",level:2},{value:"Detect cycles in the DOM (DFS)",id:"detect-cycles-in-the-dom-dfs",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dfs--bfs-on-html",children:"DFS & BFS on HTML"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"// DFS Implementation for DOM traversal\r\nfunction dfsTraversal(rootNode, callback) {\r\n    if (!rootNode) return;\r\n    \r\n    // Process current node\r\n    callback(rootNode);\r\n    \r\n    // Recursively process all child nodes\r\n    const children = rootNode.children;\r\n    for (let i = 0; i < children.length; i++) {\r\n        dfsTraversal(children[i], callback);\r\n    }\r\n}\r\n\r\n// BFS Implementation for DOM traversal\r\nfunction bfsTraversal(rootNode, callback) {\r\n    if (!rootNode) return;\r\n    \r\n    const queue = [rootNode];\r\n    \r\n    while (queue.length > 0) {\r\n        const currentNode = queue.shift();\r\n        callback(currentNode);\r\n        \r\n        // Add all children to queue\r\n        const children = currentNode.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            queue.push(children[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// Utility function to get element path\r\nfunction getElementPath(element) {\r\n    if (!element) return '';\r\n    \r\n    let path = element.tagName.toLowerCase();\r\n    if (element.id) {\r\n        path += `#${element.id}`;\r\n    } else if (element.className) {\r\n        path += `.${element.className.split(' ').join('.')}`;\r\n    }\r\n    return path;\r\n}\r\n\r\n// Example usage with practical applications\r\n\r\n// 1. Find all elements with a specific class\r\nfunction findElementsByClass(rootNode, className) {\r\n    const results = [];\r\n    \r\n    bfsTraversal(rootNode, (node) => {\r\n        if (node.classList && node.classList.contains(className)) {\r\n            results.push(node);\r\n        }\r\n    });\r\n    \r\n    return results;\r\n}\r\n\r\n// 2. Create a DOM tree structure representation\r\nfunction createDOMTree(rootNode) {\r\n    let tree = '';\r\n    let depth = 0;\r\n    \r\n    dfsTraversal(rootNode, (node) => {\r\n        const indent = '  '.repeat(depth);\r\n        tree += `${indent}${getElementPath(node)}\\n`;\r\n        depth++;\r\n        \r\n        // Decrease depth after processing all children\r\n        setTimeout(() => depth--, 0);\r\n    });\r\n    \r\n    return tree;\r\n}\r\n\r\n// 3. Find the deepest nested element\r\nfunction findDeepestElement(rootNode) {\r\n    let maxDepth = 0;\r\n    let deepestElement = null;\r\n    \r\n    function dfsWithDepth(node, depth) {\r\n        if (depth > maxDepth) {\r\n            maxDepth = depth;\r\n            deepestElement = node;\r\n        }\r\n        \r\n        const children = node.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            dfsWithDepth(children[i], depth + 1);\r\n        }\r\n    }\r\n    \r\n    dfsWithDepth(rootNode, 0);\r\n    return { element: deepestElement, depth: maxDepth };\r\n}\r\n\r\n// 4. Find all text nodes\r\nfunction findTextNodes(rootNode) {\r\n    const textNodes = [];\r\n    \r\n    function dfsText(node) {\r\n        // Check for text nodes\r\n        if (node.nodeType === 3 && node.textContent.trim().length > 0) {\r\n            textNodes.push(node);\r\n        }\r\n        \r\n        // Process child nodes\r\n        for (let i = 0; i < node.childNodes.length; i++) {\r\n            dfsText(node.childNodes[i]);\r\n        }\r\n    }\r\n    \r\n    dfsText(rootNode);\r\n    return textNodes;\r\n}\r\n\r\n// 5. Calculate DOM tree metrics\r\nfunction getDOMMetrics(rootNode) {\r\n    let metrics = {\r\n        totalElements: 0,\r\n        maxDepth: 0,\r\n        totalTextNodes: 0,\r\n        elementTypes: {}\r\n    };\r\n    \r\n    function dfsMetrics(node, depth) {\r\n        metrics.totalElements++;\r\n        metrics.maxDepth = Math.max(metrics.maxDepth, depth);\r\n        \r\n        // Count element types\r\n        const tagName = node.tagName?.toLowerCase();\r\n        if (tagName) {\r\n            metrics.elementTypes[tagName] = (metrics.elementTypes[tagName] || 0) + 1;\r\n        }\r\n        \r\n        // Count text nodes\r\n        if (node.nodeType === 3 && node.textContent.trim().length > 0) {\r\n            metrics.totalTextNodes++;\r\n        }\r\n        \r\n        // Process children\r\n        const children = node.childNodes;\r\n        for (let i = 0; i < children.length; i++) {\r\n            dfsMetrics(children[i], depth + 1);\r\n        }\r\n    }\r\n    \r\n    dfsMetrics(rootNode, 0);\r\n    return metrics;\r\n}\r\n\r\n// Example Usage:\r\n// HTML structure for testing\r\nconst sampleHTML = `\r\n<div id=\"root\">\r\n    <header class=\"header\">\r\n        <nav>\r\n            <ul>\r\n                <li>Home</li>\r\n                <li>About</li>\r\n            </ul>\r\n        </nav>\r\n    </header>\r\n    <main>\r\n        <article>\r\n            <h1>Title</h1>\r\n            <p>Content</p>\r\n        </article>\r\n    </main>\r\n</div>\r\n`;\r\n\r\n// Create a DOM parser for testing\r\nconst parser = new DOMParser();\r\nconst doc = parser.parseFromString(sampleHTML, 'text/html');\r\nconst root = doc.querySelector('#root');\r\n\r\n// Test examples\r\nconsole.log('DFS Traversal:');\r\ndfsTraversal(root, node => {\r\n    console.log(getElementPath(node));\r\n});\r\n\r\nconsole.log('\\nBFS Traversal:');\r\nbfsTraversal(root, node => {\r\n    console.log(getElementPath(node));\r\n});\r\n\r\nconsole.log('\\nDOM Tree Structure:');\r\nconsole.log(createDOMTree(root));\r\n\r\nconsole.log('\\nDOM Metrics:');\r\nconsole.log(getDOMMetrics(root));\r\n\r\n// Find elements with class\r\nconst headerElements = findElementsByClass(root, 'header');\r\nconsole.log('\\nHeader Elements:', headerElements);\r\n\r\n// Find deepest element\r\nconst deepest = findDeepestElement(root);\r\nconsole.log('\\nDeepest Element:', getElementPath(deepest.element), 'at depth:', deepest.depth);\r\n\r\n// Find text nodes\r\nconst textNodes = findTextNodes(root);\r\nconsole.log('\\nText Nodes:', textNodes.map(node => node.textContent.trim()));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-all-descendants-of-a-given-element-dfs",children:"Find all descendants of a given element (DFS)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Given an element in the DOM (e.g., a div), find all its descendant elements using DFS."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function findDescendantsDFS(element) {\r\n    let result = [];\r\n    function dfs(node) {\r\n        if (!node) return;\r\n        result.push(node);\r\n        for (let child of node.children) {\r\n            dfs(child);\r\n        }\r\n    }\r\n    dfs(element);\r\n    return result;\r\n}\r\n\r\n// Example usage\r\nconst root = document.getElementById('root');\r\nconsole.log(findDescendantsDFS(root));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-all-ancestors-of-a-given-element-dfs",children:"Find all ancestors of a given element (DFS)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Given an element, find all its ancestor elements using DFS."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function findAncestorsDFS(element) {\r\n    let result = [];\r\n    function dfs(node) {\r\n        if (!node) return;\r\n        result.push(node);\r\n        if (node.parentElement) {\r\n            dfs(node.parentElement);\r\n        }\r\n    }\r\n    dfs(element);\r\n    return result.reverse(); // To list ancestors from root to the given element\r\n}\r\n\r\n// Example usage\r\nconst target = document.getElementById('targetElement');\r\nconsole.log(findAncestorsDFS(target));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"level-order-traversal-of-the-dom-tree-bfs",children:"Level-order traversal of the DOM tree (BFS)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Perform a level-order traversal (BFS) of the DOM tree starting from a given element."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function levelOrderTraversalBFS(element) {\r\n    let result = [];\r\n    let queue = [element];\r\n\r\n    while (queue.length > 0) {\r\n        let node = queue.shift();\r\n        result.push(node);\r\n        for (let child of node.children) {\r\n            queue.push(child);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n// Example usage\r\nconst root = document.getElementById('root');\r\nconsole.log(levelOrderTraversalBFS(root));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-all-siblings-of-a-given-element-bfsdfs",children:"Find all siblings of a given element (BFS/DFS)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Given an element, find all its sibling elements."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function findSiblingsBFS(element) {\r\n    const parent = element.parentElement;\r\n    if (!parent) return [];\r\n    const siblings = [];\r\n    for (let child of parent.children) {\r\n        if (child !== element) {\r\n            siblings.push(child);\r\n        }\r\n    }\r\n    return siblings;\r\n}\r\n\r\n// Example usage\r\nconst target = document.getElementById('targetElement');\r\nconsole.log(findSiblingsBFS(target));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-all-leaf-nodes-in-the-dom-dfs",children:"Find all leaf nodes in the DOM (DFS)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function findLeafNodesDFS(element) {\r\n    let leafNodes = [];\r\n    function dfs(node) {\r\n        if (!node) return;\r\n        if (node.children.length === 0) {\r\n            leafNodes.push(node);\r\n        }\r\n        for (let child of node.children) {\r\n            dfs(child);\r\n        }\r\n    }\r\n    dfs(element);\r\n    return leafNodes;\r\n}\r\n\r\n// Example usage\r\nconst root = document.getElementById('root');\r\nconsole.log(findLeafNodesDFS(root));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"find-the-shortest-path-between-two-elements-bfs",children:"Find the shortest path between two elements (BFS)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Given two elements in the DOM, find the shortest path between them using BFS."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function findShortestPathBFS(start, end) {\r\n    let visited = new Set();\r\n    let queue = [[start]]; // Queue of paths\r\n\r\n    while (queue.length > 0) {\r\n        let path = queue.shift();\r\n        let node = path[path.length - 1];\r\n\r\n        if (node === end) return path;\r\n        visited.add(node);\r\n\r\n        for (let child of node.children) {\r\n            if (!visited.has(child)) {\r\n                queue.push([...path, child]);\r\n            }\r\n        }\r\n    }\r\n    return null; // No path found\r\n}\r\n\r\n// Example usage\r\nconst start = document.getElementById('startElement');\r\nconst end = document.getElementById('endElement');\r\nconsole.log(findShortestPathBFS(start, end));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"detect-cycles-in-the-dom-dfs",children:"Detect cycles in the DOM (DFS)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function hasCycleDFS(element) {\r\n    let visited = new Set();\r\n\r\n    function dfs(node) {\r\n        if (!node) return false;\r\n        if (visited.has(node)) return true;\r\n        visited.add(node);\r\n\r\n        for (let child of node.children) {\r\n            if (dfs(child)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return dfs(element);\r\n}\r\n\r\n// Example usage\r\nconst root = document.getElementById('root');\r\nconsole.log(hasCycleDFS(root));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var t=r(6540);const l={},o=t.createContext(l);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);