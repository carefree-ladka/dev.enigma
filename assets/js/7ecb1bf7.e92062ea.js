"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8100],{5826:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var n=r(4848),i=r(8453);r(1432);const o={title:"Bucket Sort",description:"A detailed guide to understanding and implementing Bucket Sort."},s="Bucket Sort",a={id:"DSA/DSA with JavaScript/BucketSort",title:"Bucket Sort",description:"A detailed guide to understanding and implementing Bucket Sort.",source:"@site/docs/DSA/DSA with JavaScript/BucketSort.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/BucketSort",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/BucketSort",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/BucketSort.mdx",tags:[],version:"current",frontMatter:{title:"Bucket Sort",description:"A detailed guide to understanding and implementing Bucket Sort."},sidebar:"tutorialSidebar",previous:{title:"Boyer\u2013Moore Majority Vote Algorithm",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/BoyerMoore"},next:{title:"Cantor's Diagonalization and Knuth's Algorithms Guide",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/Cantor"}},c={},u=[{value:"How Bucket Sort Works",id:"how-bucket-sort-works",level:2},{value:"Algorithm Steps",id:"algorithm-steps",level:3},{value:"Pseudocode",id:"pseudocode",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"bucket-sort",children:"Bucket Sort"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Bucket Sort"})," is a sorting algorithm that distributes elements into a number of buckets, sorts each bucket individually, and then concatenates the buckets to get the final sorted array. It is particularly useful for sorting uniformly distributed data or data with a known range."]}),"\n",(0,n.jsx)(t.h2,{id:"how-bucket-sort-works",children:"How Bucket Sort Works"}),"\n",(0,n.jsx)(t.p,{children:"Bucket Sort is a comparison-based sorting algorithm that is efficient when the input is uniformly distributed over a range. It works by dividing the range of possible values into a fixed number of buckets, sorting each bucket, and then concatenating the sorted buckets."}),"\n",(0,n.jsx)(t.h3,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Create Buckets:"})," Divide the input array into a fixed number of buckets."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Distribute Elements:"})," Distribute the elements of the input array into the appropriate buckets."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Sort Buckets:"})," Sort each bucket individually. This can be done using a different sorting algorithm (e.g., Insertion Sort)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Concatenate Buckets:"})," Merge the sorted buckets to get the final sorted array."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,n.jsx)(t.p,{children:"Here\u2019s the pseudocode for Bucket Sort:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-Javascript",children:"function bucketSort(arr, bucketSize = 5) {\n  if (arr.length === 0) return arr;\n\n  // Step 1: Find the minimum and maximum values in the array\n  const minValue = Math.min(...arr);\n  const maxValue = Math.max(...arr);\n\n  // Step 2: Calculate the number of buckets\n  const bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;\n  const buckets = Array.from({ length: bucketCount }, () => []);\n\n  // Step 3: Distribute elements into buckets\n  for (let i = 0; i < arr.length; i++) {\n    const bucketIndex = Math.floor((arr[i] - minValue) / bucketSize);\n    buckets[bucketIndex].push(arr[i]);\n  }\n\n  // Step 4: Sort each bucket and concatenate the results\n  arr.length = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    buckets[i].sort((a, b) => a - b); // Sort individual buckets\n    arr.push(...buckets[i]); // Concatenate sorted buckets\n  }\n\n  return arr;\n}\n\n// Example usage\nconst arr = [29, 25, 3, 49, 9, 37, 21, 43];\nconsole.log(bucketSort(arr)); // Output: [3, 9, 21, 25, 29, 37, 43, 49]\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);