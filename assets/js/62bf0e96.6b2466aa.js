"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[8259],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(96540);const s={},l=r.createContext(s);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}},41708:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var r=i(74848),s=i(28453);const l={title:"Search Autocomplete System Design",description:"Complete system design for search autocomplete/typeahead (Google-like)",author:"System Design Guide",date:"2025-10-07",tags:["system-design","autocomplete","typeahead","search","trie"]},t="Search Autocomplete System Design",a={id:"System Design Problems/Search Autocomplete System Design",title:"Search Autocomplete System Design",description:"Complete system design for search autocomplete/typeahead (Google-like)",source:"@site/docs/System Design Problems/Search Autocomplete System Design.mdx",sourceDirName:"System Design Problems",slug:"/System Design Problems/Search Autocomplete System Design",permalink:"/dev.enigma/docs/System Design Problems/Search Autocomplete System Design",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/System Design Problems/Search Autocomplete System Design.mdx",tags:[{inline:!0,label:"system-design",permalink:"/dev.enigma/docs/tags/system-design"},{inline:!0,label:"autocomplete",permalink:"/dev.enigma/docs/tags/autocomplete"},{inline:!0,label:"typeahead",permalink:"/dev.enigma/docs/tags/typeahead"},{inline:!0,label:"search",permalink:"/dev.enigma/docs/tags/search"},{inline:!0,label:"trie",permalink:"/dev.enigma/docs/tags/trie"}],version:"current",frontMatter:{title:"Search Autocomplete System Design",description:"Complete system design for search autocomplete/typeahead (Google-like)",author:"System Design Guide",date:"2025-10-07",tags:["system-design","autocomplete","typeahead","search","trie"]},sidebar:"tutorialSidebar",previous:{title:"Rate Limiter System Design",permalink:"/dev.enigma/docs/System Design Problems/Rate Limiter System Design"},next:{title:"Spotify System Design",permalink:"/dev.enigma/docs/System Design Problems/Spotify System Design"}},c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Requirements (~5 minutes)",id:"1-requirements-5-minutes",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-functional Requirements",id:"non-functional-requirements",level:3},{value:"Out of Scope",id:"out-of-scope",level:3},{value:"Capacity Estimation",id:"capacity-estimation",level:2},{value:"2. API Interface (~2 minutes)",id:"2-api-interface-2-minutes",level:2},{value:"REST API",id:"rest-api",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"3. High-Level Design (~10-15 minutes)",id:"3-high-level-design-10-15-minutes",level:2},{value:"Architecture Components",id:"architecture-components",level:3},{value:"4. Architecture Diagram",id:"4-architecture-diagram",level:2},{value:"4. Deep Dives (~10 minutes)",id:"4-deep-dives-10-minutes",level:2},{value:"4.1 Trie Data Structure (Core Algorithm)",id:"41-trie-data-structure-core-algorithm",level:3},{value:"4.2 Ranking Algorithm",id:"42-ranking-algorithm",level:3},{value:"4.3 Trie Partitioning (Horizontal Scaling)",id:"43-trie-partitioning-horizontal-scaling",level:3},{value:"4.4 Handling Updates (Frequency Changes)",id:"44-handling-updates-frequency-changes",level:3},{value:"4.5 Data Storage",id:"45-data-storage",level:3},{value:"4.6 Caching Strategy",id:"46-caching-strategy",level:3},{value:"4.7 Fuzzy Matching (Typo Handling)",id:"47-fuzzy-matching-typo-handling",level:3},{value:"4.8 Personalization",id:"48-personalization",level:3},{value:"4.9 Trending/Real-time Queries",id:"49-trendingreal-time-queries",level:3},{value:"4.10 Handling Special Cases",id:"410-handling-special-cases",level:3},{value:"4.11 Geographic Personalization",id:"411-geographic-personalization",level:3},{value:"5. Scalability &amp; Performance Optimizations",id:"5-scalability--performance-optimizations",level:2},{value:"5.1 Read Optimization",id:"51-read-optimization",level:3},{value:"5.2 Write Optimization",id:"52-write-optimization",level:3},{value:"5.3 Network Optimization",id:"53-network-optimization",level:3},{value:"6. Monitoring &amp; Metrics",id:"6-monitoring--metrics",level:2},{value:"7. Trade-offs &amp; Considerations",id:"7-trade-offs--considerations",level:2},{value:"8. Summary",id:"8-summary",level:2},{value:"Key Design Decisions",id:"key-design-decisions",level:3},{value:"Scalability Achieved",id:"scalability-achieved",level:3},{value:"9. Alternative Approaches",id:"9-alternative-approaches",level:2},{value:"Approach 1: Full Database Lookup (No Trie)",id:"approach-1-full-database-lookup-no-trie",level:3},{value:"Approach 2: Inverted Index (Elasticsearch)",id:"approach-2-inverted-index-elasticsearch",level:3},{value:"Approach 3: ML Model (Neural Networks)",id:"approach-3-ml-model-neural-networks",level:3},{value:"10. Advanced Features",id:"10-advanced-features",level:2},{value:"Voice Search Support",id:"voice-search-support",level:3},{value:"Image-based Suggestions",id:"image-based-suggestions",level:3},{value:"Context-aware Suggestions",id:"context-aware-suggestions",level:3},{value:"A/B Testing Framework",id:"ab-testing-framework",level:3},{value:"11. Failure Scenarios &amp; Recovery",id:"11-failure-scenarios--recovery",level:2},{value:"Scenario 1: Trie Server Down",id:"scenario-1-trie-server-down",level:3},{value:"Scenario 2: Redis Cluster Failure",id:"scenario-2-redis-cluster-failure",level:3},{value:"Scenario 3: Cassandra Outage",id:"scenario-3-cassandra-outage",level:3},{value:"Scenario 4: Kafka Lag",id:"scenario-4-kafka-lag",level:3},{value:"12. Interview Tips",id:"12-interview-tips",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"search-autocomplete-system-design",children:"Search Autocomplete System Design"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#1-requirements-5-minutes",children:"Requirements"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#capacity-estimation",children:"Capacity Estimation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#3-high-level-design-10-15-minutes",children:"High-Level Design (HLD)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#4-deep-dives-10-minutes",children:"Deep Dives"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#45-data-storage",children:"Database Schema"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#2-api-interface-2-minutes",children:"API Design"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#46-caching-strategy",children:"Scalability & Optimization"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-requirements-5-minutes",children:"1. Requirements (~5 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 Users should get ",(0,r.jsx)(n.strong,{children:"suggestions as they type"})," (after 2-3 characters)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 System should return ",(0,r.jsx)(n.strong,{children:"top 10 most relevant suggestions"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Suggestions should be ",(0,r.jsx)(n.strong,{children:"ranked by popularity"})," (search frequency)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Support for ",(0,r.jsx)(n.strong,{children:"personalized suggestions"})," based on user history"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Support for ",(0,r.jsx)(n.strong,{children:"multi-language"})," queries"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Handle ",(0,r.jsx)(n.strong,{children:"typos and spelling corrections"})," (fuzzy matching)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Support ",(0,r.jsx)(n.strong,{children:"trending/real-time"})," queries (breaking news, events)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Ultra-low latency"}),": < 100ms response time (P99)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"High availability"}),": 99.99% uptime"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Scalable"}),": Support 10M+ queries per second"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Eventual consistency"}),": Acceptable for popularity updates"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Real-time updates"}),": New trending queries appear within minutes"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Support ",(0,r.jsx)(n.strong,{children:"5B+ unique queries"})," in the database"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"out-of-scope",children:"Out of Scope"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c Full search results (only suggestions)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Image/video search"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Voice search"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"capacity-estimation",children:"Capacity Estimation"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Assumptions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Daily Active Users (DAU): 500M"}),"\n",(0,r.jsx)(n.li,{children:"Average searches per user: 10/day"}),"\n",(0,r.jsx)(n.li,{children:"Average keystrokes per search: 10 characters"}),"\n",(0,r.jsx)(n.li,{children:"Suggestions requested after 2 characters"}),"\n",(0,r.jsx)(n.li,{children:"Total unique queries: 5B"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"QPS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Daily Searches = 500M users \xd7 10 searches = 5B searches/day\nAutocomplete Requests = 5B \xd7 8 keystrokes (after 2nd char) = 40B requests/day\nQPS = 40B / 86400s = ~463K requests/sec\nPeak QPS (3x average) = ~1.4M requests/sec\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Storage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Query Storage:\n- Average query length: 30 characters\n- Unique queries: 5B\n- Storage = 5B \xd7 30 bytes = 150 GB\n\nWith Metadata (frequency, timestamp):\n- Per query: 30 bytes (query) + 8 bytes (count) + 8 bytes (timestamp) = 46 bytes\n- Total = 5B \xd7 46 bytes = 230 GB\n\nTrie Data Structure (in-memory):\n- Trie nodes: ~26 children per node (alphabet)\n- Estimated nodes: ~50M nodes\n- Per node: 26 pointers (8 bytes each) + data (20 bytes) = 228 bytes\n- Total = 50M \xd7 228 bytes = ~11.4 GB per Trie\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bandwidth:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Request Size = 50 bytes (prefix + metadata)\nResponse Size = 10 suggestions \xd7 50 bytes = 500 bytes\nPeak Bandwidth In = 1.4M \xd7 50 bytes = 70 MB/s\nPeak Bandwidth Out = 1.4M \xd7 500 bytes = 700 MB/s\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-api-interface-2-minutes",children:"2. API Interface (~2 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:'GET /api/v1/autocomplete?q={prefix}&limit=10&lang=en&user_id={userId}\n\nRequest:\nGET /api/v1/autocomplete?q=face&limit=10&lang=en\n\nResponse:\n{\n  "suggestions": [\n    {\n      "text": "facebook",\n      "frequency": 15000000,\n      "type": "website"\n    },\n    {\n      "text": "facebook login",\n      "frequency": 8500000,\n      "type": "query"\n    },\n    {\n      "text": "face masks",\n      "frequency": 5200000,\n      "type": "product"\n    },\n    {\n      "text": "facebook messenger",\n      "frequency": 4100000,\n      "type": "website"\n    }\n  ],\n  "latency_ms": 45\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"q"}),": Search prefix (required)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"}),": Number of suggestions (default: 10, max: 20)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"lang"}),": Language code (default: en)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"}),": For personalized results (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"location"}),": For geo-specific suggestions (optional)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-high-level-design-10-15-minutes",children:"3. High-Level Design (~10-15 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"architecture-components",children:"Architecture Components"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Client Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Web browsers, mobile apps"}),"\n",(0,r.jsx)(n.li,{children:"Debouncing: Wait 150ms after last keystroke before API call"}),"\n",(0,r.jsx)(n.li,{children:"Client-side caching: Cache last 50 queries"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Edge Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CDN/Edge servers at 200+ locations"}),"\n",(0,r.jsx)(n.li,{children:"Cache popular prefixes (hit rate: ~40%)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"API Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"API Gateway: Rate limiting, authentication"}),"\n",(0,r.jsx)(n.li,{children:"Load Balancer: Distribute to autocomplete servers"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Autocomplete Service"}),": Core suggestion logic"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trie Servers"}),": In-memory Trie data structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis Cluster"}),": Cache top suggestions per prefix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cassandra"}),": Historical query data, frequency counts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kafka"}),": Real-time query stream for analytics"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Analytics Layer:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Aggregator"}),": Process query logs, update frequencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trending Service"}),": Detect real-time trends"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ML Service"}),": Personalization models"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-architecture-diagram",children:"4. Architecture Diagram"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Layer"\n        Browser[Web Browser<br/>Debounce 150ms]\n        Mobile[Mobile App<br/>Local Cache]\n    end\n\n    subgraph "Edge Layer"\n        CDN[CDN Edge Servers<br/>Cache Popular Prefixes<br/>200+ Locations]\n    end\n\n    subgraph "API Gateway"\n        Gateway[API Gateway<br/>Rate Limiting<br/>Load Balance]\n    end\n\n    subgraph "Autocomplete Cluster"\n        AC1[Autocomplete Server 1<br/>Trie: A-M]\n        AC2[Autocomplete Server 2<br/>Trie: N-Z]\n        AC3[Autocomplete Server 3<br/>Numbers/Special]\n    end\n\n    subgraph "Cache Layer"\n        Redis[(Redis Cluster<br/>Top Suggestions<br/>Per Prefix)]\n    end\n\n    subgraph "Database Layer"\n        Cassandra[(Cassandra<br/>Query History<br/>Frequency Counts)]\n    end\n\n    subgraph "Processing Layer"\n        Kafka[Kafka Stream<br/>Query Logs]\n        Aggregator[Data Aggregator<br/>Update Frequencies]\n        Trending[Trending Service<br/>Real-time Trends]\n        MLService[ML Service<br/>Personalization]\n    end\n\n    Browser --\x3e CDN\n    Mobile --\x3e CDN\n    CDN --\x3e Gateway\n    Gateway --\x3e AC1\n    Gateway --\x3e AC2\n    Gateway --\x3e AC3\n\n    AC1 --\x3e Redis\n    AC2 --\x3e Redis\n    AC3 --\x3e Redis\n\n    AC1 -.Fallback.-> Cassandra\n    AC2 -.Fallback.-> Cassandra\n    AC3 -.Fallback.-> Cassandra\n\n    Gateway --\x3e|Log Queries| Kafka\n    Kafka --\x3e Aggregator\n    Kafka --\x3e Trending\n    Kafka --\x3e MLService\n\n    Aggregator --\x3e Cassandra\n    Trending --\x3e Redis\n    MLService --\x3e Redis\n\n    style Browser fill:#e1f5ff\n    style Mobile fill:#e1f5ff\n    style CDN fill:#fff4e1\n    style Kafka fill:#ffe1f5\n    style Aggregator fill:#ffe1f5'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-deep-dives-10-minutes",children:"4. Deep Dives (~10 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"41-trie-data-structure-core-algorithm",children:"4.1 Trie Data Structure (Core Algorithm)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why Trie?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Efficient prefix matching: O(len(prefix))"}),"\n",(0,r.jsx)(n.li,{children:"Space-efficient for common prefixes"}),"\n",(0,r.jsx)(n.li,{children:"Easy to traverse for top-K suggestions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trie Node Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"TrieNode {\n    children: Map<char, TrieNode>  // 26 letters\n    isEndOfWord: boolean\n    frequency: long                 // How many times searched\n    topSuggestions: List<String>    // Pre-computed top 10\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'Example Trie for ["face", "facebook", "fact"]:'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        root\n         |\n         f\n         |\n         a\n         |\n         c\n        / \\\n       e   t\n       |   |\n       *   *\n       |\n    book\n       |\n       *\n\n* = isEndOfWord = true\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Lookup Process:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Start at root"}),"\n",(0,r.jsx)(n.li,{children:"Traverse prefix: 'f' \u2192 'a' \u2192 'c' \u2192 'e'"}),"\n",(0,r.jsx)(n.li,{children:"At 'e' node, get pre-computed topSuggestions"}),"\n",(0,r.jsx)(n.li,{children:"Return top 10"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Time Complexity:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lookup: O(len(prefix)) + O(1) = O(p)"}),"\n",(0,r.jsx)(n.li,{children:"Space: O(total_chars_in_all_queries)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"42-ranking-algorithm",children:"4.2 Ranking Algorithm"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-factor Scoring:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Score = w1 \xd7 FrequencyScore +\n        w2 \xd7 RecencyScore +\n        w3 \xd7 PersonalizationScore +\n        w4 \xd7 TrendingScore\n\nWhere:\n- FrequencyScore = log(query_count) / log(max_count)\n- RecencyScore = e^(-decay_factor \xd7 days_since_last_search)\n- PersonalizationScore = user_clicked_before ? 1.5 : 0\n- TrendingScore = spike_in_last_hour ? 2.0 : 0\n\nWeights: w1=0.5, w2=0.2, w3=0.2, w4=0.1\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Query: "facebook"\n- Frequency: 15M searches \u2192 FrequencyScore = 0.95\n- Last searched: Today \u2192 RecencyScore = 1.0\n- User clicked before: Yes \u2192 PersonalizationScore = 1.5\n- Not trending now \u2192 TrendingScore = 0\n\nFinal Score = 0.5\xd70.95 + 0.2\xd71.0 + 0.2\xd71.5 + 0.1\xd70 = 1.075\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"43-trie-partitioning-horizontal-scaling",children:"4.3 Trie Partitioning (Horizontal Scaling)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem:"})," Single Trie can't fit all 5B queries in memory"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution:"})," Partition by first letter(s)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Server 1: A-D queries (Trie 1)\nServer 2: E-H queries (Trie 2)\nServer 3: I-L queries (Trie 3)\nServer 4: M-P queries (Trie 4)\nServer 5: Q-T queries (Trie 5)\nServer 6: U-Z queries (Trie 6)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Routing Logic:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"prefix = \"face\"\nfirst_char = prefix[0] = 'f'\nserver = route_to_server(first_char)  // Server 2 (E-H)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each server handles ~11 GB Trie (manageable)"}),"\n",(0,r.jsx)(n.li,{children:"Parallel processing"}),"\n",(0,r.jsx)(n.li,{children:"Independent scaling"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Replication:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each partition replicated 3x for availability"}),"\n",(0,r.jsx)(n.li,{children:"Master-slave setup: Master handles writes, slaves for reads"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"44-handling-updates-frequency-changes",children:"4.4 Handling Updates (Frequency Changes)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Challenge:"})," 40B requests/day generate millions of updates"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution: Batch Updates"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Real-time Flow:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'User searches "facebook" \u2192\n  1. Log to Kafka (async, non-blocking)\n  2. Return cached suggestions immediately\n  3. Don\'t update Trie in real-time\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Batch Update Flow (Every 10 minutes):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'1. Kafka Consumer reads last 10 min of queries\n2. Aggregate: {"facebook": +15000, "face masks": +8000}\n3. Update Cassandra (frequency table)\n4. Background job rebuilds Trie sections\n5. Swap old Trie with new Trie (atomic pointer swap)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trie Update Strategy:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Option 1: Full Rebuild (Daily)\n- Build new Trie from scratch\n- Takes 2-3 hours\n- Swap pointers at 3 AM\n\nOption 2: Incremental Update (Every 10 min)\n- Update only changed nodes\n- Faster but complex\n- Risk of inconsistencies\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Trade-off:"})," Slight staleness (10 min) for performance"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"45-data-storage",children:"4.5 Data Storage"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cassandra Schema (Query Frequency Table):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE query_stats (\n    prefix TEXT,              -- First 3 chars: "fac"\n    full_query TEXT,          -- Complete query: "facebook"\n    frequency COUNTER,        -- Search count\n    last_updated TIMESTAMP,\n    PRIMARY KEY ((prefix), frequency, full_query)\n) WITH CLUSTERING ORDER BY (frequency DESC);\n\n-- Query for prefix "fac":\nSELECT full_query, frequency\nFROM query_stats\nWHERE prefix = \'fac\'\nORDER BY frequency DESC\nLIMIT 10;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why Cassandra?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Write-heavy: 463K writes/sec"}),"\n",(0,r.jsx)(n.li,{children:"Horizontal scaling"}),"\n",(0,r.jsx)(n.li,{children:"Counter data type for atomic increments"}),"\n",(0,r.jsx)(n.li,{children:"Time-series friendly"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Redis Cache (Hot Prefixes):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Key: "autocomplete:fac"\nValue: [\n  {"text": "facebook", "score": 15000000},\n  {"text": "face masks", "score": 5200000},\n  ...\n]\nTTL: 10 minutes\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cache Strategy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Top 10K most popular prefixes cached"}),"\n",(0,r.jsx)(n.li,{children:"Hit rate: ~40% (power law distribution)"}),"\n",(0,r.jsx)(n.li,{children:"Eviction: LRU policy"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"46-caching-strategy",children:"4.6 Caching Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-layer Cache:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Layer 1: Client-side Cache (Browser)\n- Cache: Last 50 queries\n- Hit rate: ~20%\n- TTL: Session duration\n\nLayer 2: CDN/Edge Cache\n- Cache: Popular prefixes (top 10K)\n- Hit rate: ~40%\n- TTL: 5 minutes\n\nLayer 3: Redis Cluster\n- Cache: All prefixes from last hour\n- Hit rate: ~80%\n- TTL: 10 minutes\n\nLayer 4: Trie In-Memory\n- Pre-computed top suggestions per node\n- Hit rate: 100% (always in memory)\n\nFallback: Cassandra Database\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cache Invalidation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Time-based: TTL of 10 minutes"}),"\n",(0,r.jsx)(n.li,{children:"Event-based: Breaking news triggers cache clear"}),"\n",(0,r.jsx)(n.li,{children:"Lazy update: Rebuild on next request"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"47-fuzzy-matching-typo-handling",children:"4.7 Fuzzy Matching (Typo Handling)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Challenge:"}),' User types "facbook" instead of "facebook"']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Edit Distance (Levenshtein Distance):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'EditDistance("facbook", "facebook") = 1 (insert \'e\')\n\nFor each candidate in Trie:\n  if edit_distance(user_input, candidate) <= 2:\n    include in suggestions\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Trade-off:"})," Expensive to compute for all candidates"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Phonetic Algorithms (Soundex/Metaphone):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Soundex("facebook") = "F212"\nSoundex("facbook") = "F212"  // Same code!\n\nStore phonetic codes in Trie\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Bigram/Trigram Matching:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'"facbook" \u2192 bigrams: [fa, ac, cb, bo, oo, ok]\n"facebook" \u2192 bigrams: [fa, ac, ce, eb, bo, oo, ok]\n\nSimilarity = (common bigrams) / (total unique bigrams)\n          = 5 / 9 = 0.56\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Build inverted index: bigram \u2192 queries"}),"\n",(0,r.jsx)(n.li,{children:"At query time, find queries with similar bigrams"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Chosen Approach:"})," Hybrid"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Trie for exact prefix"}),"\n",(0,r.jsx)(n.li,{children:"If < 3 results, fallback to fuzzy matching (edit distance \u2264 2)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"48-personalization",children:"4.8 Personalization"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"User History Tracking:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Redis Key: "user:12345:history"\nValue: [\n  {"query": "python tutorial", "clicked": true, "ts": 1696512000},\n  {"query": "java vs python", "clicked": false, "ts": 1696511000}\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Personalization Logic:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"For each suggestion:\n  if user searched this before:\n    boost score by 1.5x\n\n  if user clicked this before:\n    boost score by 2.0x\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Privacy:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store only last 100 queries per user"}),"\n",(0,r.jsx)(n.li,{children:"Hash user IDs"}),"\n",(0,r.jsx)(n.li,{children:"TTL: 30 days"}),"\n",(0,r.jsx)(n.li,{children:"Opt-out option"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"49-trendingreal-time-queries",children:"4.9 Trending/Real-time Queries"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Challenge:"}),' Breaking news "earthquake california" should appear immediately']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution: Trending Detection"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Algorithm:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'1. Count queries in sliding windows:\n   - Last 5 minutes\n   - Last 1 hour\n   - Last 24 hours\n\n2. Calculate spike ratio:\n   spike = count_5min / avg_count_hourly\n\n3. If spike > 10x:\n   Mark as trending\n   Boost score by 2x\n   Inject into hot cache\n\nExample:\n"earthquake california"\n- Last hour: 500 searches\n- Last 5 min: 8000 searches\n- Spike = 8000 / (500/12) = 192x\n- \u2192 TRENDING! Boost to top of suggestions\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Kafka Stream Processing:\n  1. Consume query logs\n  2. Windowed aggregation (5 min windows)\n  3. Compare to baseline\n  4. Push trending queries to Redis\n  5. Update Trie with high priority\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"410-handling-special-cases",children:"4.10 Handling Special Cases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Case 1: Long Tail Queries"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Problem: 80% of queries are unique (searched once)"}),"\n",(0,r.jsx)(n.li,{children:"Solution: Don't store queries with frequency < 5"}),"\n",(0,r.jsx)(n.li,{children:"Trade-off: Miss rare queries, save 80% storage"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Case 2: Offensive/Adult Content"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Solution: Blacklist filter"}),"\n",(0,r.jsx)(n.li,{children:"Maintain list of banned words/phrases"}),"\n",(0,r.jsx)(n.li,{children:"Filter at ingestion time (Kafka consumer)"}),"\n",(0,r.jsx)(n.li,{children:"Never show in suggestions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Case 3: Multi-word Queries"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Query: "how to learn python"\n\nApproach 1: Whole phrase matching\n- Trie key: "how to learn python"\n- Works but inflexible\n\nApproach 2: Last word matching\n- When user types "how to learn p"\n- Match prefix "p" in context of "how to learn"\n- More flexible, handles variations\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Case 4: Numbers/Special Characters"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Query: "iphone 15 pro"\n\nTrie structure:\n  i \u2192 p \u2192 h \u2192 o \u2192 n \u2192 e \u2192 SPACE \u2192 1 \u2192 5 \u2192 SPACE \u2192 p \u2192 r \u2192 o\n\nStore spaces and numbers as nodes\nNormalize queries: lowercase + trim\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"411-geographic-personalization",children:"4.11 Geographic Personalization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Challenge:"}),' "football" means different things in US vs UK']}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Solution: Geo-based Tries"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'US Region:\n  "football" \u2192 [\n    "football schedule",\n    "NFL football scores",\n    "fantasy football"\n  ]\n\nUK Region:\n  "football" \u2192 [\n    "football premier league",\n    "football transfers",\n    "football world cup"\n  ]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintain separate Tries per region"}),"\n",(0,r.jsx)(n.li,{children:"Route based on user's IP or explicit location"}),"\n",(0,r.jsx)(n.li,{children:"Fallback to global Trie if region-specific unavailable"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-scalability--performance-optimizations",children:"5. Scalability & Performance Optimizations"}),"\n",(0,r.jsx)(n.h3,{id:"51-read-optimization",children:"5.1 Read Optimization"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-computation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store top 10 suggestions at each Trie node"}),"\n",(0,r.jsx)(n.li,{children:"Avoids traversing entire subtree at query time"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Connection Pooling:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Persistent connections to Redis/Cassandra"}),"\n",(0,r.jsx)(n.li,{children:"Reduce connection overhead"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compression:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Compress Trie in memory (prefix compression)"}),"\n",(0,r.jsx)(n.li,{children:"Save 30-40% memory"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"52-write-optimization",children:"5.2 Write Optimization"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Async Logging:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Non-blocking writes to Kafka"}),"\n",(0,r.jsx)(n.li,{children:"Don't wait for acknowledgment"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Batch Writes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Aggregate 10 min of queries"}),"\n",(0,r.jsx)(n.li,{children:"Single batch update to Cassandra"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Append-only Logs:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Never update Trie in-place"}),"\n",(0,r.jsx)(n.li,{children:"Build new version, swap atomically"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"53-network-optimization",children:"5.3 Network Optimization"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Protocol Buffers:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Protobuf instead of JSON"}),"\n",(0,r.jsx)(n.li,{children:"50% smaller payload"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"HTTP/2:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multiplexing"}),"\n",(0,r.jsx)(n.li,{children:"Header compression"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compression:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Gzip response bodies"}),"\n",(0,r.jsx)(n.li,{children:"70% bandwidth savings"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-monitoring--metrics",children:"6. Monitoring & Metrics"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Metrics:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Performance:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"P50, P95, P99 latency (target: < 100ms)"}),"\n",(0,r.jsx)(n.li,{children:"QPS per server"}),"\n",(0,r.jsx)(n.li,{children:"Cache hit rates (CDN, Redis, Trie)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Quality:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Suggestion relevance (CTR - click-through rate)"}),"\n",(0,r.jsx)(n.li,{children:"Empty result rate (< 5%)"}),"\n",(0,r.jsx)(n.li,{children:"Typo correction rate"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"System Health:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Trie rebuild time"}),"\n",(0,r.jsx)(n.li,{children:"Kafka consumer lag (< 10 sec)"}),"\n",(0,r.jsx)(n.li,{children:"Redis memory usage"}),"\n",(0,r.jsx)(n.li,{children:"Cassandra write throughput"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alerts:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Alert: High Latency\nCondition: P99 > 200ms for 5 minutes\nAction: Auto-scale Trie servers\n\nAlert: Low Cache Hit Rate\nCondition: Redis hit rate < 70%\nAction: Increase cache size or TTL\n\nAlert: Trie Out of Sync\nCondition: Trie age > 20 minutes\nAction: Trigger emergency rebuild\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-trade-offs--considerations",children:"7. Trade-offs & Considerations"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Decision"}),(0,r.jsx)(n.th,{children:"Pros"}),(0,r.jsx)(n.th,{children:"Cons"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Trie in-memory"})}),(0,r.jsx)(n.td,{children:"Fast lookups (O(p))"}),(0,r.jsx)(n.td,{children:"Limited by RAM, expensive"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Batch updates"})}),(0,r.jsx)(n.td,{children:"High write throughput"}),(0,r.jsx)(n.td,{children:"10-min staleness"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Pre-computed suggestions"})}),(0,r.jsx)(n.td,{children:"Ultra-fast response"}),(0,r.jsx)(n.td,{children:"Increased storage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Partitioning by letter"})}),(0,r.jsx)(n.td,{children:"Horizontal scaling"}),(0,r.jsx)(n.td,{children:"Uneven distribution (Z has fewer queries)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Redis caching"})}),(0,r.jsx)(n.td,{children:"Reduces Trie load"}),(0,r.jsx)(n.td,{children:"Cache invalidation complexity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Fuzzy matching"})}),(0,r.jsx)(n.td,{children:"Better UX for typos"}),(0,r.jsx)(n.td,{children:"Increased latency"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"8-summary",children:"8. Summary"}),"\n",(0,r.jsx)(n.h3,{id:"key-design-decisions",children:"Key Design Decisions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trie Data Structure"}),": O(p) prefix matching with pre-computed top-K"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Horizontal Partitioning"}),": Scale by first letter(s)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-layer Caching"}),": Client \u2192 CDN \u2192 Redis \u2192 Trie \u2192 Cassandra"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Batch Updates"}),": Rebuild Trie every 10 min, not real-time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Async Logging"}),": Non-blocking query logs via Kafka"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Personalization"}),": Boost user's previous queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trending Detection"}),": Real-time spike detection for breaking news"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scalability-achieved",children:"Scalability Achieved"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"1.4M QPS"})," (peak traffic)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"< 100ms P99 latency"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"5B unique queries"})," supported"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"99.99% availability"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"40% CDN cache hit rate"})]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Real-time trending"})," (< 5 min delay)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"9-alternative-approaches",children:"9. Alternative Approaches"}),"\n",(0,r.jsx)(n.h3,{id:"approach-1-full-database-lookup-no-trie",children:"Approach 1: Full Database Lookup (No Trie)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT query, frequency\nFROM queries\nWHERE query LIKE 'fac%'\nORDER BY frequency DESC\nLIMIT 10;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pros:"})," Simple, no Trie complexity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cons:"})," Too slow (> 500ms), can't scale"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"approach-2-inverted-index-elasticsearch",children:"Approach 2: Inverted Index (Elasticsearch)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Index:\n{\n  "fac": ["facebook", "face masks", "factory"],\n  "ace": ["facebook", "face masks", "race car"]\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pros:"})," Flexible, supports fuzzy matching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cons:"})," Slower than Trie (100-200ms), higher memory"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"approach-3-ml-model-neural-networks",children:"Approach 3: ML Model (Neural Networks)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Train model to predict next characters"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pros:"})," Learns context, handles typos naturally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cons:"})," High latency (300ms+), expensive training"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Chosen: Trie + Redis"})," (best latency/complexity trade-off)"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"10-advanced-features",children:"10. Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"voice-search-support",children:"Voice Search Support"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Convert speech to text (ASR)"}),"\n",(0,r.jsx)(n.li,{children:"Feed to autocomplete with confidence scores"}),"\n",(0,r.jsx)(n.li,{children:"Boost high-confidence suggestions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"image-based-suggestions",children:"Image-based Suggestions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OCR on images"}),"\n",(0,r.jsx)(n.li,{children:"Extract text \u2192 feed to autocomplete"}),"\n",(0,r.jsx)(n.li,{children:"Show visual suggestions (thumbnails)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"context-aware-suggestions",children:"Context-aware Suggestions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Previous query: "python"\nCurrent input: "tut"\nSuggestions: ["tutorial", "tutorials for beginners"]\n  (biased toward Python tutorials)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ab-testing-framework",children:"A/B Testing Framework"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Test ranking algorithms"}),"\n",(0,r.jsx)(n.li,{children:"Measure CTR, conversion"}),"\n",(0,r.jsx)(n.li,{children:"Roll out winner to 100%"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"11-failure-scenarios--recovery",children:"11. Failure Scenarios & Recovery"}),"\n",(0,r.jsx)(n.h3,{id:"scenario-1-trie-server-down",children:"Scenario 1: Trie Server Down"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Detection:"})," Health check fails"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery:"})," Route to replica"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time:"})," < 1 second (automatic failover)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scenario-2-redis-cluster-failure",children:"Scenario 2: Redis Cluster Failure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Detection:"})," All Redis nodes unreachable"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery:"})," Fallback to Trie (slower but works)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time:"})," Degraded performance, no downtime"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scenario-3-cassandra-outage",children:"Scenario 3: Cassandra Outage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Impact:"})," Can't update frequencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery:"})," Serve stale data from Redis/Trie"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time:"})," No user-facing impact (batch updates delayed)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scenario-4-kafka-lag",children:"Scenario 4: Kafka Lag"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Detection:"})," Consumer lag > 1 min"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recovery:"})," Scale up consumers, replay messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time:"})," 5-10 min to catch up"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"12-interview-tips",children:"12. Interview Tips"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What interviewers look for:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Understand requirements"}),": Low latency is critical"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Choose right data structure"}),": Trie vs database vs inverted index"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Handle scale"}),": 1M+ QPS, 5B queries"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Discuss trade-offs"}),": Real-time updates vs batch"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Consider edge cases"}),": Typos, trending, offensive content"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Monitoring"}),": How to detect/fix issues"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common follow-ups:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"How would you handle typos?" \u2192 Edit distance, phonetic codes'}),"\n",(0,r.jsx)(n.li,{children:'"What if Trie doesn\'t fit in memory?" \u2192 Partitioning, compression'}),"\n",(0,r.jsx)(n.li,{children:'"How to make suggestions personalized?" \u2192 User history, ML'}),"\n",(0,r.jsx)(n.li,{children:'"How to detect trending queries?" \u2192 Spike detection algorithm'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Red flags to avoid:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'\u274c Saying "use database LIKE query" (too slow)'}),"\n",(0,r.jsx)(n.li,{children:"\u274c Ignoring latency requirements"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Not discussing caching"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Forgetting about updates (how to refresh Trie)"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);