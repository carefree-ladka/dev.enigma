"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7540],{1440:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=i(4848),r=i(8453);const o={title:"Euclid's Algorithm for Greatest Common Divisor (GCD)"},s=void 0,l={id:"DSA/Euclid",title:"Euclid's Algorithm for Greatest Common Divisor (GCD)",description:"Euclid's Algorithm for Greatest Common Divisor (GCD)",source:"@site/docs/DSA/Euclid.mdx",sourceDirName:"DSA",slug:"/DSA/Euclid",permalink:"/js.enigma/docs/DSA/Euclid",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/Euclid.mdx",tags:[],version:"current",frontMatter:{title:"Euclid's Algorithm for Greatest Common Divisor (GCD)"},sidebar:"tutorialSidebar",previous:{title:"Dynamic Programming",permalink:"/js.enigma/docs/DSA/DynamicProgramming"},next:{title:"Euler Path, Hamilton Cycle, and Hierholzer's Algorithm",permalink:"/js.enigma/docs/DSA/EularPath"}},c={},d=[{value:"Euclid&#39;s Algorithm for Greatest Common Divisor (GCD)",id:"euclids-algorithm-for-greatest-common-divisor-gcd",level:2},{value:"Concept",id:"concept",level:3},{value:"Algorithm Steps",id:"algorithm-steps",level:3},{value:"Code Example",id:"code-example",level:3}];function a(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"euclids-algorithm-for-greatest-common-divisor-gcd",children:"Euclid's Algorithm for Greatest Common Divisor (GCD)"}),"\n",(0,t.jsx)(n.p,{children:"Euclid's Algorithm is a classic algorithm for finding the greatest common divisor (GCD) of two integers. The GCD is the largest positive integer that divides both numbers without leaving a remainder. Euclid's Algorithm is based on the principle that the GCD of two numbers also divides their difference."}),"\n",(0,t.jsx)(n.h3,{id:"concept",children:"Concept"}),"\n",(0,t.jsx)(n.p,{children:"Euclid's Algorithm uses the following principle:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The GCD of two numbers ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," is the same as the GCD of ",(0,t.jsx)(n.code,{children:"b"})," and ",(0,t.jsx)(n.code,{children:"a % b"}),", where ",(0,t.jsx)(n.code,{children:"%"})," denotes the modulus operation."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This process is repeated until one of the numbers becomes zero. At that point, the non-zero number is the GCD."}),"\n",(0,t.jsx)(n.h3,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initial Step"}),": Given two numbers ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modulo Operation"}),": Compute the remainder ",(0,t.jsx)(n.code,{children:"r"})," when ",(0,t.jsx)(n.code,{children:"a"})," is divided by ",(0,t.jsx)(n.code,{children:"b"})," (i.e., ",(0,t.jsx)(n.code,{children:"r = a % b"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update Numbers"}),": Replace ",(0,t.jsx)(n.code,{children:"a"})," with ",(0,t.jsx)(n.code,{children:"b"})," and ",(0,t.jsx)(n.code,{children:"b"})," with ",(0,t.jsx)(n.code,{children:"r"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repeat"}),": Continue the process until ",(0,t.jsx)(n.code,{children:"b"})," becomes zero."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Result"}),": The GCD is the non-zero number."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"code-example",children:"Code Example"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"JavaScript Implementation"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"/**\n * Compute the Greatest Common Divisor (GCD) of two integers using Euclid's Algorithm.\n * @param {number} a - The first integer.\n * @param {number} b - The second integer.\n * @return {number} - The GCD of the two integers.\n */\nconst gcd = (a, b) => {\n  while (b !== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);