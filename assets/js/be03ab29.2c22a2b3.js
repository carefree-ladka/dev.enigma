"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[55189],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var o=t(96540);const r={},c=o.createContext(r);function i(n){const e=o.useContext(c);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(c.Provider,{value:e},n.children)}},39006:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var o=t(74848),r=t(28453);const c={title:"Closures"},i=void 0,s={id:"WebDev/JavaScript/Closure",title:"Closures",description:"Closures allow functions to retain access to variables from their containing (or outer) function even after that function has finished executing.",source:"@site/docs/WebDev/JavaScript/Closure.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Closure",permalink:"/docs/WebDev/JavaScript/Closure",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Closure.mdx",tags:[],version:"current",frontMatter:{title:"Closures"},sidebar:"tutorialSidebar",previous:{title:"Async Patterns",permalink:"/docs/WebDev/JavaScript/AsyncPatterns"},next:{title:"Currying Variations",permalink:"/docs/WebDev/JavaScript/Currying"}},u={},l=[{value:"Counter Example",id:"counter-example",level:3},{value:"Closure inside Loop",id:"closure-inside-loop",level:3},{value:"Problem 3",id:"problem-3",level:3},{value:"Problem 4",id:"problem-4",level:3}];function a(n){const e={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Closures allow functions to retain access to variables from their containing (or outer) function even after that function has finished executing."}),"\n",(0,o.jsx)(e.h3,{id:"counter-example",children:"Counter Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-JavaScript",children:"function createCounter() {\n  let count = 0; // This is the closure variable\n\n  return function() {\n    count += 1; // This function has access to `count`\n    return count;\n  };\n}\n\nconst counter = createCounter(); // `counter` is a function with a closure\n\nconsole.log(counter()); // Output: 1\nconsole.log(counter()); // Output: 2\nconsole.log(counter()); // Output: 3\n"})}),"\n",(0,o.jsx)(e.h3,{id:"closure-inside-loop",children:"Closure inside Loop"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-JavaScript",children:"for (var i = 0; i < 5; i++) {\n  setTimeout(() => console.log(i), 1000);\n}\n\n/*\n5\n5\n5\n5\n5\n*/\n\n//To fix this : let or IIFE\n\nfor (let i = 0; i < 5; i++) {\n  setTimeout(() => console.log(i), 1000);\n}\n\n//or\n\nfor (var i = 0; i < 5; i++) {\n  ((i) => setTimeout(() => console.log(i), 1000))(i);\n}\n\n//Print values per second\nfor (var i = 0; i < 5; i++) {\n  ((i) => setTimeout(() => console.log(i), 1000 * i))(i);\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"problem-3",children:"Problem 3"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-JavaScript",children:"function createFunctions() {\n  let functions = [];\n  for (var i = 0; i < 3; i++) {\n    functions.push(function() {\n      return i;\n    });\n  }\n  return functions;\n}\n\nconst funcs = createFunctions();\nconsole.log(funcs[0]()); // Output: 3\nconsole.log(funcs[1]()); // Output: 3\nconsole.log(funcs[2]()); // Output: 3\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"Hint"}),": The var keyword has function scope, not block scope. Understand how closures capture variables and how var affects this behavior."]}),"\n",(0,o.jsx)(e.h3,{id:"problem-4",children:"Problem 4"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-JavaScript",children:"function createCounter() {\n  let count = 0;\n  return {\n    increment: function() {\n      count++;\n      return count;\n    },\n    reset: function() {\n      count = 0;\n    },\n    getCount: function() {\n      return count;\n    }\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter.increment()); // Output: 1\nconsole.log(counter.increment()); // Output: 2\ncounter.reset();\nconsole.log(counter.getCount()); // Output: 0\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"Hint"}),": Closures allow the returned methods to access and modify the count variable even though createCounter has finished executing"]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(a,{...n})}):a(n)}}}]);