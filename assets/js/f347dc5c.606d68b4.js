"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4942],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},31885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(74848),s=t(28453);const a={},r="BookMyShow",o={id:"Low Level design/BookMyShow System",title:"BookMyShow",description:"Table of Contents",source:"@site/docs/Low Level design/BookMyShow System.mdx",sourceDirName:"Low Level design",slug:"/Low Level design/BookMyShow System",permalink:"/js.enigma/docs/Low Level design/BookMyShow System",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Low Level design/BookMyShow System.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Low Level Design",permalink:"/js.enigma/docs/category/low-level-design"},next:{title:"Common Design Patterns in Java",permalink:"/js.enigma/docs/Low Level design/Common Design Patterns in Java"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Requirements Clarification",id:"requirements-clarification",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Core Features",id:"core-features",level:4},{value:"Admin Features",id:"admin-features",level:4},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"Capacity Estimates",id:"capacity-estimates",level:3},{value:"Scope Boundaries",id:"scope-boundaries",level:3},{value:"Included",id:"included",level:4},{value:"Excluded",id:"excluded",level:4},{value:"Core Entities &amp; Relationships",id:"core-entities--relationships",level:2},{value:"Main Entities",id:"main-entities",level:3},{value:"Key Relationships",id:"key-relationships",level:3},{value:"Class Design",id:"class-design",level:2},{value:"Core Classes with Responsibilities",id:"core-classes-with-responsibilities",level:3},{value:"User Management",id:"user-management",level:4},{value:"Movie &amp; Theater",id:"movie--theater",level:4},{value:"Show &amp; Booking",id:"show--booking",level:4},{value:"Payment &amp; Tickets",id:"payment--tickets",level:4},{value:"Services",id:"services",level:4},{value:"UML Class Diagram",id:"uml-class-diagram",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Enums",id:"enums",level:3},{value:"UserType.java",id:"usertypejava",level:4},{value:"Genre.java",id:"genrejava",level:4},{value:"Language.java",id:"languagejava",level:4},{value:"SeatType.java",id:"seattypejava",level:4},{value:"ShowSeatStatus.java",id:"showseatstatusjava",level:4},{value:"BookingStatus.java",id:"bookingstatusjava",level:4},{value:"PaymentStatus.java",id:"paymentstatusjava",level:4},{value:"PaymentMethod.java",id:"paymentmethodjava",level:4},{value:"Core Entity Classes",id:"core-entity-classes",level:3},{value:"User.java",id:"userjava",level:4},{value:"Movie.java",id:"moviejava",level:4},{value:"City.java",id:"cityjava",level:4},{value:"Theater.java",id:"theaterjava",level:4},{value:"Screen.java",id:"screenjava",level:4},{value:"Seat.java",id:"seatjava",level:4},{value:"Show and Booking Classes",id:"show-and-booking-classes",level:3},{value:"Show.java",id:"showjava",level:4},{value:"ShowSeat.java",id:"showseatjava",level:4},{value:"Booking.java",id:"bookingjava",level:4},{value:"Payment and Ticket Classes",id:"payment-and-ticket-classes",level:3},{value:"Payment.java",id:"paymentjava",level:4},{value:"Ticket.java",id:"ticketjava",level:4},{value:"Service Classes",id:"service-classes",level:3},{value:"SeatLockManager.java",id:"seatlockmanagerjava",level:4},{value:"BookingService.java",id:"bookingservicejava",level:4},{value:"Demo Application",id:"demo-application",level:3},{value:"BookMyShowDemo.java",id:"bookmyshowdemojava",level:4},{value:"Design Patterns &amp; Best Practices",id:"design-patterns--best-practices",level:2},{value:"Design Patterns Used",id:"design-patterns-used",level:3},{value:"1. <strong>Singleton Pattern</strong>",id:"1-singleton-pattern",level:4},{value:"2. <strong>Factory Pattern</strong>",id:"2-factory-pattern",level:4},{value:"3. <strong>Strategy Pattern</strong>",id:"3-strategy-pattern",level:4},{value:"4. <strong>Observer Pattern</strong>",id:"4-observer-pattern",level:4},{value:"5. <strong>State Pattern</strong>",id:"5-state-pattern",level:4},{value:"6. <strong>Repository Pattern</strong>",id:"6-repository-pattern",level:4},{value:"SOLID Principles",id:"solid-principles",level:3},{value:"Single Responsibility Principle (SRP)",id:"single-responsibility-principle-srp",level:4},{value:"Open/Closed Principle (OCP)",id:"openclosed-principle-ocp",level:4},{value:"Liskov Substitution Principle (LSP)",id:"liskov-substitution-principle-lsp",level:4},{value:"Interface Segregation Principle (ISP)",id:"interface-segregation-principle-isp",level:4},{value:"Dependency Inversion Principle (DIP)",id:"dependency-inversion-principle-dip",level:4},{value:"Concurrency &amp; Seat Locking",id:"concurrency--seat-locking",level:2},{value:"Concurrency Challenges",id:"concurrency-challenges",level:3},{value:"Problem: Double Booking",id:"problem-double-booking",level:4},{value:"Solution: Pessimistic Locking",id:"solution-pessimistic-locking",level:3},{value:"Seat Lock Mechanism",id:"seat-lock-mechanism",level:4},{value:"Thread Safety",id:"thread-safety",level:4},{value:"Booking Flow with Locking",id:"booking-flow-with-locking",level:3},{value:"Edge Cases &amp; Extensions",id:"edge-cases--extensions",level:2},{value:"Edge Cases Handled",id:"edge-cases-handled",level:3},{value:"1. <strong>Expired Locks</strong>",id:"1-expired-locks",level:4},{value:"2. <strong>Payment Failure</strong>",id:"2-payment-failure",level:4},{value:"3. <strong>Concurrent Lock Attempts</strong>",id:"3-concurrent-lock-attempts",level:4},{value:"4. <strong>Same User Re-locking</strong>",id:"4-same-user-re-locking",level:4},{value:"5. <strong>Show Time Conflicts</strong>",id:"5-show-time-conflicts",level:4},{value:"6. <strong>Cancellation Window</strong>",id:"6-cancellation-window",level:4},{value:"Potential Extensions",id:"potential-extensions",level:3},{value:"1. <strong>Dynamic Pricing</strong>",id:"1-dynamic-pricing",level:4},{value:"2. <strong>Seat Recommendations</strong>",id:"2-seat-recommendations",level:4},{value:"3. <strong>Loyalty Program</strong>",id:"3-loyalty-program",level:4},{value:"4. <strong>Food &amp; Beverage</strong>",id:"4-food--beverage",level:4},{value:"5. <strong>Notifications</strong>",id:"5-notifications",level:4},{value:"6. <strong>Analytics Dashboard</strong>",id:"6-analytics-dashboard",level:4},{value:"Summary",id:"summary",level:2},{value:"Key Design Decisions",id:"key-design-decisions",level:3},{value:"Scalability Considerations",id:"scalability-considerations",level:3},{value:"Database Design",id:"database-design",level:4},{value:"Distributed Systems",id:"distributed-systems",level:4},{value:"Performance Optimization",id:"performance-optimization",level:4},{value:"Testing Strategy",id:"testing-strategy",level:3},{value:"Future Enhancements",id:"future-enhancements",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"bookmyshow",children:"BookMyShow"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#requirements-clarification",children:"Requirements Clarification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#core-entities--relationships",children:"Core Entities & Relationships"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#class-design",children:"Class Design"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#uml-class-diagram",children:"UML Class Diagram"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#implementation",children:"Implementation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#design-patterns--best-practices",children:"Design Patterns & Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#concurrency--seat-locking",children:"Concurrency & Seat Locking"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#edge-cases--extensions",children:"Edge Cases & Extensions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#summary",children:"Summary"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"requirements-clarification",children:"Requirements Clarification"}),"\n",(0,i.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,i.jsx)(n.h4,{id:"core-features",children:"Core Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Management"}),": Registration, login, profile management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Movie Browsing"}),": Search and filter movies by city, genre, language"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theater Management"}),": View theaters showing specific movies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Show Management"}),": View showtimes for movies at different theaters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seat Selection"}),": Browse available seats, select seats with layout visualization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Booking"}),": Reserve seats and create bookings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Payment Processing"}),": Process payments for bookings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ticket Generation"}),": Generate tickets after successful payment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Booking History"}),": View past and upcoming bookings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cancellation"}),": Cancel bookings with refund processing"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"admin-features",children:"Admin Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add/update/remove movies"}),"\n",(0,i.jsx)(n.li,{children:"Add/update/remove theaters and screens"}),"\n",(0,i.jsx)(n.li,{children:"Add/update/remove shows"}),"\n",(0,i.jsx)(n.li,{children:"Manage seat layouts"}),"\n",(0,i.jsx)(n.li,{children:"View booking analytics"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concurrency"}),": Handle simultaneous booking requests (prevent double booking)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistency"}),": Ensure seat locking mechanism is reliable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Fast search and booking (< 3 seconds)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Support millions of users and thousands of concurrent bookings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Availability"}),": 99.9% uptime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Secure payment processing and user data"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"capacity-estimates",children:"Capacity Estimates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Users"}),": 10 million registered users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Daily Active Users"}),": 500,000"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cities"}),": 100 cities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theaters"}),": 2,000 theaters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screens per Theater"}),": Average 5 screens"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shows per Screen"}),": 4-5 shows per day"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seats per Screen"}),": Average 200 seats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Daily Bookings"}),": 100,000 bookings"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scope-boundaries",children:"Scope Boundaries"}),"\n",(0,i.jsx)(n.h4,{id:"included",children:"Included"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Movie and show management"}),"\n",(0,i.jsx)(n.li,{children:"Seat selection with locking"}),"\n",(0,i.jsx)(n.li,{children:"Booking and payment flow"}),"\n",(0,i.jsx)(n.li,{children:"Search and filter functionality"}),"\n",(0,i.jsx)(n.li,{children:"Cancellation and refunds"}),"\n",(0,i.jsx)(n.li,{children:"User authentication"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"excluded",children:"Excluded"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Food and beverage ordering"}),"\n",(0,i.jsx)(n.li,{children:"Loyalty programs"}),"\n",(0,i.jsx)(n.li,{children:"Real-time notifications (email/SMS)"}),"\n",(0,i.jsx)(n.li,{children:"Movie ratings and reviews"}),"\n",(0,i.jsx)(n.li,{children:"Streaming integration"}),"\n",(0,i.jsx)(n.li,{children:"Physical ticket printing"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-entities--relationships",children:"Core Entities & Relationships"}),"\n",(0,i.jsx)(n.h3,{id:"main-entities",children:"Main Entities"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User"}),": Customers who book tickets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Movie"}),": Film information (title, genre, duration, language)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theater"}),": Physical cinema location"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screen"}),": Auditorium within a theater"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Show"}),": Specific screening of a movie in a screen at a time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seat"}),": Individual seat in a screen with row/column"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Booking"}),": Reservation made by a user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Payment"}),": Payment transaction for a booking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ticket"}),": Confirmation ticket after successful payment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"City"}),": Geographic location for theaters"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-relationships",children:"Key Relationships"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["City ",(0,i.jsx)(n.strong,{children:"HAS-MANY"})," Theater (One-to-Many)"]}),"\n",(0,i.jsxs)(n.li,{children:["Theater ",(0,i.jsx)(n.strong,{children:"HAS-MANY"})," Screen (One-to-Many)"]}),"\n",(0,i.jsxs)(n.li,{children:["Screen ",(0,i.jsx)(n.strong,{children:"HAS-MANY"})," Seat (One-to-Many)"]}),"\n",(0,i.jsxs)(n.li,{children:["Screen ",(0,i.jsx)(n.strong,{children:"HAS-MANY"})," Show (One-to-Many)"]}),"\n",(0,i.jsxs)(n.li,{children:["Show ",(0,i.jsx)(n.strong,{children:"BELONGS-TO"})," Movie (Many-to-One)"]}),"\n",(0,i.jsxs)(n.li,{children:["Show ",(0,i.jsx)(n.strong,{children:"BELONGS-TO"})," Screen (Many-to-One)"]}),"\n",(0,i.jsxs)(n.li,{children:["User ",(0,i.jsx)(n.strong,{children:"HAS-MANY"})," Booking (One-to-Many)"]}),"\n",(0,i.jsxs)(n.li,{children:["Booking ",(0,i.jsx)(n.strong,{children:"HAS-MANY"})," Seat (Many-to-Many through ShowSeat)"]}),"\n",(0,i.jsxs)(n.li,{children:["Booking ",(0,i.jsx)(n.strong,{children:"HAS-ONE"})," Payment (One-to-One)"]}),"\n",(0,i.jsxs)(n.li,{children:["Booking ",(0,i.jsx)(n.strong,{children:"GENERATES"})," Ticket (One-to-Many)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"class-design",children:"Class Design"}),"\n",(0,i.jsx)(n.h3,{id:"core-classes-with-responsibilities",children:"Core Classes with Responsibilities"}),"\n",(0,i.jsx)(n.h4,{id:"user-management",children:"User Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User"}),": Store user details, manage authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UserType"}),": Enum for customer/admin roles"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"movie--theater",children:"Movie & Theater"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Movie"}),": Store movie metadata"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theater"}),": Manage theater details and screens"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Screen"}),": Manage screen layout and seats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"City"}),": Store location information"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"show--booking",children:"Show & Booking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Show"}),": Represent movie screenings with timing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seat"}),": Represent physical seats with type"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ShowSeat"}),": Track seat availability for specific shows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Booking"}),": Manage reservation details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BookingStatus"}),": Enum for booking states"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"payment--tickets",children:"Payment & Tickets"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Payment"}),": Process and track payments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PaymentStatus"}),": Enum for payment states"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ticket"}),": Generate confirmation tickets"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"services",children:"Services"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MovieService"}),": Handle movie operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TheaterService"}),": Manage theater operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BookingService"}),": Handle booking workflow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PaymentService"}),": Process payments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SeatLockManager"}),": Manage seat locking for concurrency"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"uml-class-diagram",children:"UML Class Diagram"}),"\n",(0,i.jsx)(n.mermaid,{value:'classDiagram\n    class User {\n        -String userId\n        -String name\n        -String email\n        -String phone\n        -String password\n        -UserType userType\n        -List~Booking~ bookings\n        +register() boolean\n        +login() boolean\n        +getBookingHistory() List~Booking~\n    }\n\n    class Movie {\n        -String movieId\n        -String title\n        -String description\n        -int durationMinutes\n        -Language language\n        -Genre genre\n        -LocalDate releaseDate\n        -List~Show~ shows\n        +getDetails() String\n    }\n\n    class City {\n        -String cityId\n        -String name\n        -String state\n        -List~Theater~ theaters\n        +addTheater(Theater) void\n        +getTheaters() List~Theater~\n    }\n\n    class Theater {\n        -String theaterId\n        -String name\n        -String address\n        -City city\n        -List~Screen~ screens\n        +addScreen(Screen) void\n        +getScreens() List~Screen~\n    }\n\n    class Screen {\n        -String screenId\n        -String name\n        -int capacity\n        -Theater theater\n        -List~Seat~ seats\n        -List~Show~ shows\n        +addShow(Show) void\n        +getSeats() List~Seat~\n    }\n\n    class Seat {\n        -String seatId\n        -String seatNumber\n        -int rowNum\n        -int colNum\n        -SeatType seatType\n        -double price\n        +isAvailable() boolean\n    }\n\n    class Show {\n        -String showId\n        -Movie movie\n        -Screen screen\n        -LocalDateTime startTime\n        -LocalDateTime endTime\n        -Map~String, ShowSeat~ showSeats\n        +getAvailableSeats() List~ShowSeat~\n        +bookSeats(List~String~) boolean\n    }\n\n    class ShowSeat {\n        -String showSeatId\n        -Show show\n        -Seat seat\n        -ShowSeatStatus status\n        -double price\n        -LocalDateTime lockedAt\n        -String lockedBy\n        +lock(String userId) boolean\n        +unlock() void\n        +book() boolean\n    }\n\n    class Booking {\n        -String bookingId\n        -User user\n        -Show show\n        -List~ShowSeat~ seats\n        -double totalAmount\n        -BookingStatus status\n        -LocalDateTime bookingTime\n        -Payment payment\n        +confirmBooking() boolean\n        +cancelBooking() boolean\n        +generateTickets() List~Ticket~\n    }\n\n    class Payment {\n        -String paymentId\n        -Booking booking\n        -double amount\n        -PaymentMethod method\n        -PaymentStatus status\n        -LocalDateTime paymentTime\n        +processPayment() boolean\n        +refund() boolean\n    }\n\n    class Ticket {\n        -String ticketId\n        -Booking booking\n        -ShowSeat showSeat\n        -String qrCode\n        -LocalDateTime issuedAt\n        +getTicketDetails() String\n    }\n\n    class BookingService {\n        -Map~String, Booking~ bookings\n        -SeatLockManager lockManager\n        +searchMovies(City, date) List~Movie~\n        +getShows(Movie, Theater, date) List~Show~\n        +lockSeats(Show, List~Seat~, User) boolean\n        +createBooking(User, Show, List~Seat~) Booking\n        +confirmBooking(Booking, Payment) boolean\n        +cancelBooking(Booking) boolean\n    }\n\n    class SeatLockManager {\n        -Map~String, SeatLock~ locks\n        -int LOCK_TIMEOUT_MINUTES\n        +lockSeats(List~ShowSeat~, userId) boolean\n        +unlockSeats(List~ShowSeat~) void\n        +isLocked(ShowSeat) boolean\n        +cleanExpiredLocks() void\n    }\n\n    class SeatLock {\n        -String lockId\n        -ShowSeat showSeat\n        -String userId\n        -LocalDateTime lockedAt\n        -LocalDateTime expiresAt\n        +isExpired() boolean\n    }\n\n    class Genre {\n        <<enumeration>>\n        ACTION\n        COMEDY\n        DRAMA\n        HORROR\n        THRILLER\n        ROMANCE\n        SCI_FI\n    }\n\n    class Language {\n        <<enumeration>>\n        ENGLISH\n        HINDI\n        TAMIL\n        TELUGU\n        MALAYALAM\n    }\n\n    class SeatType {\n        <<enumeration>>\n        REGULAR\n        PREMIUM\n        VIP\n        RECLINER\n    }\n\n    class ShowSeatStatus {\n        <<enumeration>>\n        AVAILABLE\n        LOCKED\n        BOOKED\n    }\n\n    class BookingStatus {\n        <<enumeration>>\n        PENDING\n        CONFIRMED\n        CANCELLED\n        EXPIRED\n    }\n\n    class PaymentStatus {\n        <<enumeration>>\n        PENDING\n        SUCCESS\n        FAILED\n        REFUNDED\n    }\n\n    class PaymentMethod {\n        <<enumeration>>\n        CREDIT_CARD\n        DEBIT_CARD\n        UPI\n        NET_BANKING\n        WALLET\n    }\n\n    class UserType {\n        <<enumeration>>\n        CUSTOMER\n        ADMIN\n        THEATER_OWNER\n    }\n\n    User "1" --\x3e "*" Booking : makes\n    City "1" --\x3e "*" Theater : has\n    Theater "1" --\x3e "*" Screen : contains\n    Screen "1" --\x3e "*" Seat : has\n    Screen "1" --\x3e "*" Show : hosts\n    Movie "1" --\x3e "*" Show : shown in\n    Show "1" --\x3e "*" ShowSeat : has\n    ShowSeat "*" --\x3e "1" Seat : refers to\n    Booking "*" --\x3e "*" ShowSeat : reserves\n    Booking "1" --\x3e "1" Show : for\n    Booking "1" --\x3e "1" Payment : has\n    Booking "1" --\x3e "*" Ticket : generates\n    BookingService --\x3e SeatLockManager : uses\n    SeatLockManager --\x3e SeatLock : manages\n    SeatLock --\x3e ShowSeat : locks\n    User --\x3e UserType\n    Movie --\x3e Genre\n    Movie --\x3e Language\n    Seat --\x3e SeatType\n    ShowSeat --\x3e ShowSeatStatus\n    Booking --\x3e BookingStatus\n    Payment --\x3e PaymentStatus\n    Payment --\x3e PaymentMethod'}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,i.jsx)(n.h4,{id:"usertypejava",children:"UserType.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum UserType {\n    CUSTOMER,\n    ADMIN,\n    THEATER_OWNER\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"genrejava",children:"Genre.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum Genre {\n    ACTION,\n    COMEDY,\n    DRAMA,\n    HORROR,\n    THRILLER,\n    ROMANCE,\n    SCI_FI,\n    ANIMATION,\n    DOCUMENTARY\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"languagejava",children:"Language.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum Language {\n    ENGLISH,\n    HINDI,\n    TAMIL,\n    TELUGU,\n    MALAYALAM,\n    KANNADA,\n    BENGALI,\n    MARATHI\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"seattypejava",children:"SeatType.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum SeatType {\n    REGULAR(100.0),\n    PREMIUM(150.0),\n    VIP(200.0),\n    RECLINER(300.0);\n\n    private final double basePrice;\n\n    SeatType(double basePrice) {\n        this.basePrice = basePrice;\n    }\n\n    public double getBasePrice() {\n        return basePrice;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"showseatstatusjava",children:"ShowSeatStatus.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum ShowSeatStatus {\n    AVAILABLE,\n    LOCKED,\n    BOOKED\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"bookingstatusjava",children:"BookingStatus.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum BookingStatus {\n    PENDING,\n    CONFIRMED,\n    CANCELLED,\n    EXPIRED\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"paymentstatusjava",children:"PaymentStatus.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum PaymentStatus {\n    PENDING,\n    SUCCESS,\n    FAILED,\n    REFUNDED\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"paymentmethodjava",children:"PaymentMethod.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public enum PaymentMethod {\n    CREDIT_CARD,\n    DEBIT_CARD,\n    UPI,\n    NET_BANKING,\n    WALLET\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"core-entity-classes",children:"Core Entity Classes"}),"\n",(0,i.jsx)(n.h4,{id:"userjava",children:"User.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class User {\n    private String userId;\n    private String name;\n    private String email;\n    private String phone;\n    private String passwordHash;\n    private UserType userType;\n    private List<Booking> bookings;\n\n    public User(String userId, String name, String email, String phone,\n                String passwordHash, UserType userType) {\n        this.userId = userId;\n        this.name = name;\n        this.email = email;\n        this.phone = phone;\n        this.passwordHash = passwordHash;\n        this.userType = userType;\n        this.bookings = new ArrayList<>();\n    }\n\n    public void addBooking(Booking booking) {\n        bookings.add(booking);\n    }\n\n    public List<Booking> getBookingHistory() {\n        return new ArrayList<>(bookings);\n    }\n\n    // Getters\n    public String getUserId() { return userId; }\n    public String getName() { return name; }\n    public String getEmail() { return email; }\n    public String getPhone() { return phone; }\n    public UserType getUserType() { return userType; }\n\n    @Override\n    public String toString() {\n        return String.format("User[%s]: %s (%s)", userId, name, email);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"moviejava",children:"Movie.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Movie {\n    private String movieId;\n    private String title;\n    private String description;\n    private int durationMinutes;\n    private Language language;\n    private Genre genre;\n    private LocalDate releaseDate;\n    private List<Show> shows;\n\n    public Movie(String movieId, String title, String description,\n                 int durationMinutes, Language language, Genre genre,\n                 LocalDate releaseDate) {\n        this.movieId = movieId;\n        this.title = title;\n        this.description = description;\n        this.durationMinutes = durationMinutes;\n        this.language = language;\n        this.genre = genre;\n        this.releaseDate = releaseDate;\n        this.shows = new ArrayList<>();\n    }\n\n    public void addShow(Show show) {\n        shows.add(show);\n    }\n\n    public List<Show> getShows() {\n        return new ArrayList<>(shows);\n    }\n\n    // Getters\n    public String getMovieId() { return movieId; }\n    public String getTitle() { return title; }\n    public String getDescription() { return description; }\n    public int getDurationMinutes() { return durationMinutes; }\n    public Language getLanguage() { return language; }\n    public Genre getGenre() { return genre; }\n    public LocalDate getReleaseDate() { return releaseDate; }\n\n    @Override\n    public String toString() {\n        return String.format("%s (%s) - %s | %d mins",\n            title, language, genre, durationMinutes);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"cityjava",children:"City.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class City {\n    private String cityId;\n    private String name;\n    private String state;\n    private List<Theater> theaters;\n\n    public City(String cityId, String name, String state) {\n        this.cityId = cityId;\n        this.name = name;\n        this.state = state;\n        this.theaters = new ArrayList<>();\n    }\n\n    public void addTheater(Theater theater) {\n        theaters.add(theater);\n    }\n\n    public List<Theater> getTheaters() {\n        return new ArrayList<>(theaters);\n    }\n\n    // Getters\n    public String getCityId() { return cityId; }\n    public String getName() { return name; }\n    public String getState() { return state; }\n\n    @Override\n    public String toString() {\n        return String.format("%s, %s", name, state);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"theaterjava",children:"Theater.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Theater {\n    private String theaterId;\n    private String name;\n    private String address;\n    private City city;\n    private List<Screen> screens;\n\n    public Theater(String theaterId, String name, String address, City city) {\n        this.theaterId = theaterId;\n        this.name = name;\n        this.address = address;\n        this.city = city;\n        this.screens = new ArrayList<>();\n    }\n\n    public void addScreen(Screen screen) {\n        screens.add(screen);\n    }\n\n    public List<Screen> getScreens() {\n        return new ArrayList<>(screens);\n    }\n\n    // Getters\n    public String getTheaterId() { return theaterId; }\n    public String getName() { return name; }\n    public String getAddress() { return address; }\n    public City getCity() { return city; }\n\n    @Override\n    public String toString() {\n        return String.format("%s - %s", name, address);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"screenjava",children:"Screen.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Screen {\n    private String screenId;\n    private String name;\n    private int capacity;\n    private Theater theater;\n    private List<Seat> seats;\n    private List<Show> shows;\n\n    public Screen(String screenId, String name, Theater theater) {\n        this.screenId = screenId;\n        this.name = name;\n        this.theater = theater;\n        this.seats = new ArrayList<>();\n        this.shows = new ArrayList<>();\n        this.capacity = 0;\n    }\n\n    public void addSeat(Seat seat) {\n        seats.add(seat);\n        capacity++;\n    }\n\n    public void addShow(Show show) {\n        shows.add(show);\n    }\n\n    public List<Seat> getSeats() {\n        return new ArrayList<>(seats);\n    }\n\n    public List<Show> getShows() {\n        return new ArrayList<>(shows);\n    }\n\n    // Getters\n    public String getScreenId() { return screenId; }\n    public String getName() { return name; }\n    public int getCapacity() { return capacity; }\n    public Theater getTheater() { return theater; }\n\n    @Override\n    public String toString() {\n        return String.format("Screen %s (%d seats)", name, capacity);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"seatjava",children:"Seat.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class Seat {\n    private String seatId;\n    private String seatNumber;\n    private int rowNum;\n    private int colNum;\n    private SeatType seatType;\n\n    public Seat(String seatId, int rowNum, int colNum, SeatType seatType) {\n        this.seatId = seatId;\n        this.rowNum = rowNum;\n        this.colNum = colNum;\n        this.seatType = seatType;\n        this.seatNumber = generateSeatNumber(rowNum, colNum);\n    }\n\n    private String generateSeatNumber(int row, int col) {\n        char rowChar = (char) (\'A\' + row);\n        return String.format("%c%d", rowChar, col + 1);\n    }\n\n    // Getters\n    public String getSeatId() { return seatId; }\n    public String getSeatNumber() { return seatNumber; }\n    public int getRowNum() { return rowNum; }\n    public int getColNum() { return colNum; }\n    public SeatType getSeatType() { return seatType; }\n\n    @Override\n    public String toString() {\n        return String.format("%s (%s)", seatNumber, seatType);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"show-and-booking-classes",children:"Show and Booking Classes"}),"\n",(0,i.jsx)(n.h4,{id:"showjava",children:"Show.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\n\npublic class Show {\n    private String showId;\n    private Movie movie;\n    private Screen screen;\n    private LocalDateTime startTime;\n    private LocalDateTime endTime;\n    private Map<String, ShowSeat> showSeats; // seatId -> ShowSeat\n\n    public Show(String showId, Movie movie, Screen screen, LocalDateTime startTime) {\n        this.showId = showId;\n        this.movie = movie;\n        this.screen = screen;\n        this.startTime = startTime;\n        this.endTime = startTime.plusMinutes(movie.getDurationMinutes());\n        this.showSeats = new HashMap<>();\n        initializeShowSeats();\n    }\n\n    private void initializeShowSeats() {\n        for (Seat seat : screen.getSeats()) {\n            ShowSeat showSeat = new ShowSeat(\n                UUID.randomUUID().toString(),\n                this,\n                seat,\n                seat.getSeatType().getBasePrice()\n            );\n            showSeats.put(seat.getSeatId(), showSeat);\n        }\n    }\n\n    public List<ShowSeat> getAvailableSeats() {\n        List<ShowSeat> available = new ArrayList<>();\n        for (ShowSeat showSeat : showSeats.values()) {\n            if (showSeat.getStatus() == ShowSeatStatus.AVAILABLE) {\n                available.add(showSeat);\n            }\n        }\n        return available;\n    }\n\n    public ShowSeat getShowSeat(String seatId) {\n        return showSeats.get(seatId);\n    }\n\n    public Map<String, ShowSeat> getAllShowSeats() {\n        return new HashMap<>(showSeats);\n    }\n\n    // Getters\n    public String getShowId() { return showId; }\n    public Movie getMovie() { return movie; }\n    public Screen getScreen() { return screen; }\n    public LocalDateTime getStartTime() { return startTime; }\n    public LocalDateTime getEndTime() { return endTime; }\n\n    @Override\n    public String toString() {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm");\n        return String.format("Show: %s at %s - %s",\n            movie.getTitle(), screen.getName(), startTime.format(formatter));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"showseatjava",children:"ShowSeat.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\n\npublic class ShowSeat {\n    private String showSeatId;\n    private Show show;\n    private Seat seat;\n    private ShowSeatStatus status;\n    private double price;\n    private LocalDateTime lockedAt;\n    private String lockedBy;\n\n    public ShowSeat(String showSeatId, Show show, Seat seat, double price) {\n        this.showSeatId = showSeatId;\n        this.show = show;\n        this.seat = seat;\n        this.price = price;\n        this.status = ShowSeatStatus.AVAILABLE;\n    }\n\n    public synchronized boolean lock(String userId) {\n        if (status == ShowSeatStatus.AVAILABLE) {\n            status = ShowSeatStatus.LOCKED;\n            lockedBy = userId;\n            lockedAt = LocalDateTime.now();\n            return true;\n        }\n        return false;\n    }\n\n    public synchronized void unlock() {\n        if (status == ShowSeatStatus.LOCKED) {\n            status = ShowSeatStatus.AVAILABLE;\n            lockedBy = null;\n            lockedAt = null;\n        }\n    }\n\n    public synchronized boolean book() {\n        if (status == ShowSeatStatus.LOCKED) {\n            status = ShowSeatStatus.BOOKED;\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isLockedBy(String userId) {\n        return status == ShowSeatStatus.LOCKED &&\n               lockedBy != null &&\n               lockedBy.equals(userId);\n    }\n\n    // Getters\n    public String getShowSeatId() { return showSeatId; }\n    public Show getShow() { return show; }\n    public Seat getSeat() { return seat; }\n    public ShowSeatStatus getStatus() { return status; }\n    public double getPrice() { return price; }\n    public LocalDateTime getLockedAt() { return lockedAt; }\n    public String getLockedBy() { return lockedBy; }\n\n    public void setStatus(ShowSeatStatus status) {\n        this.status = status;\n    }\n\n    @Override\n    public String toString() {\n        return String.format("%s - %s ($%.2f)",\n            seat.getSeatNumber(), status, price);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"bookingjava",children:"Booking.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\npublic class Booking {\n    private String bookingId;\n    private User user;\n    private Show show;\n    private List<ShowSeat> seats;\n    private double totalAmount;\n    private BookingStatus status;\n    private LocalDateTime bookingTime;\n    private Payment payment;\n    private List<Ticket> tickets;\n\n    public Booking(User user, Show show, List<ShowSeat> seats) {\n        this.bookingId = "BK" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n        this.user = user;\n        this.show = show;\n        this.seats = new ArrayList<>(seats);\n        this.status = BookingStatus.PENDING;\n        this.bookingTime = LocalDateTime.now();\n        this.tickets = new ArrayList<>();\n        calculateTotalAmount();\n    }\n\n    private void calculateTotalAmount() {\n        totalAmount = seats.stream()\n            .mapToDouble(ShowSeat::getPrice)\n            .sum();\n    }\n\n    public boolean confirmBooking() {\n        if (payment != null && payment.getStatus() == PaymentStatus.SUCCESS) {\n            status = BookingStatus.CONFIRMED;\n\n            // Book all seats\n            for (ShowSeat seat : seats) {\n                seat.book();\n            }\n\n            // Generate tickets\n            generateTickets();\n            return true;\n        }\n        return false;\n    }\n\n    public boolean cancelBooking() {\n        if (status == BookingStatus.CONFIRMED) {\n            status = BookingStatus.CANCELLED;\n\n            // Release seats\n            for (ShowSeat seat : seats) {\n                seat.setStatus(ShowSeatStatus.AVAILABLE);\n            }\n\n            // Process refund\n            if (payment != null) {\n                payment.refund();\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private void generateTickets() {\n        for (ShowSeat showSeat : seats) {\n            Ticket ticket = new Ticket(this, showSeat);\n            tickets.add(ticket);\n        }\n    }\n\n    // Getters and Setters\n    public String getBookingId() { return bookingId; }\n    public User getUser() { return user; }\n    public Show getShow() { return show; }\n    public List<ShowSeat> getSeats() { return new ArrayList<>(seats); }\n    public double getTotalAmount() { return totalAmount; }\n    public BookingStatus getStatus() { return status; }\n    public LocalDateTime getBookingTime() { return bookingTime; }\n    public Payment getPayment() { return payment; }\n    public void setPayment(Payment payment) { this.payment = payment; }\n    public List<Ticket> getTickets() { return new ArrayList<>(tickets); }\n\n    @Override\n    public String toString() {\n        return String.format("Booking %s: %s - %d seats - $%.2f - %s",\n            bookingId, show.getMovie().getTitle(), seats.size(), totalAmount, status);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"payment-and-ticket-classes",children:"Payment and Ticket Classes"}),"\n",(0,i.jsx)(n.h4,{id:"paymentjava",children:"Payment.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\nimport java.util.UUID;\n\npublic class Payment {\n    private String paymentId;\n    private Booking booking;\n    private double amount;\n    private PaymentMethod method;\n    private PaymentStatus status;\n    private LocalDateTime paymentTime;\n    private String transactionId;\n\n    public Payment(Booking booking, PaymentMethod method) {\n        this.paymentId = "PAY" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n        this.booking = booking;\n        this.amount = booking.getTotalAmount();\n        this.method = method;\n        this.status = PaymentStatus.PENDING;\n    }\n\n    public boolean processPayment() {\n        // Simulate payment processing\n        System.out.println("Processing payment of $" + amount + " via " + method);\n\n        try {\n            // Simulate payment gateway call\n            Thread.sleep(1000);\n\n            // Simulate success (in real system, this would be actual payment gateway response)\n            this.status = PaymentStatus.SUCCESS;\n            this.paymentTime = LocalDateTime.now();\n            this.transactionId = "TXN" + UUID.randomUUID().toString().substring(0, 10).toUpperCase();\n\n            System.out.println("\u2713 Payment successful! Transaction ID: " + transactionId);\n            return true;\n\n        } catch (Exception e) {\n            this.status = PaymentStatus.FAILED;\n            System.out.println("\u2717 Payment failed!");\n            return false;\n        }\n    }\n\n    public boolean refund() {\n        if (status == PaymentStatus.SUCCESS) {\n            System.out.println("Processing refund of $" + amount);\n            this.status = PaymentStatus.REFUNDED;\n            System.out.println("\u2713 Refund successful!");\n            return true;\n        }\n        return false;\n    }\n\n    // Getters\n    public String getPaymentId() { return paymentId; }\n    public Booking getBooking() { return booking; }\n    public double getAmount() { return amount; }\n    public PaymentMethod getMethod() { return method; }\n    public PaymentStatus getStatus() { return status; }\n    public LocalDateTime getPaymentTime() { return paymentTime; }\n    public String getTransactionId() { return transactionId; }\n\n    @Override\n    public String toString() {\n        return String.format("Payment %s: $%.2f via %s - %s",\n            paymentId, amount, method, status);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"ticketjava",children:"Ticket.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.UUID;\n\npublic class Ticket {\n    private String ticketId;\n    private Booking booking;\n    private ShowSeat showSeat;\n    private String qrCode;\n    private LocalDateTime issuedAt;\n\n    public Ticket(Booking booking, ShowSeat showSeat) {\n        this.ticketId = "TKT" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();\n        this.booking = booking;\n        this.showSeat = showSeat;\n        this.qrCode = generateQRCode();\n        this.issuedAt = LocalDateTime.now();\n    }\n\n    private String generateQRCode() {\n        // In real system, this would generate actual QR code\n        return "QR-" + ticketId + "-" + showSeat.getSeat().getSeatNumber();\n    }\n\n    public String getTicketDetails() {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm");\n        StringBuilder details = new StringBuilder();\n        details.append("========== TICKET ==========\\n");\n        details.append("Ticket ID: ").append(ticketId).append("\\n");\n        details.append("Booking ID: ").append(booking.getBookingId()).append("\\n");\n        details.append("Movie: ").append(booking.getShow().getMovie().getTitle()).append("\\n");\n        details.append("Theater: ").append(booking.getShow().getScreen().getTheater().getName()).append("\\n");\n        details.append("Screen: ").append(booking.getShow().getScreen().getName()).append("\\n");\n        details.append("Seat: ").append(showSeat.getSeat().getSeatNumber()).append("\\n");\n        details.append("Show Time: ").append(booking.getShow().getStartTime().format(formatter)).append("\\n");\n        details.append("Price: $").append(String.format("%.2f", showSeat.getPrice())).append("\\n");\n        details.append("QR Code: ").append(qrCode).append("\\n");\n        details.append("============================\\n");\n        return details.toString();\n    }\n\n    // Getters\n    public String getTicketId() { return ticketId; }\n    public Booking getBooking() { return booking; }\n    public ShowSeat getShowSeat() { return showSeat; }\n    public String getQrCode() { return qrCode; }\n    public LocalDateTime getIssuedAt() { return issuedAt; }\n\n    @Override\n    public String toString() {\n        return String.format("Ticket %s: %s - Seat %s",\n            ticketId, booking.getShow().getMovie().getTitle(),\n            showSeat.getSeat().getSeatNumber());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"service-classes",children:"Service Classes"}),"\n",(0,i.jsx)(n.h4,{id:"seatlockmanagerjava",children:"SeatLockManager.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class SeatLockManager {\n    private static final int LOCK_TIMEOUT_MINUTES = 10;\n    private final Map<String, SeatLock> locks; // showSeatId -> SeatLock\n\n    public SeatLockManager() {\n        this.locks = new ConcurrentHashMap<>();\n        startLockCleanupTask();\n    }\n\n    public synchronized boolean lockSeats(List<ShowSeat> seats, String userId) {\n        // Check if all seats can be locked\n        for (ShowSeat seat : seats) {\n            if (!canLock(seat, userId)) {\n                return false;\n            }\n        }\n\n        // Lock all seats\n        for (ShowSeat seat : seats) {\n            if (seat.lock(userId)) {\n                SeatLock lock = new SeatLock(seat, userId);\n                locks.put(seat.getShowSeatId(), lock);\n            }\n        }\n\n        System.out.println("\u2713 Locked " + seats.size() + " seats for user: " + userId);\n        return true;\n    }\n\n    public synchronized void unlockSeats(List<ShowSeat> seats) {\n        for (ShowSeat seat : seats) {\n            seat.unlock();\n            locks.remove(seat.getShowSeatId());\n        }\n        System.out.println("\u2713 Unlocked " + seats.size() + " seats");\n    }\n\n    private boolean canLock(ShowSeat seat, String userId) {\n        if (seat.getStatus() == ShowSeatStatus.BOOKED) {\n            return false;\n        }\n\n        if (seat.getStatus() == ShowSeatStatus.LOCKED) {\n            // Check if locked by same user or if lock expired\n            SeatLock lock = locks.get(seat.getShowSeatId());\n            if (lock != null) {\n                if (lock.getUserId().equals(userId)) {\n                    return true; // Same user can re-lock\n                }\n                if (lock.isExpired()) {\n                    // Expired lock, release it\n                    seat.unlock();\n                    locks.remove(seat.getShowSeatId());\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        return true; // Available\n    }\n\n    public boolean isLocked(ShowSeat seat) {\n        return locks.containsKey(seat.getShowSeatId());\n    }\n\n    public void cleanExpiredLocks() {\n        List<String> expiredLocks = new ArrayList<>();\n\n        for (Map.Entry<String, SeatLock> entry : locks.entrySet()) {\n            if (entry.getValue().isExpired()) {\n                expiredLocks.add(entry.getKey());\n            }\n        }\n\n        for (String showSeatId : expiredLocks) {\n            SeatLock lock = locks.remove(showSeatId);\n            if (lock != null) {\n                lock.getShowSeat().unlock();\n            }\n        }\n\n        if (!expiredLocks.isEmpty()) {\n            System.out.println("Cleaned " + expiredLocks.size() + " expired locks");\n        }\n    }\n\n    private void startLockCleanupTask() {\n        Timer timer = new Timer(true);\n        timer.scheduleAtFixedRate(new TimerTask() {\n            @Override\n            public void run() {\n                cleanExpiredLocks();\n            }\n        }, 60000, 60000); // Run every minute\n    }\n\n    // Inner class for seat locks\n    private static class SeatLock {\n        private final String lockId;\n        private final ShowSeat showSeat;\n        private final String userId;\n        private final LocalDateTime lockedAt;\n        private final LocalDateTime expiresAt;\n\n        public SeatLock(ShowSeat showSeat, String userId) {\n            this.lockId = UUID.randomUUID().toString();\n            this.showSeat = showSeat;\n            this.userId = userId;\n            this.lockedAt = LocalDateTime.now();\n            this.expiresAt = lockedAt.plusMinutes(LOCK_TIMEOUT_MINUTES);\n        }\n\n        public boolean isExpired() {\n            return LocalDateTime.now().isAfter(expiresAt);\n        }\n\n        public ShowSeat getShowSeat() { return showSeat; }\n        public String getUserId() { return userId; }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"bookingservicejava",children:"BookingService.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class BookingService {\n    private final Map<String, Booking> bookings;\n    private final SeatLockManager lockManager;\n    private final Map<String, Movie> movies;\n    private final Map<String, Theater> theaters;\n    private final Map<String, Show> shows;\n\n    public BookingService() {\n        this.bookings = new HashMap<>();\n        this.lockManager = new SeatLockManager();\n        this.movies = new HashMap<>();\n        this.theaters = new HashMap<>();\n        this.shows = new HashMap<>();\n    }\n\n    // Movie search\n    public List<Movie> searchMovies(City city, String title) {\n        return movies.values().stream()\n            .filter(m -> m.getTitle().toLowerCase().contains(title.toLowerCase()))\n            .filter(m -> hasShowsInCity(m, city))\n            .collect(Collectors.toList());\n    }\n\n    public List<Movie> getMoviesByCity(City city) {\n        return movies.values().stream()\n            .filter(m -> hasShowsInCity(m, city))\n            .collect(Collectors.toList());\n    }\n\n    private boolean hasShowsInCity(Movie movie, City city) {\n        return movie.getShows().stream()\n            .anyMatch(show -> show.getScreen().getTheater().getCity().equals(city));\n    }\n\n    // Theater and Show search\n    public List<Theater> getTheatersShowingMovie(Movie movie, City city) {\n        return movie.getShows().stream()\n            .map(show -> show.getScreen().getTheater())\n            .filter(theater -> theater.getCity().equals(city))\n            .distinct()\n            .collect(Collectors.toList());\n    }\n\n    public List<Show> getShows(Movie movie, Theater theater, LocalDate date) {\n        return movie.getShows().stream()\n            .filter(show -> show.getScreen().getTheater().equals(theater))\n            .filter(show -> show.getStartTime().toLocalDate().equals(date))\n            .sorted(Comparator.comparing(Show::getStartTime))\n            .collect(Collectors.toList());\n    }\n\n    // Seat availability\n    public List<ShowSeat> getAvailableSeats(Show show) {\n        return show.getAvailableSeats();\n    }\n\n    public Map<SeatType, List<ShowSeat>> getSeatsGroupedByType(Show show) {\n        return show.getAvailableSeats().stream()\n            .collect(Collectors.groupingBy(ss -> ss.getSeat().getSeatType()));\n    }\n\n    // Booking workflow\n    public boolean lockSeats(Show show, List<String> seatIds, User user) {\n        List<ShowSeat> seatsToLock = seatIds.stream()\n            .map(show::getShowSeat)\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n\n        if (seatsToLock.size() != seatIds.size()) {\n            System.out.println("Some seats not found!");\n            return false;\n        }\n\n        return lockManager.lockSeats(seatsToLock, user.getUserId());\n    }\n\n    public Booking createBooking(User user, Show show, List<String> seatIds) {\n        List<ShowSeat> seats = seatIds.stream()\n            .map(show::getShowSeat)\n            .filter(Objects::nonNull)\n            .filter(ss -> ss.isLockedBy(user.getUserId()))\n            .collect(Collectors.toList());\n\n        if (seats.size() != seatIds.size()) {\n            System.out.println("Not all seats are locked by this user!");\n            return null;\n        }\n\n        Booking booking = new Booking(user, show, seats);\n        bookings.put(booking.getBookingId(), booking);\n        user.addBooking(booking);\n\n        System.out.println("\u2713 Booking created: " + booking.getBookingId());\n        return booking;\n    }\n\n    public boolean confirmBooking(Booking booking, Payment payment) {\n        booking.setPayment(payment);\n\n        if (payment.processPayment()) {\n            boolean confirmed = booking.confirmBooking();\n            if (confirmed) {\n                System.out.println("\u2713 Booking confirmed: " + booking.getBookingId());\n                return true;\n            }\n        }\n\n        // Payment failed, unlock seats\n        lockManager.unlockSeats(booking.getSeats());\n        System.out.println("\u2717 Booking failed: " + booking.getBookingId());\n        return false;\n    }\n\n    public boolean cancelBooking(String bookingId) {\n        Booking booking = bookings.get(bookingId);\n        if (booking != null) {\n            boolean cancelled = booking.cancelBooking();\n            if (cancelled) {\n                System.out.println("\u2713 Booking cancelled: " + bookingId);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Admin operations\n    public void addMovie(Movie movie) {\n        movies.put(movie.getMovieId(), movie);\n        System.out.println("\u2713 Movie added: " + movie.getTitle());\n    }\n\n    public void addTheater(Theater theater) {\n        theaters.put(theater.getTheaterId(), theater);\n        System.out.println("\u2713 Theater added: " + theater.getName());\n    }\n\n    public void addShow(Show show) {\n        shows.put(show.getShowId(), show);\n        show.getMovie().addShow(show);\n        show.getScreen().addShow(show);\n        System.out.println("\u2713 Show added: " + show);\n    }\n\n    // Getters\n    public Booking getBooking(String bookingId) {\n        return bookings.get(bookingId);\n    }\n\n    public Movie getMovie(String movieId) {\n        return movies.get(movieId);\n    }\n\n    public Theater getTheater(String theaterId) {\n        return theaters.get(theaterId);\n    }\n\n    public Show getShow(String showId) {\n        return shows.get(showId);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"demo-application",children:"Demo Application"}),"\n",(0,i.jsx)(n.h4,{id:"bookmyshowdemojava",children:"BookMyShowDemo.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class BookMyShowDemo {\n    public static void main(String[] args) {\n        System.out.println("========== BookMyShow System Demo ==========\\n");\n\n        // Initialize service\n        BookingService bookingService = new BookingService();\n\n        // Setup: Create cities\n        City mumbai = new City("C1", "Mumbai", "Maharashtra");\n        City bangalore = new City("C2", "Bangalore", "Karnataka");\n\n        // Setup: Create theaters\n        Theater pvr = new Theater("T1", "PVR Cinemas", "Phoenix Mall, Mumbai", mumbai);\n        Theater inox = new Theater("T2", "INOX", "Forum Mall, Bangalore", bangalore);\n        mumbai.addTheater(pvr);\n        bangalore.addTheater(inox);\n\n        // Setup: Create screens\n        Screen pvrScreen1 = new Screen("S1", "Screen 1", pvr);\n        Screen pvrScreen2 = new Screen("S2", "Screen 2", pvr);\n        Screen inoxScreen1 = new Screen("S3", "Screen 1", inox);\n        pvr.addScreen(pvrScreen1);\n        pvr.addScreen(pvrScreen2);\n        inox.addScreen(inoxScreen1);\n\n        // Setup: Create seats for screens\n        createSeatsForScreen(pvrScreen1);\n        createSeatsForScreen(pvrScreen2);\n        createSeatsForScreen(inoxScreen1);\n\n        // Setup: Create movies\n        Movie inception = new Movie("M1", "Inception",\n            "A mind-bending thriller", 148, Language.ENGLISH,\n            Genre.SCI_FI, LocalDate.of(2010, 7, 16));\n\n        Movie avengers = new Movie("M2", "Avengers: Endgame",\n            "Epic superhero finale", 181, Language.ENGLISH,\n            Genre.ACTION, LocalDate.of(2019, 4, 26));\n\n        bookingService.addMovie(inception);\n        bookingService.addMovie(avengers);\n        bookingService.addTheater(pvr);\n        bookingService.addTheater(inox);\n\n        // Setup: Create shows\n        LocalDateTime today = LocalDateTime.now();\n\n        Show show1 = new Show("SH1", inception, pvrScreen1,\n            today.withHour(14).withMinute(0));\n        Show show2 = new Show("SH2", inception, pvrScreen1,\n            today.withHour(18).withMinute(30));\n        Show show3 = new Show("SH3", avengers, pvrScreen2,\n            today.withHour(15).withMinute(0));\n        Show show4 = new Show("SH4", avengers, inoxScreen1,\n            today.withHour(19).withMinute(0));\n\n        bookingService.addShow(show1);\n        bookingService.addShow(show2);\n        bookingService.addShow(show3);\n        bookingService.addShow(show4);\n\n        // Setup: Create users\n        User user1 = new User("U1", "John Doe", "john@example.com",\n            "9876543210", "hashedpass", UserType.CUSTOMER);\n        User user2 = new User("U2", "Jane Smith", "jane@example.com",\n            "9876543211", "hashedpass", UserType.CUSTOMER);\n\n        System.out.println("========== SCENARIO 1: Search and Browse ==========\\n");\n\n        // Search movies in Mumbai\n        System.out.println("Movies in Mumbai:");\n        List<Movie> moviesInMumbai = bookingService.getMoviesByCity(mumbai);\n        for (Movie movie : moviesInMumbai) {\n            System.out.println("  - " + movie);\n        }\n\n        // Get theaters showing Inception\n        System.out.println("\\nTheaters showing Inception in Mumbai:");\n        List<Theater> theaters = bookingService.getTheatersShowingMovie(inception, mumbai);\n        for (Theater theater : theaters) {\n            System.out.println("  - " + theater);\n        }\n\n        // Get shows\n        System.out.println("\\nShows for Inception at PVR today:");\n        List<Show> shows = bookingService.getShows(inception, pvr, LocalDate.now());\n        for (Show show : shows) {\n            System.out.println("  - " + show);\n        }\n\n        System.out.println("\\n========== SCENARIO 2: Successful Booking ==========\\n");\n\n        // Select show and view available seats\n        Show selectedShow = show1;\n        System.out.println("Selected: " + selectedShow);\n        System.out.println("Available seats: " + selectedShow.getAvailableSeats().size());\n\n        // Lock seats\n        List<String> seatsToBook = Arrays.asList(\n            pvrScreen1.getSeats().get(50).getSeatId(),  // Middle row, good seats\n            pvrScreen1.getSeats().get(51).getSeatId()\n        );\n\n        System.out.println("\\nAttempting to lock seats...");\n        boolean locked = bookingService.lockSeats(selectedShow, seatsToBook, user1);\n\n        if (locked) {\n            // Create booking\n            Booking booking = bookingService.createBooking(user1, selectedShow, seatsToBook);\n\n            if (booking != null) {\n                System.out.println("Booking created: " + booking);\n\n                // Process payment\n                Payment payment = new Payment(booking, PaymentMethod.UPI);\n                boolean confirmed = bookingService.confirmBooking(booking, payment);\n\n                if (confirmed) {\n                    // Display tickets\n                    System.out.println("\\n--- Tickets Generated ---");\n                    for (Ticket ticket : booking.getTickets()) {\n                        System.out.println(ticket.getTicketDetails());\n                    }\n                }\n            }\n        }\n\n        System.out.println("\\n========== SCENARIO 3: Concurrent Booking Attempt ==========\\n");\n\n        // User 2 tries to book same seats\n        System.out.println("User 2 attempting to book same seats...");\n        boolean locked2 = bookingService.lockSeats(selectedShow, seatsToBook, user2);\n\n        if (!locked2) {\n            System.out.println("\u2717 Cannot lock seats - already booked by another user");\n        }\n\n        // User 2 books different seats\n        List<String> differentSeats = Arrays.asList(\n            pvrScreen1.getSeats().get(52).getSeatId(),\n            pvrScreen1.getSeats().get(53).getSeatId(),\n            pvrScreen1.getSeats().get(54).getSeatId()\n        );\n\n        System.out.println("\\nUser 2 booking different seats...");\n        locked2 = bookingService.lockSeats(selectedShow, differentSeats, user2);\n\n        if (locked2) {\n            Booking booking2 = bookingService.createBooking(user2, selectedShow, differentSeats);\n            Payment payment2 = new Payment(booking2, PaymentMethod.CREDIT_CARD);\n            bookingService.confirmBooking(booking2, payment2);\n        }\n\n        System.out.println("\\n========== SCENARIO 4: Booking Cancellation ==========\\n");\n\n        // User 1 cancels booking\n        System.out.println("User 1 requesting cancellation...");\n        boolean cancelled = bookingService.cancelBooking(\n            user1.getBookingHistory().get(0).getBookingId()\n        );\n\n        if (cancelled) {\n            System.out.println("Refund processed successfully");\n        }\n\n        System.out.println("\\n========== SCENARIO 5: View Booking History ==========\\n");\n\n        System.out.println("User 1 Booking History:");\n        for (Booking booking : user1.getBookingHistory()) {\n            System.out.println("  " + booking);\n        }\n\n        System.out.println("\\nUser 2 Booking History:");\n        for (Booking booking : user2.getBookingHistory()) {\n            System.out.println("  " + booking);\n        }\n\n        System.out.println("\\n========== Demo Complete ==========");\n    }\n\n    private static void createSeatsForScreen(Screen screen) {\n        // Create 10 rows with 12 seats each (120 total)\n        int rows = 10;\n        int cols = 12;\n\n        for (int row = 0; row < rows; row++) {\n            for (int col = 0; col < cols; col++) {\n                SeatType seatType;\n\n                // Front 2 rows: REGULAR\n                if (row < 2) {\n                    seatType = SeatType.REGULAR;\n                }\n                // Middle 5 rows: PREMIUM\n                else if (row < 7) {\n                    seatType = SeatType.PREMIUM;\n                }\n                // Back 2 rows: VIP\n                else if (row < 9) {\n                    seatType = SeatType.VIP;\n                }\n                // Last row: RECLINER\n                else {\n                    seatType = SeatType.RECLINER;\n                }\n\n                String seatId = screen.getScreenId() + "-R" + row + "C" + col;\n                Seat seat = new Seat(seatId, row, col, seatType);\n                screen.addSeat(seat);\n            }\n        }\n\n        System.out.println("Created " + screen.getCapacity() + " seats for " + screen.getName());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"design-patterns--best-practices",children:"Design Patterns & Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"design-patterns-used",children:"Design Patterns Used"}),"\n",(0,i.jsxs)(n.h4,{id:"1-singleton-pattern",children:["1. ",(0,i.jsx)(n.strong,{children:"Singleton Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SeatLockManager"}),": Ensures only one instance manages all seat locks"]}),"\n",(0,i.jsx)(n.li,{children:"Prevents conflicts in concurrent booking scenarios"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"2-factory-pattern",children:["2. ",(0,i.jsx)(n.strong,{children:"Factory Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Could be extended for creating different types of users, payments, or tickets"}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"UserFactory"}),", ",(0,i.jsx)(n.code,{children:"PaymentFactory"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"3-strategy-pattern",children:["3. ",(0,i.jsx)(n.strong,{children:"Strategy Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PaymentMethod"}),": Different payment strategies (UPI, Card, etc.)"]}),"\n",(0,i.jsx)(n.li,{children:"Allows easy addition of new payment methods"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"4-observer-pattern",children:["4. ",(0,i.jsx)(n.strong,{children:"Observer Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Could be implemented for:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Notifying users about booking confirmation"}),"\n",(0,i.jsx)(n.li,{children:"Sending email/SMS notifications"}),"\n",(0,i.jsx)(n.li,{children:"Updating booking analytics"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"5-state-pattern",children:["5. ",(0,i.jsx)(n.strong,{children:"State Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BookingStatus"}),": Manages booking lifecycle (PENDING \u2192 CONFIRMED \u2192 CANCELLED)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PaymentStatus"}),": Manages payment states"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ShowSeatStatus"}),": Manages seat states (AVAILABLE \u2192 LOCKED \u2192 BOOKED)"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"6-repository-pattern",children:["6. ",(0,i.jsx)(n.strong,{children:"Repository Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Service classes act as repositories for data access"}),"\n",(0,i.jsx)(n.li,{children:"Separates business logic from data storage"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"solid-principles",children:"SOLID Principles"}),"\n",(0,i.jsx)(n.h4,{id:"single-responsibility-principle-srp",children:"Single Responsibility Principle (SRP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each class has one clear responsibility:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"User"}),": User management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Booking"}),": Booking logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Payment"}),": Payment processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SeatLockManager"}),": Seat locking only"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"openclosed-principle-ocp",children:"Open/Closed Principle (OCP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Enums for extensibility (PaymentMethod, SeatType)"}),"\n",(0,i.jsx)(n.li,{children:"Easy to add new payment methods or seat types"}),"\n",(0,i.jsx)(n.li,{children:"Service classes can be extended without modification"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"liskov-substitution-principle-lsp",children:"Liskov Substitution Principle (LSP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All entities can be substituted with their base types"}),"\n",(0,i.jsx)(n.li,{children:"Inheritance hierarchies maintain behavior contracts"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"interface-segregation-principle-isp",children:"Interface Segregation Principle (ISP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Classes don't depend on interfaces they don't use"}),"\n",(0,i.jsx)(n.li,{children:"Focused, minimal interfaces"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"dependency-inversion-principle-dip",children:"Dependency Inversion Principle (DIP)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"High-level modules (BookingService) depend on abstractions"}),"\n",(0,i.jsx)(n.li,{children:"Could be improved with interfaces for services"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"concurrency--seat-locking",children:"Concurrency & Seat Locking"}),"\n",(0,i.jsx)(n.h3,{id:"concurrency-challenges",children:"Concurrency Challenges"}),"\n",(0,i.jsx)(n.h4,{id:"problem-double-booking",children:"Problem: Double Booking"}),"\n",(0,i.jsx)(n.p,{children:"When multiple users try to book the same seat simultaneously:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Time    User A              User B\nt1      Check seat status\nt2      Seat is available   Check seat status\nt3                          Seat is available\nt4      Book seat           Book seat\n        \u274c BOTH BOOKED!\n"})}),"\n",(0,i.jsx)(n.h3,{id:"solution-pessimistic-locking",children:"Solution: Pessimistic Locking"}),"\n",(0,i.jsx)(n.h4,{id:"seat-lock-mechanism",children:"Seat Lock Mechanism"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Lock Before Booking"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User selects seats \u2192 Seats are locked for 10 minutes"}),"\n",(0,i.jsx)(n.li,{children:"Other users cannot lock the same seats"}),"\n",(0,i.jsx)(n.li,{children:"If payment not completed in 10 minutes \u2192 Lock expires"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Synchronized Methods"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public synchronized boolean lock(String userId) {\n    if (status == ShowSeatStatus.AVAILABLE) {\n        status = ShowSeatStatus.LOCKED;\n        lockedBy = userId;\n        lockedAt = LocalDateTime.now();\n        return true;\n    }\n    return false;\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Lock Expiration"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Background thread cleans expired locks every minute"}),"\n",(0,i.jsx)(n.li,{children:"Prevents indefinite seat blocking"}),"\n",(0,i.jsx)(n.li,{children:"Releases seats if user abandons booking"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ConcurrentHashMap"}),": Used for storing locks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchronized methods"}),": Prevent race conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic operations"}),": Lock/unlock happen atomically"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"booking-flow-with-locking",children:"Booking Flow with Locking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1. User selects seats\n   \u2193\n2. System locks seats (10-min timeout)\n   \u2193\n3. User proceeds to payment\n   \u2193\n4. Payment processed\n   \u2193\n5a. SUCCESS \u2192 Seats booked, lock removed\n5b. FAILURE \u2192 Seats unlocked, available again\n5c. TIMEOUT \u2192 Lock expires, seats released\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"edge-cases--extensions",children:"Edge Cases & Extensions"}),"\n",(0,i.jsx)(n.h3,{id:"edge-cases-handled",children:"Edge Cases Handled"}),"\n",(0,i.jsxs)(n.h4,{id:"1-expired-locks",children:["1. ",(0,i.jsx)(n.strong,{children:"Expired Locks"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Background cleanup task releases expired locks"}),"\n",(0,i.jsx)(n.li,{children:"Seats become available again after timeout"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"2-payment-failure",children:["2. ",(0,i.jsx)(n.strong,{children:"Payment Failure"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Locked seats are released immediately"}),"\n",(0,i.jsx)(n.li,{children:"User can retry booking"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"3-concurrent-lock-attempts",children:["3. ",(0,i.jsx)(n.strong,{children:"Concurrent Lock Attempts"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only first user gets the lock"}),"\n",(0,i.jsx)(n.li,{children:"Others receive failure notification"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"4-same-user-re-locking",children:["4. ",(0,i.jsx)(n.strong,{children:"Same User Re-locking"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User can extend their own lock"}),"\n",(0,i.jsx)(n.li,{children:"Prevents accidental seat loss during booking"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"5-show-time-conflicts",children:["5. ",(0,i.jsx)(n.strong,{children:"Show Time Conflicts"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validation can be added to prevent overlapping shows"}),"\n",(0,i.jsx)(n.li,{children:"Buffer time between shows for cleaning"}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"6-cancellation-window",children:["6. ",(0,i.jsx)(n.strong,{children:"Cancellation Window"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can add time-based cancellation rules"}),"\n",(0,i.jsx)(n.li,{children:"Full refund if cancelled 24 hours before show"}),"\n",(0,i.jsx)(n.li,{children:"Partial refund if cancelled later"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"potential-extensions",children:"Potential Extensions"}),"\n",(0,i.jsxs)(n.h4,{id:"1-dynamic-pricing",children:["1. ",(0,i.jsx)(n.strong,{children:"Dynamic Pricing"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class DynamicPricingService {\n    public double calculatePrice(ShowSeat seat, LocalDateTime showTime) {\n        double basePrice = seat.getPrice();\n\n        // Weekend pricing\n        if (isWeekend(showTime)) {\n            basePrice *= 1.2;\n        }\n\n        // Prime time (evening shows)\n        if (isPrimeTime(showTime)) {\n            basePrice *= 1.15;\n        }\n\n        // High demand (> 80% occupancy)\n        if (getOccupancyRate(seat.getShow()) > 0.8) {\n            basePrice *= 1.25;\n        }\n\n        return basePrice;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"2-seat-recommendations",children:["2. ",(0,i.jsx)(n.strong,{children:"Seat Recommendations"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class SeatRecommendationService {\n    public List<ShowSeat> recommendSeats(Show show, int numSeats) {\n        // Find best available seats based on:\n        // - Center position\n        // - Row preference (middle rows)\n        // - Contiguous seats\n        // - User preferences (aisle, window)\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"3-loyalty-program",children:["3. ",(0,i.jsx)(n.strong,{children:"Loyalty Program"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class LoyaltyProgram {\n    private Map<String, Integer> userPoints;\n\n    public void awardPoints(User user, Booking booking) {\n        int points = (int) (booking.getTotalAmount() * 0.1);\n        userPoints.merge(user.getUserId(), points, Integer::sum);\n    }\n\n    public double applyDiscount(User user, double amount) {\n        int points = userPoints.getOrDefault(user.getUserId(), 0);\n        double discount = Math.min(points * 0.1, amount * 0.2); // Max 20% discount\n        return amount - discount;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"4-food--beverage",children:["4. ",(0,i.jsx)(n.strong,{children:"Food & Beverage"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class FoodOrder {\n    private String orderId;\n    private Booking booking;\n    private List<FoodItem> items;\n    private double totalAmount;\n\n    public void addToBooking(Booking booking) {\n        // Add food order to booking\n        // Deliver to seat during show\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"5-notifications",children:["5. ",(0,i.jsx)(n.strong,{children:"Notifications"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface NotificationService {\n    void sendBookingConfirmation(User user, Booking booking);\n    void sendCancellationConfirmation(User user, Booking booking);\n    void sendReminder(User user, Booking booking, int hoursBeforeShow);\n}\n\npublic class EmailNotificationService implements NotificationService {\n    // Email implementation\n}\n\npublic class SMSNotificationService implements NotificationService {\n    // SMS implementation\n}\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"6-analytics-dashboard",children:["6. ",(0,i.jsx)(n.strong,{children:"Analytics Dashboard"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class AnalyticsService {\n    public BookingAnalytics getAnalytics(LocalDate startDate, LocalDate endDate) {\n        // Revenue by movie\n        // Popular time slots\n        // Occupancy rates\n        // User demographics\n        // Cancellation rates\n        return new BookingAnalytics();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.h3,{id:"key-design-decisions",children:"Key Design Decisions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Seat Locking"}),": Prevents double booking with 10-minute timeout"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Three-State Seat Status"}),": AVAILABLE \u2192 LOCKED \u2192 BOOKED"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Separation of Concerns"}),": Services handle business logic, entities hold data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enum-Based Configuration"}),": Easy to extend seat types, payment methods, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread Safety"}),": Synchronized methods and concurrent collections"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scalability-considerations",children:"Scalability Considerations"}),"\n",(0,i.jsx)(n.h4,{id:"database-design",children:"Database Design"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Indexing"}),": On movieId, theaterId, showTime, userId"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Partitioning"}),": Shows by date, bookings by user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Caching"}),": Popular movies, theater listings, available seats"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"distributed-systems",children:"Distributed Systems"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Balancer"}),": Distribute booking requests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redis"}),": For seat locking across multiple servers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message Queue"}),": For async operations (notifications, analytics)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CDN"}),": For static content (movie posters, theater images)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Read Replicas"}),": For search queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write-Heavy Optimization"}),": Booking confirmations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection Pooling"}),": Database connections"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Caching Strategy"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Movie list: 1 hour TTL"}),"\n",(0,i.jsx)(n.li,{children:"Show timings: 15 minutes TTL"}),"\n",(0,i.jsx)(n.li,{children:"Seat availability: Real-time (no cache)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit Tests"}),": Individual class methods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Tests"}),": Service interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concurrency Tests"}),": Multiple simultaneous bookings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Tests"}),": 1000s of concurrent users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Case Tests"}),": Timeouts, failures, race conditions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mobile app integration"}),"\n",(0,i.jsx)(n.li,{children:"Social features (group bookings, sharing)"}),"\n",(0,i.jsx)(n.li,{children:"AI-based seat recommendations"}),"\n",(0,i.jsx)(n.li,{children:"Virtual reality seat preview"}),"\n",(0,i.jsx)(n.li,{children:"Blockchain-based ticketing"}),"\n",(0,i.jsx)(n.li,{children:"Integration with streaming platforms"}),"\n",(0,i.jsx)(n.li,{children:"Multi-language support"}),"\n",(0,i.jsx)(n.li,{children:"Accessibility features (wheelchair seats, audio descriptions)"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);