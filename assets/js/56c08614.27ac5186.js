"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3502],{1891:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var i=r(4848),s=r(8453);const t={},l="SOLID Principles in React",c={id:"WebDev/React/SOLIDPrinciples",title:"SOLID Principles in React",description:"Overview",source:"@site/docs/WebDev/React/SOLIDPrinciples.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/SOLIDPrinciples",permalink:"/js.enigma/docs/WebDev/React/SOLIDPrinciples",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/SOLIDPrinciples.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rendering Strategies Types",permalink:"/js.enigma/docs/WebDev/React/RenderingTypes"},next:{title:"TypeScript Generics",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptGenerics"}},o={},a=[{value:"Overview",id:"overview",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Single Responsibility Principle",id:"single-responsibility-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice-",level:3},{value:"Good Practice \u2705",id:"good-practice-",level:3},{value:"Open-Closed Principle",id:"open-closed-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--1",level:3},{value:"Good Practice \u2705",id:"good-practice--1",level:3},{value:"Liskov Substitution Principle",id:"liskov-substitution-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--2",level:3},{value:"Good Practice \u2705",id:"good-practice--2",level:3},{value:"Interface Segregation Principle",id:"interface-segregation-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--3",level:3},{value:"Good Practice \u2705",id:"good-practice--3",level:3},{value:"Dependency Inversion Principle",id:"dependency-inversion-principle",level:2},{value:"Bad Practice \u274c",id:"bad-practice--4",level:3},{value:"Good Practice \u2705",id:"good-practice--4",level:3},{value:"Best Practices for SOLID in React",id:"best-practices-for-solid-in-react",level:2},{value:"1. Component Organization",id:"1-component-organization",level:3},{value:"2. Props Design",id:"2-props-design",level:3},{value:"3. State Management",id:"3-state-management",level:3},{value:"4. Testing",id:"4-testing",level:3},{value:"Common Anti-patterns to Avoid",id:"common-anti-patterns-to-avoid",level:2},{value:"Tools and Libraries that Help Follow SOLID",id:"tools-and-libraries-that-help-follow-solid",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"solid-principles-in-react",children:"SOLID Principles in React"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"SOLID is an acronym for five design principles that help make software designs more understandable, flexible, and maintainable. Let's explore how these principles apply to React development."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#single-responsibility-principle",children:"Single Responsibility Principle (SRP)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#open-closed-principle",children:"Open-Closed Principle (OCP)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#liskov-substitution-principle",children:"Liskov Substitution Principle (LSP)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#interface-segregation-principle",children:"Interface Segregation Principle (ISP)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dependency-inversion-principle",children:"Dependency Inversion Principle (DIP)"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"single-responsibility-principle",children:"Single Responsibility Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"A component should have only one reason to change."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bad-practice-",children:"Bad Practice \u274c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const UserDashboard = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetching user data\r\n    fetch('/api/user')\r\n      .then(res => res.json())\r\n      .then(setUser);\r\n    \r\n    // Fetching orders\r\n    fetch('/api/orders')\r\n      .then(res => res.json())\r\n      .then(setOrders);\r\n  }, []);\r\n\r\n  const handleUpdateProfile = (data) => {\r\n    // Update profile logic\r\n  };\r\n\r\n  const handleOrderCancel = (orderId) => {\r\n    // Cancel order logic\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UserProfile user={user} onUpdate={handleUpdateProfile} />\r\n      <OrderHistory orders={orders} onCancel={handleOrderCancel} />\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"good-practice-",children:"Good Practice \u2705"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// UserProfileContainer.jsx\r\nconst UserProfileContainer = () => {\r\n  const [user, setUser] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    fetchUser().then(setUser);\r\n  }, []);\r\n\r\n  return <UserProfile user={user} />;\r\n};\r\n\r\n// OrderHistoryContainer.jsx\r\nconst OrderHistoryContainer = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    fetchOrders().then(setOrders);\r\n  }, []);\r\n\r\n  return <OrderHistory orders={orders} />;\r\n};\r\n\r\n// Dashboard.jsx\r\nconst Dashboard = () => (\r\n  <div>\r\n    <UserProfileContainer />\r\n    <OrderHistoryContainer />\r\n  </div>\r\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"open-closed-principle",children:"Open-Closed Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Software entities should be open for extension but closed for modification."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bad-practice--1",children:"Bad Practice \u274c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const Button = ({ type, children }) => {\r\n  switch (type) {\r\n    case 'primary':\r\n      return <button className=\"bg-blue-500\">{children}</button>;\r\n    case 'secondary':\r\n      return <button className=\"bg-gray-500\">{children}</button>;\r\n    case 'danger':\r\n      return <button className=\"bg-red-500\">{children}</button>;\r\n    default:\r\n      return <button>{children}</button>;\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"good-practice--1",children:"Good Practice \u2705"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const Button = ({ className, children, ...props }) => (\r\n  <button className={className} {...props}>\r\n    {children}\r\n  </button>\r\n);\r\n\r\n// Usage\r\nconst PrimaryButton = (props) => (\r\n  <Button className="bg-blue-500" {...props} />\r\n);\r\n\r\nconst SecondaryButton = (props) => (\r\n  <Button className="bg-gray-500" {...props} />\r\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"liskov-substitution-principle",children:"Liskov Substitution Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Subtypes must be substitutable for their base types."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bad-practice--2",children:"Bad Practice \u274c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'class Animal extends React.Component {\r\n  speak() {\r\n    return "Some sound";\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.speak()}</div>;\r\n  }\r\n}\r\n\r\nclass Cat extends Animal {\r\n  speak() {\r\n    return "Meow";\r\n  }\r\n}\r\n\r\nclass Fish extends Animal {\r\n  // Violates LSP as Fish can\'t speak\r\n  speak() {\r\n    throw new Error("Fish can\'t speak!");\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"good-practice--2",children:"Good Practice \u2705"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'interface AnimalProps {\r\n  makeSound: () => string;\r\n}\r\n\r\nconst Animal: React.FC<AnimalProps> = ({ makeSound }) => (\r\n  <div>{makeSound()}</div>\r\n);\r\n\r\nconst Cat = () => (\r\n  <Animal makeSound={() => "Meow"} />\r\n);\r\n\r\nconst Fish = () => (\r\n  <Animal makeSound={() => "Blub"} />\r\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"interface-segregation-principle",children:"Interface Segregation Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Clients should not be forced to depend on interfaces they do not use."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bad-practice--3",children:"Bad Practice \u274c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"interface UserProps {\r\n  name: string;\r\n  email: string;\r\n  address: string;\r\n  paymentDetails: object;\r\n  orderHistory: array;\r\n  preferences: object;\r\n}\r\n\r\nconst UserProfile: React.FC<UserProps> = ({ \r\n  name, \r\n  email, \r\n  address, \r\n  paymentDetails, \r\n  orderHistory, \r\n  preferences \r\n}) => {\r\n  // Component using all props\r\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"good-practice--3",children:"Good Practice \u2705"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"interface UserBasicInfo {\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface UserAddressInfo {\r\n  address: string;\r\n}\r\n\r\ninterface UserPaymentInfo {\r\n  paymentDetails: object;\r\n}\r\n\r\nconst UserProfile: React.FC<UserBasicInfo> = ({ name, email }) => {\r\n  // Only uses basic info\r\n};\r\n\r\nconst UserAddress: React.FC<UserAddressInfo> = ({ address }) => {\r\n  // Only uses address info\r\n};\r\n\r\nconst UserPayment: React.FC<UserPaymentInfo> = ({ paymentDetails }) => {\r\n  // Only uses payment info\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dependency-inversion-principle",children:"Dependency Inversion Principle"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"High-level modules should not depend on low-level modules. Both should depend on abstractions."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"bad-practice--4",children:"Bad Practice \u274c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const UserList = () => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Direct dependency on fetch implementation\r\n    fetch('/api/users')\r\n      .then(res => res.json())\r\n      .then(setUsers);\r\n  }, []);\r\n\r\n  return (\r\n    <ul>\r\n      {users.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"good-practice--4",children:"Good Practice \u2705"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// api.ts\r\ninterface UserAPI {\r\n  getUsers: () => Promise<User[]>;\r\n}\r\n\r\n// Implementation\r\nconst apiClient: UserAPI = {\r\n  getUsers: () => fetch('/api/users').then(res => res.json())\r\n};\r\n\r\n// Hook\r\nconst useUsers = (api: UserAPI) => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api.getUsers().then(setUsers);\r\n  }, [api]);\r\n\r\n  return users;\r\n};\r\n\r\n// Component\r\nconst UserList = ({ api }) => {\r\n  const users = useUsers(api);\r\n\r\n  return (\r\n    <ul>\r\n      {users.map(user => (\r\n        <li key={user.id}>{user.name}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-solid-in-react",children:"Best Practices for SOLID in React"}),"\n",(0,i.jsx)(n.h3,{id:"1-component-organization",children:"1. Component Organization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create small, focused components"}),"\n",(0,i.jsx)(n.li,{children:"Use container/presenter pattern"}),"\n",(0,i.jsx)(n.li,{children:"Separate business logic from presentation"}),"\n",(0,i.jsx)(n.li,{children:"Use custom hooks for reusable logic"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-props-design",children:"2. Props Design"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep props minimal and focused"}),"\n",(0,i.jsx)(n.li,{children:"Use TypeScript for better interface definitions"}),"\n",(0,i.jsx)(n.li,{children:"Avoid prop drilling with Context or state management"}),"\n",(0,i.jsx)(n.li,{children:"Use composition over inheritance"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-state-management",children:"3. State Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use appropriate state management tools"}),"\n",(0,i.jsx)(n.li,{children:"Keep state close to where it's used"}),"\n",(0,i.jsx)(n.li,{children:"Implement clear data flow patterns"}),"\n",(0,i.jsx)(n.li,{children:"Use reducers for complex state logic"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-testing",children:"4. Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write unit tests for isolated components"}),"\n",(0,i.jsx)(n.li,{children:"Use integration tests for component interactions"}),"\n",(0,i.jsx)(n.li,{children:"Mock dependencies appropriately"}),"\n",(0,i.jsx)(n.li,{children:"Test business logic separately from UI"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-anti-patterns-to-avoid",children:"Common Anti-patterns to Avoid"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Huge components with multiple responsibilities"}),"\n",(0,i.jsx)(n.li,{children:"Tight coupling between components"}),"\n",(0,i.jsx)(n.li,{children:"Direct API calls in components"}),"\n",(0,i.jsx)(n.li,{children:"Prop drilling through many levels"}),"\n",(0,i.jsx)(n.li,{children:"Complex inheritance hierarchies"}),"\n",(0,i.jsx)(n.li,{children:"Mixed concerns in single components"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tools-and-libraries-that-help-follow-solid",children:"Tools and Libraries that Help Follow SOLID"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"TypeScript - For better interface definitions"}),"\n",(0,i.jsx)(n.li,{children:"ESLint - For enforcing code patterns"}),"\n",(0,i.jsx)(n.li,{children:"React Testing Library - For behavior-driven tests"}),"\n",(0,i.jsx)(n.li,{children:"Redux Toolkit - For organized state management"}),"\n",(0,i.jsx)(n.li,{children:"React Query - For data fetching abstraction"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Following SOLID principles in React leads to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"More maintainable code"}),"\n",(0,i.jsx)(n.li,{children:"Better testability"}),"\n",(0,i.jsx)(n.li,{children:"Easier refactoring"}),"\n",(0,i.jsx)(n.li,{children:"Cleaner component architecture"}),"\n",(0,i.jsx)(n.li,{children:"More reusable components"}),"\n",(0,i.jsx)(n.li,{children:"Better separation of concerns"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);