"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5733],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var o=t(96540);const s={},c=o.createContext(s);function l(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(c.Provider,{value:n},e.children)}},55466:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>a});var o=t(74848),s=t(28453);const c={},l="React Compound Components",i={id:"WebDev/React/CompoundComponents",title:"React Compound Components",description:"Basic Structure",source:"@site/docs/WebDev/React/CompoundComponents.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/CompoundComponents",permalink:"/dev.enigma/docs/WebDev/React/CompoundComponents",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/CompoundComponents.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Atomic Design in React",permalink:"/dev.enigma/docs/WebDev/React/ATOMICDesign"},next:{title:"Custom Events",permalink:"/dev.enigma/docs/WebDev/React/CustomEvents"}},r={},a=[{value:"Basic Structure",id:"basic-structure",level:2},{value:"Complete Example: Custom Select Component",id:"complete-example-custom-select-component",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"1. Context Setup",id:"1-context-setup",level:3},{value:"2. Sub-components",id:"2-sub-components",level:3},{value:"3. State Management Patterns",id:"3-state-management-patterns",level:3},{value:"4. Advanced Patterns",id:"4-advanced-patterns",level:3},{value:"Controlled vs Uncontrolled",id:"controlled-vs-uncontrolled",level:4},{value:"Render Props with Compound Components",id:"render-props-with-compound-components",level:4},{value:"5. TypeScript Support",id:"5-typescript-support",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Pitfalls to Avoid",id:"common-pitfalls-to-avoid",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Testing",id:"testing",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"react-compound-components",children:"React Compound Components"})}),"\n",(0,o.jsx)(n.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Basic compound component pattern\nconst Menu = ({ children }) => {\n  const [activeIndex, setActiveIndex] = useState(null);\n  \n  return (\n    <MenuContext.Provider value={{ activeIndex, setActiveIndex }}>\n      <div className=\"menu\">{children}</div>\n    </MenuContext.Provider>\n  );\n};\n\nMenu.Item = ({ children, index }) => {\n  const { activeIndex, setActiveIndex } = useContext(MenuContext);\n  \n  return (\n    <div \n      className={`menu-item ${activeIndex === index ? 'active' : ''}`}\n      onClick={() => setActiveIndex(index)}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Usage\n<Menu>\n  <Menu.Item index={0}>Home</Menu.Item>\n  <Menu.Item index={1}>About</Menu.Item>\n  <Menu.Item index={2}>Contact</Menu.Item>\n</Menu>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"complete-example-custom-select-component",children:"Complete Example: Custom Select Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React, { createContext, useContext, useState } from \'react\';\n\n// Create context\nconst SelectContext = createContext();\n\n// Main component\nconst Select = ({ children, onValueChange }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(null);\n\n  const handleSelect = (value) => {\n    setSelectedValue(value);\n    setIsOpen(false);\n    onValueChange?.(value);\n  };\n\n  return (\n    <SelectContext.Provider \n      value={{ \n        isOpen, \n        setIsOpen, \n        selectedValue, \n        handleSelect \n      }}\n    >\n      <div className="select-container">\n        {children}\n      </div>\n    </SelectContext.Provider>\n  );\n};\n\n// Trigger component\nSelect.Trigger = ({ placeholder = \'Select...\' }) => {\n  const { isOpen, setIsOpen, selectedValue } = useContext(SelectContext);\n\n  return (\n    <button \n      className="select-trigger"\n      onClick={() => setIsOpen(!isOpen)}\n    >\n      {selectedValue ?? placeholder}\n    </button>\n  );\n};\n\n// Options container\nSelect.Options = ({ children }) => {\n  const { isOpen } = useContext(SelectContext);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className="select-options">\n      {children}\n    </div>\n  );\n};\n\n// Option item\nSelect.Option = ({ children, value }) => {\n  const { selectedValue, handleSelect } = useContext(SelectContext);\n\n  return (\n    <div \n      className={`select-option ${selectedValue === value ? \'selected\' : \'\'}`}\n      onClick={() => handleSelect(value)}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport { Select };\n\n// Usage\nconst MySelect = () => (\n  <Select onValueChange={(value) => console.log(value)}>\n    <Select.Trigger placeholder="Choose a color" />\n    <Select.Options>\n      <Select.Option value="red">Red</Select.Option>\n      <Select.Option value="blue">Blue</Select.Option>\n      <Select.Option value="green">Green</Select.Option>\n    </Select.Options>\n  </Select>\n);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,o.jsx)(n.h3,{id:"1-context-setup",children:"1. Context Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Create context\nconst ComponentContext = createContext();\n\n// Provider wrapper\nconst MainComponent = ({ children }) => {\n  const [state, setState] = useState(initialState);\n  \n  return (\n    <ComponentContext.Provider value={{ state, setState }}>\n      {children}\n    </ComponentContext.Provider>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-sub-components",children:"2. Sub-components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Static properties approach\nMainComponent.SubComponent = ({ children }) => {\n  const context = useContext(ComponentContext);\n  return <div>{children}</div>;\n};\n\n// Namespace approach\nconst Namespace = {\n  Main: MainComponent,\n  Sub: SubComponent\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-state-management-patterns",children:"3. State Management Patterns"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Centralized state\nconst TabGroup = ({ children }) => {\n  const [activeTab, setActiveTab] = useState(0);\n  \n  return (\n    <TabContext.Provider value={{ activeTab, setActiveTab }}>\n      {children}\n    </TabContext.Provider>\n  );\n};\n\n// Distributed state\nconst Accordion = ({ children }) => {\n  return <div className=\"accordion\">{children}</div>;\n};\n\nAccordion.Item = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className={`accordion-item ${isOpen ? 'open' : ''}`}>\n      {children(isOpen, setIsOpen)}\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-advanced-patterns",children:"4. Advanced Patterns"}),"\n",(0,o.jsx)(n.h4,{id:"controlled-vs-uncontrolled",children:"Controlled vs Uncontrolled"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Controlled component\nconst ControlledSelect = ({ value, onChange, children }) => (\n  <Select \n    value={value}\n    onChange={onChange}\n  >\n    {children}\n  </Select>\n);\n\n// Uncontrolled component\nconst UncontrolledSelect = ({ defaultValue, children }) => (\n  <Select defaultValue={defaultValue}>\n    {children}\n  </Select>\n);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"render-props-with-compound-components",children:"Render Props with Compound Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const Dropdown = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <DropdownContext.Provider value={{ isOpen, setIsOpen }}>\n      {typeof children === 'function' \n        ? children({ isOpen, setIsOpen }) \n        : children}\n    </DropdownContext.Provider>\n  );\n};\n\n// Usage\n<Dropdown>\n  {({ isOpen }) => (\n    <>\n      <Dropdown.Toggle />\n      {isOpen && <Dropdown.Menu />}\n    </>\n  )}\n</Dropdown>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"5-typescript-support",children:"5. TypeScript Support"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Context type\ninterface ComponentContext {\n  state: State;\n  setState: (state: State) => void;\n}\n\n// Component types\ninterface MainComponentProps {\n  children: React.ReactNode;\n  defaultValue?: string;\n}\n\ninterface SubComponentProps {\n  value: string;\n  onChange?: (value: string) => void;\n}\n\n// Type declarations\ndeclare namespace Component {\n  export const Main: React.FC<MainComponentProps>;\n  export const Sub: React.FC<SubComponentProps>;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"API Design"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Keep the main component focused on state management"}),"\n",(0,o.jsx)(n.li,{children:"Make sub-components handle specific rendering logic"}),"\n",(0,o.jsx)(n.li,{children:"Use consistent naming conventions for sub-components"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"State Management"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Centralize shared state in the parent component"}),"\n",(0,o.jsx)(n.li,{children:"Use context to avoid prop drilling"}),"\n",(0,o.jsx)(n.li,{children:"Consider performance implications of context updates"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Flexibility"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Allow for both controlled and uncontrolled usage"}),"\n",(0,o.jsx)(n.li,{children:"Support customization through props"}),"\n",(0,o.jsx)(n.li,{children:"Enable composition with other components"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Validate component hierarchy"}),"\n",(0,o.jsx)(n.li,{children:"Provide helpful error messages"}),"\n",(0,o.jsx)(n.li,{children:"Handle edge cases gracefully"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"common-pitfalls-to-avoid",children:"Common Pitfalls to Avoid"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Over-complicating the API"}),"\n",(0,o.jsx)(n.li,{children:"Unnecessary state sharing"}),"\n",(0,o.jsx)(n.li,{children:"Tight coupling between components"}),"\n",(0,o.jsx)(n.li,{children:"Poor TypeScript support"}),"\n",(0,o.jsx)(n.li,{children:"Missing accessibility features"}),"\n",(0,o.jsx)(n.li,{children:"Incomplete documentation"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Context Splitting"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Split context by concern\nconst UIContext = createContext();\nconst DataContext = createContext();\n\nconst Component = ({ children }) => (\n  <UIContext.Provider value={uiState}>\n    <DataContext.Provider value={dataState}>\n      {children}\n    </DataContext.Provider>\n  </UIContext.Provider>\n);\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Memoization"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Memoize expensive computations\nconst MemoizedSubComponent = React.memo(({ data }) => (\n  <div>{/* render logic */}</div>\n));\n\n// Memoize context value\nconst value = useMemo(() => ({\n  state,\n  actions\n}), [state]);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Component testing\ndescribe('CompoundComponent', () => {\n  it('renders correctly', () => {\n    render(\n      <CompoundComponent>\n        <CompoundComponent.Sub />\n      </CompoundComponent>\n    );\n    \n    expect(screen.getByRole('button')).toBeInTheDocument();\n  });\n  \n  it('handles state changes', () => {\n    const { container } = render(\n      <CompoundComponent>\n        <CompoundComponent.Sub />\n      </CompoundComponent>\n    );\n    \n    fireEvent.click(screen.getByRole('button'));\n    expect(container).toMatchSnapshot();\n  });\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);