"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[2541],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(96540);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},54328:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var i=s(74848),a=s(28453);const t={},r="System Design Theory",l={id:"Frontend System Design/BackendSystemDesign",title:"System Design Theory",description:"1. Load Balancing",source:"@site/docs/Frontend System Design/BackendSystemDesign.mdx",sourceDirName:"Frontend System Design",slug:"/Frontend System Design/BackendSystemDesign",permalink:"/docs/Frontend System Design/BackendSystemDesign",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Frontend System Design/BackendSystemDesign.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Microservices vs Monolith vs Serverless",permalink:"/docs/Frontend System Design/ArchitectureChoices"},next:{title:"Frontend System Design Template",permalink:"/docs/Frontend System Design/BasicTemplate"}},c={},o=[{value:"1. Load Balancing",id:"1-load-balancing",level:2},{value:"Theory",id:"theory",level:3},{value:"Types",id:"types",level:3},{value:"Algorithms",id:"algorithms",level:3},{value:"2. Caching",id:"2-caching",level:2},{value:"Theory",id:"theory-1",level:3},{value:"Caching Strategies",id:"caching-strategies",level:3},{value:"3. Database Sharding",id:"3-database-sharding",level:2},{value:"Theory",id:"theory-2",level:3},{value:"Sharding Strategies",id:"sharding-strategies",level:3},{value:"4. Message Queues",id:"4-message-queues",level:2},{value:"Theory",id:"theory-3",level:3},{value:"Patterns",id:"patterns",level:3},{value:"5. Consistent Hashing",id:"5-consistent-hashing",level:2},{value:"Theory",id:"theory-4",level:3},{value:"Implementation",id:"implementation",level:3},{value:"6. CAP Theorem",id:"6-cap-theorem",level:2},{value:"Theory",id:"theory-5",level:3},{value:"Application",id:"application",level:3},{value:"7. Rate Limiting",id:"7-rate-limiting",level:2},{value:"Theory",id:"theory-6",level:3},{value:"Algorithms",id:"algorithms-1",level:3},{value:"8. Back-of-the-envelope Calculations",id:"8-back-of-the-envelope-calculations",level:2},{value:"Theory",id:"theory-7",level:3},{value:"Common Calculations",id:"common-calculations",level:3},{value:"Best Practices for System Design",id:"best-practices-for-system-design",level:2},{value:"1. Start Simple",id:"1-start-simple",level:3},{value:"2. Consider Scalability",id:"2-consider-scalability",level:3},{value:"3. Plan for Failure",id:"3-plan-for-failure",level:3},{value:"4. Make Data Decisions Early",id:"4-make-data-decisions-early",level:3},{value:"Interview Tips",id:"interview-tips",level:2},{value:"Introduction",id:"introduction",level:2},{value:"1. Feature Expectations (5 minutes)",id:"1-feature-expectations-5-minutes",level:2},{value:"1.1 Use Cases",id:"11-use-cases",level:3},{value:"1.2 Out of Scope",id:"12-out-of-scope",level:3},{value:"1.3 Users",id:"13-users",level:3},{value:"1.4 Scale",id:"14-scale",level:3},{value:"1.5 Usage Patterns",id:"15-usage-patterns",level:3},{value:"2. Estimations (5 minutes)",id:"2-estimations-5-minutes",level:2},{value:"2.1 Traffic Estimates",id:"21-traffic-estimates",level:3},{value:"Read QPS:",id:"read-qps",level:4},{value:"Write QPS:",id:"write-qps",level:4},{value:"2.2 Storage Estimates",id:"22-storage-estimates",level:3},{value:"2.3 Memory Estimates",id:"23-memory-estimates",level:3},{value:"3. Design Goals (5 minutes)",id:"3-design-goals-5-minutes",level:2},{value:"3.1 Performance Requirements",id:"31-performance-requirements",level:3},{value:"3.2 CAP Theorem Considerations",id:"32-cap-theorem-considerations",level:3},{value:"4. High-Level Design (5-10 minutes)",id:"4-high-level-design-5-10-minutes",level:2},{value:"4.1 API Design",id:"41-api-design",level:3},{value:"4.2 Database Schema",id:"42-database-schema",level:3},{value:"4.3 Basic Algorithm",id:"43-basic-algorithm",level:3},{value:"5. Deep Dive (15-20 minutes)",id:"5-deep-dive-15-20-minutes",level:2},{value:"5.1 Component Scaling",id:"51-component-scaling",level:3},{value:"Load Balancer Configuration",id:"load-balancer-configuration",level:4},{value:"Database Sharding",id:"database-sharding",level:4},{value:"5.2 Caching Strategy",id:"52-caching-strategy",level:3},{value:"5.3 Message Queue Architecture",id:"53-message-queue-architecture",level:3},{value:"6. Justification (5 minutes)",id:"6-justification-5-minutes",level:2},{value:"6.1 Performance Analysis",id:"61-performance-analysis",level:3},{value:"6.2 Back-of-the-envelope Calculations",id:"62-back-of-the-envelope-calculations",level:3},{value:"Network Bandwidth",id:"network-bandwidth",level:4},{value:"Database IOPS",id:"database-iops",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Pitfalls to Avoid",id:"common-pitfalls-to-avoid",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"system-design-theory",children:"System Design Theory"})}),"\n",(0,i.jsx)(n.h2,{id:"1-load-balancing",children:"1. Load Balancing"}),"\n",(0,i.jsx)(n.h3,{id:"theory",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Load balancing refers to the process of distributing network traffic across multiple servers to ensure high availability and reliability by preventing any single server from becoming a bottleneck."}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Layer 4 (Transport Layer)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Works with network/transport layer protocols (TCP/UDP)"}),"\n",(0,i.jsx)(n.li,{children:"Faster but less flexible"}),"\n",(0,i.jsx)(n.li,{children:"Based on IP address and port numbers"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Layer 7 (Application Layer)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Content-aware routing"}),"\n",(0,i.jsx)(n.li,{children:"More flexible but higher latency"}),"\n",(0,i.jsx)(n.li,{children:"Can route based on URL, headers, cookies"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"algorithms",children:"Algorithms"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface LoadBalancer {\n  // Round Robin\n  roundRobin(): Server {\n    currentIndex = (currentIndex + 1) % servers.length;\n    return servers[currentIndex];\n  }\n\n  // Least Connections\n  leastConnections(): Server {\n    return servers.reduce((min, server) =>\n      server.connections < min.connections ? server : min\n    );\n  }\n\n  // IP Hash\n  ipHash(clientIP: string): Server {\n    const hash = createHash(clientIP);\n    return servers[hash % servers.length];\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-caching",children:"2. Caching"}),"\n",(0,i.jsx)(n.h3,{id:"theory-1",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Caching is a technique that stores copies of frequently accessed data in a high-speed data storage layer to improve retrieval times and reduce database load."}),"\n",(0,i.jsx)(n.h3,{id:"caching-strategies",children:"Caching Strategies"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Cache-Aside (Lazy Loading)"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class CacheAside {\n  async get(key: string): Promise<Data> {\n    // Check cache first\n    let data = await cache.get(key);\n    if (data === null) {\n      // Cache miss: get from DB and update cache\n      data = await db.get(key);\n      await cache.set(key, data);\n    }\n    return data;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Write-Through"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class WriteThrough {\n  async set(key: string, value: Data): Promise<void> {\n    // Write to DB first\n    await db.set(key, value);\n    // Then update cache\n    await cache.set(key, value);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Write-Behind (Write-Back)"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class WriteBehind {\n  async set(key: string, value: Data): Promise<void> {\n    // Write to cache immediately\n    await cache.set(key, value);\n    // Queue DB update\n    await writeQueue.push({ key, value });\n  }\n\n  private async processWriteQueue() {\n    while (true) {\n      const { key, value } = await writeQueue.pop();\n      await db.set(key, value);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"3-database-sharding",children:"3. Database Sharding"}),"\n",(0,i.jsx)(n.h3,{id:"theory-2",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Sharding is a database architecture pattern that splits large databases into smaller, faster, more manageable pieces called shards based on some partition key."}),"\n",(0,i.jsx)(n.h3,{id:"sharding-strategies",children:"Sharding Strategies"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Hash-Based Sharding"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class HashSharding {\n  private shardCount: number;\n\n  constructor(shardCount: number) {\n    this.shardCount = shardCount;\n  }\n\n  getShardId(key: string): number {\n    const hash = createHash(key);\n    return hash % this.shardCount;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Range-Based Sharding"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class RangeSharding {\n  private ranges: Array<{ min: number; max: number; shardId: number }>;\n\n  getShardId(value: number): number {\n    const shard = this.ranges.find(range =>\n      value >= range.min && value <= range.max\n    );\n    return shard.shardId;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"4-message-queues",children:"4. Message Queues"}),"\n",(0,i.jsx)(n.h3,{id:"theory-3",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Message queues provide asynchronous communication and decoupling between components in a distributed system."}),"\n",(0,i.jsx)(n.h3,{id:"patterns",children:"Patterns"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Publisher-Subscriber"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class PubSub {\n  private subscribers: Map<string, Function[]> = new Map();\n\n  publish(topic: string, message: any) {\n    const topicSubscribers = this.subscribers.get(topic) || [];\n    topicSubscribers.forEach(subscriber => subscriber(message));\n  }\n\n  subscribe(topic: string, callback: Function) {\n    if (!this.subscribers.has(topic)) {\n      this.subscribers.set(topic, []);\n    }\n    this.subscribers.get(topic).push(callback);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Point-to-Point"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class Queue {\n  private messages: any[] = [];\n\n  async send(message: any) {\n    this.messages.push(message);\n  }\n\n  async receive(): Promise<any> {\n    return this.messages.shift();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-consistent-hashing",children:"5. Consistent Hashing"}),"\n",(0,i.jsx)(n.h3,{id:"theory-4",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Consistent hashing is a technique used to distribute data across nodes in a way that minimizes reorganization when nodes are added or removed."}),"\n",(0,i.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class ConsistentHashing {\n  private nodes: Map<number, string> = new Map();\n  private replicas: number;\n\n  constructor(replicas: number) {\n    this.replicas = replicas;\n  }\n\n  addNode(node: string) {\n    for (let i = 0; i < this.replicas; i++) {\n      const hash = this.getHash(`${node}-${i}`);\n      this.nodes.set(hash, node);\n    }\n  }\n\n  removeNode(node: string) {\n    for (let i = 0; i < this.replicas; i++) {\n      const hash = this.getHash(`${node}-${i}`);\n      this.nodes.delete(hash);\n    }\n  }\n\n  getNode(key: string): string {\n    const hash = this.getHash(key);\n    const nodeHashes = Array.from(this.nodes.keys()).sort((a, b) => a - b);\n\n    for (const nodeHash of nodeHashes) {\n      if (nodeHash >= hash) {\n        return this.nodes.get(nodeHash);\n      }\n    }\n\n    // Wrap around to first node if key hash is larger than all node hashes\n    return this.nodes.get(nodeHashes[0]);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"6-cap-theorem",children:"6. CAP Theorem"}),"\n",(0,i.jsx)(n.h3,{id:"theory-5",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"The CAP theorem states that a distributed system can only provide two of the following three guarantees:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consistency: All nodes see the same data at the same time"}),"\n",(0,i.jsx)(n.li,{children:"Availability: Every request receives a response"}),"\n",(0,i.jsx)(n.li,{children:"Partition tolerance: System continues to operate despite network failures"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"application",children:"Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface SystemRequirements {\n  consistency: 'strong' | 'eventual';\n  availability: 'high' | 'medium' | 'low';\n  partitionTolerance: boolean;\n}\n\nclass SystemDesign {\n  determineSystemType(requirements: SystemRequirements) {\n    if (requirements.partitionTolerance) {\n      // In practice, partition tolerance is required\n      if (requirements.consistency === 'strong') {\n        return 'CP System (e.g., MongoDB, HBase)';\n      } else {\n        return 'AP System (e.g., Cassandra, DynamoDB)';\n      }\n    }\n    return 'CA System (Traditional RDBMS, single node)';\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"7-rate-limiting",children:"7. Rate Limiting"}),"\n",(0,i.jsx)(n.h3,{id:"theory-6",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Rate limiting is a strategy to control the rate of requests a client can make to a service to prevent abuse and ensure fair usage."}),"\n",(0,i.jsx)(n.h3,{id:"algorithms-1",children:"Algorithms"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Token Bucket"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class TokenBucket {\n  private tokens: number;\n  private lastRefill: number;\n  private capacity: number;\n  private refillRate: number;\n\n  constructor(capacity: number, refillRate: number) {\n    this.capacity = capacity;\n    this.refillRate = refillRate;\n    this.tokens = capacity;\n    this.lastRefill = Date.now();\n  }\n\n  tryConsume(): boolean {\n    this.refill();\n    if (this.tokens >= 1) {\n      this.tokens--;\n      return true;\n    }\n    return false;\n  }\n\n  private refill() {\n    const now = Date.now();\n    const timePassed = (now - this.lastRefill) / 1000;\n    this.tokens = Math.min(\n      this.capacity,\n      this.tokens + timePassed * this.refillRate\n    );\n    this.lastRefill = now;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Leaky Bucket"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class LeakyBucket {\n  private queue: any[];\n  private capacity: number;\n  private processRate: number;\n\n  constructor(capacity: number, processRate: number) {\n    this.queue = [];\n    this.capacity = capacity;\n    this.processRate = processRate;\n    this.startProcessing();\n  }\n\n  tryAdd(request: any): boolean {\n    if (this.queue.length < this.capacity) {\n      this.queue.push(request);\n      return true;\n    }\n    return false;\n  }\n\n  private startProcessing() {\n    setInterval(() => {\n      if (this.queue.length > 0) {\n        const request = this.queue.shift();\n        this.processRequest(request);\n      }\n    }, 1000 / this.processRate);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"8-back-of-the-envelope-calculations",children:"8. Back-of-the-envelope Calculations"}),"\n",(0,i.jsx)(n.h3,{id:"theory-7",children:"Theory"}),"\n",(0,i.jsx)(n.p,{children:"Quick, approximate calculations used to estimate system requirements and validate design decisions."}),"\n",(0,i.jsx)(n.h3,{id:"common-calculations",children:"Common Calculations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Storage Requirements"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function calculateStorageNeeds(params: {\n  dailyActiveUsers: number;\n  averageDataPerUser: number;  // in bytes\n  retentionDays: number;\n  replicationFactor: number;\n}): number {\n  const dailyStorage = params.dailyActiveUsers * params.averageDataPerUser;\n  const totalStorage = dailyStorage * params.retentionDays * params.replicationFactor;\n  return totalStorage;\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Bandwidth Requirements"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function calculateBandwidth(params: {\n  requestsPerSecond: number;\n  averageRequestSize: number;  // in bytes\n  averageResponseSize: number; // in bytes\n}): number {\n  const totalBytesPerSecond = params.requestsPerSecond *\n    (params.averageRequestSize + params.averageResponseSize);\n  const bandwidthMbps = (totalBytesPerSecond * 8) / 1000000;\n  return bandwidthMbps;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-system-design",children:"Best Practices for System Design"}),"\n",(0,i.jsx)(n.h3,{id:"1-start-simple",children:"1. Start Simple"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Begin with a minimal viable solution"}),"\n",(0,i.jsx)(n.li,{children:"Add complexity only when needed"}),"\n",(0,i.jsx)(n.li,{children:"Document assumptions and constraints"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-consider-scalability",children:"2. Consider Scalability"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Horizontal vs Vertical scaling"}),"\n",(0,i.jsx)(n.li,{children:"Stateless services when possible"}),"\n",(0,i.jsx)(n.li,{children:"Caching strategies"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-plan-for-failure",children:"3. Plan for Failure"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Design for failures at every layer"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper monitoring"}),"\n",(0,i.jsx)(n.li,{children:"Have fallback mechanisms"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-make-data-decisions-early",children:"4. Make Data Decisions Early"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Choose appropriate storage solutions"}),"\n",(0,i.jsx)(n.li,{children:"Plan data partitioning strategy"}),"\n",(0,i.jsx)(n.li,{children:"Consider data access patterns"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"interview-tips",children:"Interview Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Clarify Requirements"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class RequirementGathering {\n  gatherRequirements() {\n    return {\n      functional: this.getFunctionalRequirements(),\n      nonFunctional: this.getNonFunctionalRequirements(),\n      constraints: this.getConstraints()\n    };\n  }\n\n  private getFunctionalRequirements() {\n    // Core features\n    // User interactions\n    // System behaviors\n  }\n\n  private getNonFunctionalRequirements() {\n    // Performance\n    // Scalability\n    // Reliability\n    // Security\n  }\n\n  private getConstraints() {\n    // Time\n    // Budget\n    // Technology\n    // Team\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Systematic Approach"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class SystemDesignApproach {\n  designSystem() {\n    // 1. Requirements gathering\n    const requirements = this.gatherRequirements();\n\n    // 2. High-level design\n    const architecture = this.createHighLevelDesign(requirements);\n\n    // 3. Detailed design\n    const detailedDesign = this.createDetailedDesign(architecture);\n\n    // 4. Identify bottlenecks\n    const bottlenecks = this.identifyBottlenecks(detailedDesign);\n\n    // 5. Scaling solutions\n    const scalingSolutions = this.proposeSolutions(bottlenecks);\n\n    return {\n      requirements,\n      architecture,\n      detailedDesign,\n      bottlenecks,\n      scalingSolutions,\n    };\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h1,{id:"system-design-interview-guide",children:"System Design Interview Guide"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"This guide provides a structured approach to tackling system design interviews. Each section includes key points to cover, examples, and calculation methods."}),"\n",(0,i.jsx)(n.h2,{id:"1-feature-expectations-5-minutes",children:"1. Feature Expectations (5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"11-use-cases",children:"1.1 Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"List primary user stories"}),"\n",(0,i.jsx)(n.li,{children:"Define core functionality"}),"\n",(0,i.jsx)(n.li,{children:"Identify key features"}),"\n",(0,i.jsx)(n.li,{children:"Determine MVP requirements"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example for a URL Shortener:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Primary Use Cases:\n1. Generate short URL from long URL\n2. Redirect short URL to original URL\n3. Custom short URLs (optional)\n4. Analytics (optional)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"12-out-of-scope",children:"1.2 Out of Scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"List features explicitly not covered"}),"\n",(0,i.jsx)(n.li,{children:"Define system boundaries"}),"\n",(0,i.jsx)(n.li,{children:"Identify future considerations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Out of Scope:\n1. User authentication\n2. URL preview\n3. API rate limiting (initially)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"13-users",children:"1.3 Users"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define user types"}),"\n",(0,i.jsx)(n.li,{children:"User roles and permissions"}),"\n",(0,i.jsx)(n.li,{children:"Geographic distribution"}),"\n",(0,i.jsx)(n.li,{children:"User behavior patterns"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"14-scale",children:"1.4 Scale"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Current users"}),"\n",(0,i.jsx)(n.li,{children:"Growth projections"}),"\n",(0,i.jsx)(n.li,{children:"Peak vs. average load"}),"\n",(0,i.jsx)(n.li,{children:"Geographic distribution"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"15-usage-patterns",children:"1.5 Usage Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Daily active users"}),"\n",(0,i.jsx)(n.li,{children:"Peak hours"}),"\n",(0,i.jsx)(n.li,{children:"Seasonal variations"}),"\n",(0,i.jsx)(n.li,{children:"User interaction frequency"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-estimations-5-minutes",children:"2. Estimations (5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"21-traffic-estimates",children:"2.1 Traffic Estimates"}),"\n",(0,i.jsx)(n.h4,{id:"read-qps",children:"Read QPS:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const calculateReadQPS = () => {\n  const dailyActiveUsers = 1000000;\n  const avgReadsPerUser = 10;\n  const secondsInDay = 86400;\n\n  const averageQPS = (dailyActiveUsers * avgReadsPerUser) / secondsInDay;\n  const peakQPS = averageQPS * 2; // 2x for peak\n\n  return { averageQPS, peakQPS };\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"write-qps",children:"Write QPS:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const calculateWriteQPS = () => {\n  const dailyActiveUsers = 1000000;\n  const avgWritesPerUser = 2;\n  const secondsInDay = 86400;\n\n  const averageQPS = (dailyActiveUsers * avgWritesPerUser) / secondsInDay;\n  const peakQPS = averageQPS * 2;\n\n  return { averageQPS, peakQPS };\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"22-storage-estimates",children:"2.2 Storage Estimates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const calculateStorageNeeds = () => {\n  const dailyNewRecords = 1000000;\n  const recordSize = 1000; // bytes\n  const daysToKeep = 365;\n\n  const totalStorage = dailyNewRecords * recordSize * daysToKeep;\n  return totalStorage;\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"23-memory-estimates",children:"2.3 Memory Estimates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const calculateCacheNeeds = () => {\n  const qps = 1000;\n  const cacheHitRatio = 0.8;\n  const avgRecordSize = 1000; // bytes\n  const cacheDuration = 3600; // 1 hour\n\n  const cacheSize = qps * (1 - cacheHitRatio) * avgRecordSize * cacheDuration;\n  return cacheSize;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"3-design-goals-5-minutes",children:"3. Design Goals (5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"31-performance-requirements",children:"3.1 Performance Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Read latency: < 100ms"}),"\n",(0,i.jsx)(n.li,{children:"Write latency: < 200ms"}),"\n",(0,i.jsx)(n.li,{children:"Availability: 99.99%"}),"\n",(0,i.jsx)(n.li,{children:"Consistency requirements"}),"\n",(0,i.jsx)(n.li,{children:"Durability guarantees"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"32-cap-theorem-considerations",children:"3.2 CAP Theorem Considerations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"type SystemType = 'CP' | 'AP';\n\ninterface SystemRequirements {\n  consistency: 'strong' | 'eventual';\n  availability: number; // percentage\n  partitionTolerance: boolean;\n}\n\nconst determineSystemType = (requirements: SystemRequirements): SystemType => {\n  return requirements.consistency === 'strong' ? 'CP' : 'AP';\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"4-high-level-design-5-10-minutes",children:"4. High-Level Design (5-10 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"41-api-design",children:"4.1 API Design"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// RESTful API Example\ninterface APIEndpoints {\n  // Write APIs\n  POST: {\n    '/api/v1/resource': {\n      request: ResourceCreationRequest;\n      response: ResourceCreationResponse;\n    };\n  };\n\n  // Read APIs\n  GET: {\n    '/api/v1/resource/:id': {\n      params: { id: string };\n      response: ResourceResponse;\n    };\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"42-database-schema",children:"4.2 Database Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Example Schema\nCREATE TABLE users (\n    id BIGSERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE resources (\n    id BIGSERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id),\n    data JSONB NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"43-basic-algorithm",children:"4.3 Basic Algorithm"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class DataProcessor {\n  async process(data: InputData): Promise<ProcessedData> {\n    // 1. Validate input\n    this.validate(data);\n\n    // 2. Transform data\n    const transformed = await this.transform(data);\n\n    // 3. Store data\n    const stored = await this.store(transformed);\n\n    // 4. Cache results\n    await this.cache(stored);\n\n    return stored;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-deep-dive-15-20-minutes",children:"5. Deep Dive (15-20 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"51-component-scaling",children:"5.1 Component Scaling"}),"\n",(0,i.jsx)(n.h4,{id:"load-balancer-configuration",children:"Load Balancer Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface LoadBalancer {\n  algorithm: 'round-robin' | 'least-connections' | 'ip-hash';\n  healthCheck: {\n    path: string;\n    interval: number;\n    timeout: number;\n    unhealthyThreshold: number;\n  };\n  ssl: {\n    enabled: boolean;\n    cert: string;\n    key: string;\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"database-sharding",children:"Database Sharding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class ShardManager {\n  private shardCount: number;\n\n  constructor(shardCount: number) {\n    this.shardCount = shardCount;\n  }\n\n  getShardId(key: string): number {\n    const hash = this.hashFunction(key);\n    return hash % this.shardCount;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"52-caching-strategy",children:"5.2 Caching Strategy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface CacheConfig {\n  strategy: 'cache-aside' | 'write-through' | 'write-behind';\n  ttl: number;\n  maxSize: number;\n}\n\nclass CacheManager {\n  async get(key: string): Promise<Data> {\n    const cached = await this.cache.get(key);\n    if (cached) return cached;\n\n    const data = await this.db.get(key);\n    await this.cache.set(key, data);\n    return data;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"53-message-queue-architecture",children:"5.3 Message Queue Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface QueueConfig {\n  type: 'kafka' | 'rabbitmq' | 'sqs';\n  partitions: number;\n  replicationFactor: number;\n  retentionPeriod: number;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"6-justification-5-minutes",children:"6. Justification (5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"61-performance-analysis",children:"6.1 Performance Analysis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"interface LayerMetrics {\n  avgLatency: number;\n  p95Latency: number;\n  p99Latency: number;\n  throughput: number;\n}\n\nconst calculateSystemMetrics = (layers: LayerMetrics[]): SystemMetrics => {\n  return {\n    totalLatency: layers.reduce((sum, layer) => sum + layer.avgLatency, 0),\n    bottlenecks: layers.filter(layer => layer.throughput < targetThroughput)\n  };\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"62-back-of-the-envelope-calculations",children:"6.2 Back-of-the-envelope Calculations"}),"\n",(0,i.jsx)(n.h4,{id:"network-bandwidth",children:"Network Bandwidth"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const calculateBandwidth = () => {\n  const requestSize = 1000; // bytes\n  const qps = 1000;\n\n  const bytesPerSecond = requestSize * qps;\n  const megabitsPerSecond = (bytesPerSecond * 8) / 1000000;\n\n  return megabitsPerSecond;\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"database-iops",children:"Database IOPS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const calculateIOPS = () => {\n  const writeQPS = 100;\n  const readQPS = 1000;\n  const replicationFactor = 3;\n\n  const totalIOPS = writeQPS * replicationFactor + readQPS;\n  return totalIOPS;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Start with Scale"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Begin with rough numbers"}),"\n",(0,i.jsx)(n.li,{children:"Use powers of 10"}),"\n",(0,i.jsx)(n.li,{children:"Consider growth"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clarify Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ask questions"}),"\n",(0,i.jsx)(n.li,{children:"State assumptions"}),"\n",(0,i.jsx)(n.li,{children:"Define scope"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Draw Diagrams"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Start simple"}),"\n",(0,i.jsx)(n.li,{children:"Add complexity gradually"}),"\n",(0,i.jsx)(n.li,{children:"Show data flow"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Consider Trade-offs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cost vs Performance"}),"\n",(0,i.jsx)(n.li,{children:"Consistency vs Availability"}),"\n",(0,i.jsx)(n.li,{children:"Complexity vs Maintainability"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls-to-avoid",children:"Common Pitfalls to Avoid"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Over-engineering"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Don't add unnecessary complexity"}),"\n",(0,i.jsx)(n.li,{children:"Start simple, then scale"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Ignoring Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Listen carefully to requirements"}),"\n",(0,i.jsx)(n.li,{children:"Validate assumptions"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Skipping Calculations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always do the math"}),"\n",(0,i.jsx)(n.li,{children:"Verify numbers make sense"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Not Considering Edge Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Think about failure scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Plan for system degradation"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);