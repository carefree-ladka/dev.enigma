"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[726],{14499:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=i(74848),r=i(28453);const s={},t="Spring Boot Beginner Guide",a={id:"Java/Spring Boot",title:"Spring Boot Beginner Guide",description:"Table of Contents",source:"@site/docs/Java/Spring Boot.mdx",sourceDirName:"Java",slug:"/Java/Spring Boot",permalink:"/dev.enigma/docs/Java/Spring Boot",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Spring Boot.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Spring Boot SQL Cheat Sheet",permalink:"/dev.enigma/docs/Java/Spring Boot SQL Cheat Sheet"},next:{title:"Spring Security Complete Notes",permalink:"/dev.enigma/docs/Java/Spring Security Complete Notes"}},l={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What is Spring Boot?",id:"what-is-spring-boot",level:2},{value:"Why Spring Boot?",id:"why-spring-boot",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Java Knowledge (You&#39;re learning this! \ud83c\udf89)",id:"java-knowledge-youre-learning-this-",level:3},{value:"Tools You&#39;ll Need",id:"tools-youll-need",level:3},{value:"Setting Up Your Development Environment",id:"setting-up-your-development-environment",level:2},{value:"1. Install Java Development Kit (JDK)",id:"1-install-java-development-kit-jdk",level:3},{value:"2. Choose Your IDE",id:"2-choose-your-ide",level:3},{value:"3. Verify Maven Installation",id:"3-verify-maven-installation",level:3},{value:"Creating Your First Spring Boot Project",id:"creating-your-first-spring-boot-project",level:2},{value:"Method 1: Using Spring Initializr (Recommended)",id:"method-1-using-spring-initializr-recommended",level:3},{value:"Method 2: Using IDE",id:"method-2-using-ide",level:3},{value:"Understanding the Project Structure",id:"understanding-the-project-structure",level:2},{value:"Key Files Explained",id:"key-files-explained",level:3},{value:"<code>MyFirstAppApplication.java</code> (Main Class)",id:"myfirstappapplicationjava-main-class",level:4},{value:"<code>pom.xml</code> (Maven Configuration)",id:"pomxml-maven-configuration",level:4},{value:"<code>application.properties</code>",id:"applicationproperties",level:4},{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Inversion of Control (IoC) and Dependency Injection",id:"1-inversion-of-control-ioc-and-dependency-injection",level:3},{value:"2. Beans and Components",id:"2-beans-and-components",level:3},{value:"3. Auto-Configuration",id:"3-auto-configuration",level:3},{value:"Building Your First REST API",id:"building-your-first-rest-api",level:2},{value:"1. Create a Book Model",id:"1-create-a-book-model",level:3},{value:"2. Create a Controller",id:"2-create-a-controller",level:3},{value:"3. Test Your API",id:"3-test-your-api",level:3},{value:"Working with Data",id:"working-with-data",level:2},{value:"Adding Database Support",id:"adding-database-support",level:3},{value:"Update Your Book Model",id:"update-your-book-model",level:3},{value:"Create a Repository",id:"create-a-repository",level:3},{value:"Update Your Controller",id:"update-your-controller",level:3},{value:"Configuration and Properties",id:"configuration-and-properties",level:2},{value:"application.properties",id:"applicationproperties-1",level:3},{value:"Using @Value Annotation",id:"using-value-annotation",level:3},{value:"Common Annotations",id:"common-annotations",level:2},{value:"Class-Level Annotations",id:"class-level-annotations",level:3},{value:"Method-Level Annotations",id:"method-level-annotations",level:3},{value:"Field-Level Annotations",id:"field-level-annotations",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"1. Learn More About Spring Boot",id:"1-learn-more-about-spring-boot",level:3},{value:"2. Database Integration",id:"2-database-integration",level:3},{value:"3. Advanced Topics",id:"3-advanced-topics",level:3},{value:"4. Best Practices",id:"4-best-practices",level:3},{value:"5. Practice Projects",id:"5-practice-projects",level:3},{value:"Helpful Resources",id:"helpful-resources",level:2},{value:"Quick Reference Commands",id:"quick-reference-commands",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"spring-boot-beginner-guide",children:"Spring Boot Beginner Guide"})}),"\n",(0,o.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#what-is-spring-boot",children:"What is Spring Boot?"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#setting-up-your-development-environment",children:"Setting Up Your Development Environment"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#creating-your-first-spring-boot-project",children:"Creating Your First Spring Boot Project"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#understanding-the-project-structure",children:"Understanding the Project Structure"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#core-concepts",children:"Core Concepts"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#building-your-first-rest-api",children:"Building Your First REST API"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#working-with-data",children:"Working with Data"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#configuration-and-properties",children:"Configuration and Properties"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#common-annotations",children:"Common Annotations"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#next-steps",children:"Next Steps"})}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"what-is-spring-boot",children:"What is Spring Boot?"}),"\n",(0,o.jsx)(n.p,{children:'Spring Boot is a framework that makes it easy to create stand-alone, production-grade Spring applications. Think of it as a "starter kit" that:'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplifies setup"}),": No complex XML configurations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Provides defaults"}),": Sensible defaults for most common scenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Includes embedded server"}),": No need to deploy to external servers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Offers auto-configuration"}),": Automatically configures your application based on dependencies"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"why-spring-boot",children:"Why Spring Boot?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Faster development"}),"\n",(0,o.jsx)(n.li,{children:"Less boilerplate code"}),"\n",(0,o.jsx)(n.li,{children:"Easy to test"}),"\n",(0,o.jsx)(n.li,{children:"Production-ready features out of the box"}),"\n",(0,o.jsx)(n.li,{children:"Large ecosystem and community support"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"Before diving into Spring Boot, make sure you have:"}),"\n",(0,o.jsx)(n.h3,{id:"java-knowledge-youre-learning-this-",children:"Java Knowledge (You're learning this! \ud83c\udf89)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Basic Java syntax"}),"\n",(0,o.jsx)(n.li,{children:"Object-Oriented Programming concepts"}),"\n",(0,o.jsx)(n.li,{children:"Understanding of classes, objects, methods"}),"\n",(0,o.jsx)(n.li,{children:"Basic knowledge of collections (List, Map)"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"tools-youll-need",children:"Tools You'll Need"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Java 17 or higher"})," (recommended: Java 17 LTS)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"IDE"}),": IntelliJ IDEA, Eclipse, or VS Code"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Build tool"}),": Maven or Gradle (we'll use Maven)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Git"})," (optional but recommended)"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"setting-up-your-development-environment",children:"Setting Up Your Development Environment"}),"\n",(0,o.jsx)(n.h3,{id:"1-install-java-development-kit-jdk",children:"1. Install Java Development Kit (JDK)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check if Java is installed\njava -version\n\n# Should show Java 17 or higher\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-choose-your-ide",children:"2. Choose Your IDE"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"IntelliJ IDEA Community"})," (recommended for beginners)"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Eclipse IDE for Java Developers"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visual Studio Code"})," with Java extensions"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-verify-maven-installation",children:"3. Verify Maven Installation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check Maven installation\nmvn -version\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"creating-your-first-spring-boot-project",children:"Creating Your First Spring Boot Project"}),"\n",(0,o.jsx)(n.h3,{id:"method-1-using-spring-initializr-recommended",children:"Method 1: Using Spring Initializr (Recommended)"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Visit ",(0,o.jsx)(n.a,{href:"https://start.spring.io",children:"start.spring.io"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Configure your project:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Project"}),": Maven"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Language"}),": Java"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Spring Boot Version"}),": Latest stable (3.x)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Group"}),": com.example"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Artifact"}),": my-first-app"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Package name"}),": com.example.myfirstapp"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Packaging"}),": Jar"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Java Version"}),": 17"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add dependencies:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Spring Web"}),"\n",(0,o.jsx)(n.li,{children:"Spring Boot DevTools"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:'Click "Generate" and download the ZIP file'}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Extract and open in your IDE"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"method-2-using-ide",children:"Method 2: Using IDE"}),"\n",(0,o.jsx)(n.p,{children:"Most modern IDEs have Spring Boot project creation wizards that use Spring Initializr internally."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"understanding-the-project-structure",children:"Understanding the Project Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"my-first-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/example/myfirstapp/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 MyFirstAppApplication.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 static/          # Static web content\n\u2502   \u2502       \u251c\u2500\u2500 templates/       # Template files\n\u2502   \u2502       \u2514\u2500\u2500 application.properties\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/myfirstapp/\n\u2502               \u2514\u2500\u2500 MyFirstAppApplicationTests.java\n\u251c\u2500\u2500 target/                      # Compiled classes (generated)\n\u251c\u2500\u2500 pom.xml                     # Maven configuration\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,o.jsx)(n.h3,{id:"key-files-explained",children:"Key Files Explained"}),"\n",(0,o.jsxs)(n.h4,{id:"myfirstappapplicationjava-main-class",children:[(0,o.jsx)(n.code,{children:"MyFirstAppApplication.java"})," (Main Class)"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication\npublic class MyFirstAppApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyFirstAppApplication.class, args);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"pomxml-maven-configuration",children:[(0,o.jsx)(n.code,{children:"pom.xml"})," (Maven Configuration)"]}),"\n",(0,o.jsx)(n.p,{children:"Contains project dependencies and build configuration."}),"\n",(0,o.jsx)(n.h4,{id:"applicationproperties",children:(0,o.jsx)(n.code,{children:"application.properties"})}),"\n",(0,o.jsx)(n.p,{children:"Configuration file for your application settings."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,o.jsx)(n.h3,{id:"1-inversion-of-control-ioc-and-dependency-injection",children:"1. Inversion of Control (IoC) and Dependency Injection"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Traditional approach:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public class CarService {\n    private Engine engine = new Engine(); // CarService creates Engine\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Spring Boot approach:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Service\npublic class CarService {\n    private final Engine engine;\n\n    // Spring will inject Engine automatically\n    public CarService(Engine engine) {\n        this.engine = engine;\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-beans-and-components",children:"2. Beans and Components"}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"Bean"})," is an object managed by Spring. You create beans using annotations:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Component  // Generic component\n@Service    // Business logic layer\n@Repository // Data access layer\n@Controller // Web layer\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-auto-configuration",children:"3. Auto-Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Spring Boot automatically configures your application based on:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Dependencies in classpath"}),"\n",(0,o.jsx)(n.li,{children:"Properties you've set"}),"\n",(0,o.jsx)(n.li,{children:"Beans you've defined"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"building-your-first-rest-api",children:"Building Your First REST API"}),"\n",(0,o.jsx)(n.p,{children:"Let's create a simple REST API for managing books:"}),"\n",(0,o.jsx)(n.h3,{id:"1-create-a-book-model",children:"1. Create a Book Model"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// src/main/java/com/example/myfirstapp/model/Book.java\npackage com.example.myfirstapp.model;\n\npublic class Book {\n    private Long id;\n    private String title;\n    private String author;\n    private double price;\n\n    // Constructors\n    public Book() {}\n\n    public Book(Long id, String title, String author, double price) {\n        this.id = id;\n        this.title = title;\n        this.author = author;\n        this.price = price;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getAuthor() { return author; }\n    public void setAuthor(String author) { this.author = author; }\n\n    public double getPrice() { return price; }\n    public void setPrice(double price) { this.price = price; }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-create-a-controller",children:"2. Create a Controller"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// src/main/java/com/example/myfirstapp/controller/BookController.java\npackage com.example.myfirstapp.controller;\n\nimport com.example.myfirstapp.model.Book;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.*;\n\n@RestController\n@RequestMapping("/api/books")\npublic class BookController {\n\n    // In-memory storage (we\'ll use database later)\n    private List<Book> books = new ArrayList<>();\n    private Long nextId = 1L;\n\n    // Constructor - add some sample data\n    public BookController() {\n        books.add(new Book(nextId++, "Spring Boot in Action", "Craig Walls", 29.99));\n        books.add(new Book(nextId++, "Java: The Complete Reference", "Herbert Schildt", 35.00));\n    }\n\n    // GET /api/books - Get all books\n    @GetMapping\n    public List<Book> getAllBooks() {\n        return books;\n    }\n\n    // GET /api/books/{id} - Get book by ID\n    @GetMapping("/{id}")\n    public Book getBookById(@PathVariable Long id) {\n        return books.stream()\n            .filter(book -> book.getId().equals(id))\n            .findFirst()\n            .orElse(null);\n    }\n\n    // POST /api/books - Create new book\n    @PostMapping\n    public Book createBook(@RequestBody Book book) {\n        book.setId(nextId++);\n        books.add(book);\n        return book;\n    }\n\n    // PUT /api/books/{id} - Update book\n    @PutMapping("/{id}")\n    public Book updateBook(@PathVariable Long id, @RequestBody Book updatedBook) {\n        for (int i = 0; i < books.size(); i++) {\n            if (books.get(i).getId().equals(id)) {\n                updatedBook.setId(id);\n                books.set(i, updatedBook);\n                return updatedBook;\n            }\n        }\n        return null;\n    }\n\n    // DELETE /api/books/{id} - Delete book\n    @DeleteMapping("/{id}")\n    public void deleteBook(@PathVariable Long id) {\n        books.removeIf(book -> book.getId().equals(id));\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-test-your-api",children:"3. Test Your API"}),"\n",(0,o.jsx)(n.p,{children:"Start your application and test these endpoints:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Get all books\ncurl http://localhost:8080/api/books\n\n# Get book by ID\ncurl http://localhost:8080/api/books/1\n\n# Create new book\ncurl -X POST http://localhost:8080/api/books \\\n  -H "Content-Type: application/json" \\\n  -d \'{"title":"New Book","author":"Author Name","price":25.99}\'\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"working-with-data",children:"Working with Data"}),"\n",(0,o.jsx)(n.h3,{id:"adding-database-support",children:"Adding Database Support"}),"\n",(0,o.jsxs)(n.p,{children:["Add these dependencies to your ",(0,o.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"update-your-book-model",children:"Update Your Book Model"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import javax.persistence.*;\n\n@Entity\n@Table(name = "books")\npublic class Book {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String title;\n\n    private String author;\n    private double price;\n\n    // ... constructors, getters, setters remain the same\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"create-a-repository",children:"Create a Repository"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// src/main/java/com/example/myfirstapp/repository/BookRepository.java\npackage com.example.myfirstapp.repository;\n\nimport com.example.myfirstapp.model.Book;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface BookRepository extends JpaRepository<Book, Long> {\n    // JpaRepository provides basic CRUD operations\n    // You can add custom query methods here\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"update-your-controller",children:"Update Your Controller"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/books")\npublic class BookController {\n\n    private final BookRepository bookRepository;\n\n    // Constructor injection\n    public BookController(BookRepository bookRepository) {\n        this.bookRepository = bookRepository;\n    }\n\n    @GetMapping\n    public List<Book> getAllBooks() {\n        return bookRepository.findAll();\n    }\n\n    @GetMapping("/{id}")\n    public Book getBookById(@PathVariable Long id) {\n        return bookRepository.findById(id).orElse(null);\n    }\n\n    @PostMapping\n    public Book createBook(@RequestBody Book book) {\n        return bookRepository.save(book);\n    }\n\n    // ... other methods updated similarly\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"configuration-and-properties",children:"Configuration and Properties"}),"\n",(0,o.jsx)(n.h3,{id:"applicationproperties-1",children:"application.properties"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"# Server configuration\nserver.port=8080\n\n# Database configuration (H2 in-memory)\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driver-class-name=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\n\n# JPA/Hibernate configuration\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\n\n# H2 Console (for development)\nspring.h2.console.enabled=true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"using-value-annotation",children:"Using @Value Annotation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Component\npublic class AppConfig {\n    @Value("${server.port}")\n    private int serverPort;\n\n    @Value("${app.name:My Spring Boot App}")\n    private String appName; // Default value if property not found\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"common-annotations",children:"Common Annotations"}),"\n",(0,o.jsx)(n.h3,{id:"class-level-annotations",children:"Class-Level Annotations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@SpringBootApplication"}),": Combines @Configuration, @EnableAutoConfiguration, and @ComponentScan"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@RestController"}),": Combines @Controller and @ResponseBody"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Service"}),": Marks service layer components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Repository"}),": Marks data access layer components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Component"}),": Generic stereotype annotation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Configuration"}),": Indicates configuration class"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"method-level-annotations",children:"Method-Level Annotations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@GetMapping"}),", ",(0,o.jsx)(n.code,{children:"@PostMapping"}),", ",(0,o.jsx)(n.code,{children:"@PutMapping"}),", ",(0,o.jsx)(n.code,{children:"@DeleteMapping"}),": HTTP method mappings"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@RequestMapping"}),": Generic request mapping"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@PathVariable"}),": Binds URI template variables to method parameters"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@RequestBody"}),": Binds HTTP request body to method parameter"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@RequestParam"}),": Binds request parameters to method parameters"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"field-level-annotations",children:"Field-Level Annotations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Autowired"}),": Dependency injection"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Value"}),": Injects values from properties"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Id"}),": JPA primary key"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Entity"}),": JPA entity class"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@Column"}),": JPA column mapping"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.h3,{id:"1-learn-more-about-spring-boot",children:"1. Learn More About Spring Boot"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Testing"}),": Learn about @SpringBootTest, @WebMvcTest"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security"}),": Add Spring Security for authentication"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validation"}),": Use @Valid and validation annotations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Profiles"}),": Different configurations for dev, test, prod"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-database-integration",children:"2. Database Integration"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"MySQL/PostgreSQL"}),": Production databases"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Spring Data JPA"}),": Advanced querying"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Database migrations"}),": Flyway or Liquibase"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-advanced-topics",children:"3. Advanced Topics"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Microservices"}),": Spring Cloud"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Caching"}),": Spring Cache abstraction"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Messaging"}),": RabbitMQ, Apache Kafka"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Monitoring"}),": Spring Boot Actuator"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-best-practices",children:"4. Best Practices"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error handling"}),": Global exception handlers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Logging"}),": Structured logging with Logback"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"API documentation"}),": Swagger/OpenAPI"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker"}),": Containerizing Spring Boot apps"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-practice-projects",children:"5. Practice Projects"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Todo API"}),": CRUD operations with user authentication"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Blog System"}),": Posts, comments, and user management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"E-commerce Backend"}),": Products, orders, and payments"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Social Media API"}),": Users, posts, likes, and follows"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"helpful-resources",children:"Helpful Resources"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://spring.io/projects/spring-boot",children:"Spring Boot Documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://start.spring.io",children:"Spring Initializr"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.baeldung.com/spring-boot",children:"Baeldung Spring Boot Tutorials"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/",children:"Spring Boot Reference Guide"})}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"quick-reference-commands",children:"Quick Reference Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run your Spring Boot application\n./mvnw spring-boot:run\n\n# Package your application\n./mvnw clean package\n\n# Run tests\n./mvnw test\n\n# Run with specific profile\n./mvnw spring-boot:run -Dspring-boot.run.profiles=dev\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Remember: Spring Boot is all about ",(0,o.jsx)(n.strong,{children:"convention over configuration"}),". It provides sensible defaults so you can focus on writing business logic rather than configuration. Start simple, and gradually add complexity as you learn!"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var o=i(96540);const r={},s=o.createContext(r);function t(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);