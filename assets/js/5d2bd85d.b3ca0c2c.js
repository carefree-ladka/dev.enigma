"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9471],{4131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var i=t(4848),s=t(8453);const r={},l="Linked List",d={id:"DSA/DSA Cheatsheets/LinkedList",title:"Linked List",description:"A comprehensive guide to linked list algorithms and techniques for Data Structures and Algorithms.",source:"@site/docs/DSA/DSA Cheatsheets/LinkedList.mdx",sourceDirName:"DSA/DSA Cheatsheets",slug:"/DSA/DSA Cheatsheets/LinkedList",permalink:"/js.enigma/docs/DSA/DSA Cheatsheets/LinkedList",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA Cheatsheets/LinkedList.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Knapsack Problems",permalink:"/js.enigma/docs/DSA/DSA Cheatsheets/Knapsack Problems"},next:{title:"Mathematics DSA Tricks, Tips & Patterns",permalink:"/js.enigma/docs/DSA/DSA Cheatsheets/Mathematics DSA Tricks, Tips"}},a={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Basic Node Structures",id:"basic-node-structures",level:2},{value:"Singly Linked List Node",id:"singly-linked-list-node",level:3},{value:"Doubly Linked List Node",id:"doubly-linked-list-node",level:3},{value:"Helper Functions",id:"helper-functions",level:3},{value:"Basic Linked List Operations",id:"basic-linked-list-operations",level:2},{value:"1. Traversal",id:"1-traversal",level:3},{value:"2. Search",id:"2-search",level:3},{value:"3. Insert Operations",id:"3-insert-operations",level:3},{value:"Insert at Beginning",id:"insert-at-beginning",level:4},{value:"Insert at End",id:"insert-at-end",level:4},{value:"Insert at Specific Position",id:"insert-at-specific-position",level:4},{value:"4. Delete Operations",id:"4-delete-operations",level:3},{value:"Delete First Occurrence of Value",id:"delete-first-occurrence-of-value",level:4},{value:"Delete at Specific Position",id:"delete-at-specific-position",level:4},{value:"Two Pointer Techniques",id:"two-pointer-techniques",level:2},{value:"1. Find Middle of Linked List",id:"1-find-middle-of-linked-list",level:3},{value:"2. Detect Cycle (Floyd&#39;s Cycle Detection)",id:"2-detect-cycle-floyds-cycle-detection",level:3},{value:"3. Find Cycle Start Node",id:"3-find-cycle-start-node",level:3},{value:"4. Find Nth Node from End",id:"4-find-nth-node-from-end",level:3},{value:"5. Remove Nth Node from End",id:"5-remove-nth-node-from-end",level:3},{value:"Reversal Techniques",id:"reversal-techniques",level:2},{value:"1. Reverse Entire Linked List",id:"1-reverse-entire-linked-list",level:3},{value:"2. Reverse List Recursively",id:"2-reverse-list-recursively",level:3},{value:"3. Reverse Between Two Positions",id:"3-reverse-between-two-positions",level:3},{value:"4. Reverse in K Groups",id:"4-reverse-in-k-groups",level:3},{value:"Merge and Sorting Techniques",id:"merge-and-sorting-techniques",level:2},{value:"1. Merge Two Sorted Lists",id:"1-merge-two-sorted-lists",level:3},{value:"2. Merge K Sorted Lists",id:"2-merge-k-sorted-lists",level:3},{value:"3. Merge Sort for Linked List",id:"3-merge-sort-for-linked-list",level:3},{value:"Intersection and Comparison",id:"intersection-and-comparison",level:2},{value:"1. Find Intersection of Two Lists",id:"1-find-intersection-of-two-lists",level:3},{value:"2. Check if Two Lists are Equal",id:"2-check-if-two-lists-are-equal",level:3},{value:"Advanced Techniques",id:"advanced-techniques",level:2},{value:"1. Partition List",id:"1-partition-list",level:3},{value:"2. Rotate List",id:"2-rotate-list",level:3},{value:"3. Add Two Numbers",id:"3-add-two-numbers",level:3},{value:"4. Copy List with Random Pointer",id:"4-copy-list-with-random-pointer",level:3},{value:"5. Palindrome Check",id:"5-palindrome-check",level:3},{value:"Doubly Linked List Operations",id:"doubly-linked-list-operations",level:2},{value:"Complete Doubly Linked List Implementation",id:"complete-doubly-linked-list-implementation",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Time Complexity Summary",id:"time-complexity-summary",level:2},{value:"Common Patterns to Remember",id:"common-patterns-to-remember",level:2},{value:"1. <strong>Dummy Node Pattern</strong>",id:"1-dummy-node-pattern",level:3},{value:"2. <strong>Two Pointer Pattern</strong>",id:"2-two-pointer-pattern",level:3},{value:"3. <strong>Previous Pointer Pattern</strong>",id:"3-previous-pointer-pattern",level:3},{value:"4. <strong>Recursive Pattern</strong>",id:"4-recursive-pattern",level:3},{value:"5. <strong>Hash Map Pattern</strong>",id:"5-hash-map-pattern",level:3},{value:"Key Interview Tips",id:"key-interview-tips",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"linked-list",children:"Linked List"})}),"\n",(0,i.jsx)(n.p,{children:"A comprehensive guide to linked list algorithms and techniques for Data Structures and Algorithms."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-node-structures",children:"Basic Node Structures"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#basic-linked-list-operations",children:"Basic Linked List Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#two-pointer-techniques",children:"Two Pointer Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reversal-techniques",children:"Reversal Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#merge-and-sorting-techniques",children:"Merge and Sorting Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#intersection-and-comparison",children:"Intersection and Comparison"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#advanced-techniques",children:"Advanced Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#doubly-linked-list-operations",children:"Doubly Linked List Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#usage-examples",children:"Usage Examples"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"basic-node-structures",children:"Basic Node Structures"}),"\n",(0,i.jsx)(n.p,{children:"The foundation of linked list operations starts with node definitions:"}),"\n",(0,i.jsx)(n.h3,{id:"singly-linked-list-node",children:"Singly Linked List Node"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class ListNode {\n    constructor(val = 0, next = null) {\n        this.val = val;\n        this.next = next;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"doubly-linked-list-node",children:"Doubly Linked List Node"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class DoublyListNode {\n    constructor(val = 0, prev = null, next = null) {\n        this.val = val;\n        this.prev = prev;\n        this.next = next;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Create linked list from array\nfunction createLinkedList(arr) {\n    if (!arr || arr.length === 0) return null;\n\n    const head = new ListNode(arr[0]);\n    let current = head;\n\n    for (let i = 1; i < arr.length; i++) {\n        current.next = new ListNode(arr[i]);\n        current = current.next;\n    }\n\n    return head;\n}\n\n// Print linked list for visualization\nfunction printList(head) {\n    const result = [];\n    let current = head;\n    while (current) {\n        result.push(current.val);\n        current = current.next;\n    }\n    return result.join(' -> ');\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"basic-linked-list-operations",children:"Basic Linked List Operations"}),"\n",(0,i.jsx)(n.h3,{id:"1-traversal",children:"1. Traversal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function traverseList(head) {\n    const values = [];\n    let current = head;\n\n    while (current) {\n        values.push(current.val);\n        current = current.next;\n    }\n\n    return values;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h3,{id:"2-search",children:"2. Search"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function searchList(head, target) {\n    let current = head;\n    let position = 0;\n\n    while (current) {\n        if (current.val === target) {\n            return position;\n        }\n        current = current.next;\n        position++;\n    }\n\n    return -1; // Not found\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h3,{id:"3-insert-operations",children:"3. Insert Operations"}),"\n",(0,i.jsx)(n.h4,{id:"insert-at-beginning",children:"Insert at Beginning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function insertAtBeginning(head, val) {\n    const newNode = new ListNode(val);\n    newNode.next = head;\n    return newNode;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h4,{id:"insert-at-end",children:"Insert at End"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function insertAtEnd(head, val) {\n    const newNode = new ListNode(val);\n\n    if (!head) return newNode;\n\n    let current = head;\n    while (current.next) {\n        current = current.next;\n    }\n\n    current.next = newNode;\n    return head;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n)"]}),"\n",(0,i.jsx)(n.h4,{id:"insert-at-specific-position",children:"Insert at Specific Position"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function insertAtPosition(head, val, position) {\n    if (position === 0) return insertAtBeginning(head, val);\n\n    const newNode = new ListNode(val);\n    let current = head;\n\n    for (let i = 0; i < position - 1 && current; i++) {\n        current = current.next;\n    }\n\n    if (!current) return head; // Position out of bounds\n\n    newNode.next = current.next;\n    current.next = newNode;\n    return head;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-delete-operations",children:"4. Delete Operations"}),"\n",(0,i.jsx)(n.h4,{id:"delete-first-occurrence-of-value",children:"Delete First Occurrence of Value"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function deleteValue(head, val) {\n    if (!head) return null;\n\n    if (head.val === val) {\n        return head.next;\n    }\n\n    let current = head;\n    while (current.next && current.next.val !== val) {\n        current = current.next;\n    }\n\n    if (current.next) {\n        current.next = current.next.next;\n    }\n\n    return head;\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"delete-at-specific-position",children:"Delete at Specific Position"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function deleteAtPosition(head, position) {\n    if (!head || position < 0) return head;\n\n    if (position === 0) {\n        return head.next;\n    }\n\n    let current = head;\n    for (let i = 0; i < position - 1 && current.next; i++) {\n        current = current.next;\n    }\n\n    if (current.next) {\n        current.next = current.next.next;\n    }\n\n    return head;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"two-pointer-techniques",children:"Two Pointer Techniques"}),"\n",(0,i.jsx)(n.p,{children:"The two-pointer technique is essential for many linked list problems and provides elegant solutions."}),"\n",(0,i.jsx)(n.h3,{id:"1-find-middle-of-linked-list",children:"1. Find Middle of Linked List"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Floyd's Tortoise and Hare Algorithm:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function findMiddle(head) {\n    if (!head) return null;\n\n    let slow = head;\n    let fast = head;\n\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n\n    return slow;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h3,{id:"2-detect-cycle-floyds-cycle-detection",children:"2. Detect Cycle (Floyd's Cycle Detection)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function hasCycle(head) {\n    if (!head || !head.next) return false;\n\n    let slow = head;\n    let fast = head;\n\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow === fast) {\n            return true;\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 Pro Tip:"}),' This is also known as the "Tortoise and Hare" algorithm!']}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-find-cycle-start-node",children:"3. Find Cycle Start Node"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function detectCycleStart(head) {\n    if (!head || !head.next) return null;\n\n    let slow = head;\n    let fast = head;\n\n    // Detect if cycle exists\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow === fast) {\n            break;\n        }\n    }\n\n    if (!fast || !fast.next) return null;\n\n    // Find start of cycle\n    slow = head;\n    while (slow !== fast) {\n        slow = slow.next;\n        fast = fast.next;\n    }\n\n    return slow;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-find-nth-node-from-end",children:"4. Find Nth Node from End"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Gap Method:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function nthFromEnd(head, n) {\n    let first = head;\n    let second = head;\n\n    // Move first pointer n steps ahead\n    for (let i = 0; i < n; i++) {\n        if (!first) return null;\n        first = first.next;\n    }\n\n    // Move both pointers until first reaches end\n    while (first) {\n        first = first.next;\n        second = second.next;\n    }\n\n    return second;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-remove-nth-node-from-end",children:"5. Remove Nth Node from End"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function removeNthFromEnd(head, n) {\n    const dummy = new ListNode(0);\n    dummy.next = head;\n\n    let first = dummy;\n    let second = dummy;\n\n    // Move first pointer n+1 steps ahead\n    for (let i = 0; i <= n; i++) {\n        first = first.next;\n    }\n\n    // Move both pointers until first reaches end\n    while (first) {\n        first = first.next;\n        second = second.next;\n    }\n\n    // Remove the nth node\n    second.next = second.next.next;\n\n    return dummy.next;\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udd27 Technique:"})," Using a dummy node simplifies edge cases!"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reversal-techniques",children:"Reversal Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"1-reverse-entire-linked-list",children:"1. Reverse Entire Linked List"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Iterative Approach:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function reverseList(head) {\n    let prev = null;\n    let current = head;\n\n    while (current) {\n        const nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n\n    return prev;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h3,{id:"2-reverse-list-recursively",children:"2. Reverse List Recursively"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function reverseListRecursive(head) {\n    if (!head || !head.next) return head;\n\n    const newHead = reverseListRecursive(head.next);\n    head.next.next = head;\n    head.next = null;\n\n    return newHead;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(n) due to recursion stack"]}),"\n",(0,i.jsx)(n.h3,{id:"3-reverse-between-two-positions",children:"3. Reverse Between Two Positions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function reverseBetween(head, left, right) {\n    if (!head || left === right) return head;\n\n    const dummy = new ListNode(0);\n    dummy.next = head;\n    let prev = dummy;\n\n    // Move to position before left\n    for (let i = 0; i < left - 1; i++) {\n        prev = prev.next;\n    }\n\n    let current = prev.next;\n\n    // Reverse the sublist\n    for (let i = 0; i < right - left; i++) {\n        const nextTemp = current.next;\n        current.next = nextTemp.next;\n        nextTemp.next = prev.next;\n        prev.next = nextTemp;\n    }\n\n    return dummy.next;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-reverse-in-k-groups",children:"4. Reverse in K Groups"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function reverseKGroup(head, k) {\n    if (!head || k === 1) return head;\n\n    // Check if we have k nodes\n    let count = 0;\n    let node = head;\n    while (node && count < k) {\n        node = node.next;\n        count++;\n    }\n\n    if (count === k) {\n        // Reverse current k nodes\n        node = reverseKGroup(node, k);\n\n        while (count > 0) {\n            const temp = head.next;\n            head.next = node;\n            node = head;\n            head = temp;\n            count--;\n        }\n\n        head = node;\n    }\n\n    return head;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"merge-and-sorting-techniques",children:"Merge and Sorting Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"1-merge-two-sorted-lists",children:"1. Merge Two Sorted Lists"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function mergeTwoLists(list1, list2) {\n    const dummy = new ListNode(0);\n    let current = dummy;\n\n    while (list1 && list2) {\n        if (list1.val <= list2.val) {\n            current.next = list1;\n            list1 = list1.next;\n        } else {\n            current.next = list2;\n            list2 = list2.next;\n        }\n        current = current.next;\n    }\n\n    current.next = list1 || list2;\n\n    return dummy.next;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n + m) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h3,{id:"2-merge-k-sorted-lists",children:"2. Merge K Sorted Lists"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Divide and Conquer Approach:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function mergeKLists(lists) {\n    if (!lists || lists.length === 0) return null;\n    if (lists.length === 1) return lists[0];\n\n    while (lists.length > 1) {\n        const mergedLists = [];\n\n        for (let i = 0; i < lists.length; i += 2) {\n            const list1 = lists[i];\n            const list2 = i + 1 < lists.length ? lists[i + 1] : null;\n            mergedLists.push(mergeTwoLists(list1, list2));\n        }\n\n        lists = mergedLists;\n    }\n\n    return lists[0];\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n log k) where k is number of lists"]}),"\n",(0,i.jsx)(n.h3,{id:"3-merge-sort-for-linked-list",children:"3. Merge Sort for Linked List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function sortList(head) {\n    if (!head || !head.next) return head;\n\n    // Find middle and split\n    const middle = findMiddle(head);\n    const rightHalf = middle.next;\n    middle.next = null;\n\n    // Recursively sort both halves\n    const left = sortList(head);\n    const right = sortList(rightHalf);\n\n    // Merge sorted halves\n    return mergeTwoLists(left, right);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n log n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(log n)"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"intersection-and-comparison",children:"Intersection and Comparison"}),"\n",(0,i.jsx)(n.h3,{id:"1-find-intersection-of-two-lists",children:"1. Find Intersection of Two Lists"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function getIntersectionNode(headA, headB) {\n    if (!headA || !headB) return null;\n\n    let pA = headA;\n    let pB = headB;\n\n    while (pA !== pB) {\n        pA = pA ? pA.next : headB;\n        pB = pB ? pB.next : headA;\n    }\n\n    return pA;\n}\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83e\udde0 Algorithm Insight:"})," Each pointer traverses both lists, ensuring they meet at intersection or null!"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-check-if-two-lists-are-equal",children:"2. Check if Two Lists are Equal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function areListsEqual(head1, head2) {\n    while (head1 && head2) {\n        if (head1.val !== head2.val) {\n            return false;\n        }\n        head1 = head1.next;\n        head2 = head2.next;\n    }\n\n    return !head1 && !head2;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"advanced-techniques",children:"Advanced Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"1-partition-list",children:"1. Partition List"}),"\n",(0,i.jsx)(n.p,{children:"Split list around pivot value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function partition(head, x) {\n    const beforeHead = new ListNode(0);\n    const afterHead = new ListNode(0);\n    let before = beforeHead;\n    let after = afterHead;\n\n    while (head) {\n        if (head.val < x) {\n            before.next = head;\n            before = before.next;\n        } else {\n            after.next = head;\n            after = after.next;\n        }\n        head = head.next;\n    }\n\n    after.next = null;\n    before.next = afterHead.next;\n\n    return beforeHead.next;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-rotate-list",children:"2. Rotate List"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function rotateRight(head, k) {\n    if (!head || !head.next || k === 0) return head;\n\n    // Find length and make it circular\n    let length = 1;\n    let tail = head;\n    while (tail.next) {\n        tail = tail.next;\n        length++;\n    }\n    tail.next = head;\n\n    // Find new tail and head\n    k = k % length;\n    const stepsToNewTail = length - k;\n    let newTail = head;\n\n    for (let i = 1; i < stepsToNewTail; i++) {\n        newTail = newTail.next;\n    }\n\n    const newHead = newTail.next;\n    newTail.next = null;\n\n    return newHead;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-add-two-numbers",children:"3. Add Two Numbers"}),"\n",(0,i.jsx)(n.p,{children:"Numbers represented as linked lists:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function addTwoNumbers(l1, l2) {\n    const dummy = new ListNode(0);\n    let current = dummy;\n    let carry = 0;\n\n    while (l1 || l2 || carry) {\n        const val1 = l1 ? l1.val : 0;\n        const val2 = l2 ? l2.val : 0;\n        const sum = val1 + val2 + carry;\n\n        carry = Math.floor(sum / 10);\n        current.next = new ListNode(sum % 10);\n        current = current.next;\n\n        if (l1) l1 = l1.next;\n        if (l2) l2 = l2.next;\n    }\n\n    return dummy.next;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-copy-list-with-random-pointer",children:"4. Copy List with Random Pointer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class RandomListNode {\n    constructor(val, next = null, random = null) {\n        this.val = val;\n        this.next = next;\n        this.random = random;\n    }\n}\n\nfunction copyRandomList(head) {\n    if (!head) return null;\n\n    const map = new Map();\n\n    // First pass: create nodes\n    let current = head;\n    while (current) {\n        map.set(current, new RandomListNode(current.val));\n        current = current.next;\n    }\n\n    // Second pass: set pointers\n    current = head;\n    while (current) {\n        const newNode = map.get(current);\n        newNode.next = current.next ? map.get(current.next) : null;\n        newNode.random = current.random ? map.get(current.random) : null;\n        current = current.next;\n    }\n\n    return map.get(head);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-palindrome-check",children:"5. Palindrome Check"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function isPalindrome(head) {\n    if (!head || !head.next) return true;\n\n    // Find middle\n    const middle = findMiddle(head);\n\n    // Reverse second half\n    let secondHalf = reverseList(middle);\n    let firstHalf = head;\n\n    // Compare\n    while (secondHalf) {\n        if (firstHalf.val !== secondHalf.val) {\n            return false;\n        }\n        firstHalf = firstHalf.next;\n        secondHalf = secondHalf.next;\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"doubly-linked-list-operations",children:"Doubly Linked List Operations"}),"\n",(0,i.jsx)(n.h3,{id:"complete-doubly-linked-list-implementation",children:"Complete Doubly Linked List Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.size = 0;\n    }\n\n    insertFront(val) {\n        const newNode = new DoublyListNode(val);\n\n        if (!this.head) {\n            this.head = this.tail = newNode;\n        } else {\n            newNode.next = this.head;\n            this.head.prev = newNode;\n            this.head = newNode;\n        }\n\n        this.size++;\n    }\n\n    insertRear(val) {\n        const newNode = new DoublyListNode(val);\n\n        if (!this.tail) {\n            this.head = this.tail = newNode;\n        } else {\n            this.tail.next = newNode;\n            newNode.prev = this.tail;\n            this.tail = newNode;\n        }\n\n        this.size++;\n    }\n\n    deleteFront() {\n        if (!this.head) return null;\n\n        const val = this.head.val;\n\n        if (this.head === this.tail) {\n            this.head = this.tail = null;\n        } else {\n            this.head = this.head.next;\n            this.head.prev = null;\n        }\n\n        this.size--;\n        return val;\n    }\n\n    deleteRear() {\n        if (!this.tail) return null;\n\n        const val = this.tail.val;\n\n        if (this.head === this.tail) {\n            this.head = this.tail = null;\n        } else {\n            this.tail = this.tail.prev;\n            this.tail.next = null;\n        }\n\n        this.size--;\n        return val;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:"Here's how to use these techniques:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'console.log("=== Linked List Techniques Demo ===");\n\n// Create sample lists\nconst list1 = createLinkedList([1, 2, 3, 4, 5]);\nconst list2 = createLinkedList([2, 4, 6]);\n\nconsole.log("Original list:", printList(list1));\nconsole.log("Find middle:", findMiddle(list1).val);\nconsole.log("3rd from end:", nthFromEnd(list1, 3).val);\n\nconst reversed = reverseList(createLinkedList([1, 2, 3, 4, 5]));\nconsole.log("Reversed list:", printList(reversed));\n\nconst merged = mergeTwoLists(createLinkedList([1, 3, 5]), createLinkedList([2, 4, 6]));\nconsole.log("Merged sorted lists:", printList(merged));\n\nconst sorted = sortList(createLinkedList([4, 2, 1, 3]));\nconsole.log("Sorted list:", printList(sorted));\n\nconst palindromeList = createLinkedList([1, 2, 2, 1]);\nconsole.log("Is palindrome:", isPalindrome(palindromeList));\n\n// Doubly linked list demo\nconst dll = new DoublyLinkedList();\ndll.insertFront(2);\ndll.insertFront(1);\ndll.insertRear(3);\nconsole.log("DLL size:", dll.size);\nconsole.log("Delete front:", dll.deleteFront());\nconsole.log("Delete rear:", dll.deleteRear());\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"time-complexity-summary",children:"Time Complexity Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Time Complexity"}),(0,i.jsx)(n.th,{children:"Space Complexity"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Traversal"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Search"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Insert at Beginning"}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Insert at End"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Insert at Position"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Delete"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Reverse"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Find Middle"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Detect Cycle"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Merge Two Lists"}),(0,i.jsx)(n.td,{children:"O(n + m)"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Merge K Lists"}),(0,i.jsx)(n.td,{children:"O(n log k)"}),(0,i.jsx)(n.td,{children:"O(log k)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Sort List"}),(0,i.jsx)(n.td,{children:"O(n log n)"}),(0,i.jsx)(n.td,{children:"O(log n)"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns-to-remember",children:"Common Patterns to Remember"}),"\n",(0,i.jsxs)(n.h3,{id:"1-dummy-node-pattern",children:["1. ",(0,i.jsx)(n.strong,{children:"Dummy Node Pattern"})]}),"\n",(0,i.jsx)(n.p,{children:"Use a dummy node to simplify edge cases:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const dummy = new ListNode(0);\ndummy.next = head;\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-two-pointer-pattern",children:["2. ",(0,i.jsx)(n.strong,{children:"Two Pointer Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast/Slow"}),": Finding middle, cycle detection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Gap Method"}),": Nth from end problems"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-previous-pointer-pattern",children:["3. ",(0,i.jsx)(n.strong,{children:"Previous Pointer Pattern"})]}),"\n",(0,i.jsx)(n.p,{children:"Keep track of previous node for deletions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"let prev = null;\nlet current = head;\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-recursive-pattern",children:["4. ",(0,i.jsx)(n.strong,{children:"Recursive Pattern"})]}),"\n",(0,i.jsx)(n.p,{children:"Many operations can be solved recursively:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reversal"}),"\n",(0,i.jsx)(n.li,{children:"Merging"}),"\n",(0,i.jsx)(n.li,{children:"Tree-like problems"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-hash-map-pattern",children:["5. ",(0,i.jsx)(n.strong,{children:"Hash Map Pattern"})]}),"\n",(0,i.jsx)(n.p,{children:"For problems involving random pointers or complex references"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-interview-tips",children:"Key Interview Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always check for null"}),": Handle empty lists gracefully"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use dummy nodes"}),": Simplifies insertion/deletion at head"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Draw diagrams"}),": Visualize pointer manipulations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test with examples"}),": Use [1,2,3], [1], and [] as test cases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider edge cases"}),": Single node, empty list, cycles"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive guide covers all essential linked list techniques for coding interviews and competitive programming!"})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);