"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6236],{28453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>i});var s=o(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},87733:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var s=o(74848),r=o(28453);const t={},l="JavaScript Symbols",i={id:"WebDev/JavaScript/Symbol",title:"JavaScript Symbols",description:"Introduction to Symbols",source:"@site/docs/WebDev/JavaScript/Symbol.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Symbol",permalink:"/dev.enigma/docs/WebDev/JavaScript/Symbol",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Symbol.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SOLID Principles in JavaScript and React",permalink:"/dev.enigma/docs/WebDev/JavaScript/SOLIDPrinciples"},next:{title:"Task Queue",permalink:"/dev.enigma/docs/WebDev/JavaScript/TaskQueue"}},a={},c=[{value:"Introduction to Symbols",id:"introduction-to-symbols",level:2},{value:"Creating Symbols",id:"creating-symbols",level:2},{value:"Basic Symbol Creation",id:"basic-symbol-creation",level:3},{value:"Symbol.for() and Symbol.keyFor()",id:"symbolfor-and-symbolkeyfor",level:3},{value:"Using Symbols as Object Properties",id:"using-symbols-as-object-properties",level:2},{value:"Basic Property Usage",id:"basic-property-usage",level:3},{value:"Symbol Property Enumeration",id:"symbol-property-enumeration",level:3},{value:"Well-Known Symbols",id:"well-known-symbols",level:2},{value:"Symbol.iterator",id:"symboliterator",level:3},{value:"Symbol.toStringTag",id:"symboltostringtag",level:3},{value:"Symbol.toPrimitive",id:"symboltoprimitive",level:3},{value:"Advanced Use Cases",id:"advanced-use-cases",level:2},{value:"Private Properties (Pre-Class Fields)",id:"private-properties-pre-class-fields",level:3},{value:"Custom Object Types",id:"custom-object-types",level:3},{value:"Registry Pattern",id:"registry-pattern",level:3},{value:"Symbol Metadata and Reflection",id:"symbol-metadata-and-reflection",level:2},{value:"Property Descriptors with Symbols",id:"property-descriptors-with-symbols",level:3},{value:"Symbol Property Reflection",id:"symbol-property-reflection",level:3},{value:"Best Practices",id:"best-practices",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"javascript-symbols",children:"JavaScript Symbols"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction-to-symbols",children:"Introduction to Symbols"}),"\n",(0,s.jsx)(n.p,{children:"Symbols are primitive values that represent unique identifiers. They were introduced in ES6 (ES2015) and provide a way to create non-string property keys for objects."}),"\n",(0,s.jsx)(n.h2,{id:"creating-symbols",children:"Creating Symbols"}),"\n",(0,s.jsx)(n.h3,{id:"basic-symbol-creation",children:"Basic Symbol Creation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Creating a simple Symbol\nconst sym1 = Symbol();\nconst sym2 = Symbol();\nconsole.log(sym1 === sym2); // false\n\n// Symbol with description\nconst sym3 = Symbol('mySymbol');\nconsole.log(sym3.description); // 'mySymbol'\n\n// Symbols are always unique\nconst sym4 = Symbol('mySymbol');\nconsole.log(sym3 === sym4); // false, even with same description\n"})}),"\n",(0,s.jsx)(n.h3,{id:"symbolfor-and-symbolkeyfor",children:"Symbol.for() and Symbol.keyFor()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Creating shared Symbols using Symbol.for()\nconst globalSym1 = Symbol.for('globalSymbol');\nconst globalSym2 = Symbol.for('globalSymbol');\nconsole.log(globalSym1 === globalSym2); // true\n\n// Getting symbol key using Symbol.keyFor()\nconsole.log(Symbol.keyFor(globalSym1)); // 'globalSymbol'\n\n// Regular symbols are not registered\nconst localSym = Symbol('localSymbol');\nconsole.log(Symbol.keyFor(localSym)); // undefined\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-symbols-as-object-properties",children:"Using Symbols as Object Properties"}),"\n",(0,s.jsx)(n.h3,{id:"basic-property-usage",children:"Basic Property Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const MY_KEY = Symbol('myKey');\nconst obj = {\n    [MY_KEY]: 'Symbol value',\n    regularKey: 'Regular value'\n};\n\nconsole.log(obj[MY_KEY]); // 'Symbol value'\nconsole.log(Object.keys(obj)); // ['regularKey']\nconsole.log(Object.getOwnPropertySymbols(obj)); // [Symbol(myKey)]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"symbol-property-enumeration",children:"Symbol Property Enumeration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n    [Symbol('a')]: 'a',\n    [Symbol('b')]: 'b',\n    c: 'c'\n};\n\n// Different ways to access properties\nconsole.log(Object.keys(obj)); // ['c']\nconsole.log(Object.getOwnPropertyNames(obj)); // ['c']\nconsole.log(Object.getOwnPropertySymbols(obj)); // [Symbol(a), Symbol(b)]\n\n// Getting all properties including symbols\nconst allProps = [\n    ...Object.getOwnPropertyNames(obj),\n    ...Object.getOwnPropertySymbols(obj)\n];\n"})}),"\n",(0,s.jsx)(n.h2,{id:"well-known-symbols",children:"Well-Known Symbols"}),"\n",(0,s.jsx)(n.h3,{id:"symboliterator",children:"Symbol.iterator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class CustomCollection {\n    constructor() {\n        this.items = [];\n    }\n\n    add(item) {\n        this.items.push(item);\n    }\n\n    // Making object iterable\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.items.length) {\n                    return { value: this.items[index++], done: false };\n                }\n                return { done: true };\n            }\n        };\n    }\n}\n\nconst collection = new CustomCollection();\ncollection.add('a');\ncollection.add('b');\n\nfor (const item of collection) {\n    console.log(item); // 'a', 'b'\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"symboltostringtag",children:"Symbol.toStringTag"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class CustomClass {\n    get [Symbol.toStringTag]() {\n        return 'CustomClass';\n    }\n}\n\nconst obj = new CustomClass();\nconsole.log(Object.prototype.toString.call(obj)); // '[object CustomClass]'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"symboltoprimitive",children:"Symbol.toPrimitive"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const obj = {\n    [Symbol.toPrimitive](hint) {\n        switch (hint) {\n            case 'number':\n                return 42;\n            case 'string':\n                return 'Custom string';\n            default:\n                return 'Default value';\n        }\n    }\n};\n\nconsole.log(+obj); // 42\nconsole.log(`${obj}`); // 'Custom string'\nconsole.log(obj + ''); // 'Default value'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-use-cases",children:"Advanced Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"private-properties-pre-class-fields",children:"Private Properties (Pre-Class Fields)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const privateProps = new WeakMap();\n\nclass PrivateClass {\n    constructor() {\n        privateProps.set(this, {\n            secret: 'private data'\n        });\n    }\n\n    getSecret() {\n        return privateProps.get(this).secret;\n    }\n}\n\nconst instance = new PrivateClass();\nconsole.log(instance.getSecret()); // 'private data'\nconsole.log(privateProps.get(instance).secret); // 'private data'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-object-types",children:"Custom Object Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const TYPE = Symbol('type');\n\nclass ValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this[TYPE] = 'ValidationError';\n    }\n\n    get type() {\n        return this[TYPE];\n    }\n}\n\nconst error = new ValidationError('Invalid input');\nconsole.log(error.type); // 'ValidationError'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"registry-pattern",children:"Registry Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const Registry = {\n    _registry: new Map(),\n\n    register(key, value) {\n        const sym = Symbol.for(key);\n        this._registry.set(sym, value);\n        return sym;\n    },\n\n    get(key) {\n        return this._registry.get(Symbol.for(key));\n    }\n};\n\n// Usage\nRegistry.register('config', { env: 'production' });\nconsole.log(Registry.get('config')); // { env: 'production' }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"symbol-metadata-and-reflection",children:"Symbol Metadata and Reflection"}),"\n",(0,s.jsx)(n.h3,{id:"property-descriptors-with-symbols",children:"Property Descriptors with Symbols"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const sym = Symbol('test');\nconst obj = {};\n\nObject.defineProperty(obj, sym, {\n    value: 'Symbol value',\n    writable: true,\n    enumerable: false,\n    configurable: true\n});\n\nconsole.log(Object.getOwnPropertyDescriptor(obj, sym));\n// {\n//   value: 'Symbol value',\n//   writable: true,\n//   enumerable: false,\n//   configurable: true\n// }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"symbol-property-reflection",children:"Symbol Property Reflection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const symbols = Object.getOwnPropertySymbols(obj);\nconst symbolProps = symbols.reduce((acc, sym) => {\n    acc[sym.description] = obj[sym];\n    return acc;\n}, {});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Use Descriptive Names"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Good\nconst RENDER_MODE = Symbol('renderMode');\n\n// Avoid\nconst s = Symbol();\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Symbol Registry Management"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Centralized symbol management\nconst AppSymbols = {\n    events: {\n        INIT: Symbol('app.events.init'),\n        READY: Symbol('app.events.ready')\n    },\n    config: {\n        ENV: Symbol('app.config.env'),\n        MODE: Symbol('app.config.mode')\n    }\n};\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"/**\n * @typedef {Symbol} RenderMode\n * Represents the rendering mode of the component\n * @property {Symbol} SYNC - Synchronous rendering\n * @property {Symbol} ASYNC - Asynchronous rendering\n */\nconst RenderMode = {\n    SYNC: Symbol('RenderMode.SYNC'),\n    ASYNC: Symbol('RenderMode.ASYNC')\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Symbols provide a powerful way to create unique identifiers and implement special behavior in JavaScript objects. They're particularly useful for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Creating non-string property keys"}),"\n",(0,s.jsx)(n.li,{children:"Implementing well-known behaviors"}),"\n",(0,s.jsx)(n.li,{children:"Building extensible systems"}),"\n",(0,s.jsx)(n.li,{children:"Managing private properties"}),"\n",(0,s.jsx)(n.li,{children:"Creating unique identifiers for registration systems"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remember that Symbols are not private in themselves - they're simply unique identifiers that can be accessed using the appropriate methods."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);