"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4048],{1355:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var s=r(4848),t=r(8453);const i={title:"Number of Islands Pattern"},l="Number of Islands Pattern",a={id:"DSA/NumberOfIsland",title:"Number of Islands Pattern",description:"The Number of Islands problem is a classic grid-based problem that involves finding the number of distinct islands in a 2D grid. An island is formed by connected groups of 1s (land), and they are surrounded by 0s (water). The land cells can be connected either vertically or horizontally, but not diagonally.",source:"@site/docs/DSA/NumberOfIsland.mdx",sourceDirName:"DSA",slug:"/DSA/NumberOfIsland",permalink:"/js.enigma/docs/DSA/NumberOfIsland",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/NumberOfIsland.mdx",tags:[],version:"current",frontMatter:{title:"Number of Islands Pattern"},sidebar:"tutorialSidebar",previous:{title:"N-ary Tree",permalink:"/js.enigma/docs/DSA/NryTree"},next:{title:"Parenthesis Pattern",permalink:"/js.enigma/docs/DSA/Parentheses"}},d={},o=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Graph Traversal Pattern",id:"graph-traversal-pattern",level:2},{value:"Algorithm",id:"algorithm",level:3},{value:"DFS Approach",id:"dfs-approach",level:2},{value:"Related Problems",id:"related-problems",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"number-of-islands-pattern",children:"Number of Islands Pattern"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Number of Islands"})," problem is a classic grid-based problem that involves finding the number of distinct islands in a 2D grid. An island is formed by connected groups of ",(0,s.jsx)(n.code,{children:"1"}),"s (land), and they are surrounded by ",(0,s.jsx)(n.code,{children:"0"}),"s (water). The land cells can be connected either vertically or horizontally, but not diagonally."]}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsxs)(n.p,{children:["You are given a 2D grid of ",(0,s.jsx)(n.code,{children:"1"}),"s (land) and ",(0,s.jsx)(n.code,{children:"0"}),"s (water). Your task is to count the number of islands. An island is a group of ",(0,s.jsx)(n.code,{children:"1"}),"s connected vertically or horizontally, and surrounded by water (",(0,s.jsx)(n.code,{children:"0"}),"s)."]}),"\n",(0,s.jsx)(n.h2,{id:"graph-traversal-pattern",children:"Graph Traversal Pattern"}),"\n",(0,s.jsx)(n.p,{children:"This problem uses a graph traversal pattern where you need to explore and mark connected components in a grid. This pattern can be applied to other problems such as finding the size of the largest connected component or counting distinct regions."}),"\n",(0,s.jsx)(n.h3,{id:"algorithm",children:"Algorithm"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Graph Representation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Treat the grid as a graph where each cell is a node."}),"\n",(0,s.jsxs)(n.li,{children:["Cells with value ",(0,s.jsx)(n.code,{children:"1"})," are land and can be treated as connected if they are adjacent (up, down, left, right)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"DFS/BFS for Traversal:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use DFS or BFS to explore the entire component (all connected land cells) starting from a ",(0,s.jsx)(n.code,{children:"1"}),". Once you visit a land cell, mark it as visited (by changing it to ",(0,s.jsx)(n.code,{children:"0"})," or using a ",(0,s.jsx)(n.code,{children:"visited"})," array)."]}),"\n",(0,s.jsx)(n.li,{children:"For every unvisited land cell, initiate a new DFS/BFS traversal, and count it as a new island."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Marking Visited:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Once you visit a cell, mark it as visited to avoid counting the same island multiple times. This can be done by:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Modifying the grid in-place (changing ",(0,s.jsx)(n.code,{children:"1"})," to ",(0,s.jsx)(n.code,{children:"0"})," after visiting)."]}),"\n",(0,s.jsxs)(n.li,{children:["Using a ",(0,s.jsx)(n.code,{children:"visited"})," array to track visited cells."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"dfs-approach",children:"DFS Approach"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Javascript",children:'Example 1:\n\nInput: grid = [\n  ["1","1","1","1","0"],\n  ["1","1","0","1","0"],\n  ["1","1","0","0","0"],\n  ["0","0","0","0","0"]\n]\nOutput: 1\n\nExample 2:\n\nInput: grid = [\n  ["1","1","0","0","0"],\n  ["1","1","0","0","0"],\n  ["0","0","1","0","0"],\n  ["0","0","0","1","1"]\n]\nOutput: 3\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Javascript",children:"function numIslands(grid) {\n    if (!grid || grid.length === 0) return 0;\n\n    let numIslands = 0;\n    const rows = grid.length;\n    const cols = grid[0].length;\n\n    // Helper function to perform DFS\n    const dfs = (grid, r, c) => {\n        // Base case: check bounds and if the current cell is water or already visited\n        if (r < 0 || c < 0 || r >= rows || c >= cols || grid[r][c] === '0') return;\n\n        // Mark the cell as visited by setting it to '0'\n        grid[r][c] = '0';\n\n        // Explore the neighboring cells (up, down, left, right)\n        dfs(grid, r - 1, c); // up\n        dfs(grid, r + 1, c); // down\n        dfs(grid, r, c - 1); // left\n        dfs(grid, r, c + 1); // right\n    };\n\n    // Iterate through the entire grid\n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n            if (grid[r][c] === '1') {\n                // Found an island, increment the count\n                numIslands++;\n\n                // Use DFS to mark all connected land as visited\n                dfs(grid, r, c);\n            }\n        }\n    }\n\n    return numIslands;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-problems",children:"Related Problems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-islands/",children:"Number of Islands"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-distinct-islands/description/",children:"Number of Distinct Islands"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/number-of-distinct-islands-ii/",children:"Number of Distinct Islands II"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/count-sub-islands/",children:"Count Sub Islands"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/max-area-of-island/",children:"Max Area of Island"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);