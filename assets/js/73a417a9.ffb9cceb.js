"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[70160],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},85821:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(74848),s=t(28453);const r={title:"Twitter System Design",description:"Complete system design for Twitter social media platform",author:"System Design Template",date:"2025-10-05",tags:["system-design","social-media","twitter","real-time","feed"]},a="Twitter System Design",l={id:"System Design Problems/Twitter System Design",title:"Twitter System Design",description:"Complete system design for Twitter social media platform",source:"@site/docs/System Design Problems/Twitter System Design.mdx",sourceDirName:"System Design Problems",slug:"/System Design Problems/Twitter System Design",permalink:"/docs/System Design Problems/Twitter System Design",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/System Design Problems/Twitter System Design.mdx",tags:[{inline:!0,label:"system-design",permalink:"/docs/tags/system-design"},{inline:!0,label:"social-media",permalink:"/docs/tags/social-media"},{inline:!0,label:"twitter",permalink:"/docs/tags/twitter"},{inline:!0,label:"real-time",permalink:"/docs/tags/real-time"},{inline:!0,label:"feed",permalink:"/docs/tags/feed"}],version:"current",frontMatter:{title:"Twitter System Design",description:"Complete system design for Twitter social media platform",author:"System Design Template",date:"2025-10-05",tags:["system-design","social-media","twitter","real-time","feed"]},sidebar:"tutorialSidebar",previous:{title:"Spotify System Design",permalink:"/docs/System Design Problems/Spotify System Design"},next:{title:"Uber System Design",permalink:"/docs/System Design Problems/Uber System Design"}},o={},c=[{value:"1. Requirements (~5 minutes)",id:"1-requirements-5-minutes",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-functional Requirements",id:"non-functional-requirements",level:3},{value:"Capacity Estimation",id:"capacity-estimation",level:3},{value:"2. Core Entities (~2 minutes)",id:"2-core-entities-2-minutes",level:2},{value:"User",id:"user",level:3},{value:"Tweet",id:"tweet",level:3},{value:"Follow",id:"follow",level:3},{value:"Timeline",id:"timeline",level:3},{value:"Like",id:"like",level:3},{value:"Retweet",id:"retweet",level:3},{value:"Notification",id:"notification",level:3},{value:"3. API Interface (~5 minutes)",id:"3-api-interface-5-minutes",level:2},{value:"Protocol Choice",id:"protocol-choice",level:3},{value:"API Endpoints",id:"api-endpoints",level:3},{value:"Authentication",id:"authentication",level:4},{value:"Tweet Operations",id:"tweet-operations",level:4},{value:"Timeline (Home Feed)",id:"timeline-home-feed",level:4},{value:"Social Interactions",id:"social-interactions",level:4},{value:"Follow Operations",id:"follow-operations",level:4},{value:"Search &amp; Trends",id:"search--trends",level:4},{value:"Notifications",id:"notifications",level:4},{value:"4. Data Flow (~5 minutes)",id:"4-data-flow-5-minutes",level:2},{value:"Tweet Post Flow",id:"tweet-post-flow",level:3},{value:"Timeline Generation Flow",id:"timeline-generation-flow",level:3},{value:"5. High Level Design (~10-15 minutes)",id:"5-high-level-design-10-15-minutes",level:2},{value:"Architecture Components",id:"architecture-components",level:3},{value:"6. Architecture Diagram",id:"6-architecture-diagram",level:2},{value:"7. Data Models",id:"7-data-models",level:2},{value:"PostgreSQL - User &amp; Follow Graph",id:"postgresql---user--follow-graph",level:3},{value:"Cassandra - Tweets &amp; Timelines",id:"cassandra---tweets--timelines",level:3},{value:"Redis Cache Structures",id:"redis-cache-structures",level:3},{value:"Elasticsearch - Search Index",id:"elasticsearch---search-index",level:3},{value:"8. Deep Dives (~10 minutes)",id:"8-deep-dives-10-minutes",level:2},{value:"8.1 Timeline Generation (Fan-out Strategies)",id:"81-timeline-generation-fan-out-strategies",level:3},{value:"Fan-out on Write (Push Model)",id:"fan-out-on-write-push-model",level:4},{value:"Fan-out on Read (Pull Model)",id:"fan-out-on-read-pull-model",level:4},{value:"Hybrid Approach (Twitter&#39;s Solution)",id:"hybrid-approach-twitters-solution",level:4},{value:"8.2 Caching Strategy",id:"82-caching-strategy",level:3},{value:"Multi-Level Cache",id:"multi-level-cache",level:4},{value:"Cache Invalidation",id:"cache-invalidation",level:4},{value:"8.3 Database Scaling",id:"83-database-scaling",level:3},{value:"PostgreSQL (User Service)",id:"postgresql-user-service",level:4},{value:"Cassandra (Tweet Service)",id:"cassandra-tweet-service",level:4},{value:"8.4 Handling Viral Tweets",id:"84-handling-viral-tweets",level:3},{value:"Counter Aggregation",id:"counter-aggregation",level:4},{value:"Rate Limiting",id:"rate-limiting",level:4},{value:"8.5 Search &amp; Trending",id:"85-search--trending",level:3},{value:"Elasticsearch Integration",id:"elasticsearch-integration",level:4},{value:"Trending Topics Calculation",id:"trending-topics-calculation",level:4},{value:"8.6 Real-time Notifications",id:"86-real-time-notifications",level:3},{value:"WebSocket Connection",id:"websocket-connection",level:4},{value:"Notification Types",id:"notification-types",level:4},{value:"8.7 Media Handling",id:"87-media-handling",level:3},{value:"Upload Flow",id:"upload-flow",level:4},{value:"Video Processing",id:"video-processing",level:4},{value:"8.8 Security &amp; Privacy",id:"88-security--privacy",level:3},{value:"Authentication",id:"authentication-1",level:4},{value:"Content Moderation",id:"content-moderation",level:4},{value:"Rate Limiting by Tier",id:"rate-limiting-by-tier",level:4},{value:"8.9 Analytics &amp; Monitoring",id:"89-analytics--monitoring",level:3},{value:"Metrics Collection",id:"metrics-collection",level:4},{value:"Health Checks",id:"health-checks",level:4},{value:"Distributed Tracing",id:"distributed-tracing",level:4},{value:"8.10 Disaster Recovery &amp; High Availability",id:"810-disaster-recovery--high-availability",level:3},{value:"Multi-Region Deployment",id:"multi-region-deployment",level:4},{value:"Database Backup Strategy",id:"database-backup-strategy",level:4},{value:"Circuit Breaker for External Services",id:"circuit-breaker-for-external-services",level:4},{value:"Summary",id:"summary",level:2},{value:"Key Design Decisions",id:"key-design-decisions",level:3},{value:"Scalability Achieved",id:"scalability-achieved",level:3},{value:"Trade-offs &amp; Considerations",id:"trade-offs--considerations",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Additional Considerations",id:"additional-considerations",level:2},{value:"Data Privacy &amp; GDPR Compliance",id:"data-privacy--gdpr-compliance",level:3},{value:"API Versioning",id:"api-versioning",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"twitter-system-design",children:"Twitter System Design"})}),"\n",(0,i.jsx)(n.h2,{id:"1-requirements-5-minutes",children:"1. Requirements (~5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,i.jsx)(n.strong,{children:"post tweets"})," (text, images, videos - max 280 characters)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,i.jsx)(n.strong,{children:"follow/unfollow"})," other users"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,i.jsx)(n.strong,{children:"view timeline"})," (home feed with tweets from followed users)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,i.jsx)(n.strong,{children:"like, retweet, and reply"})," to tweets"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,i.jsx)(n.strong,{children:"search tweets"})," and trending topics"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Users should be able to ",(0,i.jsx)(n.strong,{children:"receive real-time notifications"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-functional Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 The system should prioritize ",(0,i.jsx)(n.strong,{children:"availability"})," over consistency (eventual consistency is acceptable)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 The system should scale to support ",(0,i.jsx)(n.strong,{children:"500M+ users"}),", ",(0,i.jsx)(n.strong,{children:"200M DAU"})]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Timeline should load in ",(0,i.jsx)(n.strong,{children:"< 500ms"})," (P95)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Tweet posting should be ",(0,i.jsx)(n.strong,{children:"fast"})," (< 200ms acknowledgment)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 The system should be ",(0,i.jsx)(n.strong,{children:"highly available"})," (99.99% uptime)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 The system should handle ",(0,i.jsx)(n.strong,{children:"viral tweets"})," (millions of likes/retweets)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 The system should support ",(0,i.jsx)(n.strong,{children:"real-time notifications"})," (push/pull)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 The system should handle ",(0,i.jsx)(n.strong,{children:"read-heavy workload"})," (read",":write"," ratio = 100:1)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"capacity-estimation",children:"Capacity Estimation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Assumptions:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Total Users: 500M"}),"\n",(0,i.jsx)(n.li,{children:"Daily Active Users (DAU): 200M"}),"\n",(0,i.jsx)(n.li,{children:"Average tweets per user per day: 2"}),"\n",(0,i.jsx)(n.li,{children:"Average timeline views per user: 20"}),"\n",(0,i.jsx)(n.li,{children:"Average tweet size: 300 bytes (text + metadata)"}),"\n",(0,i.jsx)(n.li,{children:"Average followers per user: 200"}),"\n",(0,i.jsx)(n.li,{children:"Media tweets: 20% (images/videos)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Daily Metrics:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Tweets per day = 200M \xd7 2 = 400M tweets/day\nTweets per second = 400M / 86400 = ~4600 TPS\n\nTimeline reads per day = 200M \xd7 20 = 4B reads/day\nTimeline QPS = 4B / 86400 = ~46K QPS\n\nRead:Write Ratio = 4B / 400M = 10:1 (actually higher during viral events)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Storage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Text tweets = 400M \xd7 300 bytes = 120 GB/day\nWith metadata & index = 120 GB \xd7 2 = 240 GB/day\nAnnual storage = 240 GB \xd7 365 = ~88 TB/year\n\nMedia storage (20% of tweets):\n80M media tweets/day \xd7 2 MB avg = 160 TB/day\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bandwidth:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Upload: 4600 TPS \xd7 300 bytes = 1.4 MB/s (text)\nUpload: 920 media/sec \xd7 2 MB = 1.8 GB/s (media)\n\nDownload: 46K QPS \xd7 10 tweets \xd7 300 bytes = 138 MB/s\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-core-entities-2-minutes",children:"2. Core Entities (~2 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"user",children:"User"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userId"}),", ",(0,i.jsx)(n.code,{children:"username"}),", ",(0,i.jsx)(n.code,{children:"email"}),", ",(0,i.jsx)(n.code,{children:"displayName"}),", ",(0,i.jsx)(n.code,{children:"bio"}),", ",(0,i.jsx)(n.code,{children:"profilePicUrl"}),", ",(0,i.jsx)(n.code,{children:"createdAt"}),", ",(0,i.jsx)(n.code,{children:"verified"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tweet",children:"Tweet"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tweetId"}),", ",(0,i.jsx)(n.code,{children:"userId"}),", ",(0,i.jsx)(n.code,{children:"content"}),", ",(0,i.jsx)(n.code,{children:"mediaUrls[]"}),", ",(0,i.jsx)(n.code,{children:"createdAt"}),", ",(0,i.jsx)(n.code,{children:"likeCount"}),", ",(0,i.jsx)(n.code,{children:"retweetCount"}),", ",(0,i.jsx)(n.code,{children:"replyCount"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"follow",children:"Follow"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"followerId"}),", ",(0,i.jsx)(n.code,{children:"followeeId"}),", ",(0,i.jsx)(n.code,{children:"createdAt"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"timeline",children:"Timeline"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userId"}),", ",(0,i.jsx)(n.code,{children:"tweetId"}),", ",(0,i.jsx)(n.code,{children:"timestamp"}),", ",(0,i.jsx)(n.code,{children:"score"})," (for ranking)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"like",children:"Like"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userId"}),", ",(0,i.jsx)(n.code,{children:"tweetId"}),", ",(0,i.jsx)(n.code,{children:"createdAt"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"retweet",children:"Retweet"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userId"}),", ",(0,i.jsx)(n.code,{children:"originalTweetId"}),", ",(0,i.jsx)(n.code,{children:"createdAt"}),", ",(0,i.jsx)(n.code,{children:"comment"})," (quote tweet)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"notification",children:"Notification"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"notificationId"}),", ",(0,i.jsx)(n.code,{children:"userId"}),", ",(0,i.jsx)(n.code,{children:"type"}),", ",(0,i.jsx)(n.code,{children:"actorId"}),", ",(0,i.jsx)(n.code,{children:"tweetId"}),", ",(0,i.jsx)(n.code,{children:"createdAt"}),", ",(0,i.jsx)(n.code,{children:"read"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-api-interface-5-minutes",children:"3. API Interface (~5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"protocol-choice",children:"Protocol Choice"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"REST"})," for CRUD operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSocket"})," for real-time notifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GraphQL"})," (optional) for flexible data fetching"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"api-endpoints",children:"API Endpoints"}),"\n",(0,i.jsx)(n.h4,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/auth/login\nContent-Type: application/json\n\n{\n  "username": "john_doe",\n  "password": "securepass"\n}\n\nResponse: {\n  "authToken": "jwt_token_here",\n  "userId": "user-123"\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/auth/register\nContent-Type: application/json\n\n{\n  "username": "john_doe",\n  "email": "john@example.com",\n  "password": "securepass"\n}\n\nResponse: { "userId": "user-123" }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"tweet-operations",children:"Tweet Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/tweets\nAuthorization: Bearer <token>\nContent-Type: application/json\n\n{\n  "content": "Hello World!",\n  "mediaUrls": ["https://cdn.twitter.com/img123.jpg"]\n}\n\nResponse: {\n  "tweetId": "tweet-123",\n  "createdAt": "2025-10-05T10:00:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/tweets/{tweetId}\n\nResponse: {\n  "tweet": {\n    "tweetId": "tweet-123",\n    "userId": "user-456",\n    "username": "john_doe",\n    "content": "Hello World!",\n    "likeCount": 42,\n    "retweetCount": 10,\n    "createdAt": "2025-10-05T10:00:00Z"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'DELETE /v1/tweets/{tweetId}\nAuthorization: Bearer <token>\n\nResponse: { "success": true }\n'})}),"\n",(0,i.jsx)(n.h4,{id:"timeline-home-feed",children:"Timeline (Home Feed)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/timeline/home?cursor=tweet-100&limit=20\nAuthorization: Bearer <token>\n\nResponse: {\n  "tweets": [Tweet],\n  "nextCursor": "tweet-80"\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/timeline/user/{userId}?cursor=tweet-100&limit=20\n\nResponse: {\n  "tweets": [Tweet],\n  "nextCursor": "tweet-80"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"social-interactions",children:"Social Interactions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/tweets/{tweetId}/like\nAuthorization: Bearer <token>\n\nResponse: { "success": true, "newLikeCount": 43 }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'DELETE /v1/tweets/{tweetId}/like\nAuthorization: Bearer <token>\n\nResponse: { "success": true, "newLikeCount": 42 }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/tweets/{tweetId}/retweet\nAuthorization: Bearer <token>\nContent-Type: application/json\n\n{\n  "comment": "Great insight!" // optional for quote tweet\n}\n\nResponse: {\n  "retweetId": "retweet-789",\n  "success": true\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/tweets/{tweetId}/reply\nAuthorization: Bearer <token>\nContent-Type: application/json\n\n{\n  "content": "I agree!"\n}\n\nResponse: {\n  "replyTweetId": "tweet-456"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"follow-operations",children:"Follow Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'POST /v1/users/{userId}/follow\nAuthorization: Bearer <token>\n\nResponse: { "success": true }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'DELETE /v1/users/{userId}/follow\nAuthorization: Bearer <token>\n\nResponse: { "success": true }\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/users/{userId}/followers?cursor=user-100&limit=50\n\nResponse: {\n  "users": [User],\n  "nextCursor": "user-50"\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/users/{userId}/following?cursor=user-100&limit=50\n\nResponse: {\n  "users": [User],\n  "nextCursor": "user-50"\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"search--trends",children:"Search & Trends"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/search/tweets?query=system+design&limit=20\n\nResponse: {\n  "tweets": [Tweet],\n  "count": 1523\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/trends?location=US\n\nResponse: {\n  "trends": [\n    { "topic": "#WorldCup", "tweetCount": 2500000 },\n    { "topic": "AI", "tweetCount": 1200000 }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"notifications",children:"Notifications"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'GET /v1/notifications?cursor=notif-100&limit=20\nAuthorization: Bearer <token>\n\nResponse: {\n  "notifications": [Notification],\n  "nextCursor": "notif-80",\n  "unreadCount": 5\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",children:'PUT /v1/notifications/{notificationId}/read\nAuthorization: Bearer <token>\n\nResponse: { "success": true }\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-data-flow-5-minutes",children:"4. Data Flow (~5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"tweet-post-flow",children:"Tweet Post Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Posts Tweet"}),": Client sends POST request with content"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validate & Store"}),": App server validates (length, content policy) and stores in database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Generate Tweet ID"}),": Snowflake ID generator creates unique ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fan-out Process"}),": Background worker pushes tweet to followers' timelines"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Update"}),": Update Redis cache for user's profile timeline"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Index for Search"}),": Push to Elasticsearch for searchability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notify Mentions"}),": If tweet mentions users, create notifications"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"timeline-generation-flow",children:"Timeline Generation Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Requests Timeline"}),": Client sends GET request"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Cache"}),": Look up pre-computed timeline in Redis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"If Cache Hit"}),": Return cached tweets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"If Cache Miss"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fetch following list"}),"\n",(0,i.jsx)(n.li,{children:"Fetch recent tweets from each followed user"}),"\n",(0,i.jsx)(n.li,{children:"Merge and rank tweets"}),"\n",(0,i.jsx)(n.li,{children:"Cache result"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fetch Metadata"}),": Hydrate tweets with like/retweet counts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Return to Client"}),": Send paginated response"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-high-level-design-10-15-minutes",children:"5. High Level Design (~10-15 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"architecture-components",children:"Architecture Components"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Layer:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Web App (React)"}),"\n",(0,i.jsx)(n.li,{children:"Mobile Apps (iOS/Android)"}),"\n",(0,i.jsx)(n.li,{children:"Real-time WebSocket connection"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"API Layer:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"API Gateway - routing, rate limiting, authentication"}),"\n",(0,i.jsx)(n.li,{children:"Load Balancer - distributes traffic across app servers"}),"\n",(0,i.jsx)(n.li,{children:"Application Servers - business logic (Spring Boot microservices)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Service Layer (Microservices):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tweet Service"})," - CRUD operations for tweets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Timeline Service"})," - generates and serves timelines"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Service"})," - user profiles, follow/unfollow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notification Service"})," - push notifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Search Service"})," - full-text search"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Media Service"})," - handles image/video uploads"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Layer:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PostgreSQL"})," - users, follows (relational data)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cassandra"})," - tweets, timelines (high write throughput)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redis"})," - cache (timelines, user sessions, trending topics)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Elasticsearch"})," - search index"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S3/CDN"})," - media storage"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Messaging & Streaming:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kafka"})," - event streaming (tweet events, notifications)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RabbitMQ/SQS"})," - task queues (fan-out workers)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Background Workers:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fan-out Service"})," - pushes tweets to followers' timelines"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trend Service"})," - computes trending topics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics Service"})," - processes engagement metrics"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-architecture-diagram",children:"6. Architecture Diagram"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Layer"\n        Web[Web Browser]\n        Mobile[Mobile App]\n        WS[WebSocket Connection]\n    end\n\n    subgraph "CDN Layer"\n        CDN[CDN<br/>Static Assets & Media]\n    end\n\n    subgraph "API Gateway Layer"\n        Gateway[API Gateway<br/>Rate Limiting, Auth]\n        LB[Load Balancer]\n    end\n\n    subgraph "Application Services"\n        TweetSvc[Tweet Service]\n        TimelineSvc[Timeline Service]\n        UserSvc[User Service]\n        NotifSvc[Notification Service]\n        SearchSvc[Search Service]\n        MediaSvc[Media Service]\n    end\n\n    subgraph "Cache Layer"\n        Redis1[(Redis Cluster<br/>Timelines, Sessions)]\n        Redis2[(Redis<br/>Trending Topics)]\n    end\n\n    subgraph "Database Layer"\n        Postgres[(PostgreSQL<br/>Users, Follows)]\n        Cassandra[(Cassandra<br/>Tweets, Timelines)]\n        Elasticsearch[(Elasticsearch<br/>Search Index)]\n    end\n\n    subgraph "Storage Layer"\n        S3[S3<br/>Media Files]\n    end\n\n    subgraph "Message Queue"\n        Kafka[Kafka<br/>Tweet Events]\n        Queue[RabbitMQ<br/>Fan-out Queue]\n    end\n\n    subgraph "Background Workers"\n        Fanout[Fan-out Workers<br/>Timeline Push]\n        Trends[Trend Calculator]\n        Analytics[Analytics Processor]\n    end\n\n    subgraph "Monitoring"\n        Metrics[Prometheus/Grafana]\n        Logs[ELK Stack]\n    end\n\n    %% Client connections\n    Web --\x3e|API Requests| Gateway\n    Mobile --\x3e|API Requests| Gateway\n    WS --\x3e|Real-time| NotifSvc\n    Web --\x3e|Media| CDN\n\n    %% API Gateway flow\n    Gateway --\x3e LB\n    LB --\x3e TweetSvc\n    LB --\x3e TimelineSvc\n    LB --\x3e UserSvc\n    LB --\x3e SearchSvc\n\n    %% Service to Cache\n    TweetSvc --\x3e Redis1\n    TimelineSvc --\x3e Redis1\n    SearchSvc --\x3e Redis2\n\n    %% Service to Database\n    TweetSvc --\x3e|Write| Cassandra\n    UserSvc --\x3e|Read/Write| Postgres\n    TimelineSvc --\x3e|Read| Cassandra\n    SearchSvc --\x3e|Query| Elasticsearch\n\n    %% Media handling\n    MediaSvc --\x3e S3\n    S3 --\x3e CDN\n\n    %% Event streaming\n    TweetSvc --\x3e|Publish Event| Kafka\n    Kafka --\x3e Fanout\n    Kafka --\x3e Trends\n    Kafka --\x3e Analytics\n\n    %% Fan-out process\n    Fanout --\x3e Queue\n    Queue --\x3e Cassandra\n    Fanout --\x3e NotifSvc\n\n    %% Search indexing\n    TweetSvc --\x3e Elasticsearch\n\n    %% Monitoring\n    TweetSvc -.Metrics.-> Metrics\n    TimelineSvc -.Logs.-> Logs\n\n    style Web fill:#e1f5ff\n    style Mobile fill:#e1f5ff\n    style Kafka fill:#ffe1f5\n    style Fanout fill:#ffe1f5\n    style CDN fill:#fff4e1'}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-data-models",children:"7. Data Models"}),"\n",(0,i.jsx)(n.h3,{id:"postgresql---user--follow-graph",children:"PostgreSQL - User & Follow Graph"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"users:\n  id (PK),\n  username (UNIQUE),\n  email (UNIQUE),\n  password_hash,\n  display_name,\n  bio,\n  profile_pic_url,\n  verified BOOLEAN,\n  follower_count,\n  following_count,\n  created_at,\n  updated_at\n\nfollows:\n  follower_id (PK, FK -> users.id),\n  followee_id (PK, FK -> users.id),\n  created_at,\n  PRIMARY KEY (follower_id, followee_id)\n  INDEX idx_followee (followee_id)\n  INDEX idx_follower (follower_id)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cassandra---tweets--timelines",children:"Cassandra - Tweets & Timelines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"tweets:\n  tweet_id (PK) UUID,\n  user_id UUID,\n  content TEXT,\n  media_urls LIST<TEXT>,\n  like_count COUNTER,\n  retweet_count COUNTER,\n  reply_count COUNTER,\n  created_at TIMESTAMP,\n  PRIMARY KEY (tweet_id)\n\nuser_timeline:\n  user_id UUID (Partition Key),\n  tweet_id UUID (Clustering Key),\n  created_at TIMESTAMP (Clustering Key),\n  PRIMARY KEY ((user_id), created_at, tweet_id)\n  WITH CLUSTERING ORDER BY (created_at DESC, tweet_id DESC)\n\nhome_timeline:\n  user_id UUID (Partition Key),\n  tweet_id UUID (Clustering Key),\n  tweet_author_id UUID,\n  created_at TIMESTAMP (Clustering Key),\n  score DOUBLE, // for ranking\n  PRIMARY KEY ((user_id), created_at, tweet_id)\n  WITH CLUSTERING ORDER BY (created_at DESC)\n\nlikes:\n  user_id UUID (Partition Key),\n  tweet_id UUID (Clustering Key),\n  created_at TIMESTAMP,\n  PRIMARY KEY ((user_id), tweet_id)\n\nretweets:\n  user_id UUID (Partition Key),\n  original_tweet_id UUID (Clustering Key),\n  retweet_id UUID,\n  comment TEXT,\n  created_at TIMESTAMP,\n  PRIMARY KEY ((user_id), original_tweet_id)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"redis-cache-structures",children:"Redis Cache Structures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# User timeline cache (List)\nuser:timeline:{userId} -> [tweetId1, tweetId2, ...]\nTTL: 15 minutes\n\n# Home timeline cache (Sorted Set)\nhome:timeline:{userId} -> {tweetId: score}\nTTL: 5 minutes\n\n# Tweet metadata cache (Hash)\ntweet:{tweetId} -> { content, likeCount, retweetCount, ... }\nTTL: 1 hour\n\n# Trending topics (Sorted Set)\ntrending:global -> {topic: score}\nTTL: 5 minutes\n\n# User session\nsession:{token} -> { userId, username, ... }\nTTL: 24 hours\n\n# Following list cache\nfollowing:{userId} -> [userId1, userId2, ...]\nTTL: 1 hour\n"})}),"\n",(0,i.jsx)(n.h3,{id:"elasticsearch---search-index",children:"Elasticsearch - Search Index"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "mappings": {\n    "properties": {\n      "tweet_id": { "type": "keyword" },\n      "user_id": { "type": "keyword" },\n      "username": { "type": "keyword" },\n      "content": {\n        "type": "text",\n        "analyzer": "standard",\n        "fields": {\n          "keyword": { "type": "keyword" }\n        }\n      },\n      "hashtags": { "type": "keyword" },\n      "mentions": { "type": "keyword" },\n      "created_at": { "type": "date" },\n      "like_count": { "type": "integer" },\n      "retweet_count": { "type": "integer" },\n      "language": { "type": "keyword" }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-deep-dives-10-minutes",children:"8. Deep Dives (~10 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"81-timeline-generation-fan-out-strategies",children:"8.1 Timeline Generation (Fan-out Strategies)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": When a user posts a tweet, how do we update followers' timelines efficiently?"]}),"\n",(0,i.jsx)(n.h4,{id:"fan-out-on-write-push-model",children:"Fan-out on Write (Push Model)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When user posts tweet, immediately push to all followers' timelines"}),"\n",(0,i.jsx)(n.li,{children:"Pre-compute timelines and store in Redis/Cassandra"}),"\n",(0,i.jsx)(n.li,{children:"Timeline reads are fast (just fetch from cache)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fast timeline reads (pre-computed)"}),"\n",(0,i.jsx)(n.li,{children:"Simple timeline service"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow writes for users with many followers (celebrities)"}),"\n",(0,i.jsx)(n.li,{children:"Wasted work if followers don't view timeline"}),"\n",(0,i.jsx)(n.li,{children:"High write amplification"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class FanoutService {\n\n    @Async\n    public void fanoutTweet(Tweet tweet) {\n        String userId = tweet.getUserId();\n\n        // Get all followers\n        List<String> followers = followRepository.getFollowers(userId);\n\n        // Push to message queue in batches\n        Lists.partition(followers, 1000).forEach(batch -> {\n            FanoutTask task = FanoutTask.builder()\n                .tweetId(tweet.getTweetId())\n                .followerIds(batch)\n                .build();\n\n            kafkaTemplate.send("fanout-tasks", task);\n        });\n    }\n}\n\n@KafkaListener(topics = "fanout-tasks")\npublic void processFanout(FanoutTask task) {\n    // Write to each follower\'s home timeline\n    task.getFollowerIds().forEach(followerId -> {\n        timelineRepository.addToHomeTimeline(\n            followerId,\n            task.getTweetId()\n        );\n\n        // Update Redis cache\n        redisTemplate.opsForZSet().add(\n            "home:timeline:" + followerId,\n            task.getTweetId(),\n            System.currentTimeMillis()\n        );\n    });\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"fan-out-on-read-pull-model",children:"Fan-out on Read (Pull Model)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Don't pre-compute timelines"}),"\n",(0,i.jsx)(n.li,{children:"When user requests timeline, fetch tweets from all followed users"}),"\n",(0,i.jsx)(n.li,{children:"Merge and sort on-the-fly"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fast writes"}),"\n",(0,i.jsx)(n.li,{children:"No wasted work"}),"\n",(0,i.jsx)(n.li,{children:"Always fresh data"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow reads (must query many users)"}),"\n",(0,i.jsx)(n.li,{children:"Complex merge logic"}),"\n",(0,i.jsx)(n.li,{children:"High read load"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class TimelineService {\n\n    public List<Tweet> getHomeTimeline(String userId, int limit) {\n        // Get users this user follows\n        List<String> following = followRepository.getFollowing(userId);\n\n        // Fetch recent tweets from each followed user (parallel)\n        List<CompletableFuture<List<Tweet>>> futures = following.stream()\n            .map(followeeId -> CompletableFuture.supplyAsync(() ->\n                tweetRepository.getUserRecentTweets(followeeId, 10)\n            ))\n            .collect(Collectors.toList());\n\n        // Wait for all and merge\n        List<Tweet> allTweets = futures.stream()\n            .map(CompletableFuture::join)\n            .flatMap(List::stream)\n            .sorted(Comparator.comparing(Tweet::getCreatedAt).reversed())\n            .limit(limit)\n            .collect(Collectors.toList());\n\n        return allTweets;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"hybrid-approach-twitters-solution",children:"Hybrid Approach (Twitter's Solution)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Strategy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regular users"})," (< 10K followers): Fan-out on write"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Celebrities"})," (> 10K followers): Fan-out on read"]}),"\n",(0,i.jsx)(n.li,{children:"Mix both results when serving timeline"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class HybridTimelineService {\n\n    public List<Tweet> getHomeTimeline(String userId, int limit) {\n        // Part 1: Get pre-computed timeline (from regular users)\n        List<Tweet> preComputedTweets = cassandraTemplate\n            .select("SELECT * FROM home_timeline WHERE user_id = ? LIMIT ?",\n                userId, limit);\n\n        // Part 2: Get celebrity tweets (fetch on-demand)\n        List<String> celebritiesFollowed = followRepository\n            .getCelebritiesFollowed(userId);\n\n        List<Tweet> celebrityTweets = celebritiesFollowed.stream()\n            .flatMap(celeb ->\n                tweetRepository.getUserRecentTweets(celeb, 10).stream()\n            )\n            .collect(Collectors.toList());\n\n        // Merge and sort\n        List<Tweet> merged = Stream.concat(\n            preComputedTweets.stream(),\n            celebrityTweets.stream()\n        )\n        .sorted(Comparator.comparing(Tweet::getCreatedAt).reversed())\n        .distinct()\n        .limit(limit)\n        .collect(Collectors.toList());\n\n        return merged;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"82-caching-strategy",children:"8.2 Caching Strategy"}),"\n",(0,i.jsx)(n.h4,{id:"multi-level-cache",children:"Multi-Level Cache"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"L1 - Application Cache (In-Memory):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class TweetService {\n    private final LoadingCache<String, Tweet> tweetCache = Caffeine.newBuilder()\n        .maximumSize(10_000)\n        .expireAfterWrite(5, TimeUnit.MINUTES)\n        .build(tweetId -> tweetRepository.findById(tweetId));\n\n    public Tweet getTweet(String tweetId) {\n        return tweetCache.get(tweetId);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"L2 - Redis Cache (Distributed):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Cacheable(value = "tweets", key = "#tweetId")\npublic Tweet getTweetById(String tweetId) {\n    return cassandraTemplate.selectOne(\n        "SELECT * FROM tweets WHERE tweet_id = ?",\n        tweetId\n    );\n}\n\n@Cacheable(value = "home-timeline", key = "#userId")\npublic List<Tweet> getHomeTimeline(String userId) {\n    return timelineService.generateTimeline(userId);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cache Warming for Trending Tweets:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Scheduled(fixedRate = 60000) // Every minute\npublic void warmTrendingCache() {\n    List<String> trendingTweetIds = trendService.getTrendingTweetIds();\n\n    trendingTweetIds.forEach(tweetId -> {\n        Tweet tweet = tweetRepository.findById(tweetId);\n        redisTemplate.opsForValue().set(\n            "tweet:" + tweetId,\n            tweet,\n            1,\n            TimeUnit.HOURS\n        );\n    });\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"cache-invalidation",children:"Cache Invalidation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class TweetService {\n\n    @CacheEvict(value = "tweets", key = "#tweetId")\n    public void deleteTweet(String tweetId) {\n        tweetRepository.delete(tweetId);\n    }\n\n    // When tweet is liked, update counter cache\n    public void likeTweet(String userId, String tweetId) {\n        // Increment in database\n        cassandraTemplate.execute(\n            "UPDATE tweets SET like_count = like_count + 1 WHERE tweet_id = ?",\n            tweetId\n        );\n\n        // Invalidate cache to fetch fresh data\n        cacheManager.getCache("tweets").evict(tweetId);\n\n        // Or update cache directly\n        redisTemplate.opsForHash().increment(\n            "tweet:" + tweetId,\n            "likeCount",\n            1\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"83-database-scaling",children:"8.3 Database Scaling"}),"\n",(0,i.jsx)(n.h4,{id:"postgresql-user-service",children:"PostgreSQL (User Service)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Read Replicas:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class DataSourceConfig {\n\n    @Bean\n    public DataSource routingDataSource() {\n        Map<Object, Object> targetDataSources = new HashMap<>();\n        targetDataSources.put("master", masterDataSource());\n        targetDataSources.put("replica1", replicaDataSource1());\n        targetDataSources.put("replica2", replicaDataSource2());\n\n        ReplicationRoutingDataSource routingDataSource =\n            new ReplicationRoutingDataSource();\n        routingDataSource.setTargetDataSources(targetDataSources);\n        routingDataSource.setDefaultTargetDataSource(masterDataSource());\n\n        return routingDataSource;\n    }\n}\n\n@Transactional(readOnly = true)\npublic User getUserById(String userId) {\n    // Automatically routes to read replica\n    return userRepository.findById(userId);\n}\n\n@Transactional\npublic void createUser(User user) {\n    // Routes to master\n    userRepository.save(user);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Indexing:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Improve follow queries\nCREATE INDEX idx_follows_follower ON follows(follower_id);\nCREATE INDEX idx_follows_followee ON follows(followee_id);\n\n-- Username search\nCREATE INDEX idx_users_username ON users(username);\nCREATE INDEX idx_users_email ON users(email);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cassandra-tweet-service",children:"Cassandra (Tweet Service)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Partition Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- User timeline: Fast queries for all tweets by a user\nCREATE TABLE user_timeline (\n    user_id UUID,\n    created_at TIMESTAMP,\n    tweet_id UUID,\n    PRIMARY KEY ((user_id), created_at, tweet_id)\n) WITH CLUSTERING ORDER BY (created_at DESC);\n\n-- Home timeline: Fast queries for user's feed\nCREATE TABLE home_timeline (\n    user_id UUID,\n    created_at TIMESTAMP,\n    tweet_id UUID,\n    PRIMARY KEY ((user_id), created_at)\n) WITH CLUSTERING ORDER BY (created_at DESC);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Write Optimization:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class TweetRepository {\n\n    public void saveTweet(Tweet tweet) {\n        // Batch writes for better performance\n        BatchStatement batch = new BatchStatement();\n\n        // Insert into tweets table\n        batch.add(insertTweetStatement(tweet));\n\n        // Insert into user_timeline table\n        batch.add(insertUserTimelineStatement(tweet));\n\n        // Execute batch\n        cassandraTemplate.execute(batch);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"84-handling-viral-tweets",children:"8.4 Handling Viral Tweets"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": A celebrity posts a tweet and gets 1M likes in 10 minutes"]}),"\n",(0,i.jsx)(n.h4,{id:"counter-aggregation",children:"Counter Aggregation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge"}),": Cassandra counters become hotspot"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Counter Sharding"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class CounterService {\n    private static final int NUM_SHARDS = 10;\n\n    public void incrementLikeCount(String tweetId) {\n        int shard = ThreadLocalRandom.current().nextInt(NUM_SHARDS);\n        String key = String.format("likes:%s:shard:%d", tweetId, shard);\n\n        redisTemplate.opsForValue().increment(key);\n\n        // Async aggregate every 10 seconds\n        asyncAggregateShards(tweetId);\n    }\n\n    public long getLikeCount(String tweetId) {\n        long total = 0;\n        for (int i = 0; i < NUM_SHARDS; i++) {\n            String key = String.format("likes:%s:shard:%d", tweetId, i);\n            Long count = redisTemplate.opsForValue().get(key);\n            total += (count != null) ? count : 0;\n        }\n        return total;\n    }\n\n    @Async\n    private void asyncAggregateShards(String tweetId) {\n        long totalLikes = getLikeCount(tweetId);\n\n        // Update Cassandra periodically (not on every like)\n        cassandraTemplate.execute(\n            "UPDATE tweets SET like_count = ? WHERE tweet_id = ?",\n            totalLikes, tweetId\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class RateLimiterService {\n\n    @RateLimiter(\n        name = "tweet-post",\n        fallbackMethod = "rateLimitExceeded"\n    )\n    public Tweet postTweet(String userId, String content) {\n        return tweetService.createTweet(userId, content);\n    }\n\n    public Tweet rateLimitExceeded(String userId, String content,\n                                     RequestNotPermitted e) {\n        throw new RateLimitException(\n            "You can only post 100 tweets per hour"\n        );\n    }\n}\n\n// Configuration\n// resilience4j.ratelimiter.instances.tweet-post.limit-for-period=100\n// resilience4j.ratelimiter.instances.tweet-post.limit-refresh-period=1h\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"85-search--trending",children:"8.5 Search & Trending"}),"\n",(0,i.jsx)(n.h4,{id:"elasticsearch-integration",children:"Elasticsearch Integration"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Indexing Pipeline:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class SearchIndexService {\n\n    @KafkaListener(topics = "tweet-events")\n    public void indexTweet(TweetEvent event) {\n        Tweet tweet = event.getTweet();\n\n        TweetDocument doc = TweetDocument.builder()\n            .tweetId(tweet.getTweetId())\n            .userId(tweet.getUserId())\n            .content(tweet.getContent())\n            .hashtags(extractHashtags(tweet.getContent()))\n            .mentions(extractMentions(tweet.getContent()))\n            .createdAt(tweet.getCreatedAt())\n            .build();\n\n        elasticsearchTemplate.save(doc);\n    }\n\n    private List<String> extractHashtags(String content) {\n        return Pattern.compile("#(\\\\w+)")\n            .matcher(content)\n            .results()\n            .map(mr -> mr.group(1))\n            .collect(Collectors.toList());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Search Query:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class SearchService {\n\n    public SearchResults searchTweets(String query, SearchFilters filters) {\n        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();\n\n        // Text search\n        if (query != null && !query.isEmpty()) {\n            boolQuery.must(QueryBuilders\n                .multiMatchQuery(query, "content", "hashtags"));\n        }\n\n        // Filters\n        if (filters.getFromUserId() != null) {\n            boolQuery.filter(QueryBuilders\n                .termQuery("user_id", filters.getFromUserId()));\n        }\n\n        if (filters.getStartDate() != null) {\n            boolQuery.filter(QueryBuilders\n                .rangeQuery("created_at")\n                .gte(filters.getStartDate()));\n        }\n\n        // Sort by relevance or recency\n        SearchQuery searchQuery = new NativeSearchQueryBuilder()\n            .withQuery(boolQuery)\n            .withSort(SortBuilders.fieldSort("created_at").order(SortOrder.DESC))\n            .withPageable(PageRequest.of(0, 20))\n            .build();\n\n        return elasticsearchTemplate.search(searchQuery, TweetDocument.class);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"trending-topics-calculation",children:"Trending Topics Calculation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Real-time Trending:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class TrendingService {\n\n    @Scheduled(fixedRate = 60000) // Every minute\n    public void calculateTrending() {\n        Instant now = Instant.now();\n        Instant oneHourAgo = now.minus(1, ChronoUnit.HOURS);\n\n        // Aggregate hashtag counts from Elasticsearch\n        SearchQuery query = new NativeSearchQueryBuilder()\n            .withQuery(QueryBuilders.rangeQuery("created_at")\n                .gte(oneHourAgo)\n                .lte(now))\n            .addAggregation(AggregationBuilders\n                .terms("trending_hashtags")\n                .field("hashtags")\n                .size(50)\n                .order(BucketOrder.count(false)))\n            .build();\n\n        SearchHits<TweetDocument> hits = elasticsearchTemplate\n            .search(query, TweetDocument.class);\n\n        Aggregations aggregations = hits.getAggregations();\n        Terms terms = aggregations.get("trending_hashtags");\n\n        // Store in Redis sorted set\n        terms.getBuckets().forEach(bucket -> {\n            String hashtag = bucket.getKeyAsString();\n            long count = bucket.getDocCount();\n\n            redisTemplate.opsForZSet().add(\n                "trending:global",\n                hashtag,\n                count\n            );\n        });\n\n        // Set expiry\n        redisTemplate.expire("trending:global", 5, TimeUnit.MINUTES);\n    }\n\n    public List<TrendingTopic> getTrending(int limit) {\n        Set<ZSetOperations.TypedTuple<String>> trending =\n            redisTemplate.opsForZSet()\n                .reverseRangeWithScores("trending:global", 0, limit - 1);\n\n        return trending.stream()\n            .map(tuple -> TrendingTopic.builder()\n                .topic(tuple.getValue())\n                .tweetCount(tuple.getScore().longValue())\n                .build())\n            .collect(Collectors.toList());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"86-real-time-notifications",children:"8.6 Real-time Notifications"}),"\n",(0,i.jsx)(n.h4,{id:"websocket-connection",children:"WebSocket Connection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint("/ws")\n            .setAllowedOrigins("*")\n            .withSockJS();\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) {\n        config.enableSimpleBroker("/topic", "/queue");\n        config.setApplicationDestinationPrefixes("/app");\n    }\n}\n\n@Service\npublic class NotificationService {\n\n    @Autowired\n    private SimpMessagingTemplate messagingTemplate;\n\n    public void sendNotification(String userId, Notification notification) {\n        // Send via WebSocket to connected clients\n        messagingTemplate.convertAndSendToUser(\n            userId,\n            "/queue/notifications",\n            notification\n        );\n\n        // Also store in database for offline users\n        notificationRepository.save(notification);\n    }\n\n    @KafkaListener(topics = "notification-events")\n    public void processNotificationEvent(NotificationEvent event) {\n        Notification notification = createNotification(event);\n\n        // Check if user is online (WebSocket connection active)\n        if (isUserOnline(event.getUserId())) {\n            sendNotification(event.getUserId(), notification);\n        } else {\n            // Store for later retrieval\n            notificationRepository.save(notification);\n\n            // Optionally send push notification to mobile\n            pushNotificationService.send(event.getUserId(), notification);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"notification-types",children:"Notification Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class NotificationFactory {\n\n    public void createLikeNotification(String tweetId, String likerId) {\n        Tweet tweet = tweetRepository.findById(tweetId);\n\n        NotificationEvent event = NotificationEvent.builder()\n            .userId(tweet.getUserId()) // Tweet author\n            .type(NotificationType.LIKE)\n            .actorId(likerId)\n            .tweetId(tweetId)\n            .message(String.format("@%s liked your tweet", likerId))\n            .build();\n\n        kafkaTemplate.send("notification-events", event);\n    }\n\n    public void createRetweetNotification(String tweetId, String retweeterId) {\n        Tweet tweet = tweetRepository.findById(tweetId);\n\n        NotificationEvent event = NotificationEvent.builder()\n            .userId(tweet.getUserId())\n            .type(NotificationType.RETWEET)\n            .actorId(retweeterId)\n            .tweetId(tweetId)\n            .message(String.format("@%s retweeted your tweet", retweeterId))\n            .build();\n\n        kafkaTemplate.send("notification-events", event);\n    }\n\n    public void createMentionNotification(Tweet tweet, String mentionedUserId) {\n        NotificationEvent event = NotificationEvent.builder()\n            .userId(mentionedUserId)\n            .type(NotificationType.MENTION)\n            .actorId(tweet.getUserId())\n            .tweetId(tweet.getTweetId())\n            .message(String.format("@%s mentioned you", tweet.getUserId()))\n            .build();\n\n        kafkaTemplate.send("notification-events", event);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"87-media-handling",children:"8.7 Media Handling"}),"\n",(0,i.jsx)(n.h4,{id:"upload-flow",children:"Upload Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/v1/media")\npublic class MediaController {\n\n    @PostMapping("/upload")\n    public ResponseEntity<MediaUploadResponse> uploadMedia(\n        @RequestParam("file") MultipartFile file,\n        @RequestHeader("Authorization") String token\n    ) {\n        // Validate file\n        validateMediaFile(file);\n\n        String userId = authService.getUserIdFromToken(token);\n        String mediaId = UUID.randomUUID().toString();\n        String fileName = mediaId + getFileExtension(file);\n\n        // Upload to S3\n        s3Client.putObject(\n            PutObjectRequest.builder()\n                .bucket("twitter-media")\n                .key(fileName)\n                .acl(ObjectCannedACL.PUBLIC_READ)\n                .build(),\n            RequestBody.fromBytes(file.getBytes())\n        );\n\n        String mediaUrl = String.format(\n            "https://cdn.twitter.com/media/%s",\n            fileName\n        );\n\n        // Store metadata in database\n        Media media = Media.builder()\n            .mediaId(mediaId)\n            .userId(userId)\n            .url(mediaUrl)\n            .type(file.getContentType())\n            .size(file.getSize())\n            .build();\n\n        mediaRepository.save(media);\n\n        return ResponseEntity.ok(\n            MediaUploadResponse.builder()\n                .mediaId(mediaId)\n                .url(mediaUrl)\n                .build()\n        );\n    }\n\n    private void validateMediaFile(MultipartFile file) {\n        // Max 5MB for images, 512MB for videos\n        long maxSize = file.getContentType().startsWith("video")\n            ? 512 * 1024 * 1024\n            : 5 * 1024 * 1024;\n\n        if (file.getSize() > maxSize) {\n            throw new MediaTooLargeException("File exceeds size limit");\n        }\n\n        // Validate content type\n        List<String> allowedTypes = Arrays.asList(\n            "image/jpeg", "image/png", "image/gif",\n            "video/mp4", "video/quicktime"\n        );\n\n        if (!allowedTypes.contains(file.getContentType())) {\n            throw new InvalidMediaTypeException("Unsupported media type");\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"video-processing",children:"Video Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class VideoProcessingService {\n\n    @KafkaListener(topics = "video-upload-events")\n    public void processVideo(VideoUploadEvent event) {\n        String videoUrl = event.getVideoUrl();\n\n        // Download from S3\n        byte[] videoData = s3Client.getObjectAsBytes(\n            GetObjectRequest.builder()\n                .bucket("twitter-media")\n                .key(extractKey(videoUrl))\n                .build()\n        );\n\n        // Transcode to multiple formats\n        List<VideoFormat> formats = Arrays.asList(\n            new VideoFormat("720p", 2_000_000),\n            new VideoFormat("480p", 1_000_000),\n            new VideoFormat("360p", 500_000)\n        );\n\n        formats.forEach(format -> {\n            byte[] transcoded = ffmpegService.transcode(\n                videoData,\n                format\n            );\n\n            String transcodedKey = String.format(\n                "%s_%s.mp4",\n                event.getMediaId(),\n                format.getResolution()\n            );\n\n            s3Client.putObject(\n                PutObjectRequest.builder()\n                    .bucket("twitter-media")\n                    .key(transcodedKey)\n                    .build(),\n                RequestBody.fromBytes(transcoded)\n            );\n        });\n\n        // Update media metadata\n        mediaRepository.markAsProcessed(event.getMediaId());\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"88-security--privacy",children:"8.8 Security & Privacy"}),"\n",(0,i.jsx)(n.h4,{id:"authentication-1",children:"Authentication"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class AuthService {\n\n    public AuthResponse login(String username, String password) {\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -> new InvalidCredentialsException());\n\n        if (!passwordEncoder.matches(password, user.getPasswordHash())) {\n            throw new InvalidCredentialsException();\n        }\n\n        // Generate JWT token\n        String token = jwtService.generateToken(user);\n\n        // Store session in Redis\n        redisTemplate.opsForValue().set(\n            "session:" + token,\n            user.getUserId(),\n            24,\n            TimeUnit.HOURS\n        );\n\n        return AuthResponse.builder()\n            .token(token)\n            .userId(user.getUserId())\n            .expiresIn(86400)\n            .build();\n    }\n\n    public void logout(String token) {\n        redisTemplate.delete("session:" + token);\n        jwtService.invalidateToken(token);\n    }\n}\n\n@Component\npublic class JwtAuthFilter extends OncePerRequestFilter {\n\n    @Override\n    protected void doFilterInternal(\n        HttpServletRequest request,\n        HttpServletResponse response,\n        FilterChain filterChain\n    ) throws ServletException, IOException {\n\n        String token = extractToken(request);\n\n        if (token != null && jwtService.validateToken(token)) {\n            String userId = redisTemplate.opsForValue()\n                .get("session:" + token);\n\n            if (userId != null) {\n                UsernamePasswordAuthenticationToken auth =\n                    new UsernamePasswordAuthenticationToken(\n                        userId, null, Collections.emptyList()\n                    );\n\n                SecurityContextHolder.getContext()\n                    .setAuthentication(auth);\n            }\n        }\n\n        filterChain.doFilter(request, response);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"content-moderation",children:"Content Moderation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class ContentModerationService {\n\n    public void moderateTweet(Tweet tweet) {\n        // Check for banned words\n        if (containsBannedWords(tweet.getContent())) {\n            tweet.setStatus(TweetStatus.FLAGGED);\n            humanReviewQueue.add(tweet);\n            return;\n        }\n\n        // Use ML model for toxic content detection\n        double toxicityScore = mlService.getToxicityScore(\n            tweet.getContent()\n        );\n\n        if (toxicityScore > 0.8) {\n            tweet.setStatus(TweetStatus.FLAGGED);\n            humanReviewQueue.add(tweet);\n        } else if (toxicityScore > 0.5) {\n            tweet.setStatus(TweetStatus.WARNING);\n        }\n\n        tweetRepository.save(tweet);\n    }\n\n    private boolean containsBannedWords(String content) {\n        Set<String> bannedWords = getBannedWordsFromCache();\n\n        return bannedWords.stream()\n            .anyMatch(word ->\n                content.toLowerCase().contains(word.toLowerCase())\n            );\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"rate-limiting-by-tier",children:"Rate Limiting by Tier"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Component\npublic class TierBasedRateLimiter {\n\n    public boolean allowRequest(String userId, String operation) {\n        User user = userRepository.findById(userId);\n        RateLimitConfig config = getRateLimitConfig(\n            user.getTier(),\n            operation\n        );\n\n        String key = String.format("ratelimit:%s:%s", userId, operation);\n\n        Long currentCount = redisTemplate.opsForValue()\n            .increment(key, 1);\n\n        if (currentCount == 1) {\n            redisTemplate.expire(key, config.getWindow(), TimeUnit.SECONDS);\n        }\n\n        return currentCount <= config.getLimit();\n    }\n\n    private RateLimitConfig getRateLimitConfig(UserTier tier, String op) {\n        // Free tier: 100 tweets/day, 500 API calls/hour\n        // Premium tier: 1000 tweets/day, 5000 API calls/hour\n        // Enterprise: Unlimited\n\n        if (tier == UserTier.FREE) {\n            return op.equals("post_tweet")\n                ? new RateLimitConfig(100, 86400)  // 100 per day\n                : new RateLimitConfig(500, 3600);   // 500 per hour\n        } else if (tier == UserTier.PREMIUM) {\n            return op.equals("post_tweet")\n                ? new RateLimitConfig(1000, 86400)\n                : new RateLimitConfig(5000, 3600);\n        } else {\n            return new RateLimitConfig(Integer.MAX_VALUE, 3600);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"89-analytics--monitoring",children:"8.9 Analytics & Monitoring"}),"\n",(0,i.jsx)(n.h4,{id:"metrics-collection",children:"Metrics Collection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class MetricsService {\n\n    @Autowired\n    private MeterRegistry meterRegistry;\n\n    public void recordTweetPost() {\n        Counter.builder("tweets.posted")\n            .tag("type", "organic")\n            .register(meterRegistry)\n            .increment();\n    }\n\n    public void recordTimelineLoad(long latencyMs) {\n        Timer.builder("timeline.load.latency")\n            .register(meterRegistry)\n            .record(latencyMs, TimeUnit.MILLISECONDS);\n    }\n\n    public void recordCacheHit(String cacheType) {\n        Counter.builder("cache.hits")\n            .tag("cache", cacheType)\n            .register(meterRegistry)\n            .increment();\n    }\n}\n\n@Aspect\n@Component\npublic class PerformanceMonitoringAspect {\n\n    @Around("@annotation(Monitored)")\n    public Object monitorPerformance(ProceedingJoinPoint joinPoint)\n        throws Throwable {\n\n        long startTime = System.currentTimeMillis();\n        String methodName = joinPoint.getSignature().getName();\n\n        try {\n            Object result = joinPoint.proceed();\n            long duration = System.currentTimeMillis() - startTime;\n\n            metricsService.recordMethodExecution(methodName, duration, true);\n\n            return result;\n        } catch (Exception e) {\n            long duration = System.currentTimeMillis() - startTime;\n            metricsService.recordMethodExecution(methodName, duration, false);\n            throw e;\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"health-checks",children:"Health Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/health")\npublic class HealthCheckController {\n\n    @GetMapping\n    public ResponseEntity<HealthStatus> healthCheck() {\n        HealthStatus status = HealthStatus.builder()\n            .status("UP")\n            .timestamp(Instant.now())\n            .checks(performHealthChecks())\n            .build();\n\n        return ResponseEntity.ok(status);\n    }\n\n    private Map<String, ComponentHealth> performHealthChecks() {\n        Map<String, ComponentHealth> checks = new HashMap<>();\n\n        // Database health\n        checks.put("postgres", checkPostgres());\n        checks.put("cassandra", checkCassandra());\n        checks.put("redis", checkRedis());\n\n        // External services\n        checks.put("s3", checkS3());\n        checks.put("elasticsearch", checkElasticsearch());\n\n        return checks;\n    }\n\n    private ComponentHealth checkRedis() {\n        try {\n            redisTemplate.opsForValue().get("health-check");\n            return ComponentHealth.up();\n        } catch (Exception e) {\n            return ComponentHealth.down(e.getMessage());\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"distributed-tracing",children:"Distributed Tracing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class TracingConfig {\n\n    @Bean\n    public Tracer jaegerTracer() {\n        return Configuration.fromEnv("twitter-service")\n            .getTracer();\n    }\n}\n\n@Service\npublic class TweetService {\n\n    @Autowired\n    private Tracer tracer;\n\n    public Tweet createTweet(String userId, String content) {\n        Span span = tracer.buildSpan("create-tweet").start();\n\n        try (Scope scope = tracer.activateSpan(span)) {\n            span.setTag("user_id", userId);\n            span.log("Validating tweet content");\n\n            validateTweet(content);\n\n            span.log("Saving tweet to database");\n            Tweet tweet = saveTweet(userId, content);\n\n            span.log("Initiating fan-out");\n            fanoutService.fanoutTweet(tweet);\n\n            span.setTag("tweet_id", tweet.getTweetId());\n            return tweet;\n\n        } catch (Exception e) {\n            span.setTag("error", true);\n            span.log(ImmutableMap.of("event", "error", "message", e.getMessage()));\n            throw e;\n        } finally {\n            span.finish();\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"810-disaster-recovery--high-availability",children:"8.10 Disaster Recovery & High Availability"}),"\n",(0,i.jsx)(n.h4,{id:"multi-region-deployment",children:"Multi-Region Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Region Configuration\nregions:\n  - name: us-east-1\n    primary: true\n    services:\n      - tweet-service\n      - timeline-service\n      - user-service\n    databases:\n      - postgres-master\n      - cassandra-datacenter-1\n\n  - name: us-west-2\n    primary: false\n    services:\n      - tweet-service\n      - timeline-service\n      - user-service\n    databases:\n      - postgres-replica\n      - cassandra-datacenter-2\n\n  - name: eu-west-1\n    primary: false\n    services:\n      - tweet-service\n      - timeline-service\n    databases:\n      - postgres-replica\n      - cassandra-datacenter-3\n"})}),"\n",(0,i.jsx)(n.h4,{id:"database-backup-strategy",children:"Database Backup Strategy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class BackupService {\n\n    @Scheduled(cron = "0 0 2 * * *") // Daily at 2 AM\n    public void performDatabaseBackup() {\n        // PostgreSQL backup\n        String timestamp = LocalDateTime.now()\n            .format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));\n\n        String backupCommand = String.format(\n            "pg_dump -h %s -U %s %s > backup_%s.sql",\n            dbHost, dbUser, dbName, timestamp\n        );\n\n        executeCommand(backupCommand);\n\n        // Upload to S3\n        s3Client.putObject(\n            PutObjectRequest.builder()\n                .bucket("twitter-backups")\n                .key("postgres/backup_" + timestamp + ".sql")\n                .build(),\n            Paths.get("backup_" + timestamp + ".sql")\n        );\n\n        // Cassandra snapshot\n        cassandraBackupService.createSnapshot(timestamp);\n    }\n\n    @Scheduled(cron = "0 0 3 * * SUN") // Weekly on Sunday at 3 AM\n    public void cleanOldBackups() {\n        Instant thirtyDaysAgo = Instant.now().minus(30, ChronoUnit.DAYS);\n\n        // Delete backups older than 30 days\n        ListObjectsV2Response response = s3Client.listObjectsV2(\n            ListObjectsV2Request.builder()\n                .bucket("twitter-backups")\n                .build()\n        );\n\n        response.contents().stream()\n            .filter(obj -> obj.lastModified().isBefore(thirtyDaysAgo))\n            .forEach(obj -> s3Client.deleteObject(\n                DeleteObjectRequest.builder()\n                    .bucket("twitter-backups")\n                    .key(obj.key())\n                    .build()\n            ));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"circuit-breaker-for-external-services",children:"Circuit Breaker for External Services"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Service\npublic class ExternalServiceClient {\n\n    @CircuitBreaker(\n        name = "media-service",\n        fallbackMethod = "fallbackUploadMedia"\n    )\n    @Retry(name = "media-service", fallbackMethod = "fallbackUploadMedia")\n    public String uploadMedia(MultipartFile file) {\n        return mediaServiceClient.upload(file);\n    }\n\n    public String fallbackUploadMedia(MultipartFile file, Exception e) {\n        log.error("Media upload failed, storing locally", e);\n\n        // Store locally and queue for retry\n        String localPath = storageService.saveLocally(file);\n        retryQueue.add(new MediaUploadTask(localPath));\n\n        return localPath;\n    }\n\n    @CircuitBreaker(\n        name = "notification-service",\n        fallbackMethod = "fallbackNotification"\n    )\n    public void sendNotification(Notification notification) {\n        notificationServiceClient.send(notification);\n    }\n\n    public void fallbackNotification(Notification notification, Exception e) {\n        // Store in database for later delivery\n        notificationRepository.saveForRetry(notification);\n    }\n}\n\n// Configuration\n// resilience4j.circuitbreaker.instances.media-service.failure-rate-threshold=50\n// resilience4j.circuitbreaker.instances.media-service.wait-duration-in-open-state=60s\n// resilience4j.circuitbreaker.instances.media-service.sliding-window-size=10\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.h3,{id:"key-design-decisions",children:"Key Design Decisions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hybrid Fan-out Strategy"}),": Regular users get fan-out on write, celebrities use fan-out on read"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Polyglot Persistence"}),": PostgreSQL (users/follows), Cassandra (tweets/timelines), Redis (cache), Elasticsearch (search)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event-Driven Architecture"}),": Kafka for async processing (notifications, analytics, fan-out)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Level Caching"}),": Application cache \u2192 Redis \u2192 Database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Read Replicas"}),": Separate read/write traffic for PostgreSQL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Counter Sharding"}),": Handle viral tweets with distributed counters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSocket"}),": Real-time notifications for online users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CDN"}),": Media delivery with global edge locations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"scalability-achieved",children:"Scalability Achieved"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 500M users, 200M DAU"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 4600 tweets per second"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 46K timeline reads per second"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Timeline load < 500ms (P95)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 99.99% availability"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Handles viral tweets (millions of interactions)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"trade-offs--considerations",children:"Trade-offs & Considerations"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Decision"}),(0,i.jsx)(n.th,{children:"Pro"}),(0,i.jsx)(n.th,{children:"Con"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Fan-out on Write"}),(0,i.jsx)(n.td,{children:"Fast reads, simple timeline service"}),(0,i.jsx)(n.td,{children:"Slow writes for celebrities, wasted work"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Fan-out on Read"}),(0,i.jsx)(n.td,{children:"Fast writes, always fresh"}),(0,i.jsx)(n.td,{children:"Slow reads, complex merge logic"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Hybrid Approach"}),(0,i.jsx)(n.td,{children:"Balance of both"}),(0,i.jsx)(n.td,{children:"Increased complexity"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Cassandra for Tweets"}),(0,i.jsx)(n.td,{children:"Linear scalability, high write throughput"}),(0,i.jsx)(n.td,{children:"Eventual consistency, limited queries"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Elasticsearch for Search"}),(0,i.jsx)(n.td,{children:"Fast full-text search, faceted search"}),(0,i.jsx)(n.td,{children:"Additional maintenance, sync lag"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Async Notifications"}),(0,i.jsx)(n.td,{children:"Non-blocking, scalable"}),(0,i.jsx)(n.td,{children:"Possible delay, delivery not guaranteed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Counter Sharding"}),(0,i.jsx)(n.td,{children:"Handles hotspots"}),(0,i.jsx)(n.td,{children:"Eventually consistent counts"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spaces (Audio Rooms)"}),": Live audio conversations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Communities"}),": Topic-based groups and forums"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Newsletter Integration"}),": Long-form content via Revue"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"E-commerce"}),": In-app shopping and product pages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Super Follows"}),": Paid subscriptions for exclusive content"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Twitter Blue"}),": Premium features (edit tweets, longer videos)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AI Moderation"}),": Better automated content filtering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decentralized Architecture"}),": Explore blockchain/ActivityPub"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge Timeline Generation"}),": Compute timelines at CDN edge"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Video Live Streaming"}),": Native live broadcasting"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"additional-considerations",children:"Additional Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"data-privacy--gdpr-compliance",children:"Data Privacy & GDPR Compliance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Service\npublic class DataPrivacyService {\n\n    public void deleteUserData(String userId) {\n        // Delete user account\n        userRepository.delete(userId);\n\n        // Delete or anonymize tweets\n        tweetRepository.anonymizeTweetsByUser(userId);\n\n        // Remove from followers/following\n        followRepository.deleteAllByUser(userId);\n\n        // Clear cache\n        cacheService.evictUser(userId);\n\n        // Export user data (GDPR right to data portability)\n        dataExportService.queueExport(userId);\n    }\n\n    public UserDataExport exportUserData(String userId) {\n        return UserDataExport.builder()\n            .user(userRepository.findById(userId))\n            .tweets(tweetRepository.findAllByUser(userId))\n            .likes(likeRepository.findAllByUser(userId))\n            .followers(followRepository.getFollowers(userId))\n            .following(followRepository.getFollowing(userId))\n            .build();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"api-versioning",children:"API Versioning"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/v2/tweets")\npublic class TweetControllerV2 {\n\n    // V2 API with enhanced features\n    @PostMapping\n    public ResponseEntity<TweetResponse> createTweet(\n        @RequestBody TweetRequest request\n    ) {\n        // New features: polls, edit history, etc.\n        return ResponseEntity.ok(tweetService.createTweetV2(request));\n    }\n}\n\n// Keep V1 for backward compatibility\n@RestController\n@RequestMapping("/v1/tweets")\n@Deprecated\npublic class TweetControllerV1 {\n    // Legacy API\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);