"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2303],{2045:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=e(4848),i=e(8453);const s={title:"String Matching"},o=void 0,a={id:"DSA/DSA with JavaScript/StringMatching",title:"String Matching",description:"Brute-Force String Matching",source:"@site/docs/DSA/DSA with JavaScript/StringMatching.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/StringMatching",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/StringMatching",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/StringMatching.mdx",tags:[],version:"current",frontMatter:{title:"String Matching"},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/Stack"},next:{title:"Suffix Automaton",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/SuffixAutomata"}},h={},c=[{value:"Brute-Force String Matching",id:"brute-force-string-matching",level:3},{value:"Algorithm Steps",id:"algorithm-steps",level:4},{value:"Rabin Karp",id:"rabin-karp",level:2},{value:"Knuth-Morris-Pratt (KMP) Algorithm",id:"knuth-morris-pratt-kmp-algorithm",level:2},{value:"Overview",id:"overview",level:3},{value:"Algorithm Steps",id:"algorithm-steps-1",level:3},{value:"Preprocessing the Pattern",id:"preprocessing-the-pattern",level:3},{value:"Using Trie",id:"using-trie",level:2},{value:"Aho-Corasick Algorithm",id:"aho-corasick-algorithm",level:2}];function l(t){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"brute-force-string-matching",children:"Brute-Force String Matching"}),"\n",(0,r.jsx)(n.p,{children:"The brute-force string matching algorithm is the simplest approach to solving the problem. It checks for the presence of the pattern at every possible position in the text."}),"\n",(0,r.jsx)(n.h4,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Iterate through the Text"}),": For each position in the text, check if the pattern matches starting from that position."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check for Match"}),": Compare the characters of the pattern with the corresponding characters in the text."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Record Matches"}),": If a match is found, record the starting index of the match."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Code Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * Perform brute-force string matching to find the pattern in the text.\n * @param {string} text - The text string.\n * @param {string} pattern - The pattern string.\n * @return {number[]} - The starting indices of occurrences of the pattern.\n */\nconst bruteForceSearch = (text, pattern) => {\n  const result = [];\n  const m = pattern.length;\n  const n = text.length;\n\n  for (let i = 0; i <= n - m; i++) {\n    let j;\n    for (j = 0; j < m; j++) {\n      if (text[i + j] !== pattern[j]) break;\n    }\n    if (j === m) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rabin-karp",children:"Rabin Karp"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"function search(text, pattern) {\n  const D = 256; // ASCII length\n  const MOD = 1e9 + 7; // Prime modulus\n\n  const N = text.length;\n  const M = pattern.length;\n\n  if (M === 0) return 0; // Edge case: empty pattern\n\n  let p = 0; // Hash value for the pattern\n  let t = 0; // Hash value for the text window\n  const PREV = Math.pow(D, M - 1) % MOD; // Highest power of D (to remove the first character)\n\n  // Calculate hash value for the pattern and the first window of text\n  for (let i = 0; i < M; i++) {\n    p = (D * p + pattern.charCodeAt(i)) % MOD;\n    t = (D * t + text.charCodeAt(i)) % MOD;\n  }\n\n  // Slide the window over the text\n  for (let i = 0; i <= N - M; i++) {\n    // If the hash values match, check the characters one by one\n    if (p === t) {\n      let j = 0;\n      while (j < M && pattern[j] === text[i + j]) j++; // Character comparison\n\n      // If the full pattern matches, return the index\n      if (j === M) {\n        return i;\n      }\n    }\n\n    // Update the hash for the next window\n    if (i < N - M) {\n      t = (D * (t - text.charCodeAt(i) * PREV) + text.charCodeAt(i + M)) % MOD;\n      if (t < 0) t += MOD; // Handle negative values\n    }\n  }\n\n  return -1; // Return -1 if the pattern is not found\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"knuth-morris-pratt-kmp-algorithm",children:"Knuth-Morris-Pratt (KMP) Algorithm"}),"\n",(0,r.jsx)(n.p,{children:'The Knuth-Morris-Pratt (KMP) algorithm is an efficient string searching algorithm that finds occurrences of a "pattern" string within a "text" string. It improves upon the naive string matching algorithm by avoiding redundant comparisons.'}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:'The KMP algorithm uses information gained from previous comparisons to avoid redundant checking. It preprocesses the pattern to create a partial match table (also known as the "longest prefix suffix" or LPS array), which helps in skipping unnecessary comparisons when a mismatch occurs.'}),"\n",(0,r.jsx)(n.h3,{id:"algorithm-steps-1",children:"Algorithm Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Preprocess the Pattern"}),": Construct the LPS array for the pattern."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Search for the Pattern"}),": Use the LPS array to efficiently search for the pattern in the text."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"preprocessing-the-pattern",children:"Preprocessing the Pattern"}),"\n",(0,r.jsx)(n.p,{children:"The LPS array (Longest Prefix Suffix) stores the length of the longest proper prefix of the pattern which is also a suffix. This allows the algorithm to skip unnecessary comparisons in the search phase."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Code Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'/**\n * Build the LPS (Longest Prefix Suffix) array for the pattern.\n * @param {string} pattern - The pattern string.\n * @return {number[]} - The LPS array.\n */\nconst buildLPSArray = (pattern) => {\n  const lps = Array(pattern.length).fill(0);\n  let length = 0;\n  let i = 1;\n\n  while (i < pattern.length) {\n    if (pattern[i] === pattern[length]) {\n      length++;\n      lps[i] = length;\n      i++;\n    } else {\n      if (length > 0) {\n        length = lps[length - 1];\n      } else {\n        lps[i] = 0;\n        i++;\n      }\n    }\n  }\n  \n  return lps;\n};\n\n/**\n * Perform KMP search to find the pattern in the text.\n * @param {string} text - The text string.\n * @param {string} pattern - The pattern string.\n * @return {number[]} - The starting indices of occurrences of the pattern.\n */\nconst kmpSearch = (text, pattern) => {\n  const lps = buildLPSArray(pattern);\n  const result = [];\n  let i = 0; // Index for text\n  let j = 0; // Index for pattern\n\n  while (i < text.length) {\n    if (pattern[j] === text[i]) {\n      i++;\n      j++;\n    }\n    \n    if (j === pattern.length) {\n      result.push(i - j);\n      j = lps[j - 1];\n    } else if (i < text.length && pattern[j] !== text[i]) {\n      if (j > 0) {\n        j = lps[j - 1];\n      } else {\n        i++;\n      }\n    }\n  }\n  \n  return result;\n};\n\nconst text = "ababcababcabc";\nconst pattern = "abc";\n\nconsole.log(kmpSearch(text, pattern)); // Output: [2, 7, 10]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-trie",children:"Using Trie"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"class TrieNode {\n  constructor() {\n    this.children = {};\n    this.isEndOfWord = false; // Marks the end of a pattern\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  insert(word) {\n    let currentNode = this.root;\n\n    for (const char of word) {\n      if (!currentNode.children[char]) {\n        currentNode.children[char] = new TrieNode();\n      }\n      currentNode = currentNode.children[char];\n    }\n    currentNode.isEndOfWord = true; // Mark the end of the pattern\n  }\n\n  search(text) {\n    const results = [];\n    const n = text.length;\n\n    for (let i = 0; i < n; i++) {\n      let currentNode = this.root;\n\n      for (let j = i; j < n && currentNode.children[text[j]]; j++) {\n        currentNode = currentNode.children[text[j]];\n        if (currentNode.isEndOfWord) {\n          results.push({ pattern: text.substring(i, j + 1), index: i });\n        }\n      }\n    }\n\n    return results;\n  }\n}\n\n// Example Usage\nconst trie = new Trie();\ntrie.insert('he');\ntrie.insert('she');\ntrie.insert('his');\ntrie.insert('hers');\n\nconst text = 'ushers';\nconst results = trie.search(text);\nconsole.log(results); // Output: [{ pattern: 'she', index: 1 }, { pattern: 'hers', index: 3 }]\n/* \nTC : O(N*K)\nK is the maximum length of any pattern that has been inserted into the Trie.\nwhere N is the length of the text.\n\nSC : O(M+R)\nM is the number of characters in all patterns in the Trie.\nR is the number of matched patterns (or substrings) found during the search.\n*/\n"})}),"\n",(0,r.jsx)(n.h2,{id:"aho-corasick-algorithm",children:"Aho-Corasick Algorithm"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Aho-Corasick when you need to search for multiple patterns in a single text, especially when those patterns can share common prefixes"}),"\n",(0,r.jsx)(n.li,{children:"Use KMP for single pattern searches where space efficiency is a concern or when the patterns are relatively small and do not need to be checked against a larger set"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:'class Node {\n\n  constructor() {\n    this.outputs = new Set();\n    this.children = new Map();\n    this.failureLink = null;\n  }\n\n  hasChild(key) {\n    return this.children.has(key);\n  }\n\n  getChild(key) {\n    return this.children.get(key);\n  }\n\n  setChild(key, node) {\n    this.children.set(key, node);\n  }\n\n  addOutput(output) {\n    this.outputs.add(output);\n  }\n\n  copyOutputs(node) {\n    for (const o of node.outputs) {\n      this.outputs.add(o);\n    }\n  }\n\n}\n\nclass AhoCorasick {\n\n  constructor(patterns) {\n\n    // construct the trie\n    this.root = new Node();\n\n    let currNode = this.root;\n    for (const pattern of patterns) {\n      for (let i = 0; i < pattern.length; i++) {\n        const key = pattern[i];\n        if (!currNode.hasChild(key)) {\n          currNode.setChild(key, new Node());\n        }\n        currNode = currNode.getChild(key);\n      }\n      currNode.addOutput(pattern);\n      currNode = this.root;\n    }\n\n    // failure link\n    this.root.failureLink = this.root;\n    const queue = [];\n    for (const [_, child] of this.root.children) {\n      child.failureLink = this.root;\n      queue.push(child);\n    }\n\n    while (queue.length !== 0) {\n      currNode = queue.shift();\n      for (const [key, child] of currNode.children) {\n        queue.push(child);\n\n        let n = currNode.failureLink;\n        while (!n.hasChild(key) && n != this.root) {\n          n = n.failureLink;\n        }\n        child.failureLink = n.getChild(key) ?? this.root;\n        child.copyOutputs(child.failureLink);\n\n      }\n    }\n  }\n\n  search(text) {\n    const found = [];\n    let state = this.root;\n    let i = 0;\n    while (i < text.length) {\n      const c = text[i];\n      if (state.hasChild(c)) {\n        state = state.getChild(c);\n        i++;\n        if (state.outputs.size > 0) {\n          state.outputs.forEach(val => {\n            found.push({ "pos": i - val.length, "val": val });\n          });\n        }\n      } else if (state === this.root) {\n        i++;\n      } else {\n        state = state.failureLink;\n      }\n    }\n    return found;\n  }\n}\n\n// Test the Aho-Corasick implementation\nfunction testAhoCorasick() {\n  const patterns = [\'he\', \'she\', \'his\', \'hers\'];\n  const text = \'ushers\';\n  const ac = new AhoCorasick(patterns);\n  const results = ac.search(text);\n\n  results.forEach(result => {\n    console.log(`Pattern: "${result.val}" found at position: ${result.pos}`);\n  });\n}\n\n// Run the test\ntestAhoCorasick();\n\n/* \nPattern: "she" found at position: 1\nPattern: "he" found at position: 2\nPattern: "hers" found at position: 2\n*/\n\n/* \nTC : O(P+N+T)\nP is the total length of all patterns\nN is the number of nodes in the trie (which can be up to P).\nT is the length of the text.\n\nSC : O(N+M)\nN is the number of nodes in the trie\nM is the number of matches found in the text (this could be up to T, but usually M\u2264T)\n*/\n'})})]})}function u(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>a});var r=e(6540);const i={},s=r.createContext(i);function o(t){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function a(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),r.createElement(s.Provider,{value:n},t.children)}}}]);