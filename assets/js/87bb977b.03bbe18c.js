"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[1927],{28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function o(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(s.Provider,{value:e},n.children)}},73042:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=t(74848),r=t(28453);const s={title:"Kruskal's Algorithm"},o=void 0,a={id:"DSA/DSA with JavaScript/Kruskal'sAlgorithm",title:"Kruskal's Algorithm",description:"Kruskal's algorithm is a popular algorithm in graph theory for finding the Minimum Spanning Tree (MST) of a connected, weighted, undirected graph. The MST connects all vertices with the minimum total edge weight and without any cycles.",source:"@site/docs/DSA/DSA with JavaScript/Kruskal'sAlgorithm.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/Kruskal'sAlgorithm",permalink:"/docs/DSA/DSA with JavaScript/Kruskal'sAlgorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/Kruskal'sAlgorithm.mdx",tags:[],version:"current",frontMatter:{title:"Kruskal's Algorithm"},sidebar:"tutorialSidebar",previous:{title:"0/1 Knapsack and Unbounded Knapsack",permalink:"/docs/DSA/DSA with JavaScript/KnapsackDP"},next:{title:"LRU Cache Design",permalink:"/docs/DSA/DSA with JavaScript/LRUcache"}},l={},c=[{value:"Steps of Kruskal&#39;s Algorithm",id:"steps-of-kruskals-algorithm",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"JavaScript Implementation",id:"javascript-implementation",level:2}];function h(n){const e={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Kruskal's algorithm is a popular algorithm in graph theory for finding the ",(0,i.jsx)(e.strong,{children:"Minimum Spanning Tree (MST)"})," of a connected, weighted, undirected graph. The MST connects all vertices with the minimum total edge weight and without any cycles."]}),"\n",(0,i.jsx)(e.h2,{id:"steps-of-kruskals-algorithm",children:"Steps of Kruskal's Algorithm"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sort all edges"})," in the graph in ascending order based on their weight."]}),"\n",(0,i.jsx)(e.li,{children:"Initialize a disjoint - set(union - find) structure, where each vertex starts in its own set."}),"\n",(0,i.jsx)(e.li,{children:"Iterate through the sorted edges:"}),"\n"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["For each edge, check if the vertices it connects belong to different sets(using the union - find structure).","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"If they are in different sets, add the edge to the MST and unite the sets to avoid cycles."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.ol,{start:"4",children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Repeat step 3"})," until there are exactly ",(0,i.jsx)(e.code,{children:"V-1"})," edges in the MST, where",(0,i.jsx)(e.code,{children:"V"})," is the number of vertices."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Sorting the edges takes O(ElogE)."}),"\n",(0,i.jsx)(e.li,{children:"Union - find operations(with path compression and union by rank) have nearly constant time complexity,O(E*logV)."}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["The overall time complexity is O(ElogE) or O(Elog V), where",(0,i.jsx)(e.code,{children:"E"})," is the number of edges and ",(0,i.jsx)(e.code,{children:"V"})," is the number of vertices."]}),"\n",(0,i.jsx)(e.h2,{id:"javascript-implementation",children:"JavaScript Implementation"}),"\n",(0,i.jsx)(e.p,{children:"Below is a JavaScript implementation of Kruskal's algorithm:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-JavaScript",children:"class UnionFind {\n  constructor(n) {\n      this.parent = Array.from({ length: n }, (_, i) => i);\n      this.rank = Array(n).fill(0);\n  }\n\n  find(x) {\n      if (this.parent[x] !== x) {\n          this.parent[x] = this.find(this.parent[x]);  // Path compression\n      }\n      return this.parent[x];\n  }\n\n  union(x, y) {\n      const rootX = this.find(x);\n      const rootY = this.find(y);\n\n      if (rootX !== rootY) {\n          // Union by rank\n          if (this.rank[rootX] > this.rank[rootY]) {\n              this.parent[rootY] = rootX;\n          } else if (this.rank[rootX] < this.rank[rootY]) {\n              this.parent[rootX] = rootY;\n          } else {\n              this.parent[rootY] = rootX;\n              this.rank[rootX]++;\n          }\n          return true;\n      }\n      return false;\n  }\n}\n\nfunction kruskal(n, edges) {\n  edges.sort((a, b) => a[2] - b[2]);  // Sort edges by weight\n  const uf = new UnionFind(n);\n  const mst = [];\n\n  for (const [u, v, weight] of edges) {\n      if (uf.union(u, v)) {\n          mst.push([u, v, weight]);\n          if (mst.length === n - 1) break;  // MST has n-1 edges\n      }\n  }\n  return mst;\n}\n\n// Example usage\nconst n = 4;  // Number of vertices\nconst edges = [\n  [0, 1, 10],\n  [0, 2, 6],\n  [0, 3, 5],\n  [1, 3, 15],\n  [2, 3, 4]\n];\n\nconsole.log(kruskal(n, edges));//[ [ 2, 3, 4 ], [ 0, 3, 5 ], [ 0, 1, 10 ] ]\n"})})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}}}]);