"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[559],{1879:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var t=n(4848),i=n(8453);const d={},s="Binary Search Tree (BST)",a={id:"DSA/BinaryTree",title:"Binary Search Tree (BST)",description:"Basic Structure",source:"@site/docs/DSA/BinaryTree.mdx",sourceDirName:"DSA",slug:"/DSA/BinaryTree",permalink:"/js.enigma/docs/DSA/BinaryTree",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/BinaryTree.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Binary Search Tree",permalink:"/js.enigma/docs/DSA/BinarySearchTree"},next:{title:"Bit Manipulation Basics",permalink:"/js.enigma/docs/DSA/BitManipulation"}},o={},l=[{value:"Basic Structure",id:"basic-structure",level:2},{value:"BST Core Operations",id:"bst-core-operations",level:2},{value:"1. Insert Node",id:"1-insert-node",level:3},{value:"2. Search Node",id:"2-search-node",level:3},{value:"3. Delete Node",id:"3-delete-node",level:3},{value:"Tree Traversal Methods",id:"tree-traversal-methods",level:2},{value:"1. Inorder Traversal (Left-Root-Right)",id:"1-inorder-traversal-left-root-right",level:3},{value:"2. Preorder Traversal (Root-Left-Right)",id:"2-preorder-traversal-root-left-right",level:3},{value:"3. Postorder Traversal (Left-Right-Root)",id:"3-postorder-traversal-left-right-root",level:3},{value:"4. Level Order Traversal (BFS)",id:"4-level-order-traversal-bfs",level:3},{value:"Common Tree Operations",id:"common-tree-operations",level:2},{value:"1. Find Height",id:"1-find-height",level:3},{value:"2. Check if BST is Valid",id:"2-check-if-bst-is-valid",level:3},{value:"3. Find Lowest Common Ancestor",id:"3-find-lowest-common-ancestor",level:3},{value:"4. Check if Tree is Balanced",id:"4-check-if-tree-is-balanced",level:3},{value:"Common Interview Questions",id:"common-interview-questions",level:2},{value:"1. Serialize and Deserialize Binary Tree",id:"1-serialize-and-deserialize-binary-tree",level:3},{value:"Time Complexity Summary",id:"time-complexity-summary",level:2},{value:"Usage Example",id:"usage-example",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"binary-search-tree-bst",children:"Binary Search Tree (BST)"})}),"\n",(0,t.jsx)(r.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"class Node {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nclass BinarySearchTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"bst-core-operations",children:"BST Core Operations"}),"\n",(0,t.jsx)(r.h3,{id:"1-insert-node",children:"1. Insert Node"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"insert(data) {\r\n    const newNode = new Node(data);\r\n    \r\n    if (!this.root) {\r\n        this.root = newNode;\r\n        return;\r\n    }\r\n    \r\n    function insertNode(node, newNode) {\r\n        if (newNode.data < node.data) {\r\n            if (!node.left) {\r\n                node.left = newNode;\r\n            } else {\r\n                insertNode(node.left, newNode);\r\n            }\r\n        } else {\r\n            if (!node.right) {\r\n                node.right = newNode;\r\n            } else {\r\n                insertNode(node.right, newNode);\r\n            }\r\n        }\r\n    }\r\n    \r\n    insertNode(this.root, newNode);\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Time Complexity: O(log n) average, O(n) worst case"}),"\n",(0,t.jsx)(r.h3,{id:"2-search-node",children:"2. Search Node"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"search(data) {\r\n    function searchNode(node, data) {\r\n        if (!node || node.data === data) {\r\n            return node;\r\n        }\r\n        \r\n        if (data < node.data) {\r\n            return searchNode(node.left, data);\r\n        }\r\n        return searchNode(node.right, data);\r\n    }\r\n    \r\n    return searchNode(this.root, data);\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Time Complexity: O(log n) average, O(n) worst case"}),"\n",(0,t.jsx)(r.h3,{id:"3-delete-node",children:"3. Delete Node"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"delete(data) {\r\n    function findMin(node) {\r\n        while (node.left) {\r\n            node = node.left;\r\n        }\r\n        return node;\r\n    }\r\n    \r\n    function deleteNode(node, data) {\r\n        if (!node) return null;\r\n        \r\n        if (data < node.data) {\r\n            node.left = deleteNode(node.left, data);\r\n        } else if (data > node.data) {\r\n            node.right = deleteNode(node.right, data);\r\n        } else {\r\n            // Node with only one child or no child\r\n            if (!node.left) return node.right;\r\n            if (!node.right) return node.left;\r\n            \r\n            // Node with two children\r\n            const temp = findMin(node.right);\r\n            node.data = temp.data;\r\n            node.right = deleteNode(node.right, temp.data);\r\n        }\r\n        return node;\r\n    }\r\n    \r\n    this.root = deleteNode(this.root, data);\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Time Complexity: O(log n) average, O(n) worst case"}),"\n",(0,t.jsx)(r.h2,{id:"tree-traversal-methods",children:"Tree Traversal Methods"}),"\n",(0,t.jsx)(r.h3,{id:"1-inorder-traversal-left-root-right",children:"1. Inorder Traversal (Left-Root-Right)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"inorderTraversal() {\r\n    const result = [];\r\n    \r\n    function inorder(node) {\r\n        if (node) {\r\n            inorder(node.left);\r\n            result.push(node.data);\r\n            inorder(node.right);\r\n        }\r\n    }\r\n    \r\n    inorder(this.root);\r\n    return result;\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"2-preorder-traversal-root-left-right",children:"2. Preorder Traversal (Root-Left-Right)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"preorderTraversal() {\r\n    const result = [];\r\n    \r\n    function preorder(node) {\r\n        if (node) {\r\n            result.push(node.data);\r\n            preorder(node.left);\r\n            preorder(node.right);\r\n        }\r\n    }\r\n    \r\n    preorder(this.root);\r\n    return result;\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-postorder-traversal-left-right-root",children:"3. Postorder Traversal (Left-Right-Root)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"postorderTraversal() {\r\n    const result = [];\r\n    \r\n    function postorder(node) {\r\n        if (node) {\r\n            postorder(node.left);\r\n            postorder(node.right);\r\n            result.push(node.data);\r\n        }\r\n    }\r\n    \r\n    postorder(this.root);\r\n    return result;\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"4-level-order-traversal-bfs",children:"4. Level Order Traversal (BFS)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"levelOrderTraversal() {\r\n    if (!this.root) return [];\r\n    \r\n    const result = [];\r\n    const queue = [this.root];\r\n    \r\n    while (queue.length) {\r\n        const level = [];\r\n        const levelSize = queue.length;\r\n        \r\n        for (let i = 0; i < levelSize; i++) {\r\n            const node = queue.shift();\r\n            level.push(node.data);\r\n            \r\n            if (node.left) queue.push(node.left);\r\n            if (node.right) queue.push(node.right);\r\n        }\r\n        \r\n        result.push(level);\r\n    }\r\n    \r\n    return result;\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"common-tree-operations",children:"Common Tree Operations"}),"\n",(0,t.jsx)(r.h3,{id:"1-find-height",children:"1. Find Height"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"getHeight() {\r\n    function height(node) {\r\n        if (!node) return 0;\r\n        return 1 + Math.max(height(node.left), height(node.right));\r\n    }\r\n    \r\n    return height(this.root);\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"2-check-if-bst-is-valid",children:"2. Check if BST is Valid"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"isValidBST() {\r\n    function validate(node, min, max) {\r\n        if (!node) return true;\r\n        \r\n        if (node.data <= min || node.data >= max) {\r\n            return false;\r\n        }\r\n        \r\n        return validate(node.left, min, node.data) && \r\n               validate(node.right, node.data, max);\r\n    }\r\n    \r\n    return validate(this.root, -Infinity, Infinity);\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-find-lowest-common-ancestor",children:"3. Find Lowest Common Ancestor"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"findLCA(n1, n2) {\r\n    function findLCANode(node, n1, n2) {\r\n        if (!node) return null;\r\n        \r\n        if (node.data > n1 && node.data > n2) {\r\n            return findLCANode(node.left, n1, n2);\r\n        }\r\n        \r\n        if (node.data < n1 && node.data < n2) {\r\n            return findLCANode(node.right, n1, n2);\r\n        }\r\n        \r\n        return node;\r\n    }\r\n    \r\n    return findLCANode(this.root, n1, n2);\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"4-check-if-tree-is-balanced",children:"4. Check if Tree is Balanced"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"isBalanced() {\r\n    function checkBalance(node) {\r\n        if (!node) return 0;\r\n        \r\n        const leftHeight = checkBalance(node.left);\r\n        if (leftHeight === -1) return -1;\r\n        \r\n        const rightHeight = checkBalance(node.right);\r\n        if (rightHeight === -1) return -1;\r\n        \r\n        if (Math.abs(leftHeight - rightHeight) > 1) return -1;\r\n        \r\n        return 1 + Math.max(leftHeight, rightHeight);\r\n    }\r\n    \r\n    return checkBalance(this.root) !== -1;\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"common-interview-questions",children:"Common Interview Questions"}),"\n",(0,t.jsx)(r.h3,{id:"1-serialize-and-deserialize-binary-tree",children:"1. Serialize and Deserialize Binary Tree"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// Serialize\r\nserialize() {\r\n    if (!this.root) return '[]';\r\n    \r\n    const result = [];\r\n    const queue = [this.root];\r\n    \r\n    while (queue.length) {\r\n        const node = queue.shift();\r\n        if (node) {\r\n            result.push(node.data);\r\n            queue.push(node.left);\r\n            queue.push(node.right);\r\n        } else {\r\n            result.push(null);\r\n        }\r\n    }\r\n    \r\n    while (result[result.length - 1] === null) {\r\n        result.pop();\r\n    }\r\n    \r\n    return JSON.stringify(result);\r\n}\r\n\r\n// Deserialize\r\nstatic deserialize(data) {\r\n    const values = JSON.parse(data);\r\n    if (!values.length) return null;\r\n    \r\n    const tree = new BinarySearchTree();\r\n    tree.root = new Node(values[0]);\r\n    const queue = [tree.root];\r\n    let i = 1;\r\n    \r\n    while (queue.length && i < values.length) {\r\n        const node = queue.shift();\r\n        \r\n        if (i < values.length && values[i] !== null) {\r\n            node.left = new Node(values[i]);\r\n            queue.push(node.left);\r\n        }\r\n        i++;\r\n        \r\n        if (i < values.length && values[i] !== null) {\r\n            node.right = new Node(values[i]);\r\n            queue.push(node.right);\r\n        }\r\n        i++;\r\n    }\r\n    \r\n    return tree;\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"time-complexity-summary",children:"Time Complexity Summary"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Operation"}),(0,t.jsx)(r.th,{children:"Average"}),(0,t.jsx)(r.th,{children:"Worst Case"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Insert"}),(0,t.jsx)(r.td,{children:"O(log n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Delete"}),(0,t.jsx)(r.td,{children:"O(log n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Search"}),(0,t.jsx)(r.td,{children:"O(log n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Traversal (any)"}),(0,t.jsx)(r.td,{children:"O(n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Height"}),(0,t.jsx)(r.td,{children:"O(n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Validate BST"}),(0,t.jsx)(r.td,{children:"O(n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Find LCA"}),(0,t.jsx)(r.td,{children:"O(log n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Check Balance"}),(0,t.jsx)(r.td,{children:"O(n)"}),(0,t.jsx)(r.td,{children:"O(n)"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"const bst = new BinarySearchTree();\r\n\r\n// Insert nodes\r\nbst.insert(8);\r\nbst.insert(3);\r\nbst.insert(10);\r\nbst.insert(1);\r\nbst.insert(6);\r\n\r\n// Traverse\r\nconsole.log(bst.inorderTraversal());    // [1, 3, 6, 8, 10]\r\nconsole.log(bst.preorderTraversal());   // [8, 3, 1, 6, 10]\r\nconsole.log(bst.postorderTraversal());  // [1, 6, 3, 10, 8]\r\n\r\n// Search\r\nconsole.log(bst.search(6));  // Node { data: 6, left: null, right: null }\r\n\r\n// Check if valid BST\r\nconsole.log(bst.isValidBST());  // true\r\n\r\n// Get height\r\nconsole.log(bst.getHeight());  // 3\n"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const i={},d=t.createContext(i);function s(e){const r=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(d.Provider,{value:r},e.children)}}}]);