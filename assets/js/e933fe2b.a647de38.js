"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[8228],{20889:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});var i=s(74848),r=s(28453);const l={},c="Operating Systems Interview",t={id:"Operating System/Operating Systems",title:"Operating Systems Interview",description:"1. Processes vs Threads",source:"@site/docs/Operating System/Operating Systems.mdx",sourceDirName:"Operating System",slug:"/Operating System/Operating Systems",permalink:"/docs/Operating System/Operating Systems",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Operating System/Operating Systems.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Operating System",permalink:"/docs/category/operating-system"},next:{title:"Web Development",permalink:"/docs/category/web-development"}},o={},a=[{value:"1. Processes vs Threads",id:"1-processes-vs-threads",level:2},{value:"Process",id:"process",level:3},{value:"Thread",id:"thread",level:3},{value:"Context Switch",id:"context-switch",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance",level:3},{value:"2. CPU Scheduling",id:"2-cpu-scheduling",level:2},{value:"FCFS (First Come First Serve)",id:"fcfs-first-come-first-serve",level:3},{value:"SJF (Shortest Job First)",id:"sjf-shortest-job-first",level:3},{value:"Round Robin",id:"round-robin",level:3},{value:"Priority Scheduling",id:"priority-scheduling",level:3},{value:"Preemptive vs Non-preemptive",id:"preemptive-vs-non-preemptive",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-1",level:3},{value:"3. Synchronization &amp; Concurrency",id:"3-synchronization--concurrency",level:2},{value:"Race Condition",id:"race-condition",level:3},{value:"Critical Section",id:"critical-section",level:3},{value:"Mutex (Mutual Exclusion Lock)",id:"mutex-mutual-exclusion-lock",level:3},{value:"Semaphore",id:"semaphore",level:3},{value:"Deadlock",id:"deadlock",level:3},{value:"Starvation",id:"starvation",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-2",level:3},{value:"4. Memory Management",id:"4-memory-management",level:2},{value:"Stack vs Heap",id:"stack-vs-heap",level:3},{value:"Virtual Memory",id:"virtual-memory",level:3},{value:"Paging",id:"paging",level:3},{value:"Fragmentation",id:"fragmentation",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-3",level:3},{value:"5. Inter-Process Communication (IPC)",id:"5-inter-process-communication-ipc",level:2},{value:"Pipes",id:"pipes",level:3},{value:"Message Queues",id:"message-queues",level:3},{value:"Shared Memory",id:"shared-memory",level:3},{value:"Sockets",id:"sockets",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-4",level:3},{value:"6. File Systems &amp; I/O",id:"6-file-systems--io",level:2},{value:"File Descriptor",id:"file-descriptor",level:3},{value:"Blocking I/O",id:"blocking-io",level:3},{value:"Non-blocking I/O",id:"non-blocking-io",level:3},{value:"Async I/O",id:"async-io",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-5",level:3},{value:"7. Deadlocks &amp; Solutions",id:"7-deadlocks--solutions",level:2},{value:"Four Conditions (All must hold)",id:"four-conditions-all-must-hold",level:3},{value:"Prevention",id:"prevention",level:3},{value:"Detection",id:"detection",level:3},{value:"Avoidance",id:"avoidance",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-6",level:3},{value:"8. Networking &amp; OS",id:"8-networking--os",level:2},{value:"OSI Layers (Simplified)",id:"osi-layers-simplified",level:3},{value:"TCP vs UDP",id:"tcp-vs-udp",level:3},{value:"TCP Connection States",id:"tcp-connection-states",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-7",level:3},{value:"9. Security &amp; OS",id:"9-security--os",level:2},{value:"User Mode vs Kernel Mode",id:"user-mode-vs-kernel-mode",level:3},{value:"System Calls",id:"system-calls",level:3},{value:"Permissions",id:"permissions",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-8",level:3},{value:"10. Practical Resource Management",id:"10-practical-resource-management",level:2},{value:"Thread Pools",id:"thread-pools",level:3},{value:"Priority Inversion",id:"priority-inversion",level:3},{value:"Context Switching Overhead",id:"context-switching-overhead",level:3},{value:"Full Stack Relevance",id:"full-stack-relevance-9",level:3},{value:"Quick Revision Answers",id:"quick-revision-answers",level:2},{value:"1. Process vs Thread?",id:"1-process-vs-thread",level:3},{value:"2. Mutex vs Semaphore?",id:"2-mutex-vs-semaphore",level:3},{value:"3. Four Conditions of Deadlock?",id:"3-four-conditions-of-deadlock",level:3},{value:"4. Paging vs Segmentation?",id:"4-paging-vs-segmentation",level:3},{value:"5. Blocking vs Non-blocking I/O?",id:"5-blocking-vs-non-blocking-io",level:3},{value:"6. What is TIME_WAIT?",id:"6-what-is-time_wait",level:3},{value:"7. Why Thread Pools Instead of New Thread Per Request?",id:"7-why-thread-pools-instead-of-new-thread-per-request",level:3},{value:"Interview Tips",id:"interview-tips",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"operating-systems-interview",children:"Operating Systems Interview"})}),"\n",(0,i.jsx)(n.h2,{id:"1-processes-vs-threads",children:"1. Processes vs Threads"}),"\n",(0,i.jsx)(n.h3,{id:"process",children:"Process"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"process"})," is an independent execution unit with its own memory space. Each process has:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Separate address space (code, data, heap, stack)"}),"\n",(0,i.jsx)(n.li,{children:"Own file descriptors and resources"}),"\n",(0,i.jsx)(n.li,{children:"Isolated from other processes (security)"}),"\n",(0,i.jsx)(n.li,{children:"Higher overhead to create and manage"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"thread",children:"Thread"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"thread"})," is a lightweight execution unit that exists within a process. Threads share:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Same memory space (code, data, heap)"}),"\n",(0,i.jsx)(n.li,{children:"File descriptors and resources"}),"\n",(0,i.jsx)(n.li,{children:"Lower overhead to create"}),"\n",(0,i.jsx)(n.li,{children:"Each thread has its own stack"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"context-switch",children:"Context Switch"}),"\n",(0,i.jsx)(n.p,{children:"When the CPU switches from executing one process/thread to another:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Save current state (registers, program counter)"}),"\n",(0,i.jsx)(n.li,{children:"Load new state"}),"\n",(0,i.jsx)(n.li,{children:"Resume execution"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cost"}),": Context switching between processes is expensive (memory switching), while thread switches are cheaper (same memory space)."]}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js"}),": Single-threaded event loop with async I/O"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Java"}),": Servlet containers use thread pools (Tomcat, Jetty)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Python"}),": GIL makes true multithreading limited"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Creating a thread in Java\nclass MyTask implements Runnable {\n    @Override\n    public void run() {\n        System.out.println("Thread: " + Thread.currentThread().getName());\n    }\n}\n\npublic class ThreadExample {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(new MyTask());\n        Thread t2 = new Thread(new MyTask());\n        t1.start();\n        t2.start();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-cpu-scheduling",children:"2. CPU Scheduling"}),"\n",(0,i.jsx)(n.h3,{id:"fcfs-first-come-first-serve",children:"FCFS (First Come First Serve)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simple queue-based scheduling"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),": Easy to implement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),": Convoy effect (short jobs wait for long ones)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sjf-shortest-job-first",children:"SJF (Shortest Job First)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Execute shortest job first"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),": Minimizes average waiting time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),": Requires knowing job duration, starvation for long jobs"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"round-robin",children:"Round Robin"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each process gets a time slice (quantum)"}),"\n",(0,i.jsx)(n.li,{children:"Fair for interactive systems"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),": No starvation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),": High context switch overhead if quantum is too small"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"priority-scheduling",children:"Priority Scheduling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Higher priority jobs execute first"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Risk"}),": Low-priority jobs may starve"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Priority aging (gradually increase priority)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"preemptive-vs-non-preemptive",children:"Preemptive vs Non-preemptive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Preemptive"}),": OS can interrupt running process"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Non-preemptive"}),": Process runs until completion or blocks"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-1",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Web servers schedule requests across threads"}),"\n",(0,i.jsx)(n.li,{children:"Understanding scheduling helps optimize server performance"}),"\n",(0,i.jsx)(n.li,{children:"Cloud platforms use priority scheduling for workloads"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-synchronization--concurrency",children:"3. Synchronization & Concurrency"}),"\n",(0,i.jsx)(n.h3,{id:"race-condition",children:"Race Condition"}),"\n",(0,i.jsx)(n.p,{children:"Multiple threads access shared data concurrently, leading to inconsistent results."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Race condition example\nclass Counter {\n    private int count = 0;\n\n    public void increment() {\n        count++; // NOT atomic: read, increment, write\n    }\n\n    public int getCount() {\n        return count;\n    }\n}\n\n// Two threads calling increment() simultaneously can lose updates\n"})}),"\n",(0,i.jsx)(n.h3,{id:"critical-section",children:"Critical Section"}),"\n",(0,i.jsx)(n.p,{children:"Code segment that accesses shared resources and must execute atomically."}),"\n",(0,i.jsx)(n.h3,{id:"mutex-mutual-exclusion-lock",children:"Mutex (Mutual Exclusion Lock)"}),"\n",(0,i.jsxs)(n.p,{children:["Ensures ",(0,i.jsx)(n.strong,{children:"only one thread"})," can access critical section at a time."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class SafeCounter {\n    private int count = 0;\n    private final Object lock = new Object();\n\n    public void increment() {\n        synchronized(lock) { // Mutex\n            count++;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"semaphore",children:"Semaphore"}),"\n",(0,i.jsxs)(n.p,{children:["Allows ",(0,i.jsx)(n.strong,{children:"N threads"})," to access resource simultaneously."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import java.util.concurrent.Semaphore;\n\nclass ConnectionPool {\n    private final Semaphore semaphore = new Semaphore(5); // Max 5 connections\n\n    public void useConnection() throws InterruptedException {\n        semaphore.acquire(); // Wait if all connections busy\n        try {\n            // Use connection\n            System.out.println("Connection acquired");\n        } finally {\n            semaphore.release(); // Release connection\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"deadlock",children:"Deadlock"}),"\n",(0,i.jsx)(n.p,{children:"Circular waiting where no thread can proceed."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Four necessary conditions:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mutual Exclusion"}),": Resource can't be shared"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hold and Wait"}),": Thread holds resource while waiting for another"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Preemption"}),": Resource can't be forcibly taken"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Circular Wait"}),": Chain of threads waiting for each other"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Deadlock example\nclass Account {\n    private int balance;\n\n    public synchronized void transfer(Account to, int amount) {\n        synchronized(to) { // DANGER: Can cause deadlock\n            this.balance -= amount;\n            to.balance += amount;\n        }\n    }\n}\n\n// Thread 1: account1.transfer(account2, 100)\n// Thread 2: account2.transfer(account1, 50)\n// Both acquire first lock, wait for second \u2192 DEADLOCK\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Always acquire locks in same order"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public void transfer(Account to, int amount) {\n    Account first = (this.id < to.id) ? this : to;\n    Account second = (this.id < to.id) ? to : this;\n\n    synchronized(first) {\n        synchronized(second) {\n            this.balance -= amount;\n            to.balance += amount;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"starvation",children:"Starvation"}),"\n",(0,i.jsx)(n.p,{children:"Low-priority thread never gets CPU time."}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-2",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database locks"}),": Row-level vs table-level locking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache race conditions"}),": Redis INCR, check-then-set patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message queues"}),": Producer-consumer synchronization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Distributed systems"}),": Consensus protocols (Raft, Paxos)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-memory-management",children:"4. Memory Management"}),"\n",(0,i.jsx)(n.h3,{id:"stack-vs-heap",children:"Stack vs Heap"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stack:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stores function calls, local variables, return addresses"}),"\n",(0,i.jsx)(n.li,{children:"LIFO (Last In First Out)"}),"\n",(0,i.jsx)(n.li,{children:"Fast allocation/deallocation"}),"\n",(0,i.jsx)(n.li,{children:"Limited size (stack overflow)"}),"\n",(0,i.jsx)(n.li,{children:"Automatic memory management"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Heap:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dynamic memory allocation (objects, arrays)"}),"\n",(0,i.jsx)(n.li,{children:"Slower than stack"}),"\n",(0,i.jsx)(n.li,{children:"Larger size"}),"\n",(0,i.jsx)(n.li,{children:"Manual management (C/C++) or GC (Java, JS)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public void example() {\n    int x = 10;              // Stack\n    String s = new String(); // Reference on stack, object on heap\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"virtual-memory",children:"Virtual Memory"}),"\n",(0,i.jsx)(n.p,{children:"OS creates illusion that each process has entire memory to itself."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Virtual addresses"})," \u2192 mapped to \u2192 ",(0,i.jsx)(n.strong,{children:"Physical RAM"})]}),"\n",(0,i.jsx)(n.li,{children:"Allows running programs larger than available RAM (swap to disk)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"paging",children:"Paging"}),"\n",(0,i.jsx)(n.p,{children:"Memory divided into fixed-size pages (typically 4KB)."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Page Table"}),": Maps virtual pages to physical frames"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Page Fault"}),": Requested page not in RAM (load from disk)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"fragmentation",children:"Fragmentation"}),"\n",(0,i.jsx)(n.p,{children:"Wasted memory space:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Internal"}),": Allocated block larger than needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"External"}),": Free memory scattered (can't allocate contiguous block)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-3",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Garbage Collection"}),": Java/Node.js automatically free unused objects"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory leaks"}),": Forgotten references prevent GC"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OOM errors"}),": Heap exhausted in production"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection pools"}),": Heap memory for database connections"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Memory leak example\nclass LeakyCache {\n    private static Map<String, byte[]> cache = new HashMap<>();\n\n    public void addToCache(String key) {\n        cache.put(key, new byte[1024 * 1024]); // 1MB\n        // Never removed \u2192 memory leak!\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-inter-process-communication-ipc",children:"5. Inter-Process Communication (IPC)"}),"\n",(0,i.jsx)(n.h3,{id:"pipes",children:"Pipes"}),"\n",(0,i.jsx)(n.p,{children:"Unidirectional communication between parent-child processes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Unix pipe example\nls | grep ".txt"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"message-queues",children:"Message Queues"}),"\n",(0,i.jsx)(n.p,{children:"OS-managed queue for messages between processes."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),": Async, decoupled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),": Size limits, kernel overhead"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"shared-memory",children:"Shared Memory"}),"\n",(0,i.jsx)(n.p,{children:"Fastest IPC - processes share memory region."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),": No kernel involvement after setup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),": Requires synchronization (semaphores)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sockets",children:"Sockets"}),"\n",(0,i.jsx)(n.p,{children:"Network or localhost communication."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TCP sockets"}),": Reliable, connection-based"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unix domain sockets"}),": Fast local IPC"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-4",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"REST APIs"}),": HTTP over TCP sockets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"gRPC"}),": HTTP/2 with efficient serialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSockets"}),": Bidirectional real-time communication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message brokers"}),": Kafka, RabbitMQ (queue-based IPC)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redis Pub/Sub"}),": Shared memory alternative"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-file-systems--io",children:"6. File Systems & I/O"}),"\n",(0,i.jsx)(n.h3,{id:"file-descriptor",children:"File Descriptor"}),"\n",(0,i.jsx)(n.p,{children:"Integer handle to open file, socket, or pipe (Unix)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Java abstracts this, but under the hood:\nFileInputStream fis = new FileInputStream("data.txt"); // Gets FD\n'})}),"\n",(0,i.jsx)(n.h3,{id:"blocking-io",children:"Blocking I/O"}),"\n",(0,i.jsx)(n.p,{children:"Thread waits until operation completes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"InputStream in = socket.getInputStream();\nint data = in.read(); // Blocks until data available\n"})}),"\n",(0,i.jsx)(n.h3,{id:"non-blocking-io",children:"Non-blocking I/O"}),"\n",(0,i.jsx)(n.p,{children:"Returns immediately, even if no data."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Java NIO\nSocketChannel channel = SocketChannel.open();\nchannel.configureBlocking(false);\nint bytesRead = channel.read(buffer); // Returns 0 if no data\n"})}),"\n",(0,i.jsx)(n.h3,{id:"async-io",children:"Async I/O"}),"\n",(0,i.jsx)(n.p,{children:"OS notifies when operation completes (callbacks, events)."}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-5",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js event loop"}),": Non-blocking I/O with callbacks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Java NIO"}),": Scalable servers (Netty, Vert.x)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Async/Await"}),": Modern async programming model"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-deadlocks--solutions",children:"7. Deadlocks & Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"four-conditions-all-must-hold",children:"Four Conditions (All must hold)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mutual Exclusion"}),": Resources can't be shared"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hold and Wait"}),": Process holds resources while waiting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Preemption"}),": Can't forcibly take resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Circular Wait"}),": Cycle in resource dependency graph"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"prevention",children:"Prevention"}),"\n",(0,i.jsx)(n.p,{children:"Break at least one condition:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Eliminate Hold & Wait"}),": Request all resources at once"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Allow Preemption"}),": Forcibly take resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Break Circular Wait"}),": Order resources, always acquire in same order"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"detection",children:"Detection"}),"\n",(0,i.jsx)(n.p,{children:"Periodically check for cycles in resource allocation graph."}),"\n",(0,i.jsx)(n.h3,{id:"avoidance",children:"Avoidance"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Banker's Algorithm"}),": Check if granting request leaves system in safe state."]}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-6",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database transactions"}),": ACID properties, lock timeouts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Microservices"}),": Distributed deadlocks (service A calls B, B calls A)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lock-free data structures"}),": Atomic operations (CAS)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-networking--os",children:"8. Networking & OS"}),"\n",(0,i.jsx)(n.h3,{id:"osi-layers-simplified",children:"OSI Layers (Simplified)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Application"}),": HTTP, FTP, SMTP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transport"}),": TCP, UDP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Network"}),": IP, routing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Link"}),": Ethernet, MAC addresses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Physical"}),": Cables, signals"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tcp-vs-udp",children:"TCP vs UDP"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TCP (Transmission Control Protocol):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reliable, ordered delivery"}),"\n",(0,i.jsx)(n.li,{children:"Connection-based (3-way handshake: SYN, SYN-ACK, ACK)"}),"\n",(0,i.jsx)(n.li,{children:"Flow control, congestion control"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use cases"}),": HTTP, FTP, email"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"UDP (User Datagram Protocol):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unreliable, no ordering guarantee"}),"\n",(0,i.jsx)(n.li,{children:"Connectionless"}),"\n",(0,i.jsx)(n.li,{children:"Faster, lower overhead"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use cases"}),": DNS, video streaming, gaming"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tcp-connection-states",children:"TCP Connection States"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TIME_WAIT:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"After closing connection, socket waits (2-4 minutes)"}),"\n",(0,i.jsx)(n.li,{children:"Prevents old packets from interfering with new connections"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Too many connections exhaust available ports"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"CLOSE_WAIT:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remote closed connection, but app hasn't closed socket"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Memory leak, resource exhaustion"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check connection states\nnetstat -an | grep TIME_WAIT\n"})}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-7",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load balancers"}),": L4 (TCP) vs L7 (HTTP)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP keep-alive"}),": Reuse TCP connections"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSockets"}),": Persistent TCP connection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection pooling"}),": Reuse database connections"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"9-security--os",children:"9. Security & OS"}),"\n",(0,i.jsx)(n.h3,{id:"user-mode-vs-kernel-mode",children:"User Mode vs Kernel Mode"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User mode"}),": Restricted access, can't directly access hardware"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kernel mode"}),": Full access to hardware, memory, I/O"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"system-calls",children:"System Calls"}),"\n",(0,i.jsx)(n.p,{children:"Controlled interface to kernel services."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Java hides system calls, but these trigger them:\nFile file = new File("data.txt");\nfile.delete(); // Internally: unlink() system call\n'})}),"\n",(0,i.jsx)(n.p,{children:"Common system calls:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"read()"}),", ",(0,i.jsx)(n.code,{children:"write()"}),": File I/O"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fork()"}),", ",(0,i.jsx)(n.code,{children:"exec()"}),": Process creation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"socket()"}),", ",(0,i.jsx)(n.code,{children:"bind()"}),": Network operations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"permissions",children:"Permissions"}),"\n",(0,i.jsx)(n.p,{children:"File access control (Unix):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"-rw-r--r-- 1 user group 1024 Jan 1 12:00 file.txt\n# Owner: read/write\n# Group: read\n# Others: read\n"})}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-8",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File uploads"}),": Validate, sanitize, check permissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Container security"}),": Namespaces, cgroups isolate processes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auth checks"}),": JWT, OAuth tokens before file access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sandboxing"}),": Docker, VMs isolate applications"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"10-practical-resource-management",children:"10. Practical Resource Management"}),"\n",(0,i.jsx)(n.h3,{id:"thread-pools",children:"Thread Pools"}),"\n",(0,i.jsx)(n.p,{children:"Reuse threads instead of creating new ones per task."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import java.util.concurrent.*;\n\nclass ServerHandler {\n    private final ExecutorService threadPool = Executors.newFixedThreadPool(10);\n\n    public void handleRequest(Runnable task) {\n        threadPool.submit(task); // Reuses threads\n    }\n\n    public void shutdown() {\n        threadPool.shutdown();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Avoid thread creation overhead"}),"\n",(0,i.jsx)(n.li,{children:"Limit concurrency (prevent resource exhaustion)"}),"\n",(0,i.jsx)(n.li,{children:"Better performance under load"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"priority-inversion",children:"Priority Inversion"}),"\n",(0,i.jsx)(n.p,{children:"High-priority thread waits for low-priority thread holding lock."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Priority inheritance (low-priority thread temporarily gets high priority)"]}),"\n",(0,i.jsx)(n.h3,{id:"context-switching-overhead",children:"Context Switching Overhead"}),"\n",(0,i.jsx)(n.p,{children:"Frequent context switches waste CPU cycles."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimization:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use thread pools (fewer context switches)"}),"\n",(0,i.jsx)(n.li,{children:"Async I/O (don't block threads)"}),"\n",(0,i.jsx)(n.li,{children:"Keep thread count close to CPU cores for CPU-bound tasks"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"full-stack-relevance-9",children:"Full Stack Relevance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Java Executors"}),": ThreadPoolExecutor for web servers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js libuv"}),": Thread pool for file I/O"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database connection pools"}),": HikariCP, c3p0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kubernetes"}),": Resource limits (CPU, memory)"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Configuring thread pool\nThreadPoolExecutor executor = new ThreadPoolExecutor(\n    10,  // Core threads\n    50,  // Max threads\n    60L, TimeUnit.SECONDS, // Keep-alive\n    new LinkedBlockingQueue<>(100) // Queue size\n);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"quick-revision-answers",children:"Quick Revision Answers"}),"\n",(0,i.jsx)(n.h3,{id:"1-process-vs-thread",children:"1. Process vs Thread?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process"}),": Independent, separate memory, high overhead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread"}),": Lives in process, shared memory, low overhead"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-mutex-vs-semaphore",children:"2. Mutex vs Semaphore?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mutex"}),": Binary lock (1 thread at a time)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semaphore"}),": Counter lock (N threads at a time)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-four-conditions-of-deadlock",children:"3. Four Conditions of Deadlock?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Mutual Exclusion"}),"\n",(0,i.jsx)(n.li,{children:"Hold and Wait"}),"\n",(0,i.jsx)(n.li,{children:"No Preemption"}),"\n",(0,i.jsx)(n.li,{children:"Circular Wait"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-paging-vs-segmentation",children:"4. Paging vs Segmentation?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Paging"}),": Fixed-size blocks, eliminates external fragmentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Segmentation"}),": Variable-size logical units (code, stack, heap)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-blocking-vs-non-blocking-io",children:"5. Blocking vs Non-blocking I/O?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blocking"}),": Thread waits until operation completes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Non-blocking"}),": Returns immediately, check later (polling/callbacks)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"6-what-is-time_wait",children:"6. What is TIME_WAIT?"}),"\n",(0,i.jsx)(n.p,{children:"TCP state after closing connection (waits 2-4 minutes) to prevent old packets interfering with new connections. Too many TIME_WAIT sockets exhaust ports."}),"\n",(0,i.jsx)(n.h3,{id:"7-why-thread-pools-instead-of-new-thread-per-request",children:"7. Why Thread Pools Instead of New Thread Per Request?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Thread creation is expensive (memory, kernel calls)"}),"\n",(0,i.jsx)(n.li,{children:"Context switching overhead"}),"\n",(0,i.jsx)(n.li,{children:"Resource exhaustion with many threads"}),"\n",(0,i.jsx)(n.li,{children:"Thread pools reuse threads, limit concurrency"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"interview-tips",children:"Interview Tips"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common Scenarios:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"How does Node.js handle concurrency?" \u2192 Single-threaded event loop with async I/O'}),"\n",(0,i.jsx)(n.li,{children:'"How to prevent race conditions in cache?" \u2192 Use atomic operations (Redis INCR) or locks'}),"\n",(0,i.jsx)(n.li,{children:'"Database deadlock?" \u2192 Lock ordering, timeouts, retry logic'}),"\n",(0,i.jsx)(n.li,{children:'"Memory leak in production?" \u2192 Heap dump analysis, weak references, connection pools'}),"\n",(0,i.jsx)(n.li,{children:'"Server running out of connections?" \u2192 Check TIME_WAIT, increase limits, connection pooling'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Best Practices:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always acquire locks in consistent order"}),"\n",(0,i.jsx)(n.li,{children:"Use thread pools for scalability"}),"\n",(0,i.jsx)(n.li,{children:"Prefer async I/O for I/O-bound tasks"}),"\n",(0,i.jsx)(n.li,{children:"Monitor resource usage (threads, memory, connections)"}),"\n",(0,i.jsx)(n.li,{children:"Implement timeouts to prevent indefinite blocking"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(96540);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);