"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3854],{11045:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(74848),i=r(28453);const a={},s="Java Arrays and Strings",l={id:"Java/ArraysAndStrings",title:"Java Arrays and Strings",description:"Table of Contents",source:"@site/docs/Java/ArraysAndStrings.mdx",sourceDirName:"Java",slug:"/Java/ArraysAndStrings",permalink:"/dev.enigma/docs/Java/ArraysAndStrings",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/ArraysAndStrings.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ArrayDeque in Java",permalink:"/dev.enigma/docs/Java/ArrayDeque in Java"},next:{title:"Docker Basics for Spring Boot Applications",permalink:"/dev.enigma/docs/Java/Docker Basics for Spring Boot Applications"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Array Basics",id:"array-basics",level:3},{value:"Declaration and Initialization",id:"declaration-and-initialization",level:4},{value:"Basic Array Operations",id:"basic-array-operations",level:4},{value:"Array Copying",id:"array-copying",level:4},{value:"Arrays Class Utility Methods",id:"arrays-class-utility-methods",level:2},{value:"Sorting",id:"sorting",level:3},{value:"Searching",id:"searching",level:3},{value:"Comparison and Equality",id:"comparison-and-equality",level:3},{value:"Filling Arrays",id:"filling-arrays",level:3},{value:"Conversion and String Representation",id:"conversion-and-string-representation",level:3},{value:"Advanced Array Operations",id:"advanced-array-operations",level:3},{value:"Strings",id:"strings",level:2},{value:"String Basics",id:"string-basics",level:3},{value:"Creation and Immutability",id:"creation-and-immutability",level:4},{value:"Basic String Operations",id:"basic-string-operations",level:3},{value:"Length and Character Access",id:"length-and-character-access",level:4},{value:"String Comparison",id:"string-comparison",level:4},{value:"String Searching",id:"string-searching",level:4},{value:"String Modification (Returns New String)",id:"string-modification-returns-new-string",level:4},{value:"String Splitting and Joining",id:"string-splitting-and-joining",level:4},{value:"String Formatting",id:"string-formatting",level:3},{value:"printf-style Formatting",id:"printf-style-formatting",level:4},{value:"Text Blocks (Java 15+)",id:"text-blocks-java-15",level:4},{value:"String Conversion",id:"string-conversion",level:3},{value:"StringBuilder and StringBuffer",id:"stringbuilder-and-stringbuffer",level:2},{value:"StringBuilder (Single-threaded, Recommended)",id:"stringbuilder-single-threaded-recommended",level:3},{value:"StringBuffer (Thread-safe)",id:"stringbuffer-thread-safe",level:3},{value:"Performance Comparison",id:"performance-comparison",level:3},{value:"Common DSA Patterns",id:"common-dsa-patterns",level:2},{value:"Array Patterns",id:"array-patterns",level:3},{value:"Two Pointers",id:"two-pointers",level:4},{value:"Sliding Window",id:"sliding-window",level:4},{value:"Prefix Sum",id:"prefix-sum",level:4},{value:"String Patterns",id:"string-patterns",level:3},{value:"Palindromes",id:"palindromes",level:4},{value:"Anagrams",id:"anagrams",level:4},{value:"Pattern Matching",id:"pattern-matching",level:4},{value:"Character Frequency Patterns",id:"character-frequency-patterns",level:3},{value:"Array Rotation and Reversal",id:"array-rotation-and-reversal",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Array Performance",id:"array-performance",level:3},{value:"String Performance",id:"string-performance",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Array Best Practices",id:"array-best-practices",level:3},{value:"Initialization and Declaration",id:"initialization-and-declaration",level:4},{value:"Bounds Checking and Safety",id:"bounds-checking-and-safety",level:4},{value:"Array Utilities Usage",id:"array-utilities-usage",level:4},{value:"String Best Practices",id:"string-best-practices",level:3},{value:"String Creation and Immutability",id:"string-creation-and-immutability",level:4},{value:"String Comparison and Validation",id:"string-comparison-and-validation",level:4},{value:"String Processing Efficiency",id:"string-processing-efficiency",level:4},{value:"Memory Management",id:"memory-management",level:3},{value:"Array Memory Optimization",id:"array-memory-optimization",level:4},{value:"String Memory Optimization",id:"string-memory-optimization",level:4},{value:"Error Handling and Edge Cases",id:"error-handling-and-edge-cases",level:3},{value:"Array Error Handling",id:"array-error-handling",level:4},{value:"String Error Handling",id:"string-error-handling",level:4},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Regular Expressions with Strings",id:"regular-expressions-with-strings",level:3},{value:"Character Encoding and Internationalization",id:"character-encoding-and-internationalization",level:3},{value:"Memory-Efficient String Operations",id:"memory-efficient-string-operations",level:3},{value:"Testing and Debugging",id:"testing-and-debugging",level:2},{value:"Array Testing Patterns",id:"array-testing-patterns",level:3},{value:"String Testing Patterns",id:"string-testing-patterns",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"java-arrays-and-strings",children:"Java Arrays and Strings"})}),"\n",(0,t.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#arrays",children:"Arrays"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#arrays-class-utility-methods",children:"Arrays Class Utility Methods"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#strings",children:"Strings"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#stringbuilder-and-stringbuffer",children:"StringBuilder and StringBuffer"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#string-formatting",children:"String Formatting"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#common-dsa-patterns",children:"Common DSA Patterns"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#performance-considerations",children:"Performance Considerations"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"arrays",children:"Arrays"}),"\n",(0,t.jsx)(e.h3,{id:"array-basics",children:"Array Basics"}),"\n",(0,t.jsx)(e.h4,{id:"declaration-and-initialization",children:"Declaration and Initialization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Declaration\nint[] arr1;                    // Preferred style\nint arr2[];                    // Alternative style\n\n// Initialization\nint[] numbers = new int[5];    // Size 5, all elements = 0\nint[] values = {1, 2, 3, 4, 5}; // Array literal\nint[] copy = new int[]{1, 2, 3, 4, 5}; // Explicit array creation\n\n// Different types\nString[] names = new String[3];\nboolean[] flags = new boolean[10]; // All false by default\ndouble[] prices = {19.99, 29.99, 39.99};\n\n// Multidimensional arrays\nint[][] matrix = new int[3][4];    // 3x4 matrix\nint[][] jaggedArray = new int[3][]; // Jagged array\njaggedArray[0] = new int[2];\njaggedArray[1] = new int[4];\njaggedArray[2] = new int[3];\n\n// Array of arrays initialization\nint[][] grid = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n};\n"})}),"\n",(0,t.jsx)(e.h4,{id:"basic-array-operations",children:"Basic Array Operations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'int[] arr = {10, 20, 30, 40, 50};\n\n// Access elements\nint first = arr[0];           // 10\nint last = arr[arr.length - 1]; // 50\n\n// Modify elements\narr[2] = 35;                  // [10, 20, 35, 40, 50]\n\n// Array length\nint size = arr.length;        // 5 (property, not method)\n\n// Iteration\n// Enhanced for loop (recommended)\nfor (int num : arr) {\n    System.out.println(num);\n}\n\n// Traditional for loop\nfor (int i = 0; i < arr.length; i++) {\n    System.out.println("Index " + i + ": " + arr[i]);\n}\n\n// Reverse iteration\nfor (int i = arr.length - 1; i >= 0; i--) {\n    System.out.println(arr[i]);\n}\n\n// Using streams\nArrays.stream(arr).forEach(System.out::println);\n'})}),"\n",(0,t.jsx)(e.h4,{id:"array-copying",children:"Array Copying"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"int[] original = {1, 2, 3, 4, 5};\n\n// Method 1: System.arraycopy()\nint[] copy1 = new int[5];\nSystem.arraycopy(original, 0, copy1, 0, original.length);\n\n// Method 2: Arrays.copyOf()\nint[] copy2 = Arrays.copyOf(original, original.length);\n\n// Method 3: Arrays.copyOfRange()\nint[] partial = Arrays.copyOfRange(original, 1, 4); // [2, 3, 4]\n\n// Method 4: clone() - shallow copy\nint[] copy3 = original.clone();\n\n// For 2D arrays - deep copy needed\nint[][] matrix2D = {{1, 2}, {3, 4}};\nint[][] deepCopy = new int[matrix2D.length][];\nfor (int i = 0; i < matrix2D.length; i++) {\n    deepCopy[i] = matrix2D[i].clone();\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"arrays-class-utility-methods",children:"Arrays Class Utility Methods"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"java.util.Arrays"})," class provides many utility methods for array operations."]}),"\n",(0,t.jsx)(e.h3,{id:"sorting",children:"Sorting"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'int[] numbers = {3, 1, 4, 1, 5, 9, 2, 6};\n\n// Sort entire array\nArrays.sort(numbers);\nSystem.out.println(Arrays.toString(numbers)); // [1, 1, 2, 3, 4, 5, 6, 9]\n\n// Sort partial array\nint[] partial = {5, 2, 8, 1, 9};\nArrays.sort(partial, 1, 4); // Sort from index 1 to 3\nSystem.out.println(Arrays.toString(partial)); // [5, 1, 2, 8, 9]\n\n// Sort with custom comparator\nString[] words = {"apple", "pie", "banana", "cherry"};\nArrays.sort(words, (a, b) -> a.length() - b.length());\nSystem.out.println(Arrays.toString(words)); // [pie, apple, banana, cherry]\n\n// Reverse sort\nInteger[] nums = {3, 1, 4, 1, 5, 9, 2, 6};\nArrays.sort(nums, Collections.reverseOrder());\nSystem.out.println(Arrays.toString(nums)); // [9, 6, 5, 4, 3, 2, 1, 1]\n\n// Sort 2D array by first element\nint[][] pairs = {{3, 4}, {1, 2}, {5, 6}};\nArrays.sort(pairs, (a, b) -> a[0] - b[0]);\n// Result: [[1, 2], [3, 4], [5, 6]]\n'})}),"\n",(0,t.jsx)(e.h3,{id:"searching",children:"Searching"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'int[] sorted = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n// Binary search (array must be sorted)\nint index = Arrays.binarySearch(sorted, 5); // Returns 4\nint notFound = Arrays.binarySearch(sorted, 10); // Returns negative value\n\n// Binary search in range\nint rangeIndex = Arrays.binarySearch(sorted, 2, 7, 5); // Search in index 2-6\n\n// Custom comparator search\nString[] sortedWords = {"apple", "banana", "cherry", "date"};\nint wordIndex = Arrays.binarySearch(sortedWords, "cherry"); // Returns 2\n\n// Linear search (for unsorted arrays)\npublic static int linearSearch(int[] arr, int target) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == target) return i;\n    }\n    return -1;\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"comparison-and-equality",children:"Comparison and Equality"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"int[] arr1 = {1, 2, 3, 4, 5};\nint[] arr2 = {1, 2, 3, 4, 5};\nint[] arr3 = {1, 2, 3, 4, 6};\n\n// Compare arrays\nboolean equal = Arrays.equals(arr1, arr2); // true\nboolean notEqual = Arrays.equals(arr1, arr3); // false\n\n// Compare 2D arrays\nint[][] matrix1 = {{1, 2}, {3, 4}};\nint[][] matrix2 = {{1, 2}, {3, 4}};\nboolean deepEqual = Arrays.deepEquals(matrix1, matrix2); // true\n\n// Compare lexicographically\nint result = Arrays.compare(arr1, arr3); // negative (arr1 < arr3)\n\n// Mismatch - find first difference (Java 9+)\nint mismatchIndex = Arrays.mismatch(arr1, arr3); // Returns 4\n"})}),"\n",(0,t.jsx)(e.h3,{id:"filling-arrays",children:"Filling Arrays"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"int[] arr = new int[10];\n\n// Fill entire array\nArrays.fill(arr, 42);\nSystem.out.println(Arrays.toString(arr)); // [42, 42, 42, ...]\n\n// Fill partial array\nArrays.fill(arr, 2, 7, 99); // Fill index 2-6 with 99\nSystem.out.println(Arrays.toString(arr)); // [42, 42, 99, 99, 99, 99, 99, 42, 42, 42]\n\n// Fill 2D array\nint[][] matrix = new int[3][4];\nfor (int[] row : matrix) {\n    Arrays.fill(row, 1);\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"conversion-and-string-representation",children:"Conversion and String Representation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'int[] numbers = {1, 2, 3, 4, 5};\n\n// Convert to string\nString arrayStr = Arrays.toString(numbers); // "[1, 2, 3, 4, 5]"\n\n// Convert 2D array to string\nint[][] matrix = {{1, 2}, {3, 4}};\nString matrixStr = Arrays.deepToString(matrix); // "[[1, 2], [3, 4]]"\n\n// Convert to List\nList<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n// Note: This creates a fixed-size list backed by the array\n\n// Convert to Stream\nIntStream stream = Arrays.stream(numbers);\nStream<Integer> boxedStream = Arrays.stream(numbers).boxed();\n\n// Convert array to set\nSet<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n'})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-array-operations",children:"Advanced Array Operations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Parallel sorting (for large arrays)\nint[] largeArray = new int[1000000];\n// ... fill array\nArrays.parallelSort(largeArray);\n\n// Parallel prefix (cumulative operations)\nint[] values = {1, 2, 3, 4, 5};\nArrays.parallelPrefix(values, Integer::sum);\nSystem.out.println(Arrays.toString(values)); // [1, 3, 6, 10, 15] (cumulative sum)\n\n// Set all elements using generator function\nint[] generated = new int[10];\nArrays.setAll(generated, i -> i * 2); // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n// Parallel set all\nArrays.parallelSetAll(generated, i -> i * i); // [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"strings",children:"Strings"}),"\n",(0,t.jsx)(e.h3,{id:"string-basics",children:"String Basics"}),"\n",(0,t.jsx)(e.h4,{id:"creation-and-immutability",children:"Creation and Immutability"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// String creation\nString str1 = "Hello";           // String literal (stored in string pool)\nString str2 = new String("Hello"); // New object in heap\nString str3 = "Hello";           // Refers to same object as str1\n\n// Immutability demonstration\nString original = "Hello";\nString modified = original.concat(" World"); // Creates new string\nSystem.out.println(original); // Still "Hello"\nSystem.out.println(modified); // "Hello World"\n\n// String from char array\nchar[] chars = {\'H\', \'e\', \'l\', \'l\', \'o\'};\nString fromChars = new String(chars);\n\n// String from bytes\nbyte[] bytes = {72, 101, 108, 108, 111}; // ASCII values for "Hello"\nString fromBytes = new String(bytes);\n'})}),"\n",(0,t.jsx)(e.h3,{id:"basic-string-operations",children:"Basic String Operations"}),"\n",(0,t.jsx)(e.h4,{id:"length-and-character-access",children:"Length and Character Access"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String text = "Hello World";\n\n// Length\nint length = text.length();      // 11\n\n// Character access\nchar first = text.charAt(0);     // \'H\'\nchar last = text.charAt(length - 1); // \'d\'\n\n// Character array\nchar[] charArray = text.toCharArray();\n\n// Code points (for Unicode)\nint codePoint = text.codePointAt(0); // Unicode code point\n\n// Iterate through characters\nfor (int i = 0; i < text.length(); i++) {\n    char ch = text.charAt(i);\n    System.out.println("Char at " + i + ": " + ch);\n}\n\n// Enhanced for with char array\nfor (char ch : text.toCharArray()) {\n    System.out.println(ch);\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-comparison",children:"String Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String str1 = "hello";\nString str2 = "Hello";\nString str3 = "hello";\nString str4 = new String("hello");\n\n// Equality\nboolean equal1 = str1.equals(str3);        // true\nboolean equal2 = str1.equals(str2);        // false (case-sensitive)\nboolean equal3 = str1.equalsIgnoreCase(str2); // true\nboolean equal4 = str1 == str3;             // true (same reference)\nboolean equal5 = str1 == str4;             // false (different objects)\n\n// Comparison\nint result1 = str1.compareTo(str2);        // positive (h > H in ASCII)\nint result2 = str1.compareToIgnoreCase(str2); // 0 (equal ignoring case)\n\n// Starts with / ends with\nboolean starts = str1.startsWith("hel");   // true\nboolean ends = str1.endsWith("llo");       // true\nboolean startsAt = str1.startsWith("llo", 2); // true (from index 2)\n\n// Contains\nboolean contains = text.contains("World"); // true\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-searching",children:"String Searching"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String text = "Hello World Hello";\n\n// Find first occurrence\nint firstIndex = text.indexOf(\'o\');        // 4\nint firstHello = text.indexOf("Hello");    // 0\nint notFound = text.indexOf(\'z\');          // -1\n\n// Find from specific index\nint secondO = text.indexOf(\'o\', 5);        // 7\nint secondHello = text.indexOf("Hello", 1); // 12\n\n// Find last occurrence\nint lastO = text.lastIndexOf(\'o\');         // 16\nint lastHello = text.lastIndexOf("Hello"); // 12\n\n// Check if empty\nboolean isEmpty = text.isEmpty();          // false\nboolean isBlank = text.isBlank();          // false (Java 11+)\nboolean blankCheck = "   ".isBlank();      // true (Java 11+)\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-modification-returns-new-string",children:"String Modification (Returns New String)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String original = "  Hello World  ";\n\n// Case conversion\nString upper = original.toUpperCase();     // "  HELLO WORLD  "\nString lower = original.toLowerCase();     // "  hello world  "\n\n// Trimming\nString trimmed = original.trim();          // "Hello World"\nString stripped = original.strip();        // "Hello World" (Java 11+, Unicode-aware)\nString leadingStripped = original.stripLeading(); // "Hello World  " (Java 11+)\nString trailingStripped = original.stripTrailing(); // "  Hello World" (Java 11+)\n\n// Substrings\nString sub1 = original.substring(2);       // "Hello World  "\nString sub2 = original.substring(2, 7);    // "Hello"\n\n// Replace\nString replaced1 = original.replace(\'l\', \'x\');        // "  HexxO Worxd  "\nString replaced2 = original.replace("World", "Java"); // "  Hello Java  "\nString replacedAll = original.replaceAll("l+", "L");  // "  HeLo WorLd  " (regex)\nString replacedFirst = original.replaceFirst("l", "L"); // "  HeLlo World  "\n\n// Concatenation\nString concat1 = original.concat(" - End");\nString concat2 = original + " - End";      // Using + operator\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-splitting-and-joining",children:"String Splitting and Joining"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String data = "apple,banana,cherry,date";\n\n// Split\nString[] fruits = data.split(",");         // ["apple", "banana", "cherry", "date"]\nString[] limited = data.split(",", 2);     // ["apple", "banana,cherry,date"]\n\n// Split with regex\nString text = "one1two2three3four";\nString[] parts = text.split("\\\\d+");       // ["one", "two", "three", "four"]\n\n// Join (Java 8+)\nString joined = String.join(", ", fruits); // "apple, banana, cherry, date"\nString joined2 = String.join(" | ", "a", "b", "c"); // "a | b | c"\n\n// Lines (Java 11+)\nString multiline = "line1\\nline2\\nline3";\nmultiline.lines().forEach(System.out::println);\n'})}),"\n",(0,t.jsx)(e.h3,{id:"string-formatting",children:"String Formatting"}),"\n",(0,t.jsx)(e.h4,{id:"printf-style-formatting",children:"printf-style Formatting"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String name = "Alice";\nint age = 25;\ndouble salary = 50000.75;\n\n// Format method\nString formatted = String.format("Name: %s, Age: %d, Salary: $%.2f", name, age, salary);\n// "Name: Alice, Age: 25, Salary: $50000.75"\n\n// Common format specifiers\nString str = String.format("%s", "text");           // String\nString integer = String.format("%d", 42);           // Decimal integer\nString hex = String.format("%x", 255);              // Hexadecimal (ff)\nString octal = String.format("%o", 8);              // Octal (10)\nString floatStr = String.format("%.2f", 3.14159);   // Float with 2 decimals\nString scientific = String.format("%e", 1000.0);    // Scientific notation\nString percentage = String.format("%.1%%", 85.7);   // Percentage\n\n// Width and alignment\nString padded = String.format("%10s", "hello");     // Right-aligned in 10 chars\nString leftPadded = String.format("%-10s", "hello"); // Left-aligned in 10 chars\nString zeroPadded = String.format("%05d", 42);      // Zero-padded: "00042"\n\n// Argument index\nString indexed = String.format("%2$s %1$s", "World", "Hello"); // "Hello World"\n'})}),"\n",(0,t.jsx)(e.h4,{id:"text-blocks-java-15",children:"Text Blocks (Java 15+)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'String json = """\n    {\n        "name": "Alice",\n        "age": 25,\n        "skills": ["Java", "Python", "JavaScript"]\n    }\n    """;\n\nString sql = """\n    SELECT name, age, department\n    FROM employees\n    WHERE age > 25\n    AND department = \'Engineering\'\n    ORDER BY name\n    """;\n'})}),"\n",(0,t.jsx)(e.h3,{id:"string-conversion",children:"String Conversion"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// From primitives\nString fromInt = String.valueOf(42);\nString fromDouble = String.valueOf(3.14);\nString fromBoolean = String.valueOf(true);\nString fromChar = String.valueOf(\'A\');\n\n// To primitives\nint toInt = Integer.parseInt("42");\ndouble toDouble = Double.parseDouble("3.14");\nboolean toBoolean = Boolean.parseBoolean("true");\n\n// With error handling\ntry {\n    int value = Integer.parseInt("invalid");\n} catch (NumberFormatException e) {\n    System.out.println("Invalid number format");\n}\n\n// Using wrapper classes\nInteger intObject = Integer.valueOf("42");\nDouble doubleObject = Double.valueOf("3.14");\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"stringbuilder-and-stringbuffer",children:"StringBuilder and StringBuffer"}),"\n",(0,t.jsx)(e.h3,{id:"stringbuilder-single-threaded-recommended",children:"StringBuilder (Single-threaded, Recommended)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'StringBuilder sb = new StringBuilder();\n\n// Append operations\nsb.append("Hello");\nsb.append(\' \');\nsb.append("World");\nsb.append(42);\nsb.append(3.14);\n\n// Method chaining\nStringBuilder chained = new StringBuilder()\n    .append("Hello")\n    .append(" ")\n    .append("World");\n\n// Insert\nsb.insert(5, " Beautiful"); // Insert at index 5\n\n// Delete\nsb.delete(5, 15);           // Delete from index 5 to 14\nsb.deleteCharAt(5);         // Delete character at index 5\n\n// Replace\nsb.replace(0, 5, "Hi");     // Replace "Hello" with "Hi"\n\n// Reverse\nsb.reverse();               // Reverse the entire string\n\n// Convert to String\nString result = sb.toString();\n\n// Capacity management\nint capacity = sb.capacity();\nsb.ensureCapacity(100);     // Ensure capacity of at least 100\nsb.trimToSize();            // Trim capacity to current length\n\n// Length operations\nint length = sb.length();\nsb.setLength(10);           // Truncate or pad to length 10\n\n// Character access and modification\nchar ch = sb.charAt(0);\nsb.setCharAt(0, \'h\');       // Change character at index 0\n'})}),"\n",(0,t.jsx)(e.h3,{id:"stringbuffer-thread-safe",children:"StringBuffer (Thread-safe)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// StringBuffer has the same API as StringBuilder but is synchronized\nStringBuffer buffer = new StringBuffer();\nbuffer.append("Thread-safe");\nbuffer.append(" operations");\nString result = buffer.toString();\n'})}),"\n",(0,t.jsx)(e.h3,{id:"performance-comparison",children:"Performance Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u274c Inefficient - creates many intermediate strings\nString result = "";\nfor (int i = 0; i < 1000; i++) {\n    result += "number " + i + " ";\n}\n\n// \u2705 Efficient - uses mutable buffer\nStringBuilder sb = new StringBuilder();\nfor (int i = 0; i < 1000; i++) {\n    sb.append("number ").append(i).append(" ");\n}\nString result = sb.toString();\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"common-dsa-patterns",children:"Common DSA Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"array-patterns",children:"Array Patterns"}),"\n",(0,t.jsx)(e.h4,{id:"two-pointers",children:"Two Pointers"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Find pair with target sum in sorted array\npublic boolean hasTwoSum(int[] arr, int target) {\n    int left = 0, right = arr.length - 1;\n\n    while (left < right) {\n        int sum = arr[left] + arr[right];\n        if (sum == target) return true;\n        else if (sum < target) left++;\n        else right--;\n    }\n    return false;\n}\n\n// Remove duplicates in sorted array\npublic int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n\n    int writeIndex = 1;\n    for (int i = 1; i < nums.length; i++) {\n        if (nums[i] != nums[i - 1]) {\n            nums[writeIndex] = nums[i];\n            writeIndex++;\n        }\n    }\n    return writeIndex;\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"sliding-window",children:"Sliding Window"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Maximum sum subarray of size k\npublic int maxSumSubarray(int[] arr, int k) {\n    if (arr.length < k) return -1;\n\n    // Calculate sum of first window\n    int windowSum = 0;\n    for (int i = 0; i < k; i++) {\n        windowSum += arr[i];\n    }\n\n    int maxSum = windowSum;\n\n    // Slide the window\n    for (int i = k; i < arr.length; i++) {\n        windowSum = windowSum - arr[i - k] + arr[i];\n        maxSum = Math.max(maxSum, windowSum);\n    }\n\n    return maxSum;\n}\n\n// Longest substring without repeating characters\npublic int lengthOfLongestSubstring(String s) {\n    Set<Character> set = new HashSet<>();\n    int left = 0, maxLength = 0;\n\n    for (int right = 0; right < s.length(); right++) {\n        while (set.contains(s.charAt(right))) {\n            set.remove(s.charAt(left));\n            left++;\n        }\n        set.add(s.charAt(right));\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n\n    return maxLength;\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"prefix-sum",children:"Prefix Sum"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Range sum query\nclass PrefixSum {\n    private int[] prefixSum;\n\n    public PrefixSum(int[] nums) {\n        prefixSum = new int[nums.length + 1];\n        for (int i = 0; i < nums.length; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n    }\n\n    public int rangeSum(int left, int right) {\n        return prefixSum[right + 1] - prefixSum[left];\n    }\n}\n\n// Subarray sum equals K\npublic int subarraySum(int[] nums, int k) {\n    Map<Integer, Integer> prefixSumCount = new HashMap<>();\n    prefixSumCount.put(0, 1);\n\n    int count = 0, prefixSum = 0;\n\n    for (int num : nums) {\n        prefixSum += num;\n        count += prefixSumCount.getOrDefault(prefixSum - k, 0);\n        prefixSumCount.put(prefixSum, prefixSumCount.getOrDefault(prefixSum, 0) + 1);\n    }\n\n    return count;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"string-patterns",children:"String Patterns"}),"\n",(0,t.jsx)(e.h4,{id:"palindromes",children:"Palindromes"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Check if string is palindrome\npublic boolean isPalindrome(String s) {\n    int left = 0, right = s.length() - 1;\n\n    while (left < right) {\n        if (s.charAt(left) != s.charAt(right)) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n// Longest palindromic substring\npublic String longestPalindrome(String s) {\n    if (s == null || s.length() < 2) return s;\n\n    int start = 0, maxLen = 1;\n\n    for (int i = 0; i < s.length(); i++) {\n        // Check for odd length palindromes\n        int len1 = expandAroundCenter(s, i, i);\n        // Check for even length palindromes\n        int len2 = expandAroundCenter(s, i, i + 1);\n\n        int len = Math.max(len1, len2);\n        if (len > maxLen) {\n            maxLen = len;\n            start = i - (len - 1) / 2;\n        }\n    }\n\n    return s.substring(start, start + maxLen);\n}\n\nprivate int expandAroundCenter(String s, int left, int right) {\n    while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n        left--;\n        right++;\n    }\n    return right - left - 1;\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"anagrams",children:"Anagrams"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Check if two strings are anagrams\npublic boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) return false;\n\n    int[] count = new int[26];\n\n    for (int i = 0; i < s.length(); i++) {\n        count[s.charAt(i) - 'a']++;\n        count[t.charAt(i) - 'a']--;\n    }\n\n    for (int c : count) {\n        if (c != 0) return false;\n    }\n\n    return true;\n}\n\n// Group anagrams\npublic List<List<String>> groupAnagrams(String[] strs) {\n    Map<String, List<String>> map = new HashMap<>();\n\n    for (String str : strs) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        String sorted = new String(chars);\n\n        map.computeIfAbsent(sorted, k -> new ArrayList<>()).add(str);\n    }\n\n    return new ArrayList<>(map.values());\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"pattern-matching",children:"Pattern Matching"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// KMP Pattern Matching\npublic int strStr(String haystack, String needle) {\n    if (needle.isEmpty()) return 0;\n\n    int[] lps = computeLPS(needle);\n    int i = 0, j = 0; // i for haystack, j for needle\n\n    while (i < haystack.length()) {\n        if (haystack.charAt(i) == needle.charAt(j)) {\n            i++;\n            j++;\n        }\n\n        if (j == needle.length()) {\n            return i - j;\n        } else if (i < haystack.length() && haystack.charAt(i) != needle.charAt(j)) {\n            if (j != 0) {\n                j = lps[j - 1];\n            } else {\n                i++;\n            }\n        }\n    }\n\n    return -1;\n}\n\nprivate int[] computeLPS(String pattern) {\n    int[] lps = new int[pattern.length()];\n    int len = 0, i = 1;\n\n    while (i < pattern.length()) {\n        if (pattern.charAt(i) == pattern.charAt(len)) {\n            len++;\n            lps[i] = len;\n            i++;\n        } else {\n            if (len != 0) {\n                len = lps[len - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n\n    return lps;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"character-frequency-patterns",children:"Character Frequency Patterns"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// Character frequency using array\npublic int[] charFrequency(String s) {\n    int[] freq = new int[26]; // For lowercase letters a-z\n\n    for (char c : s.toCharArray()) {\n        freq[c - 'a']++;\n    }\n\n    return freq;\n}\n\n// First non-repeating character\npublic int firstUniqChar(String s) {\n    int[] freq = new int[26];\n\n    // Count frequencies\n    for (char c : s.toCharArray()) {\n        freq[c - 'a']++;\n    }\n\n    // Find first character with frequency 1\n    for (int i = 0; i < s.length(); i++) {\n        if (freq[s.charAt(i) - 'a'] == 1) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n// Valid anagram using frequency\npublic boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) return false;\n\n    int[] freq = new int[26];\n\n    for (int i = 0; i < s.length(); i++) {\n        freq[s.charAt(i) - 'a']++;\n        freq[t.charAt(i) - 'a']--;\n    }\n\n    for (int count : freq) {\n        if (count != 0) return false;\n    }\n\n    return true;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"array-rotation-and-reversal",children:"Array Rotation and Reversal"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// Rotate array right by k steps\npublic void rotate(int[] nums, int k) {\n    k = k % nums.length;\n    reverse(nums, 0, nums.length - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, nums.length - 1);\n}\n\nprivate void reverse(int[] nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\n// Reverse words in a string\npublic String reverseWords(String s) {\n    String[] words = s.trim().split("\\\\s+");\n    StringBuilder sb = new StringBuilder();\n\n    for (int i = words.length - 1; i >= 0; i--) {\n        sb.append(words[i]);\n        if (i > 0) sb.append(" ");\n    }\n\n    return sb.toString();\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(e.h3,{id:"array-performance",children:"Array Performance"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// \u2705 Efficient - direct access\nint value = array[index]; // O(1)\n\n// \u2705 Efficient - sequential access (cache-friendly)\nfor (int i = 0; i < array.length; i++) {\n    process(array[i]);\n}\n\n// \u274c Less efficient - random access pattern\nRandom random = new Random();\nfor (int i = 0; i < 1000; i++) {\n    int randomIndex = random.nextInt(array.length);\n    process(array[randomIndex]); // Poor cache locality\n}\n\n// Memory usage\nint[] ints = new int[1000];        // 4KB (4 bytes per int)\nlong[] longs = new long[1000];     // 8KB (8 bytes per long)\nInteger[] integers = new Integer[1000]; // More memory due to object overhead\n"})}),"\n",(0,t.jsx)(e.h3,{id:"string-performance",children:"String Performance"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u274c Inefficient - creates many temporary strings\nString result = "";\nfor (int i = 0; i < 1000; i++) {\n    result += "Item " + i; // Creates new string each time\n}\n\n// \u2705 Efficient - uses StringBuilder\nStringBuilder sb = new StringBuilder();\nfor (int i = 0; i < 1000; i++) {\n    sb.append("Item ").append(i);\n}\nString result = sb.toString();\n\n// String comparison performance\nString a = "hello";\nString b = "hello";\nString c = new String("hello");\n\n// \u2705 Fast - reference comparison first\nboolean fast = a.equals(b);\n\n// \u274c Slower - always does character comparison\nboolean slower = a.equals(c);\n\n// \u2705 Use == for null checks and reference comparison\nif (str != null && str.equals("expected")) { /* ... */ }\n\n// \u2705 Use string pool for frequently used strings\nprivate static final String CONSTANT = "frequently_used_string";\n\n// Character access performance\nString text = "Hello World";\n\n// \u2705 Efficient for single access\nchar ch = text.charAt(5);\n\n// \u2705 More efficient for multiple access\nchar[] chars = text.toCharArray();\nfor (char c : chars) {\n    process(c);\n}\n\n// \u274c Less efficient for multiple charAt calls\nfor (int i = 0; i < text.length(); i++) {\n    char c = text.charAt(i); // Method call overhead\n    process(c);\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(e.h3,{id:"array-best-practices",children:"Array Best Practices"}),"\n",(0,t.jsx)(e.h4,{id:"initialization-and-declaration",children:"Initialization and Declaration"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Preferred array declaration style\nint[] numbers = new int[10];\nString[] names = {"Alice", "Bob", "Charlie"};\n\n// \u274c Avoid C-style declaration\nint numbers[] = new int[10]; // Works but not preferred\n\n// \u2705 Use meaningful names and sizes\nprivate static final int MAX_STUDENTS = 100;\nStudent[] students = new Student[MAX_STUDENTS];\n\n// \u2705 Initialize with appropriate default values\nArrays.fill(scores, -1); // Use -1 to indicate unset scores\n\n// \u2705 Use constants for array sizes\nprivate static final int DAYS_IN_WEEK = 7;\nboolean[] weekdayFlags = new boolean[DAYS_IN_WEEK];\n'})}),"\n",(0,t.jsx)(e.h4,{id:"bounds-checking-and-safety",children:"Bounds Checking and Safety"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Always check bounds\npublic int safeGet(int[] array, int index) {\n    if (index >= 0 && index < array.length) {\n        return array[index];\n    }\n    throw new IndexOutOfBoundsException("Index: " + index);\n}\n\n// \u2705 Use enhanced for loop when possible\nfor (int value : array) {\n    process(value); // No index out of bounds risk\n}\n\n// \u2705 Defensive copying for mutable arrays\npublic class ArrayContainer {\n    private int[] data;\n\n    public ArrayContainer(int[] data) {\n        this.data = data.clone(); // Defensive copy\n    }\n\n    public int[] getData() {\n        return data.clone(); // Return copy, not reference\n    }\n}\n\n// \u2705 Null safety\npublic void processArray(int[] array) {\n    if (array == null || array.length == 0) {\n        return; // Handle empty/null case\n    }\n\n    for (int value : array) {\n        process(value);\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"array-utilities-usage",children:"Array Utilities Usage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// \u2705 Use Arrays utilities instead of manual loops\n// Sorting\nArrays.sort(array);\n// Instead of implementing bubble sort or similar\n\n// Comparison\nif (Arrays.equals(array1, array2)) {\n    // Arrays are equal\n}\n// Instead of manual element-by-element comparison\n\n// Filling\nArrays.fill(array, defaultValue);\n// Instead of manual loop\n\n// Copying\nint[] copy = Arrays.copyOf(original, newLength);\n// Instead of manual copying\n\n// String representation\nSystem.out.println(Arrays.toString(array));\n// Instead of manual string building\n"})}),"\n",(0,t.jsx)(e.h3,{id:"string-best-practices",children:"String Best Practices"}),"\n",(0,t.jsx)(e.h4,{id:"string-creation-and-immutability",children:"String Creation and Immutability"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Use string literals for constants\nprivate static final String ERROR_MESSAGE = "Invalid input";\n\n// \u2705 Use StringBuilder for concatenation in loops\nStringBuilder result = new StringBuilder();\nfor (String item : items) {\n    result.append(item).append(", ");\n}\nif (result.length() > 0) {\n    result.setLength(result.length() - 2); // Remove trailing ", "\n}\n\n// \u2705 Use String.format or printf for complex formatting\nString message = String.format("User %s has %d points (%.1f%%)",\n                               username, points, percentage);\n\n// \u274c Avoid string concatenation in loops\nString result = "";\nfor (String item : items) {\n    result += item + ", "; // Creates many intermediate strings\n}\n\n// \u2705 Use text blocks for multi-line strings (Java 15+)\nString sql = """\n    SELECT name, age\n    FROM users\n    WHERE age > 18\n    ORDER BY name\n    """;\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-comparison-and-validation",children:"String Comparison and Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Use equals() for content comparison\nif ("expected".equals(userInput)) { // Protects against null userInput\n    // Handle expected input\n}\n\n// \u2705 Use Objects.equals for null-safe comparison\nif (Objects.equals(str1, str2)) {\n    // Handles null values correctly\n}\n\n// \u2705 Use isEmpty() and isBlank() appropriately\nif (input.isEmpty()) { // Checks for ""\n    // Handle empty string\n}\n\nif (input.isBlank()) { // Java 11+, checks for "", " ", "\\t", etc.\n    // Handle blank string\n}\n\n// \u2705 Validate input strings\npublic boolean isValidEmail(String email) {\n    return email != null &&\n           !email.isBlank() &&\n           email.contains("@") &&\n           email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$");\n}\n\n// \u2705 Use trim() judiciously\nString cleanInput = userInput != null ? userInput.trim() : "";\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-processing-efficiency",children:"String Processing Efficiency"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Cache string operations results\npublic class StringProcessor {\n    private final Map<String, String> processedCache = new HashMap<>();\n\n    public String expensiveStringOperation(String input) {\n        return processedCache.computeIfAbsent(input, this::actuallyProcess);\n    }\n\n    private String actuallyProcess(String input) {\n        // Expensive processing logic\n        return input.toUpperCase().replace(" ", "_");\n    }\n}\n\n// \u2705 Use appropriate string methods\n// For single character replacement\nString result = text.replace(\'a\', \'A\'); // More efficient than replaceAll\n\n// For regex patterns\nString result = text.replaceAll("\\\\d+", "X"); // Use when regex is needed\n\n// \u2705 Choose the right collection for string storage\nSet<String> uniqueStrings = new HashSet<>();     // For uniqueness\nSet<String> sortedStrings = new TreeSet<>();     // For sorted uniqueness\nList<String> orderedStrings = new ArrayList<>(); // For ordered list\n\n// \u2705 Intern strings for memory optimization (use carefully)\npublic String internIfCommon(String str) {\n    // Only intern if the string is likely to be duplicated many times\n    if (isCommonString(str)) {\n        return str.intern();\n    }\n    return str;\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsx)(e.h4,{id:"array-memory-optimization",children:"Array Memory Optimization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// \u2705 Choose appropriate primitive arrays over wrapper arrays\nint[] primitiveArray = new int[1000];        // 4KB\nInteger[] wrapperArray = new Integer[1000];   // Much more memory due to objects\n\n// \u2705 Use byte arrays for binary data\nbyte[] binaryData = new byte[1000]; // 1KB\n\n// \u2705 Consider using specialized collections for large datasets\n// TIntArrayList from GNU Trove library for primitive int collections\n\n// \u2705 Clear references when done\nlargeArray = null; // Allow garbage collection\n\n// \u2705 Resize arrays appropriately\npublic class DynamicArray {\n    private int[] data;\n    private int size;\n\n    public void trimToSize() {\n        if (size < data.length) {\n            data = Arrays.copyOf(data, size); // Reduce memory usage\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h4,{id:"string-memory-optimization",children:"String Memory Optimization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Use StringBuilder with appropriate initial capacity\nStringBuilder sb = new StringBuilder(estimatedSize);\n\n// \u2705 Reuse StringBuilder instances\npublic class StringUtils {\n    private static final ThreadLocal<StringBuilder> BUILDER =\n        ThreadLocal.withInitial(() -> new StringBuilder(256));\n\n    public static String buildString(String... parts) {\n        StringBuilder sb = BUILDER.get();\n        sb.setLength(0); // Reset\n\n        for (String part : parts) {\n            sb.append(part);\n        }\n\n        return sb.toString();\n    }\n}\n\n// \u2705 Be careful with substring() and interning\n// substring() shares backing array in older Java versions\nString large = "very long string...";\nString small = large.substring(0, 5); // Might hold reference to entire large string\n\n// Better approach for small substrings from large strings:\nString small = new String(large.substring(0, 5)); // Creates new backing array\n'})}),"\n",(0,t.jsx)(e.h3,{id:"error-handling-and-edge-cases",children:"Error Handling and Edge Cases"}),"\n",(0,t.jsx)(e.h4,{id:"array-error-handling",children:"Array Error Handling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Handle edge cases properly\npublic int findMax(int[] array) {\n    if (array == null || array.length == 0) {\n        throw new IllegalArgumentException("Array cannot be null or empty");\n    }\n\n    int max = array[0];\n    for (int i = 1; i < array.length; i++) {\n        max = Math.max(max, array[i]);\n    }\n    return max;\n}\n\n// \u2705 Use Optional for nullable results\npublic Optional<Integer> findFirst(int[] array, int target) {\n    if (array == null) return Optional.empty();\n\n    for (int i = 0; i < array.length; i++) {\n        if (array[i] == target) {\n            return Optional.of(i);\n        }\n    }\n    return Optional.empty();\n}\n\n// \u2705 Validate array indices\npublic void safeSwap(int[] array, int i, int j) {\n    Objects.requireNonNull(array, "Array cannot be null");\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        throw new IndexOutOfBoundsException("Invalid indices");\n    }\n\n    int temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"string-error-handling",children:"String Error Handling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Handle null and empty strings\npublic String processString(String input) {\n    if (input == null) {\n        return ""; // Or throw exception based on requirements\n    }\n\n    if (input.isEmpty()) {\n        return input; // Return as-is for empty strings\n    }\n\n    return input.trim().toUpperCase();\n}\n\n// \u2705 Use defensive programming for string operations\npublic String safeSubstring(String str, int start, int end) {\n    if (str == null) return null;\n\n    int length = str.length();\n    start = Math.max(0, Math.min(start, length));\n    end = Math.max(start, Math.min(end, length));\n\n    return str.substring(start, end);\n}\n\n// \u2705 Handle encoding issues\npublic String safeStringFromBytes(byte[] bytes, String encoding) {\n    try {\n        return new String(bytes, encoding);\n    } catch (UnsupportedEncodingException e) {\n        // Fall back to default encoding\n        return new String(bytes, StandardCharsets.UTF_8);\n    }\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,t.jsx)(e.h3,{id:"regular-expressions-with-strings",children:"Regular Expressions with Strings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// Common regex patterns\npublic class RegexPatterns {\n    private static final String EMAIL_PATTERN =\n        "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$";\n\n    private static final String PHONE_PATTERN =\n        "^\\\\+?[1-9]\\\\d{1,14}$";\n\n    private static final String URL_PATTERN =\n        "^https?://[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}(/.*)?$";\n\n    // Pre-compile patterns for better performance\n    private static final Pattern EMAIL_REGEX = Pattern.compile(EMAIL_PATTERN);\n    private static final Pattern PHONE_REGEX = Pattern.compile(PHONE_PATTERN);\n\n    public static boolean isValidEmail(String email) {\n        return email != null && EMAIL_REGEX.matcher(email).matches();\n    }\n\n    // Extract all numbers from string\n    public static List<Integer> extractNumbers(String text) {\n        Pattern pattern = Pattern.compile("\\\\d+");\n        Matcher matcher = pattern.matcher(text);\n\n        List<Integer> numbers = new ArrayList<>();\n        while (matcher.find()) {\n            numbers.add(Integer.parseInt(matcher.group()));\n        }\n        return numbers;\n    }\n\n    // Split preserving delimiters\n    public static String[] splitPreservingDelimiters(String text, String regex) {\n        return text.split("(?<=" + regex + ")|(?=" + regex + ")");\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"character-encoding-and-internationalization",children:"Character Encoding and Internationalization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// \u2705 Handle different character encodings\npublic class EncodingUtils {\n\n    // Convert between encodings\n    public static String convertEncoding(String text, String fromEncoding, String toEncoding) {\n        try {\n            byte[] bytes = text.getBytes(fromEncoding);\n            return new String(bytes, toEncoding);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException("Unsupported encoding", e);\n        }\n    }\n\n    // Safe string operations with Unicode\n    public static int getDisplayLength(String text) {\n        return text.codePointCount(0, text.length()); // Handles surrogate pairs\n    }\n\n    // Iterate over Unicode code points (not just chars)\n    public static void iterateCodePoints(String text) {\n        for (int i = 0; i < text.length(); ) {\n            int codePoint = text.codePointAt(i);\n\n            // Process the code point\n            System.out.printf("Code point: U+%04X (%s)%n",\n                            codePoint,\n                            Character.getName(codePoint));\n\n            i += Character.charCount(codePoint);\n        }\n    }\n\n    // Normalize Unicode text\n    public static String normalizeText(String text) {\n        return Normalizer.normalize(text, Normalizer.Form.NFC);\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"memory-efficient-string-operations",children:"Memory-Efficient String Operations"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// String interning and memory optimization\npublic class StringOptimization {\n\n    // Custom string pool for application-specific strings\n    private static final Map<String, String> CUSTOM_POOL = new ConcurrentHashMap<>();\n\n    public static String internCustom(String str) {\n        return CUSTOM_POOL.computeIfAbsent(str, s -> s);\n    }\n\n    // Efficient string building with known patterns\n    public static String buildPath(String... segments) {\n        if (segments.length == 0) return \"\";\n        if (segments.length == 1) return segments[0];\n\n        int totalLength = 0;\n        for (String segment : segments) {\n            totalLength += segment.length();\n        }\n        totalLength += segments.length - 1; // For separators\n\n        StringBuilder sb = new StringBuilder(totalLength);\n        sb.append(segments[0]);\n\n        for (int i = 1; i < segments.length; i++) {\n            sb.append('/').append(segments[i]);\n        }\n\n        return sb.toString();\n    }\n\n    // Lazy string operations\n    public static class LazyString {\n        private final Supplier<String> stringSupplier;\n        private volatile String cachedValue;\n\n        public LazyString(Supplier<String> supplier) {\n            this.stringSupplier = supplier;\n        }\n\n        public String getValue() {\n            if (cachedValue == null) {\n                synchronized (this) {\n                    if (cachedValue == null) {\n                        cachedValue = stringSupplier.get();\n                    }\n                }\n            }\n            return cachedValue;\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"testing-and-debugging",children:"Testing and Debugging"}),"\n",(0,t.jsx)(e.h3,{id:"array-testing-patterns",children:"Array Testing Patterns"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'public class ArrayTestUtils {\n\n    // Assert array equality with helpful error messages\n    public static void assertArrayEquals(int[] expected, int[] actual) {\n        if (!Arrays.equals(expected, actual)) {\n            String message = String.format(\n                "Arrays not equal.%nExpected: %s%nActual: %s",\n                Arrays.toString(expected),\n                Arrays.toString(actual)\n            );\n            throw new AssertionError(message);\n        }\n    }\n\n    // Generate test arrays\n    public static int[] randomArray(int size, int min, int max) {\n        Random random = new Random();\n        return random.ints(size, min, max + 1).toArray();\n    }\n\n    public static int[] sortedArray(int size) {\n        return IntStream.range(0, size).toArray();\n    }\n\n    public static int[] reverseSortedArray(int size) {\n        return IntStream.iterate(size - 1, i -> i - 1)\n                       .limit(size)\n                       .toArray();\n    }\n\n    // Debugging utilities\n    public static void printArray(int[] array, String label) {\n        System.out.printf("%s: %s%n", label, Arrays.toString(array));\n    }\n\n    public static void printMatrix(int[][] matrix, String label) {\n        System.out.println(label + ":");\n        for (int[] row : matrix) {\n            System.out.println(Arrays.toString(row));\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"string-testing-patterns",children:"String Testing Patterns"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'public class StringTestUtils {\n\n    // Test string operations with edge cases\n    public static void testStringOperation(Function<String, String> operation) {\n        String[] testCases = {\n            null, "", " ", "a", "ab", "abc",\n            "  spaces  ", "mixed123", "UPPER", "lower"\n        };\n\n        for (String testCase : testCases) {\n            try {\n                String result = operation.apply(testCase);\n                System.out.printf("Input: \'%s\' -> Output: \'%s\'%n", testCase, result);\n            } catch (Exception e) {\n                System.out.printf("Input: \'%s\' -> Exception: %s%n", testCase, e.getMessage());\n            }\n        }\n    }\n\n    // Generate test strings\n    public static String randomString(int length) {\n        String chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";\n        Random random = new Random();\n        StringBuilder sb = new StringBuilder(length);\n\n        for (int i = 0; i < length; i++) {\n            sb.append(chars.charAt(random.nextInt(chars.length())));\n        }\n\n        return sb.toString();\n    }\n\n    public static String repeatedString(String base, int count) {\n        return String.join("", Collections.nCopies(count, base));\n    }\n}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.p,{children:"This comprehensive guide covers all the essential aspects of working with arrays and strings in Java. Key takeaways:"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Arrays:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"Arrays"})," utility class methods for common operations"]}),"\n",(0,t.jsx)(e.li,{children:"Be mindful of bounds checking and null safety"}),"\n",(0,t.jsx)(e.li,{children:"Choose appropriate array types (primitive vs wrapper)"}),"\n",(0,t.jsx)(e.li,{children:"Understand copying semantics (shallow vs deep)"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Strings:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Remember that strings are immutable"}),"\n",(0,t.jsxs)(e.li,{children:["Use ",(0,t.jsx)(e.code,{children:"StringBuilder"})," for concatenation in loops"]}),"\n",(0,t.jsxs)(e.li,{children:["Leverage utility methods like ",(0,t.jsx)(e.code,{children:"split()"}),", ",(0,t.jsx)(e.code,{children:"join()"}),", ",(0,t.jsx)(e.code,{children:"substring()"})]}),"\n",(0,t.jsx)(e.li,{children:"Handle null and empty cases properly"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Performance:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Use primitive arrays when possible for better memory efficiency"}),"\n",(0,t.jsx)(e.li,{children:"StringBuilder for string building, not concatenation"}),"\n",(0,t.jsx)(e.li,{children:"Cache compiled regex patterns"}),"\n",(0,t.jsx)(e.li,{children:"Consider memory usage with large strings and arrays"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"DSA Patterns:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Master two pointers, sliding window, and prefix sum for arrays"}),"\n",(0,t.jsx)(e.li,{children:"Understand palindrome, anagram, and pattern matching for strings"}),"\n",(0,t.jsx)(e.li,{children:"Use frequency counting and character arrays for optimization"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"The examples progress from basic usage to advanced patterns, making this guide suitable for both learning and reference during coding interviews and practical development**!**"})]})}function g(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>l});var t=r(96540);const i={},a=t.createContext(i);function s(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);