"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6557],{4033:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var t=r(4848),c=r(8453);const a={title:"Object Related Problems"},o=void 0,s={id:"WebDev/JavaScript/Objects",title:"Object Related Problems",description:"Flatten an Object",source:"@site/docs/WebDev/JavaScript/Objects.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Objects",permalink:"/js.enigma/docs/WebDev/JavaScript/Objects",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Objects.mdx",tags:[],version:"current",frontMatter:{title:"Object Related Problems"},sidebar:"tutorialSidebar",previous:{title:"Mixins",permalink:"/js.enigma/docs/WebDev/JavaScript/Mixins"},next:{title:"Array Methods Polyfills",permalink:"/js.enigma/docs/WebDev/JavaScript/Polyfills"}},l={},i=[{value:"Flatten an Object",id:"flatten-an-object",level:3},{value:"In Place implementation",id:"in-place-implementation",level:3},{value:"Extended Version of Object Flattening",id:"extended-version-of-object-flattening",level:3},{value:"Extended Version of Object Flattening (In Place)",id:"extended-version-of-object-flattening-in-place",level:3},{value:"Group By",id:"group-by",level:3},{value:"Add Keys",id:"add-keys",level:3},{value:"Deep Copy",id:"deep-copy",level:3},{value:"Deep Equal",id:"deep-equal",level:3}];function d(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"flatten-an-object",children:"Flatten an Object"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Recursive Way"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:'const obj = {\r\n  a: 1,\r\n  b: {\r\n    c: 3,\r\n    d: {\r\n      e: 5,\r\n    },\r\n  },\r\n};\r\n\r\nconst flatten = (obj, sep, parent = "") => {\r\n  return Object.keys(obj).reduce((acc, curr) => {\r\n    let newKey = parent ? parent + sep + curr : curr;\r\n    if (typeof obj[curr] === "object" && !Array.isArray(obj[curr])) {\r\n      acc = {\r\n        ...acc,\r\n        ...flatten(obj[curr], sep, newKey),\r\n      };\r\n    } else acc[newKey] = obj[curr];\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconsole.log(flatten(obj, ".")); //{ a: 1, \'b.c\': 3, \'b.d.e\': 5 }\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Stack Based"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function flattenObject(obj) {\r\n  const result = {};\r\n  const stack = [{ parentKey: '', value: obj }];\r\n\r\n  while (stack.length > 0) {\r\n    const { parentKey, value } = stack.pop();\r\n\r\n    for (const [key, val] of Object.entries(value)) {\r\n      const newKey = parentKey ? `${parentKey}.${key}` : key;\r\n\r\n      if (typeof val === 'object' && val !== null && !Array.isArray(val)) {\r\n        stack.push({ parentKey: newKey, value: val });\r\n      } else {\r\n        result[newKey] = val;\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Example object to flatten\r\nconst obj = {\r\n  a: 1,\r\n  b: {\r\n    c: 2,\r\n    d: {\r\n      e: 3,\r\n      f: 4\r\n    }\r\n  },\r\n  g: 5\r\n};\r\n\r\nconsole.log(flattenObject(obj)); //{ a: 1, g: 5, 'b.c': 2, 'b.d.e': 3, 'b.d.f': 4 }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"in-place-implementation",children:"In Place implementation"}),"\n",(0,t.jsx)(n.p,{children:"We are not using extra space for this case."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:'function flattenObjectInPlace(obj, parentKey = \'\') {\r\n  const keys = Object.keys(obj);\r\n\r\n  for (const key of keys) {\r\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\r\n\r\n    if (typeof obj[key] === \'object\' && obj[key] !== null) {\r\n      // Recurse for nested objects\r\n      flattenObjectInPlace(obj[key], newKey);\r\n\r\n      // After processing nested object, copy its flattened properties up\r\n      for (const childKey in obj[key]) {\r\n        obj[childKey] = obj[key][childKey];\r\n      }\r\n      // Delete the original nested object\r\n      delete obj[key];\r\n    } else if (parentKey) {\r\n      // For primitive values in nested objects, move them up with the new key\r\n      obj[newKey] = obj[key];\r\n      delete obj[key];\r\n    }\r\n  }\r\n}\r\n\r\n// // Example usage:\r\nconst nestedObject = {\r\n  user: {\r\n    name: "Alice",\r\n    address: {\r\n      city: "Wonderland",\r\n      postalCode: "12345"\r\n    },\r\n    preferences: {\r\n      theme: "dark",\r\n      language: "en"\r\n    }\r\n  }\r\n};\r\n\r\nconsole.log(JSON.stringify(flattenObjectInPlace(nestedObject), null, 2));\r\n/* \r\n{\r\n  "user.name": "Alice",\r\n  "user.address.city": "Wonderland",\r\n  "user.address.postalCode": "12345",\r\n  "user.preferences.theme": "dark",\r\n  "user.preferences.language": "en"\r\n}\r\n*/\n'})}),"\n",(0,t.jsx)(n.h3,{id:"extended-version-of-object-flattening",children:"Extended Version of Object Flattening"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const obj = {\r\n  a: 1,\r\n  b: {\r\n    c: 2,\r\n    d: {\r\n      e: 4,\r\n      f: [1, 2, { g: 5, h: { i: 6, x: [22, 11] } }]\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst flattenObj = (obj, parent = \"\") => {\r\n  return Object.keys(obj).reduce((acc, curr) => {\r\n    const newKey = parent ? `${parent}.${curr}` : curr\r\n    if (typeof obj[curr] === 'object' && typeof obj[curr] !== null && !Array.isArray(obj[curr])) {\r\n      acc = {\r\n        ...acc,\r\n        ...flattenObj(obj[curr], newKey)\r\n      }\r\n    }\r\n\r\n    else if (Array.isArray(obj[curr])) {\r\n      obj[curr].forEach((item, index) => {\r\n        const newArrKey = `${newKey}[${index}]`\r\n        if (typeof item === 'object' && item !== null) {\r\n          acc = { ...acc, ...flattenObj(item, newArrKey) }\r\n        }\r\n        else acc[newArrKey] = item\r\n      })\r\n    }\r\n    else {\r\n      acc[newKey] = obj[curr]\r\n    }\r\n    return acc\r\n  }, {})\r\n\r\n}\r\n\r\nconsole.log(flattenObj(obj));\r\n\r\n/* \r\n{\r\n  a: 1,\r\n  'b.c': 2,\r\n  'b.d.e': 4,\r\n  'b.d.f[0]': 1,\r\n  'b.d.f[1]': 2,\r\n  'b.d.f[2].g': 5,\r\n  'b.d.f[2].h.i': 6,\r\n  'b.d.f[2].h.x[0]': 22,\r\n  'b.d.f[2].h.x[1]': 11\r\n}\r\n*/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"extended-version-of-object-flattening-in-place",children:"Extended Version of Object Flattening (In Place)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function flattenObject(obj, parent = '', res = obj) {\r\n  // Helper function to process array values\r\n  const processArray = (arr, parentKey) => {\r\n    arr.forEach((item, index) => {\r\n      if (typeof item === 'object' && item !== null) {\r\n        flattenObject(item, `${parentKey}[${index}].`, res);\r\n      } else {\r\n        res[`${parentKey}[${index}]`] = item;\r\n      }\r\n    });\r\n  };\r\n\r\n  // Iterate over object keys\r\n  Object.keys(obj).forEach(key => {\r\n    const value = obj[key];\r\n    const newKey = parent + key\r\n\r\n    if (Array.isArray(value)) {\r\n      // Process arrays\r\n      processArray(value, newKey);\r\n      delete obj[key]; // Remove the original array key after processing\r\n    } else if (typeof value === 'object' && value !== null) {\r\n      // Process nested objects\r\n      flattenObject(value, newKey + '.', res);\r\n      delete obj[key]; // Remove the original nested object key after processing\r\n    } else {\r\n      // Handle simple values\r\n      if (parent) {\r\n        res[newKey] = value;\r\n        delete obj[key]; // Remove the original key to avoid duplication\r\n      }\r\n    }\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\nlet obj = {\r\n  a: {\r\n    b: 1,\r\n    c: {\r\n      d: 2,\r\n      e: [3, 4]\r\n    }\r\n  },\r\n  f: [5, { g: 6 }]\r\n};\r\n\r\nflattenObject(obj);\r\nconsole.log(obj);\r\n\r\n/* \r\n{\r\n  'a.b': 1,\r\n  'a.c.d': 2,\r\n  'a.c.e[0]': 3,\r\n  'a.c.e[1]': 4,\r\n  'f[0]': 5,\r\n  'f[1].g': 6\r\n}\r\n*/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"group-by",children:"Group By"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const people = [\r\n  { id: 1, name: \"Alice\", age: 25, city: \"New York\" },\r\n  { id: 2, name: \"Bob\", age: 30, city: \"San Francisco\" },\r\n  { id: 3, name: \"Charlie\", age: 28, city: \"New York\" },\r\n  { id: 4, name: \"David\", age: 25, city: \"Los Angeles\" },\r\n];\r\n\r\nconst groupBy = (obj, keyGetter) => {\r\n  return obj.reduce((acc, curr) => {\r\n    const key = keyGetter(curr);\r\n    if (!acc[key]) acc[key] = [];\r\n    acc[key].push(curr);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconsole.log(groupBy(people, (item) => item.city));\r\n\r\n/* \r\n{\r\n  'New York': [\r\n    { id: 1, name: 'Alice', age: 25, city: 'New York' },\r\n    { id: 3, name: 'Charlie', age: 28, city: 'New York' }\r\n  ],\r\n  'San Francisco': [ { id: 2, name: 'Bob', age: 30, city: 'San Francisco' } ],\r\n  'Los Angeles': [ { id: 4, name: 'David', age: 25, city: 'Los Angeles' } ]\r\n}\r\n*/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"add-keys",children:"Add Keys"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const obj1 = {\r\n  a: 1,\r\n  b: 2,\r\n  c: 4\r\n}\r\n\r\nconst obj2 = {\r\n  a: 1,\r\n  b: 2,\r\n  c: 4\r\n}\r\n\r\nconst obj3 = {\r\n  e: 2,\r\n}\r\n\r\nconst addKeys = (...objs) => {\r\n  return objs?.reduce((acc, curr) => {\r\n    for (const key in curr) {\r\n      if (!acc[key]) acc[key] = 0\r\n      acc[key] += curr[key]\r\n    }\r\n    return acc\r\n  }, {})\r\n}\r\n\r\nconsole.log(addKeys(obj1, obj2, obj3)); //{ a: 2, b: 4, c: 8, e: 2 }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deep-copy",children:"Deep Copy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:'const obj = {\r\n  a: 1,\r\n  b: {\r\n    c: 3,\r\n    d: {\r\n      e: 5,\r\n    },\r\n  },\r\n};\r\n\r\nconst deepCopy = (obj) => {\r\n  if (typeof obj !== "object" || obj === null) return obj;\r\n\r\n  const copiedObj = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.hasOwn(obj, key)) {\r\n      copiedObj[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n  return copiedObj;\r\n};\r\n\r\nconst newObj = deepCopy(obj);\r\nnewObj.a = 10;\r\nnewObj.b.c = 11;\r\nnewObj.b.d.e = 15;\r\n\r\nconsole.log(obj); //{ a: 1, b: { c: 3, d: { e: 5 } } }\r\nconsole.log(newObj); //{ a: 10, b: { c: 11, d: { e: 15 } } }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deep-equal",children:"Deep Equal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function deepEqual(a, b) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (typeof a !== 'object' || typeof b !== 'object' || a === null || b === null) {\r\n    return false;\r\n  }\r\n\r\n  // Get all property keys\r\n  const keysA = Object.keys(a);\r\n  const keysB = Object.keys(b);\r\n\r\n  // Check if the number of properties is the same\r\n  if (keysA.length !== keysB.length) {\r\n    return false;\r\n  }\r\n\r\n  // Check if all keys and values are equal\r\n  for (let key of keysA) {\r\n    if (!keysB.includes(key) || !deepEqual(a[key], b[key])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nconsole.log(deepEqual([1, 2, 3], [1, 2, 3])); //true\r\nconsole.log(deepEqual([1, 2, 3], [1, 2])); //false\r\nconsole.log(deepEqual({ x: 3 }, { x: 3 })); //true\r\nconsole.log(deepEqual({ x: 3 }, { x: 4 })); //false\n"})})]})}function b(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(6540);const c={},a=t.createContext(c);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);