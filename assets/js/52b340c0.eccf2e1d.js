"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[4918],{7099:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=o(74848),a=o(28453);const r={title:"Object-Oriented Programming (OOP)"},s=void 0,i={id:"College Revision/OOPS",title:"Object-Oriented Programming (OOP)",description:"The four pillars of OOP are fundamental concepts, and here's a recap of each:",source:"@site/docs/College Revision/OOPS.mdx",sourceDirName:"College Revision",slug:"/College Revision/OOPS",permalink:"/docs/College Revision/OOPS",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/College Revision/OOPS.mdx",tags:[],version:"current",frontMatter:{title:"Object-Oriented Programming (OOP)"},sidebar:"tutorialSidebar",previous:{title:"College Revision",permalink:"/docs/category/college-revision"},next:{title:"Operating Systems",permalink:"/docs/College Revision/OperatingSystems"}},l={},c=[{value:"Encapsulation:",id:"encapsulation",level:2},{value:"Abstraction:",id:"abstraction",level:2},{value:"Inheritance:",id:"inheritance",level:2},{value:"Polymorphism:",id:"polymorphism",level:2},{value:"Key Points",id:"key-points",level:2},{value:"Problem: Design a Parking Lot System",id:"problem-design-a-parking-lot-system",level:2},{value:"Problem: Design a Library Management System",id:"problem-design-a-library-management-system",level:2},{value:"Problem: Design an Online Shopping Cart System",id:"problem-design-an-online-shopping-cart-system",level:2},{value:"Book Reading",id:"book-reading",level:2}];function d(n){const e={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"The four pillars of OOP are fundamental concepts, and here's a recap of each:"}),"\n",(0,t.jsx)(e.h2,{id:"encapsulation",children:"Encapsulation:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Wrapping data and methods into a single unit called a class.\nIt restricts direct access to some of an object's components and can prevent accidental interference.\nFor example, using getter and setter methods to control access to the internal state."}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Benefits:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Data Hiding: Restrict access to internal object states."}),"\n",(0,t.jsx)(e.li,{children:"Control: Allows controlled access through getter and setter methods."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:"class Person {\n\n  #name\n  #age\n\n  constructor(name, age) {\n    this.#name = name;\n    this.#age = age;\n  }\n\n  // Getter method\n  get name() {\n    return this.#name;\n  }\n\n  // Setter method\n  set name(newName) {\n    this.#name = newName;\n  }\n}\n\nconst p = new Person('John', 30);\nconsole.log(p.name);  // John\np.name = 'Mike';      // Changing name via setter\nconsole.log(p.name);  // Mike\n"})}),"\n",(0,t.jsx)(e.h2,{id:"abstraction",children:"Abstraction:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Abstraction is the concept of hiding the complex implementation details and exposing only the essential features.\nIt allows for simplifying complex systems by modeling classes based on the essential properties an object should have.\nYou might have been asked how to implement abstract classes or interfaces to hide unnecessary implementation details."}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Benefits:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Hides complexity."}),"\n",(0,t.jsx)(e.li,{children:"Reduces programming errors by exposing only what is necessary."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:"// Abstract class\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  // Abstract method (without implementation)\n  makeSound() {\n    throw \"This method must be implemented by subclass\";\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log('Woof!');\n  }\n}\n\nconst dog = new Dog('Buddy');\ndog.makeSound();  // Woof!\n"})}),"\n",(0,t.jsx)(e.h2,{id:"inheritance",children:"Inheritance:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Inheritance allows a class to inherit properties and methods from another class, promoting code reuse.\nYou could have been asked about the difference between single inheritance and multiple inheritance, and how method overriding works in OOP."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a sound.`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst dog = new Dog('Buddy');\ndog.speak();  // Buddy barks.\n"})}),"\n",(0,t.jsx)(e.h2,{id:"polymorphism",children:"Polymorphism:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Polymorphism allows objects to be treated as instances of their parent class. It also allows methods to have the same name but behave differently depending on the object calling them.\nYou might have been asked to explain method overloading (same method name, different parameters) and method overriding (redefining a method in a subclass)."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'class Animal {\n  speak() {\n    console.log("Animal speaks");\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log("Dog barks");\n  }\n}\n\nconst dog = new Dog();\ndog.speak();  // Dog barks\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Example of Method Overloading (JavaScript doesn\u2019t support it directly):"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:"class Calculator {\n  add(a, b) {\n    if (arguments.length === 1) {\n      return a + a;\n    }\n    return a + b;\n  }\n}\n\nconst calc = new Calculator();\nconsole.log(calc.add(5));  // 10 (overloaded behavior)\nconsole.log(calc.add(5, 3));  // 8\n"})}),"\n",(0,t.jsx)(e.h2,{id:"key-points",children:"Key Points"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Single Responsibility Principle (SRP)"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Don't Repeat Yourself (DRY)"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Composition over Inheritance"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Avoid Tight Coupling"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Favor Interfaces for Flexibility"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Keep Classes Focused and Modular"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"problem-design-a-parking-lot-system",children:"Problem: Design a Parking Lot System"}),"\n",(0,t.jsx)(e.p,{children:"A parking lot has multiple parking spaces, each can either be free or occupied. We want to manage the parking spaces, allow parking a car, and retrieve a car when the parking lot is full or when a car is retrieved."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'// Car Class\nclass Car {\n  constructor(licensePlate, model) {\n    this.licensePlate = licensePlate;\n    this.model = model;\n  }\n}\n\n// ParkingSpot Class\nclass ParkingSpot {\n  constructor(number) {\n    this.number = number;\n    this.isOccupied = false;\n    this.car = null;\n  }\n\n  // Park a car in this spot\n  parkCar(car) {\n    if (this.isOccupied) {\n      console.log(`Spot ${this.number} is already occupied.`);\n      return false;\n    }\n    this.isOccupied = true;\n    this.car = car;\n    console.log(`Car with license plate ${car.licensePlate} is parked in spot ${this.number}.`);\n    return true;\n  }\n\n  // Remove the car from this spot\n  removeCar() {\n    if (!this.isOccupied) {\n      console.log(`Spot ${this.number} is empty.`);\n      return false;\n    }\n    console.log(`Car with license plate ${this.car.licensePlate} is removed from spot ${this.number}.`);\n    this.isOccupied = false;\n    this.car = null;\n    return true;\n  }\n}\n\n// ParkingLot Class\nclass ParkingLot {\n  constructor(totalSpots) {\n    this.spots = [];\n    this.availableSpots = totalSpots;\n    // Create the parking spots\n    for (let i = 0; i < totalSpots; i++) {\n      this.spots.push(new ParkingSpot(i + 1)); // Create spots numbered 1 to totalSpots\n    }\n  }\n\n  // Find an available parking spot\n  findAvailableSpot() {\n    for (let spot of this.spots) {\n      if (!spot.isOccupied) {\n        return spot;\n      }\n    }\n    return null; // No available spots\n  }\n\n  // Park a car in the parking lot\n  parkCar(car) {\n    const spot = this.findAvailableSpot();\n    if (spot) {\n      return spot.parkCar(car);\n    } else {\n      console.log("Parking Lot is full!");\n      return false;\n    }\n  }\n\n  // Retrieve a car from the parking lot\n  retrieveCar(licensePlate) {\n    for (let spot of this.spots) {\n      if (spot.isOccupied && spot.car.licensePlate === licensePlate) {\n        return spot.removeCar();\n      }\n    }\n    console.log(`Car with license plate ${licensePlate} not found.`);\n    return false;\n  }\n\n  // Display parking lot status\n  displayStatus() {\n    console.log("Parking Lot Status:");\n    for (let spot of this.spots) {\n      console.log(`Spot ${spot.number}: ${spot.isOccupied ? \'Occupied\' : \'Available\'}`);\n    }\n  }\n}\n\n// Example Usage\nconst myParkingLot = new ParkingLot(3); // Create a parking lot with 3 spots\n\nconst car1 = new Car("ABC123", "Toyota");\nconst car2 = new Car("XYZ456", "Honda");\nconst car3 = new Car("LMN789", "Ford");\n\nmyParkingLot.parkCar(car1); // Park car1\nmyParkingLot.parkCar(car2); // Park car2\nmyParkingLot.parkCar(car3); // Park car3 (Parking Lot is full)\n\nmyParkingLot.displayStatus(); // Show current parking lot status\n\nmyParkingLot.retrieveCar("XYZ456"); // Retrieve car2\nmyParkingLot.displayStatus(); // Show updated parking lot status\n\n/*\nCar with license plate ABC123 is parked in spot 1.\nCar with license plate XYZ456 is parked in spot 2.\nCar with license plate LMN789 is parked in spot 3.\nParking Lot Status:\nSpot 1: Occupied\nSpot 2: Occupied\nSpot 3: Occupied\nParking Lot is full!\nCar with license plate XYZ456 is removed from spot 2.\nParking Lot Status:\nSpot 1: Occupied\nSpot 2: Available\nSpot 3: Occupied\n*/\n'})}),"\n",(0,t.jsx)(e.h2,{id:"problem-design-a-library-management-system",children:"Problem: Design a Library Management System"}),"\n",(0,t.jsx)(e.p,{children:"In this system:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"We have Books that can be borrowed or returned by Members."}),"\n",(0,t.jsx)(e.li,{children:"A Library manages the collection of books and the members who can borrow them."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'// Book Class\nclass Book {\n  constructor(title, author) {\n    this.title = title;\n    this.author = author;\n    this.isAvailable = true; // A book can either be available or borrowed\n  }\n\n  borrow() {\n    if (this.isAvailable) {\n      this.isAvailable = false;\n      console.log(`You have borrowed "${this.title}" by ${this.author}.`);\n    } else {\n      console.log(`Sorry, "${this.title}" is currently unavailable.`);\n    }\n  }\n\n  returnBook() {\n    this.isAvailable = true;\n    console.log(`You have returned "${this.title}" by ${this.author}.`);\n  }\n}\n\n// Member Class\nclass Member {\n  constructor(name, memberId) {\n    this.name = name;\n    this.memberId = memberId;\n    this.borrowedBooks = [];\n  }\n\n  borrowBook(book) {\n    if (book.isAvailable) {\n      book.borrow();\n      this.borrowedBooks.push(book);\n    } else {\n      console.log(`${this.name} cannot borrow "${book.title}". It is unavailable.`);\n    }\n  }\n\n  returnBook(book) {\n    if (this.borrowedBooks.includes(book)) {\n      book.returnBook();\n      this.borrowedBooks = this.borrowedBooks.filter(b => b !== book);\n    } else {\n      console.log(`${this.name} didn\'t borrow "${book.title}".`);\n    }\n  }\n\n  viewBorrowedBooks() {\n    if (this.borrowedBooks.length > 0) {\n      console.log(`${this.name} has borrowed the following books:`);\n      this.borrowedBooks.forEach(book => {\n        console.log(`- "${book.title}" by ${book.author}`);\n      });\n    } else {\n      console.log(`${this.name} has not borrowed any books.`);\n    }\n  }\n}\n\n// Library Class\nclass Library {\n  constructor() {\n    this.books = [];\n    this.members = [];\n  }\n\n  addBook(book) {\n    this.books.push(book);\n    console.log(`"${book.title}" by ${book.author} added to the library.`);\n  }\n\n  addMember(member) {\n    this.members.push(member);\n    console.log(`New member ${member.name} added to the library.`);\n  }\n\n  listBooks() {\n    if (this.books.length > 0) {\n      console.log("Library Books:");\n      this.books.forEach(book => {\n        console.log(`- "${book.title}" by ${book.author} (${book.isAvailable ? \'Available\' : \'Unavailable\'})`);\n      });\n    } else {\n      console.log("No books in the library.");\n    }\n  }\n}\n\n// Example Usage\nconst library = new Library();\n\nconst book1 = new Book("The Great Gatsby", "F. Scott Fitzgerald");\nconst book2 = new Book("1984", "George Orwell");\nconst book3 = new Book("Moby Dick", "Herman Melville");\n\nlibrary.addBook(book1);\nlibrary.addBook(book2);\nlibrary.addBook(book3);\n\nconst member1 = new Member("John Doe", 1);\nconst member2 = new Member("Jane Smith", 2);\n\nlibrary.addMember(member1);\nlibrary.addMember(member2);\n\nlibrary.listBooks(); // Show all books in the library\n\nmember1.borrowBook(book1); // John borrows "The Great Gatsby"\nmember2.borrowBook(book1); // Jane tries to borrow "The Great Gatsby" but it\'s unavailable\nmember1.viewBorrowedBooks(); // View John\'s borrowed books\n\nmember1.returnBook(book1); // John returns "The Great Gatsby"\nmember2.borrowBook(book1); // Now Jane can borrow "The Great Gatsby"\nmember2.viewBorrowedBooks(); // View Jane\'s borrowed books\n\nlibrary.listBooks(); // Show all books in the library again\n/*\n"The Great Gatsby" by F. Scott Fitzgerald added to the library.\n"1984" by George Orwell added to the library.\n"Moby Dick" by Herman Melville added to the library.\nNew member John Doe added to the library.\nNew member Jane Smith added to the library.\nLibrary Books:\n- "The Great Gatsby" by F. Scott Fitzgerald (Available)\n- "1984" by George Orwell (Available)\n- "Moby Dick" by Herman Melville (Available)\nYou have borrowed "The Great Gatsby" by F. Scott Fitzgerald.\nJane Smith cannot borrow "The Great Gatsby". It is unavailable.\nJohn Doe has borrowed the following books:\n- "The Great Gatsby" by F. Scott Fitzgerald\nYou have returned "The Great Gatsby" by F. Scott Fitzgerald.\nYou have borrowed "The Great Gatsby" by F. Scott Fitzgerald.\nJane Smith has borrowed the following books:\n- "The Great Gatsby" by F. Scott Fitzgerald\nLibrary Books:\n- "The Great Gatsby" by F. Scott Fitzgerald (Unavailable)\n- "1984" by George Orwell (Available)\n- "Moby Dick" by Herman Melville (Available)\n*/\n'})}),"\n",(0,t.jsx)(e.h2,{id:"problem-design-an-online-shopping-cart-system",children:"Problem: Design an Online Shopping Cart System"}),"\n",(0,t.jsx)(e.p,{children:"This system will involve:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Products that can be added to the cart."}),"\n",(0,t.jsx)(e.li,{children:"Cart to manage the products and calculate the total price."}),"\n",(0,t.jsx)(e.li,{children:"Customer to manage the customer information and checkout process"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'// Product Class\nclass Product {\n  constructor(id, name, price, stockQuantity) {\n    this.id = id;\n    this.name = name;\n    this.price = price;\n    this.stockQuantity = stockQuantity;\n  }\n\n  // Decrease the stock quantity when a product is added to the cart\n  reduceStock(quantity) {\n    if (quantity <= this.stockQuantity) {\n      this.stockQuantity -= quantity;\n      console.log(`${quantity} ${this.name}(s) added to the cart.`);\n    } else {\n      console.log(`Not enough stock for ${this.name}. Only ${this.stockQuantity} left.`);\n    }\n  }\n\n  // Restock the product when it is returned or replenished\n  restock(quantity) {\n    this.stockQuantity += quantity;\n    console.log(`${quantity} ${this.name}(s) restocked.`);\n  }\n}\n\n// Cart Class\nclass Cart {\n  constructor() {\n    this.products = [];\n  }\n\n  // Add a product to the cart\n  addProduct(product, quantity) {\n    product.reduceStock(quantity);\n    this.products.push({ product, quantity });\n  }\n\n  // Remove a product from the cart\n  removeProduct(productId) {\n    const index = this.products.findIndex(item => item.product.id === productId);\n    if (index !== -1) {\n      this.products.splice(index, 1);\n      console.log(`Product with ID ${productId} removed from the cart.`);\n    } else {\n      console.log(`Product with ID ${productId} not found in the cart.`);\n    }\n  }\n\n  // Calculate the total price of the products in the cart\n  calculateTotal() {\n    let total = 0;\n    this.products.forEach(item => {\n      total += item.product.price * item.quantity;\n    });\n    return total;\n  }\n\n  // View the cart\'s contents\n  viewCart() {\n    if (this.products.length === 0) {\n      console.log("Your cart is empty.");\n    } else {\n      console.log("Your cart contains:");\n      this.products.forEach(item => {\n        console.log(`${item.quantity} x ${item.product.name} - $${item.product.price} each`);\n      });\n    }\n  }\n}\n\n// Customer Class\nclass Customer {\n  constructor(name) {\n    this.name = name;\n    this.cart = new Cart();\n  }\n\n  // Checkout the cart\n  checkout() {\n    const total = this.cart.calculateTotal();\n    console.log(`Checkout for ${this.name}:`);\n    console.log(`Total price: $${total}`);\n    if (total > 0) {\n      console.log("Thank you for shopping with us!");\n    } else {\n      console.log("Your cart is empty. Add some products before checking out.");\n    }\n  }\n}\n\n// Example Usage\nconst product1 = new Product(1, "Laptop", 1000, 10);\nconst product2 = new Product(2, "Phone", 500, 20);\nconst product3 = new Product(3, "Headphones", 100, 50);\n\nconst customer = new Customer("John Doe");\n\ncustomer.cart.addProduct(product1, 2); // Add 2 laptops to the cart\ncustomer.cart.addProduct(product2, 3); // Add 3 phones to the cart\ncustomer.cart.addProduct(product3, 5); // Add 5 headphones to the cart\n\ncustomer.cart.viewCart(); // View the cart\n\ncustomer.checkout(); // Checkout and view the total\n\n// Remove a product from the cart and checkout again\ncustomer.cart.removeProduct(2); // Remove the phone from the cart\ncustomer.cart.viewCart(); // View the updated cart\n\ncustomer.checkout(); // Checkout again\n/*\n2 Laptop(s) added to the cart.\n3 Phone(s) added to the cart.\n5 Headphones(s) added to the cart.\nYour cart contains:\n2 x Laptop - $1000 each\n3 x Phone - $500 each\n5 x Headphones - $100 each\nCheckout for John Doe:\nTotal price: $4000\nThank you for shopping with us!\nProduct with ID 2 removed from the cart.\nYour cart contains:\n2 x Laptop - $1000 each\n5 x Headphones - $100 each\nCheckout for John Doe:\nTotal price: $2500\nThank you for shopping with us!\n*/\n'})}),"\n",(0,t.jsx)(e.h2,{id:"book-reading",children:"Book Reading"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-plaintext",children:"+--------------------------------------------------------+        +---------------------------------------------------+\n|                        Book                            |        |                    Page                           |\n+--------------------------------------------------------+        +---------------------------------------------------+\n| - title: string                                        |        | - pageNumber: number                              |\n| - totalPages: number                                   |        | - content: string                                 |\n| - currentPage: number                                  |        +---------------------------------------------------+\n+--------------------------------------------------------+        | + constructor(pageNumber: number, content: string)|\n| + constructor(title: string, totalPages: number)       |        | + displayContent(): void                          |\n| + turnPageForward(): void                              |        +---------------------------------------------------+\n| + turnPageBackward(): void                             |\n| + getCurrentPage(): number                             |\n| + getBookTitle(): string                               |\n| + isBookFinished(): boolean                            |\n| + readPage(): void                                     |\n+--------------------------------------------------------+\n                  | contains\n                  |\n                  v\n+--------------------------------------------------------+\n|                        Reader                          |\n+--------------------------------------------------------+\n| - name: string                                         |\n| - currentBook: Book                                    |\n+--------------------------------------------------------+\n| + constructor(name: string)                            |\n| + startReading(book: Book): void                       |\n| + turnPageForward(): void                              |\n| + turnPageBackward(): void                             |\n| + readCurrentPage(): void                              |\n+--------------------------------------------------------+\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Book Class:"}),"\nThe ",(0,t.jsx)(e.code,{children:"Book"})," class is the main class for representing a book, keeping track of the total number of pages, and the current page number."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'class Book {\n  constructor(title, totalPages) {\n    this.title = title;      // Title of the book\n    this.totalPages = totalPages;  // Total pages in the book\n    this.currentPage = 1;    // Start from page 1\n  }\n\n  turnPageForward() {\n    if (this.currentPage < this.totalPages) {\n      this.currentPage++;\n      console.log(`You are now on page ${this.currentPage}`);\n    } else {\n      console.log("You are already on the last page.");\n    }\n  }\n\n  turnPageBackward() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      console.log(`You are now on page ${this.currentPage}`);\n    } else {\n      console.log("You are already on the first page.");\n    }\n  }\n\n  getCurrentPage() {\n    return this.currentPage;\n  }\n\n  getBookTitle() {\n    return this.title;\n  }\n\n  // Check if the book is finished\n  isBookFinished() {\n    return this.currentPage === this.totalPages;\n  }\n\n  // Display content of the current page\n  readPage() {\n    console.log(`Reading page ${this.currentPage} of "${this.title}"`);\n  }\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Page Class:"}),"\nThis class represents a page in the book. Each page has content and a page number."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:"class Page {\n  constructor(pageNumber, content) {\n    this.pageNumber = pageNumber;   // The page number\n    this.content = content;         // Content of the page\n  }\n\n  displayContent() {\n    console.log(`Page ${this.pageNumber}: ${this.content}`);\n  }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["**Reader Class: **\nThe ",(0,t.jsx)(e.code,{children:"Reader"})," class represents a person interacting with the book, such as reading or turning pages."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'class Reader {\n  constructor(name) {\n    this.name = name;\n    this.currentBook = null;\n  }\n\n  startReading(book) {\n    this.currentBook = book;\n    console.log(`${this.name} is starting to read "${book.getBookTitle()}"`);\n  }\n\n  turnPageForward() {\n    if (this.currentBook) {\n      this.currentBook.turnPageForward();\n      this.currentBook.readPage();\n    } else {\n      console.log("Please open a book to start reading.");\n    }\n  }\n\n  turnPageBackward() {\n    if (this.currentBook) {\n      this.currentBook.turnPageBackward();\n      this.currentBook.readPage();\n    } else {\n      console.log("Please open a book to start reading.");\n    }\n  }\n\n  readCurrentPage() {\n    if (this.currentBook) {\n      this.currentBook.readPage();\n    } else {\n      console.log("Please open a book to start reading.");\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"**Example: **"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-JavaScript",children:'// Create some pages\nconst page1 = new Page(1, "Once upon a time, in a faraway kingdom...");\nconst page2 = new Page(2, "The princess was locked in a tower...");\nconst page3 = new Page(3, "The brave knight came to rescue her...");\n\n// Create a book\nconst myBook = new Book("The Princess and the Knight", 3);\n\n// Start reading with a reader\nconst reader = new Reader("Alice");\nreader.startReading(myBook);\n\n// Read the current page\nreader.readCurrentPage();  // "Reading page 1 of \'The Princess and the Knight\'"\n\n// Turn to the next page\nreader.turnPageForward();  // "You are now on page 2" and then reads page 2\nreader.turnPageForward();  // "You are now on page 3" and then reads page 3\n\n// Trying to turn beyond the last page\nreader.turnPageForward();  // "You are already on the last page."\n\n// Turn the page backward\nreader.turnPageBackward();  // "You are now on page 2" and then reads page 2\n'})})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>i});var t=o(96540);const a={},r=t.createContext(a);function s(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);