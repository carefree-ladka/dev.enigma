"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4104],{3509:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(4848),s=n(8453);const i={},l="Multiset in JavaScript",a={id:"DSA/MultiSet",title:"Multiset in JavaScript",description:"A Multiset (also known as a bag) is a data structure similar to a set, but it allows duplicate elements. In a multiset, each element can appear multiple times, and you can efficiently track the number of occurrences of each element.",source:"@site/docs/DSA/MultiSet.mdx",sourceDirName:"DSA",slug:"/DSA/MultiSet",permalink:"/js.enigma/docs/DSA/MultiSet",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/MultiSet.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Morris Traversal for Binary Trees",permalink:"/js.enigma/docs/DSA/MorrisTraversal"},next:{title:"Multi-source BFS Algorithm",permalink:"/js.enigma/docs/DSA/MultiSourceBFS"}},o={},c=[];function u(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"multiset-in-javascript",children:"Multiset in JavaScript"})}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.strong,{children:"Multiset"})," (also known as a ",(0,r.jsx)(t.strong,{children:"bag"}),") is a data structure similar to a set, but it allows duplicate elements. In a multiset, each element can appear multiple times, and you can efficiently track the number of occurrences of each element."]}),"\n",(0,r.jsxs)(t.p,{children:["This implementation of a multiset is built using a JavaScript ",(0,r.jsx)(t.code,{children:"Map"}),", where each element is stored as a key, and the number of times it appears is stored as the corresponding value."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"class Multiset {\r\n  constructor() {\r\n    this.set = new Map();\r\n  }\r\n\r\n  // Adds an element to the multiset\r\n  add(element) {\r\n    this.set.set(element, (this.set.get(element) ?? 0) + 1);\r\n  }\r\n\r\n  // Removes one occurrence of the element from the multiset\r\n  remove(element) {\r\n    if (this.set.has(element)) {\r\n      const count = this.set.get(element);\r\n      if (count > 1) {\r\n        this.set.set(element, count - 1);\r\n      } else {\r\n        this.set.delete(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Returns the count of occurrences of the element\r\n  count(element) {\r\n    return this.set.get(element) ?? 0;\r\n  }\r\n\r\n  // Checks if an element exists in the multiset\r\n  has(element) {\r\n    return this.set.has(element);\r\n  }\r\n\r\n  // Returns the size of the multiset (unique elements count)\r\n  size() {\r\n    return this.set.size;\r\n  }\r\n\r\n  // Removes all elements from the multiset\r\n  clear() {\r\n    this.set.clear();\r\n  }\r\n\r\n  // Returns the entire multiset as a plain object (for inspection)\r\n  toObject() {\r\n    return Object.fromEntries(this.set);\r\n  }\r\n}\r\n\r\nconst multiset = new Multiset();\r\n\r\n// Add elements to the multiset\r\nmultiset.add('apple');\r\nmultiset.add('banana');\r\nmultiset.add('apple');\r\n\r\n// Check the count of occurrences\r\nconsole.log(multiset.count('apple'));  // 2\r\nconsole.log(multiset.count('banana')); // 1\r\n\r\n// Remove one occurrence of 'apple'\r\nmultiset.remove('apple');\r\nconsole.log(multiset.count('apple'));  // 1\r\n\r\n// Check if an element exists\r\nconsole.log(multiset.has('apple'));    // true\r\nconsole.log(multiset.has('orange'));  // false\r\n\r\n// Get the size (number of unique elements)\r\nconsole.log(multiset.size()); // 2 (apple and banana)\r\n\r\n// Get the entire multiset\r\nconsole.log(multiset.toObject()); // { apple: 1, banana: 1 }\r\n\r\n// Clear the multiset\r\nmultiset.clear();\r\nconsole.log(multiset.toObject()); // {}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var r=n(6540);const s={},i=r.createContext(s);function l(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);