"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6908],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const l={},i=r.createContext(l);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},38516:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>v});var r=t(74848),l=t(28453);const i={title:"Interval Problems"},a=void 0,s={id:"DSA/DSA with JavaScript/Intervals",title:"Interval Problems",description:"Interval Problems",source:"@site/docs/DSA/DSA with JavaScript/Intervals.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/Intervals",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/Intervals",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/Intervals.mdx",tags:[],version:"current",frontMatter:{title:"Interval Problems"},sidebar:"tutorialSidebar",previous:{title:"Heap\u2019s Algorithm",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/HeapAlgorithm"},next:{title:"K-Way Merge Pattern",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/KWayMerge"}},o={},v=[{value:"Interval Problems",id:"interval-problems",level:2},{value:"Utility Methods for interval problems",id:"utility-methods-for-interval-problems",level:3},{value:"Merge Intervals",id:"merge-intervals",level:3},{value:"Insert Interval",id:"insert-interval",level:3},{value:"Finding an Interval Containing a Point",id:"finding-an-interval-containing-a-point",level:3},{value:"Finding Overlapping Intervals with a Target Interval",id:"finding-overlapping-intervals-with-a-target-interval",level:3},{value:"Intervals Problems",id:"intervals-problems",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"interval-problems",children:"Interval Problems"}),"\n",(0,r.jsx)(n.p,{children:"Interval problems are common in algorithmic challenges, dealing with ranges or intervals and often requiring merging, overlapping, or processing intervals in various ways. This document covers fundamental problems related to intervals, including the Merge Intervals problem."}),"\n",(0,r.jsx)("img",{src:"https://learn.innoskrit.in/content/images/2023/12/4-2.png",alt:"intervals"}),"\n",(0,r.jsx)(n.h3,{id:"utility-methods-for-interval-problems",children:"Utility Methods for interval problems"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"/**\n * Check if two intervals overlap.\n * @param {number[]} interval1 - The first interval as [start, end].\n * @param {number[]} interval2 - The second interval as [start, end].\n * @return {boolean} - True if the intervals overlap, otherwise false.\n */\nconst isOverlapping = (interval1, interval2) => {\n  return interval1[0] <= interval2[1] && interval2[0] <= interval1[1];\n};\n\n/**\n * Merge two overlapping intervals.\n * @param {number[]} interval1 - The first interval as [start, end].\n * @param {number[]} interval2 - The second interval as [start, end].\n * @return {number[]} - The merged interval as [start, end].\n */\nconst mergeIntervals = (interval1, interval2) => {\n  if (!isOverlapping(interval1, interval2)) {\n    throw new Error('Intervals do not overlap.');\n  }\n  return [Math.min(interval1[0], interval2[0]), Math.max(interval1[1], interval2[1])];\n};\n\n/**\n * Find all overlapping intervals with a given interval from a list of intervals.\n * @param {number[][]} intervals - A list of intervals, each represented as [start, end].\n * @param {number[]} interval - The interval to check for overlaps.\n * @return {number[][]} - A list of overlapping intervals.\n */\nconst findOverlappingIntervals = (intervals, interval) => {\n  return intervals.filter(otherInterval => isOverlapping(otherInterval, interval));\n};\n\n// Example usage:\n\n// Define some intervals\nconst interval1 = [1, 5];\nconst interval2 = [4, 8];\nconst interval3 = [10, 15];\nconst intervalToFind = [3, 6];\nconst intervalsList = [[1, 5], [6, 10], [15, 20]];\n\n// Check if intervals overlap\nconsole.log(isOverlapping(interval1, interval2)); // Output: true\nconsole.log(isOverlapping(interval1, interval3)); // Output: false\n\n// Merge overlapping intervals\nconsole.log(mergeIntervals(interval1, interval2)); // Output: [1, 8]\n\n// Find overlapping intervals\nconsole.log(findOverlappingIntervals(intervalsList, intervalToFind)); // Output: [[1, 5]]\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"merge-intervals",children:"Merge Intervals"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem Statement"}),": Given a collection of intervals, merge all overlapping intervals."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"/**\n * Merge overlapping intervals.\n * @param {number[][]} intervals - A list of intervals where each interval is represented as [start, end].\n * @return {number[][]} - The merged list of intervals.\n */\nconst mergeIntervals = (intervals) => {\n  if (intervals.length === 0) return [];\n\n  // Sort intervals by their starting point\n  intervals.sort((a, b) => a[0] - b[0]);\n\n  const merged = [intervals[0]];\n\n  for (let i = 1; i < intervals.length; i++) {\n    const current = intervals[i];\n    const lastMerged = merged[merged.length - 1];\n\n    if (current[0] <= lastMerged[1]) {\n      // Overlapping intervals, merge them\n      lastMerged[1] = Math.max(lastMerged[1], current[1]);\n    } else {\n      // No overlap, add the current interval\n      merged.push(current);\n    }\n  }\n\n  return merged;\n}\n\n// Example usage:\nconst intervals = [[1, 3], [2, 6], [8, 10], [15, 18]];\nconsole.log(mergeIntervals(intervals)); \n// Output: [[1, 6], [8, 10], [15, 18]]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"insert-interval",children:"Insert Interval"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"var insert = function (intervals, newInterval) {\n  const result = [];\n  let i = 0;\n  const n = intervals.length;\n\n  // Add all intervals that come before the new interval\n  while (i < n && intervals[i][1] < newInterval[0]) {\n    result.push(intervals[i++]);\n  }\n\n  // Merge all overlapping intervals with the new interval\n  while (i < n && isOverlapping(intervals[i], newInterval)) {\n    newInterval = merge(intervals[i++], newInterval);\n  }\n  result.push(newInterval);\n\n  // Add all intervals that come after the new interval\n  while (i < n) {\n    result.push(intervals[i++]);\n  }\n\n  return result;\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"finding-an-interval-containing-a-point",children:"Finding an Interval Containing a Point"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"const findOverlappingIntervals = (intervals, x) => {\n  let left = 0\n  let right = intervals.length - 1\n\n  while (left <= right) {\n    const mid = left + right >>> 1\n    const [s, e] = intervals[mid]\n    if (s <= x && x <= e) return intervals[mid]\n    else if (x < s) right = mid - 1\n    else left = mid + 1\n  }\n  return null\n}\n\n// Test Intervals\nconst intervals = [\n    [1, 5],\n    [10, 15],\n    [20, 25],\n    [30, 35],\n    [40, 50]\n];\n\n// Test cases for `findIntervalContainingPoint`\n\n// Case 1: Point lies within an interval\nconsole.log(findIntervalContainingPoint(intervals, 3)); // Expected output: [1, 5]\n\n// Case 2: Point lies exactly on the start of an interval\nconsole.log(findIntervalContainingPoint(intervals, 10)); // Expected output: [10, 15]\n\n// Case 3: Point lies exactly on the end of an interval\nconsole.log(findIntervalContainingPoint(intervals, 25)); // Expected output: [20, 25]\n\n// Case 4: Point lies between intervals\nconsole.log(findIntervalContainingPoint(intervals, 6)); // Expected output: null\n\n// Case 5: Point is smaller than the smallest interval\nconsole.log(findIntervalContainingPoint(intervals, 0)); // Expected output: null\n\n// Case 6: Point is larger than the largest interval\nconsole.log(findIntervalContainingPoint(intervals, 55)); // Expected output: null\n"})}),"\n",(0,r.jsx)(n.h3,{id:"finding-overlapping-intervals-with-a-target-interval",children:"Finding Overlapping Intervals with a Target Interval"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"function findOverlappingIntervals(intervals, targetStart, targetEnd) {\n  let left = 0, right = intervals.length - 1;\n  const overlappingIntervals = [];\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const [start, end] = intervals[mid];\n\n    if (end < targetStart) {\n      // Move right if the interval is entirely before the target\n      left = mid + 1;\n    } else if (start > targetEnd) {\n      // Move left if the interval is entirely after the target\n      right = mid - 1;\n    } else {\n      // Overlap detected, so add to result\n      overlappingIntervals.push(intervals[mid]);\n\n      // Check both sides of mid for additional overlapping intervals\n      let i = mid - 1;\n      while (i >= 0 && intervals[i][1] >= targetStart) overlappingIntervals.push(intervals[i--]);\n\n      i = mid + 1;\n      while (i < intervals.length && intervals[i][0] <= targetEnd) overlappingIntervals.push(intervals[i++]);\n\n      break;\n    }\n  }\n\n  return overlappingIntervals;\n}\n\nconst intervals = [\n  [1, 5],\n  [10, 15],\n  [20, 25],\n  [30, 35],\n  [40, 50]\n];\n\n\n// Case 1: Target interval completely overlaps one interval\nconsole.log(findOverlappingIntervals(intervals, 12, 14)); // Expected output: [[10, 15]]\n\n// Case 2: Target interval overlaps multiple intervals\nconsole.log(findOverlappingIntervals(intervals, 15, 30)); // Expected output: [[10, 15], [20, 25], [30, 35]]\n\n// Case 3: Target interval is completely outside (before) any intervals\nconsole.log(findOverlappingIntervals(intervals, -5, -1)); // Expected output: []\n\n// Case 4: Target interval is completely outside (after) any intervals\nconsole.log(findOverlappingIntervals(intervals, 60, 70)); // Expected output: []\n\n// Case 5: Target interval overlaps exactly at the boundary of two intervals\nconsole.log(findOverlappingIntervals(intervals, 5, 10)); // Expected output: [[1, 5], [10, 15]]\n\n// Case 6: Target interval covers all intervals\nconsole.log(findOverlappingIntervals(intervals, 0, 55)); // Expected output: [[1, 5], [10, 15], [20, 25], [30, 35], [40, 50]]\n\n// Case 7: Target interval does not overlap any intervals\nconsole.log(findOverlappingIntervals(intervals, 6, 9)); // Expected output: []\n"})}),"\n",(0,r.jsx)(n.h3,{id:"intervals-problems",children:"Intervals Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/merge-intervals/description/",children:"Merge Intervals"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/insert-interval/",children:"Insert Interval"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/meeting-rooms/",children:"Meeting Rooms"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/meeting-rooms-ii/",children:"Meeting Rooms II"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/range-module/",children:"Range Module"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/employee-free-time/",children:"Employee Free Time"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/count-ways-to-group-overlapping-ranges/",children:"Count Ways to Group Overlapping Ranges"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/count-days-without-meetings/",children:"Count Days Without Meetings"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/determine-if-two-events-have-conflict/",children:"Determine if Two Events Have Conflict"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/my-calendar-i/",children:"My Calendar I"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/my-calendar-ii/",children:"My Calendar II"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/my-calendar-iii/",children:"My Calendar III"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/remove-covered-intervals/",children:"Remove Covered Intervals"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/remove-interval/",children:"Remove Interval"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-right-interval/",children:"Find Right Interval"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-interval-to-include-each-query/",children:"Minimum Interval to Include Each Query"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/count-integers-in-intervals/",children:"Count Integers in Intervals"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/non-overlapping-intervals/",children:"Non-overlapping Intervals"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/meeting-rooms-iii/",children:"Meeting Rooms III"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/",children:"Minimum Number of Arrows to Burst Balloons"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/",children:"Maximum Number of Events That Can Be Attended"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/",children:"Maximum Number of Events That Can Be Attended II"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/task-scheduler/",children:"Task Scheduler"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/set-intersection-size-at-least-two/",children:"Set Intersection Size At Least Two"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-time-to-complete-all-tasks/",children:"Minimum Time to Complete All Tasks"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/missing-ranges/description",children:"Missing Ranges"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);