"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8002],{28453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(r.Provider,{value:e},n.children)}},42456:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(74848),i=s(28453);const r={},a="Atomic Design in React",l={id:"WebDev/React/ATOMICDesign",title:"Atomic Design in React",description:"Introduction to Atomic Design",source:"@site/docs/WebDev/React/ATOMICDesign.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ATOMICDesign",permalink:"/dev.enigma/docs/WebDev/React/ATOMICDesign",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ATOMICDesign.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Machine Coding Round",permalink:"/dev.enigma/docs/WebDev/Machine Coding Round/MachineCodingRounds"},next:{title:"React Compound Components",permalink:"/dev.enigma/docs/WebDev/React/CompoundComponents"}},o={},c=[{value:"Introduction to Atomic Design",id:"introduction-to-atomic-design",level:2},{value:"Implementation Guide",id:"implementation-guide",level:2},{value:"1. Atoms",id:"1-atoms",level:3},{value:"2. Molecules",id:"2-molecules",level:3},{value:"3. Organisms",id:"3-organisms",level:3},{value:"4. Templates",id:"4-templates",level:3},{value:"5. Pages",id:"5-pages",level:3},{value:"Organizing the Project Structure",id:"organizing-the-project-structure",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Component Development Workflow",id:"component-development-workflow",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"atomic-design-in-react",children:"Atomic Design in React"})}),"\n",(0,t.jsx)(e.h2,{id:"introduction-to-atomic-design",children:"Introduction to Atomic Design"}),"\n",(0,t.jsx)(e.p,{children:"Atomic Design is a methodology created by Brad Frost that breaks down user interfaces into fundamental building blocks, creating a systematic approach to component-based development. The methodology consists of five distinct levels:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Atoms"}),"\n",(0,t.jsx)(e.li,{children:"Molecules"}),"\n",(0,t.jsx)(e.li,{children:"Organisms"}),"\n",(0,t.jsx)(e.li,{children:"Templates"}),"\n",(0,t.jsx)(e.li,{children:"Pages"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"implementation-guide",children:"Implementation Guide"}),"\n",(0,t.jsx)(e.h3,{id:"1-atoms",children:"1. Atoms"}),"\n",(0,t.jsx)(e.p,{children:"Atoms are the smallest possible components, such as buttons, inputs, or labels. They are the fundamental building blocks of an interface."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"// atoms/Button.jsx\nconst Button = ({ children, variant = 'primary', ...props }) => {\n  const baseStyles = 'px-4 py-2 rounded font-medium transition-colors';\n  const variants = {\n    primary: 'bg-blue-500 hover:bg-blue-600 text-white',\n    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800',\n    danger: 'bg-red-500 hover:bg-red-600 text-white'\n  };\n\n  return (\n    <button \n      className={`${baseStyles} ${variants[variant]}`} \n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n\n// atoms/Input.jsx\nconst Input = ({ label, error, ...props }) => {\n  return (\n    <input\n      className={`\n        w-full px-3 py-2 border rounded-md\n        ${error ? 'border-red-500' : 'border-gray-300'}\n        focus:outline-none focus:ring-2 focus:ring-blue-500\n      `}\n      {...props}\n    />\n  );\n};\n\n// atoms/Label.jsx\nconst Label = ({ children, required }) => {\n  return (\n    <label className=\"block text-sm font-medium text-gray-700\">\n      {children}\n      {required && <span className=\"text-red-500 ml-1\">*</span>}\n    </label>\n  );\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-molecules",children:"2. Molecules"}),"\n",(0,t.jsx)(e.p,{children:"Molecules are groups of atoms bonded together to form a functional unit."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'// molecules/FormField.jsx\nconst FormField = ({ label, error, required, ...inputProps }) => {\n  return (\n    <div className="space-y-1">\n      <Label required={required}>{label}</Label>\n      <Input \n        error={error}\n        required={required}\n        {...inputProps}\n      />\n      {error && (\n        <p className="text-sm text-red-500">{error}</p>\n      )}\n    </div>\n  );\n};\n\n// molecules/SearchBar.jsx\nconst SearchBar = ({ onSearch }) => {\n  return (\n    <div className="flex gap-2">\n      <Input \n        placeholder="Search..."\n        type="search"\n      />\n      <Button onClick={onSearch}>\n        Search\n      </Button>\n    </div>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-organisms",children:"3. Organisms"}),"\n",(0,t.jsx)(e.p,{children:"Organisms are complex UI components composed of groups of molecules and/or atoms."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'// organisms/LoginForm.jsx\nconst LoginForm = ({ onSubmit }) => {\n  const [formData, setFormData] = useState({\n    email: \'\',\n    password: \'\'\n  });\n  const [errors, setErrors] = useState({});\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Validation logic here\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className="space-y-4">\n      <FormField\n        label="Email"\n        type="email"\n        required\n        value={formData.email}\n        onChange={(e) => setFormData(prev => ({\n          ...prev,\n          email: e.target.value\n        }))}\n        error={errors.email}\n      />\n      <FormField\n        label="Password"\n        type="password"\n        required\n        value={formData.password}\n        onChange={(e) => setFormData(prev => ({\n          ...prev,\n          password: e.target.value\n        }))}\n        error={errors.password}\n      />\n      <Button type="submit">\n        Sign In\n      </Button>\n    </form>\n  );\n};\n\n// organisms/Header.jsx\nconst Header = () => {\n  return (\n    <header className="bg-white shadow">\n      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">\n        <div className="flex justify-between items-center">\n          <Logo />\n          <SearchBar onSearch={console.log} />\n          <nav className="flex gap-4">\n            <Button variant="secondary">Sign In</Button>\n            <Button>Sign Up</Button>\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.h3,{id:"4-templates",children:"4. Templates"}),"\n",(0,t.jsx)(e.p,{children:"Templates are page-level objects that place components into a layout and articulate the design's underlying content structure."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'// templates/AuthTemplate.jsx\nconst AuthTemplate = ({ title, children }) => {\n  return (\n    <div className="min-h-screen bg-gray-50 flex flex-col justify-center">\n      <div className="max-w-md w-full mx-auto">\n        <div className="bg-white p-8 shadow-lg rounded-lg">\n          <h1 className="text-2xl font-bold text-center mb-6">\n            {title}\n          </h1>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// templates/DashboardTemplate.jsx\nconst DashboardTemplate = ({ sidebar, main }) => {\n  return (\n    <div className="min-h-screen bg-gray-100">\n      <Header />\n      <div className="flex">\n        <aside className="w-64 bg-white shadow-lg">\n          {sidebar}\n        </aside>\n        <main className="flex-1 p-6">\n          {main}\n        </main>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,t.jsx)(e.h3,{id:"5-pages",children:"5. Pages"}),"\n",(0,t.jsx)(e.p,{children:"Pages are specific instances of templates that represent the final UI with real content."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:'// pages/LoginPage.jsx\nconst LoginPage = () => {\n  const handleLogin = (data) => {\n    // Handle login logic\n  };\n\n  return (\n    <AuthTemplate title="Sign In">\n      <LoginForm onSubmit={handleLogin} />\n      <p className="mt-4 text-center text-sm text-gray-600">\n        Don\'t have an account?{\' \'}\n        <Link to="/signup" className="text-blue-500 hover:text-blue-600">\n          Sign up\n        </Link>\n      </p>\n    </AuthTemplate>\n  );\n};\n\n// pages/DashboardPage.jsx\nconst DashboardPage = () => {\n  return (\n    <DashboardTemplate \n      sidebar={<DashboardSidebar />}\n      main={\n        <div className="space-y-6">\n          <DashboardStats />\n          <RecentActivity />\n        </div>\n      }\n    />\n  );\n};\n'})}),"\n",(0,t.jsx)(e.h2,{id:"organizing-the-project-structure",children:"Organizing the Project Structure"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 atoms/\n\u2502   \u2502   \u251c\u2500\u2500 Button.jsx\n\u2502   \u2502   \u251c\u2500\u2500 Input.jsx\n\u2502   \u2502   \u2514\u2500\u2500 Label.jsx\n\u2502   \u251c\u2500\u2500 molecules/\n\u2502   \u2502   \u251c\u2500\u2500 FormField.jsx\n\u2502   \u2502   \u2514\u2500\u2500 SearchBar.jsx\n\u2502   \u251c\u2500\u2500 organisms/\n\u2502   \u2502   \u251c\u2500\u2500 LoginForm.jsx\n\u2502   \u2502   \u2514\u2500\u2500 Header.jsx\n\u2502   \u2514\u2500\u2500 templates/\n\u2502       \u251c\u2500\u2500 AuthTemplate.jsx\n\u2502       \u2514\u2500\u2500 DashboardTemplate.jsx\n\u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 LoginPage.jsx\n\u2502   \u2514\u2500\u2500 DashboardPage.jsx\n\u2514\u2500\u2500 styles/\n    \u2514\u2500\u2500 globals.css\n"})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Component Isolation"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Each component should be self-contained"}),"\n",(0,t.jsx)(e.li,{children:"Use prop types or TypeScript for better type safety"}),"\n",(0,t.jsx)(e.li,{children:"Implement proper error handling"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"State Management"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Keep state as close to where it's needed as possible"}),"\n",(0,t.jsx)(e.li,{children:"Use Context or state management libraries for global state"}),"\n",(0,t.jsx)(e.li,{children:"Implement proper data flow patterns"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Styling Approach"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Use consistent styling methodology (e.g., Tailwind CSS)"}),"\n",(0,t.jsx)(e.li,{children:"Implement theme variables for colors, spacing, etc."}),"\n",(0,t.jsx)(e.li,{children:"Ensure responsive design at each level"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Documentation"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Document component props and usage"}),"\n",(0,t.jsx)(e.li,{children:"Include examples and edge cases"}),"\n",(0,t.jsx)(e.li,{children:"Use Storybook for component documentation"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Testing Strategy"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Test atoms and molecules in isolation"}),"\n",(0,t.jsx)(e.li,{children:"Integration tests for organisms"}),"\n",(0,t.jsx)(e.li,{children:"E2E tests for pages"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"component-development-workflow",children:"Component Development Workflow"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Start with atoms"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Design and implement basic components"}),"\n",(0,t.jsx)(e.li,{children:"Ensure they are flexible and reusable"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Combine into molecules"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Create logical groupings"}),"\n",(0,t.jsx)(e.li,{children:"Establish clear communication patterns"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Build organisms"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Combine molecules and atoms"}),"\n",(0,t.jsx)(e.li,{children:"Implement business logic"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Create templates"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Design layout structures"}),"\n",(0,t.jsx)(e.li,{children:"Ensure responsive behavior"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"Implement pages"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Add real content and data"}),"\n",(0,t.jsx)(e.li,{children:"Connect to backend services"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Code Splitting"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"// Lazy load components\nconst DashboardPage = React.lazy(() => import('./pages/DashboardPage'));\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"2",children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Memoization"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"// Memoize expensive components\nconst MemoizedComponent = React.memo(({ data }) => {\n  // Component logic\n});\n"})}),"\n",(0,t.jsxs)(e.ol,{start:"3",children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Virtual Lists"})}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",children:"// Use virtualization for long lists\nimport { FixedSizeList } from 'react-window';\n\nconst VirtualList = ({ items }) => (\n  <FixedSizeList\n    height={400}\n    width={600}\n    itemCount={items.length}\n    itemSize={50}\n  >\n    {({ index, style }) => (\n      <div style={style}>{items[index]}</div>\n    )}\n  </FixedSizeList>\n);\n"})}),"\n",(0,t.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(e.p,{children:"Atomic Design provides a systematic approach to building React applications that are:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Scalable"}),"\n",(0,t.jsx)(e.li,{children:"Maintainable"}),"\n",(0,t.jsx)(e.li,{children:"Consistent"}),"\n",(0,t.jsx)(e.li,{children:"Reusable"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"By following these patterns and practices, teams can create robust applications that are easier to develop and maintain over time."})]})}function m(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);