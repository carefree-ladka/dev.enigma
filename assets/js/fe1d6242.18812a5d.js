"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[7337],{1958:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=s(74848),r=s(28453);const i={},o="ResponseEntity in Spring Boot",a={id:"Java/ResponseEntity in Spring Boot",title:"ResponseEntity in Spring Boot",description:"Table of Contents",source:"@site/docs/Java/ResponseEntity in Spring Boot.mdx",sourceDirName:"Java",slug:"/Java/ResponseEntity in Spring Boot",permalink:"/dev.enigma/docs/Java/ResponseEntity in Spring Boot",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/ResponseEntity in Spring Boot.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OOP and Java 8 Interview Questions",permalink:"/dev.enigma/docs/Java/OOP and Java 8 Interview Questions"},next:{title:"Spring & Spring Boot Detailed Cheatsheet",permalink:"/dev.enigma/docs/Java/Spring & Spring Boot Detailed Cheatsheet"}},l={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What is ResponseEntity?",id:"what-is-responseentity",level:2},{value:"Key Features:",id:"key-features",level:3},{value:"Theory and Concepts",id:"theory-and-concepts",level:2},{value:"HTTP Response Structure",id:"http-response-structure",level:3},{value:"ResponseEntity Anatomy",id:"responseentity-anatomy",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Simple ResponseEntity",id:"simple-responseentity",level:3},{value:"Constructor vs Builder Pattern",id:"constructor-vs-builder-pattern",level:3},{value:"ResponseEntity Methods",id:"responseentity-methods",level:2},{value:"Static Factory Methods",id:"static-factory-methods",level:3},{value:"Success Responses",id:"success-responses",level:4},{value:"Error Responses",id:"error-responses",level:4},{value:"Generic Status",id:"generic-status",level:4},{value:"Builder Methods",id:"builder-methods",level:3},{value:"Working with DTOs",id:"working-with-dtos",level:2},{value:"DTO Classes",id:"dto-classes",level:3},{value:"Controller with DTOs",id:"controller-with-dtos",level:3},{value:"HTTP Status Codes",id:"http-status-codes",level:2},{value:"Common Status Codes in Spring Boot",id:"common-status-codes-in-spring-boot",level:3},{value:"2xx Success",id:"2xx-success",level:4},{value:"4xx Client Errors",id:"4xx-client-errors",level:4},{value:"5xx Server Errors",id:"5xx-server-errors",level:4},{value:"Headers Management",id:"headers-management",level:2},{value:"Common Headers",id:"common-headers",level:3},{value:"CORS Headers",id:"cors-headers",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Consistent Response Structure",id:"1-consistent-response-structure",level:3},{value:"2. Proper Error Handling",id:"2-proper-error-handling",level:3},{value:"3. Use Appropriate HTTP Methods and Status Codes",id:"3-use-appropriate-http-methods-and-status-codes",level:3},{value:"4. Location Header for Created Resources",id:"4-location-header-for-created-resources",level:3},{value:"Real-world Examples",id:"real-world-examples",level:2},{value:"E-commerce Product API",id:"e-commerce-product-api",level:3},{value:"File Upload/Download API",id:"file-uploaddownload-api",level:3},{value:"Authentication API",id:"authentication-api",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways:",id:"key-takeaways",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"responseentity-in-spring-boot",children:"ResponseEntity in Spring Boot"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#what-is-responseentity",children:"What is ResponseEntity?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#theory-and-concepts",children:"Theory and Concepts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#basic-usage",children:"Basic Usage"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#responseentity-methods",children:"ResponseEntity Methods"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#working-with-dtos",children:"Working with DTOs"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#http-status-codes",children:"HTTP Status Codes"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#headers-management",children:"Headers Management"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#real-world-examples",children:"Real-world Examples"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"what-is-responseentity",children:"What is ResponseEntity?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ResponseEntity"})," is a Spring Framework class that represents the entire HTTP response including the status code, headers, and body. It provides fine-grained control over the HTTP response in Spring Boot REST APIs."]}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key Features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complete HTTP Response Control"}),": Status code, headers, and body"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Generic type support for response body"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexible"}),": Can be used with or without response body"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Builder Pattern"}),": Fluent API for easy construction"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"theory-and-concepts",children:"Theory and Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"http-response-structure",children:"HTTP Response Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'HTTP/1.1 200 OK                    \u2190 Status Line\nContent-Type: application/json     \u2190 Headers\nContent-Length: 85\nCache-Control: no-cache\n\n{                                  \u2190 Body\n  "id": 1,\n  "name": "John Doe"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"responseentity-anatomy",children:"ResponseEntity Anatomy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"ResponseEntity<T> = Status Code + Headers + Body\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Status Code"}),": HTTP status (200, 404, 500, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Headers"}),": HTTP headers (Content-Type, Authorization, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Body"}),": Response payload (JSON, XML, plain text, etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"simple-responseentity",children:"Simple ResponseEntity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class UserController {\n\n    // Basic usage - just status\n    @GetMapping("/health")\n    public ResponseEntity<String> health() {\n        return ResponseEntity.ok("Service is running");\n    }\n\n    // With custom status\n    @PostMapping("/users")\n    public ResponseEntity<String> createUser() {\n        // Business logic here\n        return ResponseEntity.status(HttpStatus.CREATED)\n                           .body("User created successfully");\n    }\n\n    // No content response\n    @DeleteMapping("/users/{id}")\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {\n        // Delete logic here\n        return ResponseEntity.noContent().build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"constructor-vs-builder-pattern",children:"Constructor vs Builder Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Constructor approach\nreturn new ResponseEntity<>("Hello World", HttpStatus.OK);\n\n// Builder pattern (Recommended)\nreturn ResponseEntity.ok()\n                    .header("Custom-Header", "value")\n                    .body("Hello World");\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"responseentity-methods",children:"ResponseEntity Methods"}),"\n",(0,t.jsx)(n.h3,{id:"static-factory-methods",children:"Static Factory Methods"}),"\n",(0,t.jsx)(n.h4,{id:"success-responses",children:"Success Responses"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// 200 OK\nResponseEntity.ok()\nResponseEntity.ok("body")\nResponseEntity.ok().body(object)\n\n// 201 Created\nResponseEntity.status(HttpStatus.CREATED)\nResponseEntity.created(uri)\n\n// 204 No Content\nResponseEntity.noContent()\n'})}),"\n",(0,t.jsx)(n.h4,{id:"error-responses",children:"Error Responses"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// 400 Bad Request\nResponseEntity.badRequest()\nResponseEntity.badRequest().body("Invalid input")\n\n// 404 Not Found\nResponseEntity.notFound()\n\n// 500 Internal Server Error\nResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"generic-status",children:"Generic Status"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"ResponseEntity.status(HttpStatus.ACCEPTED)\nResponseEntity.status(202)  // Status code as integer\n"})}),"\n",(0,t.jsx)(n.h3,{id:"builder-methods",children:"Builder Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'ResponseEntity.ok()\n    .header("X-Custom-Header", "value")\n    .contentType(MediaType.APPLICATION_JSON)\n    .cacheControl(CacheControl.maxAge(60, TimeUnit.SECONDS))\n    .body(responseBody);\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"working-with-dtos",children:"Working with DTOs"}),"\n",(0,t.jsx)(n.h3,{id:"dto-classes",children:"DTO Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// User DTO\npublic class UserDTO {\n    private Long id;\n    private String name;\n    private String email;\n    private LocalDateTime createdAt;\n\n    // Constructors\n    public UserDTO() {}\n\n    public UserDTO(Long id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.createdAt = LocalDateTime.now();\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n}\n\n// Request DTO\npublic class CreateUserRequestDTO {\n    @NotBlank(message = "Name is required")\n    private String name;\n\n    @Email(message = "Invalid email format")\n    @NotBlank(message = "Email is required")\n    private String email;\n\n    // Getters and Setters\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n}\n\n// Response Wrapper DTO\npublic class ApiResponseDTO<T> {\n    private boolean success;\n    private String message;\n    private T data;\n    private LocalDateTime timestamp;\n\n    public ApiResponseDTO(boolean success, String message, T data) {\n        this.success = success;\n        this.message = message;\n        this.data = data;\n        this.timestamp = LocalDateTime.now();\n    }\n\n    // Static factory methods\n    public static <T> ApiResponseDTO<T> success(T data) {\n        return new ApiResponseDTO<>(true, "Success", data);\n    }\n\n    public static <T> ApiResponseDTO<T> success(String message, T data) {\n        return new ApiResponseDTO<>(true, message, data);\n    }\n\n    public static <T> ApiResponseDTO<T> error(String message) {\n        return new ApiResponseDTO<>(false, message, null);\n    }\n\n    // Getters and Setters\n    public boolean isSuccess() { return success; }\n    public void setSuccess(boolean success) { this.success = success; }\n\n    public String getMessage() { return message; }\n    public void setMessage(String message) { this.message = message; }\n\n    public T getData() { return data; }\n    public void setData(T data) { this.data = data; }\n\n    public LocalDateTime getTimestamp() { return timestamp; }\n    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"controller-with-dtos",children:"Controller with DTOs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/users")\n@Validated\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    // GET - Single User\n    @GetMapping("/{id}")\n    public ResponseEntity<ApiResponseDTO<UserDTO>> getUserById(@PathVariable Long id) {\n        try {\n            UserDTO user = userService.findById(id);\n            if (user != null) {\n                return ResponseEntity.ok(ApiResponseDTO.success(user));\n            } else {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                    .body(ApiResponseDTO.error("User not found"));\n            }\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponseDTO.error("Internal server error"));\n        }\n    }\n\n    // GET - All Users with Pagination\n    @GetMapping\n    public ResponseEntity<ApiResponseDTO<List<UserDTO>>> getAllUsers(\n            @RequestParam(defaultValue = "0") int page,\n            @RequestParam(defaultValue = "10") int size) {\n        try {\n            List<UserDTO> users = userService.findAll(page, size);\n            return ResponseEntity.ok(ApiResponseDTO.success("Users retrieved successfully", users));\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponseDTO.error("Failed to retrieve users"));\n        }\n    }\n\n    // POST - Create User\n    @PostMapping\n    public ResponseEntity<ApiResponseDTO<UserDTO>> createUser(\n            @Valid @RequestBody CreateUserRequestDTO request) {\n        try {\n            UserDTO createdUser = userService.createUser(request);\n\n            URI location = URI.create("/api/users/" + createdUser.getId());\n\n            return ResponseEntity.created(location)\n                .header("X-Created-Resource", "User")\n                .body(ApiResponseDTO.success("User created successfully", createdUser));\n\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest()\n                .body(ApiResponseDTO.error("Invalid input: " + e.getMessage()));\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponseDTO.error("Failed to create user"));\n        }\n    }\n\n    // PUT - Update User\n    @PutMapping("/{id}")\n    public ResponseEntity<ApiResponseDTO<UserDTO>> updateUser(\n            @PathVariable Long id,\n            @Valid @RequestBody CreateUserRequestDTO request) {\n        try {\n            UserDTO updatedUser = userService.updateUser(id, request);\n            if (updatedUser != null) {\n                return ResponseEntity.ok(ApiResponseDTO.success("User updated successfully", updatedUser));\n            } else {\n                return ResponseEntity.notFound().build();\n            }\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest()\n                .body(ApiResponseDTO.error("Invalid input: " + e.getMessage()));\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponseDTO.error("Failed to update user"));\n        }\n    }\n\n    // DELETE - Delete User\n    @DeleteMapping("/{id}")\n    public ResponseEntity<ApiResponseDTO<Void>> deleteUser(@PathVariable Long id) {\n        try {\n            boolean deleted = userService.deleteUser(id);\n            if (deleted) {\n                return ResponseEntity.ok(ApiResponseDTO.success("User deleted successfully", null));\n            } else {\n                return ResponseEntity.notFound().build();\n            }\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponseDTO.error("Failed to delete user"));\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"http-status-codes",children:"HTTP Status Codes"}),"\n",(0,t.jsx)(n.h3,{id:"common-status-codes-in-spring-boot",children:"Common Status Codes in Spring Boot"}),"\n",(0,t.jsx)(n.h4,{id:"2xx-success",children:"2xx Success"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// 200 OK - Request successful\nResponseEntity.ok(data)\n\n// 201 Created - Resource created\nResponseEntity.status(HttpStatus.CREATED).body(data)\n\n// 204 No Content - Success but no content to return\nResponseEntity.noContent().build()\n\n// 202 Accepted - Request accepted for processing\nResponseEntity.accepted().build()\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4xx-client-errors",children:"4xx Client Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// 400 Bad Request - Invalid request\nResponseEntity.badRequest().body("Invalid data")\n\n// 401 Unauthorized - Authentication required\nResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Authentication required")\n\n// 403 Forbidden - Access denied\nResponseEntity.status(HttpStatus.FORBIDDEN).body("Access denied")\n\n// 404 Not Found - Resource not found\nResponseEntity.notFound().build()\n\n// 409 Conflict - Resource conflict\nResponseEntity.status(HttpStatus.CONFLICT).body("Resource already exists")\n\n// 422 Unprocessable Entity - Validation errors\nResponseEntity.unprocessableEntity().body(validationErrors)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"5xx-server-errors",children:"5xx Server Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// 500 Internal Server Error\nResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Server error")\n\n// 503 Service Unavailable\nResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body("Service temporarily unavailable")\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"headers-management",children:"Headers Management"}),"\n",(0,t.jsx)(n.h3,{id:"common-headers",children:"Common Headers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@GetMapping("/users/{id}")\npublic ResponseEntity<UserDTO> getUser(@PathVariable Long id) {\n    UserDTO user = userService.findById(id);\n\n    return ResponseEntity.ok()\n        .header("X-Total-Count", "1")\n        .header("X-Request-ID", UUID.randomUUID().toString())\n        .contentType(MediaType.APPLICATION_JSON)\n        .cacheControl(CacheControl.maxAge(300, TimeUnit.SECONDS))\n        .lastModified(user.getLastModified())\n        .eTag(user.getVersion().toString())\n        .body(user);\n}\n\n// Multiple headers\n@GetMapping("/users")\npublic ResponseEntity<List<UserDTO>> getUsers() {\n    List<UserDTO> users = userService.findAll();\n\n    HttpHeaders headers = new HttpHeaders();\n    headers.add("X-Total-Count", String.valueOf(users.size()));\n    headers.add("X-Page-Number", "1");\n    headers.add("X-Page-Size", "10");\n    headers.add("Access-Control-Allow-Origin", "*");\n\n    return ResponseEntity.ok()\n        .headers(headers)\n        .body(users);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cors-headers",children:"CORS Headers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@CrossOrigin(origins = "http://localhost:3000")\n@GetMapping("/users")\npublic ResponseEntity<List<UserDTO>> getUsers() {\n    List<UserDTO> users = userService.findAll();\n\n    return ResponseEntity.ok()\n        .header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")\n        .header("Access-Control-Allow-Headers", "Content-Type, Authorization")\n        .body(users);\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-consistent-response-structure",children:"1. Consistent Response Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Always use a consistent response wrapper\npublic class ApiResponse<T> {\n    private boolean success;\n    private String message;\n    private T data;\n    private Map<String, Object> metadata;\n\n    // Methods...\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-proper-error-handling",children:"2. Proper Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(EntityNotFoundException.class)\n    public ResponseEntity<ApiResponseDTO<Void>> handleEntityNotFound(EntityNotFoundException ex) {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND)\n            .body(ApiResponseDTO.error(ex.getMessage()));\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<ApiResponseDTO<Map<String, String>>> handleValidation(\n            MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getFieldErrors().forEach(error ->\n            errors.put(error.getField(), error.getDefaultMessage()));\n\n        return ResponseEntity.badRequest()\n            .body(ApiResponseDTO.error("Validation failed").setData(errors));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-appropriate-http-methods-and-status-codes",children:"3. Use Appropriate HTTP Methods and Status Codes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n\n    @GetMapping("/{id}")           // 200 OK or 404 NOT_FOUND\n    public ResponseEntity<UserDTO> getUser(@PathVariable Long id) { /* ... */ }\n\n    @PostMapping                   // 201 CREATED\n    public ResponseEntity<UserDTO> createUser(@RequestBody UserDTO user) { /* ... */ }\n\n    @PutMapping("/{id}")           // 200 OK or 404 NOT_FOUND\n    public ResponseEntity<UserDTO> updateUser(@PathVariable Long id, @RequestBody UserDTO user) { /* ... */ }\n\n    @DeleteMapping("/{id}")        // 204 NO_CONTENT or 404 NOT_FOUND\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id) { /* ... */ }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-location-header-for-created-resources",children:"4. Location Header for Created Resources"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@PostMapping\npublic ResponseEntity<UserDTO> createUser(@RequestBody CreateUserRequestDTO request) {\n    UserDTO createdUser = userService.createUser(request);\n\n    URI location = ServletUriComponentsBuilder\n        .fromCurrentRequest()\n        .path("/{id}")\n        .buildAndExpand(createdUser.getId())\n        .toUri();\n\n    return ResponseEntity.created(location).body(createdUser);\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"real-world-examples",children:"Real-world Examples"}),"\n",(0,t.jsx)(n.h3,{id:"e-commerce-product-api",children:"E-commerce Product API"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/products")\npublic class ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @GetMapping\n    public ResponseEntity<PageResponseDTO<ProductDTO>> getProducts(\n            @RequestParam(defaultValue = "0") int page,\n            @RequestParam(defaultValue = "10") int size,\n            @RequestParam(required = false) String category,\n            @RequestParam(required = false) String sortBy) {\n\n        PageResponseDTO<ProductDTO> products = productService.getProducts(page, size, category, sortBy);\n\n        return ResponseEntity.ok()\n            .header("X-Total-Elements", String.valueOf(products.getTotalElements()))\n            .header("X-Total-Pages", String.valueOf(products.getTotalPages()))\n            .cacheControl(CacheControl.maxAge(60, TimeUnit.SECONDS))\n            .body(products);\n    }\n\n    @PostMapping\n    public ResponseEntity<ApiResponseDTO<ProductDTO>> createProduct(\n            @Valid @RequestBody CreateProductRequestDTO request,\n            HttpServletRequest httpRequest) {\n\n        try {\n            ProductDTO product = productService.createProduct(request);\n\n            String location = httpRequest.getRequestURL().toString() + "/" + product.getId();\n\n            return ResponseEntity.status(HttpStatus.CREATED)\n                .header("Location", location)\n                .header("X-Resource-ID", product.getId().toString())\n                .body(ApiResponseDTO.success("Product created successfully", product));\n\n        } catch (ProductAlreadyExistsException e) {\n            return ResponseEntity.status(HttpStatus.CONFLICT)\n                .body(ApiResponseDTO.error("Product with this SKU already exists"));\n        }\n    }\n\n    @PatchMapping("/{id}/stock")\n    public ResponseEntity<ApiResponseDTO<ProductDTO>> updateStock(\n            @PathVariable Long id,\n            @RequestBody UpdateStockRequestDTO request) {\n\n        try {\n            ProductDTO updatedProduct = productService.updateStock(id, request.getQuantity());\n\n            return ResponseEntity.ok()\n                .header("X-Stock-Updated", "true")\n                .body(ApiResponseDTO.success("Stock updated successfully", updatedProduct));\n\n        } catch (InsufficientStockException e) {\n            return ResponseEntity.badRequest()\n                .body(ApiResponseDTO.error("Insufficient stock available"));\n        } catch (ProductNotFoundException e) {\n            return ResponseEntity.notFound().build();\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"file-uploaddownload-api",children:"File Upload/Download API"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/files")\npublic class FileController {\n\n    @PostMapping("/upload")\n    public ResponseEntity<ApiResponseDTO<FileDTO>> uploadFile(\n            @RequestParam("file") MultipartFile file) {\n\n        try {\n            if (file.isEmpty()) {\n                return ResponseEntity.badRequest()\n                    .body(ApiResponseDTO.error("File cannot be empty"));\n            }\n\n            FileDTO uploadedFile = fileService.uploadFile(file);\n\n            return ResponseEntity.status(HttpStatus.CREATED)\n                .header("X-File-Size", String.valueOf(file.getSize()))\n                .header("X-File-Type", file.getContentType())\n                .body(ApiResponseDTO.success("File uploaded successfully", uploadedFile));\n\n        } catch (IOException e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponseDTO.error("Failed to upload file"));\n        }\n    }\n\n    @GetMapping("/download/{id}")\n    public ResponseEntity<Resource> downloadFile(@PathVariable Long id) {\n        try {\n            FileResource fileResource = fileService.getFile(id);\n\n            return ResponseEntity.ok()\n                .contentType(MediaType.parseMediaType(fileResource.getContentType()))\n                .contentLength(fileResource.getSize())\n                .header(HttpHeaders.CONTENT_DISPOSITION,\n                       "attachment; filename=\\"" + fileResource.getFilename() + "\\"")\n                .body(fileResource.getResource());\n\n        } catch (FileNotFoundException e) {\n            return ResponseEntity.notFound().build();\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"authentication-api",children:"Authentication API"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/auth")\npublic class AuthController {\n\n    @PostMapping("/login")\n    public ResponseEntity<ApiResponseDTO<LoginResponseDTO>> login(\n            @Valid @RequestBody LoginRequestDTO request) {\n\n        try {\n            LoginResponseDTO response = authService.authenticate(request);\n\n            return ResponseEntity.ok()\n                .header("Authorization", "Bearer " + response.getAccessToken())\n                .header("X-Token-Expires-In", String.valueOf(response.getExpiresIn()))\n                .body(ApiResponseDTO.success("Login successful", response));\n\n        } catch (BadCredentialsException e) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                .body(ApiResponseDTO.error("Invalid credentials"));\n        }\n    }\n\n    @PostMapping("/refresh")\n    public ResponseEntity<ApiResponseDTO<TokenResponseDTO>> refreshToken(\n            @RequestHeader("Authorization") String refreshToken) {\n\n        try {\n            TokenResponseDTO response = authService.refreshToken(refreshToken);\n\n            return ResponseEntity.ok()\n                .header("Authorization", "Bearer " + response.getAccessToken())\n                .body(ApiResponseDTO.success("Token refreshed successfully", response));\n\n        } catch (TokenExpiredException e) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                .body(ApiResponseDTO.error("Refresh token expired"));\n        }\n    }\n\n    @PostMapping("/logout")\n    public ResponseEntity<ApiResponseDTO<Void>> logout(\n            @RequestHeader("Authorization") String token) {\n\n        authService.logout(token);\n\n        return ResponseEntity.ok()\n            .header("X-Logout-Time", String.valueOf(System.currentTimeMillis()))\n            .body(ApiResponseDTO.success("Logout successful", null));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ResponseEntity"})," is a powerful tool in Spring Boot that provides complete control over HTTP responses. When combined with DTOs, it enables the creation of robust, type-safe REST APIs with proper status codes, headers, and response structures."]}),"\n",(0,t.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always use appropriate HTTP status codes"}),"\n",(0,t.jsx)(n.li,{children:"Implement consistent response structures with DTOs"}),"\n",(0,t.jsx)(n.li,{children:"Handle errors gracefully with proper status codes"}),"\n",(0,t.jsx)(n.li,{children:"Use headers effectively for metadata and caching"}),"\n",(0,t.jsx)(n.li,{children:"Follow RESTful principles in your API design"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper validation and error handling"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);