"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[3529],{8408:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=i(74848),r=i(28453);const t={},l="Complete Redis Guide with Spring Boot Integration",a={id:"Redis/Complete Redis Guide with Spring Boot Integration",title:"Complete Redis Guide with Spring Boot Integration",description:"Table of Contents",source:"@site/docs/Redis/Complete Redis Guide with Spring Boot Integration.mdx",sourceDirName:"Redis",slug:"/Redis/Complete Redis Guide with Spring Boot Integration",permalink:"/docs/Redis/Complete Redis Guide with Spring Boot Integration",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Redis/Complete Redis Guide with Spring Boot Integration.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Redis",permalink:"/docs/category/redis"},next:{title:"Complete System Design Interview Guide \u2014 2025",permalink:"/docs/category/complete-system-design-interview-guide--2025"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"\ud83d\udcda Core Concepts",id:"-core-concepts",level:3},{value:"\u2699\ufe0f Advanced Features",id:"\ufe0f-advanced-features",level:3},{value:"\ud83d\ude80 Performance &amp; Optimization",id:"-performance--optimization",level:3},{value:"\ud83c\udf43 Spring Boot Integration",id:"-spring-boot-integration",level:3},{value:"\ud83d\udcca Diagrams &amp; Architecture",id:"-diagrams--architecture",level:3},{value:"\ud83d\udca1 Use Cases &amp; Patterns",id:"-use-cases--patterns",level:3},{value:"\ud83d\udd27 Advanced Patterns",id:"-advanced-patterns",level:3},{value:"\ud83d\udee1\ufe0f Best Practices",id:"\ufe0f-best-practices",level:3},{value:"\ud83d\udcc8 Monitoring &amp; Debugging",id:"-monitoring--debugging",level:3},{value:"\ud83d\udd04 Comparison &amp; Benchmarks",id:"-comparison--benchmarks",level:3},{value:"\ud83d\udcd6 Reference",id:"-reference",level:3},{value:"What is Redis?",id:"what-is-redis",level:2},{value:"Redis Data Structures",id:"redis-data-structures",level:2},{value:"String",id:"string",level:3},{value:"List",id:"list",level:3},{value:"Set",id:"set",level:3},{value:"Sorted Set (ZSet)",id:"sorted-set-zset",level:3},{value:"Hash",id:"hash",level:3},{value:"Bitmap / Bitfield",id:"bitmap--bitfield",level:3},{value:"HyperLogLog",id:"hyperloglog",level:3},{value:"Stream",id:"stream",level:3},{value:"Geo (Geospatial)",id:"geo-geospatial",level:3},{value:"Essential Redis Commands",id:"essential-redis-commands",level:2},{value:"Basic Key Operations",id:"basic-key-operations",level:3},{value:"Numeric Operations",id:"numeric-operations",level:3},{value:"Key Pattern Operations",id:"key-pattern-operations",level:3},{value:"Server &amp; Info Commands",id:"server--info-commands",level:3},{value:"Redis Persistence",id:"redis-persistence",level:2},{value:"RDB (Redis Database) - Snapshotting",id:"rdb-redis-database---snapshotting",level:3},{value:"AOF (Append Only File) - Write Logging",id:"aof-append-only-file---write-logging",level:3},{value:"Hybrid Persistence (RDB + AOF)",id:"hybrid-persistence-rdb--aof",level:3},{value:"Redis Expiration &amp; TTL",id:"redis-expiration--ttl",level:2},{value:"Setting Expiration",id:"setting-expiration",level:3},{value:"Checking TTL",id:"checking-ttl",level:3},{value:"Cache Invalidation Strategy",id:"cache-invalidation-strategy",level:3},{value:"Redis Eviction Policies",id:"redis-eviction-policies",level:2},{value:"Available Policies",id:"available-policies",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Recommendations",id:"recommendations",level:3},{value:"Redis Transactions",id:"redis-transactions",level:2},{value:"Basic Transaction Flow",id:"basic-transaction-flow",level:3},{value:"Features",id:"features",level:3},{value:"WATCH for Optimistic Locking",id:"watch-for-optimistic-locking",level:3},{value:"Redis Pub/Sub",id:"redis-pubsub",level:2},{value:"Basic Commands",id:"basic-commands",level:3},{value:"Characteristics",id:"characteristics",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Redis Streams (Advanced Messaging)",id:"redis-streams-advanced-messaging",level:2},{value:"Basic Stream Operations",id:"basic-stream-operations",level:3},{value:"Consumer Groups (Reliable Processing)",id:"consumer-groups-reliable-processing",level:3},{value:"Features Over Pub/Sub",id:"features-over-pubsub",level:3},{value:"Use Cases",id:"use-cases-1",level:3},{value:"Redis Cluster (Horizontal Scaling)",id:"redis-cluster-horizontal-scaling",level:2},{value:"Architecture",id:"architecture",level:3},{value:"Key Distribution",id:"key-distribution",level:3},{value:"Hash Tags",id:"hash-tags",level:3},{value:"Cluster Commands",id:"cluster-commands",level:3},{value:"Limitations",id:"limitations-1",level:3},{value:"Benefits",id:"benefits",level:3},{value:"Redis Replication (Master-Slave)",id:"redis-replication-master-slave",level:2},{value:"Basic Replication Setup",id:"basic-replication-setup",level:3},{value:"Characteristics",id:"characteristics-1",level:3},{value:"Replication Flow",id:"replication-flow",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"Use Cases",id:"use-cases-2",level:3},{value:"Rate Limiting Pattern",id:"rate-limiting-pattern",level:2},{value:"Fixed Window Counter",id:"fixed-window-counter",level:3},{value:"Sliding Window Log",id:"sliding-window-log",level:3},{value:"Token Bucket (Redis Script)",id:"token-bucket-redis-script",level:3},{value:"Use Cases",id:"use-cases-3",level:3},{value:"Pipelining",id:"pipelining",level:2},{value:"Without Pipelining",id:"without-pipelining",level:3},{value:"With Pipelining",id:"with-pipelining",level:3},{value:"Performance Impact",id:"performance-impact",level:3},{value:"When to Use",id:"when-to-use",level:3},{value:"Lua Scripting",id:"lua-scripting",level:2},{value:"Why Lua Scripts?",id:"why-lua-scripts",level:3},{value:"Basic Example",id:"basic-example",level:3},{value:"Rate Limiter Script",id:"rate-limiter-script",level:3},{value:"Script Management",id:"script-management",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"1. Connection Pooling",id:"1-connection-pooling",level:3},{value:"2. Avoid Expensive Operations",id:"2-avoid-expensive-operations",level:3},{value:"3. Use Appropriate Data Structures",id:"3-use-appropriate-data-structures",level:3},{value:"4. Batch Operations",id:"4-batch-operations",level:3},{value:"5. Memory Optimization",id:"5-memory-optimization",level:3},{value:"6. Monitor Slow Queries",id:"6-monitor-slow-queries",level:3},{value:"Redis Tools",id:"redis-tools",level:2},{value:"redis-cli (Command Line Interface)",id:"redis-cli-command-line-interface",level:3},{value:"redis-benchmark (Performance Testing)",id:"redis-benchmark-performance-testing",level:3},{value:"RedisInsight (GUI Visualization)",id:"redisinsight-gui-visualization",level:3},{value:"Other Useful Tools",id:"other-useful-tools",level:3},{value:"Spring Boot Redis Integration",id:"spring-boot-redis-integration",level:2},{value:"Maven Dependencies",id:"maven-dependencies",level:3},{value:"Application Properties",id:"application-properties",level:3},{value:"Redis Configuration Class",id:"redis-configuration-class",level:3},{value:"Service Layer with Spring Cache Annotations",id:"service-layer-with-spring-cache-annotations",level:3},{value:"Custom Cache Key Generator",id:"custom-cache-key-generator",level:3},{value:"Using RedisTemplate Directly",id:"using-redistemplate-directly",level:3},{value:"Rate Limiting with Spring Boot",id:"rate-limiting-with-spring-boot",level:3},{value:"Session Management with Redis",id:"session-management-with-redis",level:3},{value:"Redis Architecture Diagrams",id:"redis-architecture-diagrams",level:2},{value:"Basic Redis Client-Server Architecture",id:"basic-redis-client-server-architecture",level:3},{value:"Master-Replica Replication",id:"master-replica-replication",level:3},{value:"Redis Sentinel High Availability",id:"redis-sentinel-high-availability",level:3},{value:"Redis Cluster Sharding Architecture",id:"redis-cluster-sharding-architecture",level:3},{value:"Spring Boot Redis Caching Flow",id:"spring-boot-redis-caching-flow",level:3},{value:"Redis Pub/Sub vs Streams Architecture",id:"redis-pubsub-vs-streams-architecture",level:3},{value:"Redis Data Structure Memory Layout",id:"redis-data-structure-memory-layout",level:3},{value:"Redis Cluster Failover Process",id:"redis-cluster-failover-process",level:3},{value:"Spring Boot Application Architecture with Redis",id:"spring-boot-application-architecture-with-redis",level:3},{value:"Redis Use Cases in Detail",id:"redis-use-cases-in-detail",level:2},{value:"1. Caching Strategy",id:"1-caching-strategy",level:3},{value:"2. Session Store",id:"2-session-store",level:3},{value:"3. Leaderboard Implementation",id:"3-leaderboard-implementation",level:3},{value:"4. Real-Time Analytics",id:"4-real-time-analytics",level:3},{value:"5. Distributed Locks",id:"5-distributed-locks",level:3},{value:"Redis Best Practices",id:"redis-best-practices",level:2},{value:"1. Key Naming Conventions",id:"1-key-naming-conventions",level:3},{value:"2. Memory Optimization",id:"2-memory-optimization",level:3},{value:"3. Always Set TTL on Cache Keys",id:"3-always-set-ttl-on-cache-keys",level:3},{value:"4. Use Connection Pooling",id:"4-use-connection-pooling",level:3},{value:"5. Monitor Performance",id:"5-monitor-performance",level:3},{value:"6. Security Hardening",id:"6-security-hardening",level:3},{value:"7. Backup Strategy",id:"7-backup-strategy",level:3},{value:"8. Handle Failures Gracefully",id:"8-handle-failures-gracefully",level:3},{value:"9. Avoid Large Keys and Values",id:"9-avoid-large-keys-and-values",level:3},{value:"10. Use Appropriate Data Structures",id:"10-use-appropriate-data-structures",level:3},{value:"Advanced Redis Patterns",id:"advanced-redis-patterns",level:2},{value:"1. Cache Stampede Prevention",id:"1-cache-stampede-prevention",level:3},{value:"2. Bloom Filter for Existence Checks",id:"2-bloom-filter-for-existence-checks",level:3},{value:"3. Sliding Window Rate Limiter (Token Bucket)",id:"3-sliding-window-rate-limiter-token-bucket",level:3},{value:"4. Geospatial Indexing for Location-Based Services",id:"4-geospatial-indexing-for-location-based-services",level:3},{value:"5. Job Queue with Priority",id:"5-job-queue-with-priority",level:3},{value:"6. Implement Activity Feed",id:"6-implement-activity-feed",level:3},{value:"Redis Monitoring and Debugging",id:"redis-monitoring-and-debugging",level:2},{value:"1. Key Metrics to Monitor",id:"1-key-metrics-to-monitor",level:3},{value:"2. Monitoring Script Example",id:"2-monitoring-script-example",level:3},{value:"3. Debugging Techniques",id:"3-debugging-techniques",level:3},{value:"4. Common Issues and Solutions",id:"4-common-issues-and-solutions",level:3},{value:"Redis vs Other Caching Solutions",id:"redis-vs-other-caching-solutions",level:2},{value:"Comparison Table",id:"comparison-table",level:3},{value:"When to Use Redis",id:"when-to-use-redis",level:3},{value:"Redis Performance Benchmarks",id:"redis-performance-benchmarks",level:2},{value:"Typical Performance Numbers",id:"typical-performance-numbers",level:3},{value:"Running Your Own Benchmarks",id:"running-your-own-benchmarks",level:3},{value:"Redis Configuration Reference",id:"redis-configuration-reference",level:2},{value:"Important Configuration Parameters",id:"important-configuration-parameters",level:3},{value:"Redis Cheat Sheet",id:"redis-cheat-sheet",level:2},{value:"Quick Command Reference",id:"quick-command-reference",level:3},{value:"Redis Ecosystem and Tools",id:"redis-ecosystem-and-tools",level:2},{value:"Official Tools",id:"official-tools",level:3},{value:"Third-Party Tools",id:"third-party-tools",level:3},{value:"Client Libraries",id:"client-libraries",level:3},{value:"Cloud Providers",id:"cloud-providers",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Best Use Cases",id:"best-use-cases",level:3},{value:"When Not to Use Redis",id:"when-not-to-use-redis",level:3},{value:"Next Steps",id:"next-steps",level:3},{value:"Resources",id:"resources",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"complete-redis-guide-with-spring-boot-integration",children:"Complete Redis Guide with Spring Boot Integration"})}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsx)(n.h3,{id:"-core-concepts",children:"\ud83d\udcda Core Concepts"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#what-is-redis",children:"What is Redis?"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#redis-data-structures",children:"Redis Data Structures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#string",children:"String"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#list",children:"List"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#set",children:"Set"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#sorted-set-zset",children:"Sorted Set (ZSet)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#hash",children:"Hash"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#bitmap--bitfield",children:"Bitmap / Bitfield"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#hyperloglog",children:"HyperLogLog"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#stream",children:"Stream"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#geo-geospatial",children:"Geo (Geospatial)"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#essential-redis-commands",children:"Essential Redis Commands"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#redis-persistence",children:"Redis Persistence"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#rdb-redis-database---snapshotting",children:"RDB (Redis Database)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#aof-append-only-file---write-logging",children:"AOF (Append Only File)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#hybrid-persistence-rdb--aof",children:"Hybrid Persistence"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-advanced-features",children:"\u2699\ufe0f Advanced Features"}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-expiration--ttl",children:"Redis Expiration & TTL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-eviction-policies",children:"Redis Eviction Policies"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-transactions",children:"Redis Transactions"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-pubsub",children:"Redis Pub/Sub"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-streams-advanced-messaging",children:"Redis Streams (Advanced Messaging)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-cluster-horizontal-scaling",children:"Redis Cluster (Horizontal Scaling)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-replication-master-slave",children:"Redis Replication (Master-Slave)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#rate-limiting-pattern",children:"Rate Limiting Pattern"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#pipelining",children:"Pipelining"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#lua-scripting",children:"Lua Scripting"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-performance--optimization",children:"\ud83d\ude80 Performance & Optimization"}),"\n",(0,s.jsxs)(n.ol,{start:"15",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-tools",children:"Redis Tools"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-cli-command-line-interface",children:"redis-cli"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-benchmark-performance-testing",children:"redis-benchmark"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redisinsight-gui-visualization",children:"RedisInsight"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-spring-boot-integration",children:"\ud83c\udf43 Spring Boot Integration"}),"\n",(0,s.jsxs)(n.ol,{start:"17",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#spring-boot-redis-integration",children:"Spring Boot Redis Integration"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#maven-dependencies",children:"Maven Dependencies"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#application-properties",children:"Application Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-configuration-class",children:"Redis Configuration Class"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#service-layer-with-spring-cache-annotations",children:"Service Layer with Caching"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#custom-cache-key-generator",children:"Custom Cache Key Generator"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#using-redistemplate-directly",children:"Using RedisTemplate Directly"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#rate-limiting-with-spring-boot",children:"Rate Limiting with Spring Boot"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#session-management-with-redis",children:"Session Management"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-diagrams--architecture",children:"\ud83d\udcca Diagrams & Architecture"}),"\n",(0,s.jsxs)(n.ol,{start:"18",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-architecture-diagrams",children:"Redis Architecture Diagrams"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#basic-redis-client-server-architecture",children:"Basic Client-Server Architecture"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#master-replica-replication",children:"Master-Replica Replication"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-sentinel-high-availability",children:"Redis Sentinel High Availability"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-cluster-sharding-architecture",children:"Redis Cluster Sharding"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#spring-boot-redis-caching-flow",children:"Spring Boot Caching Flow"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-pubsub-vs-streams-architecture",children:"Pub/Sub vs Streams"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-data-structure-memory-layout",children:"Data Structure Memory Layout"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-cluster-failover-process",children:"Cluster Failover Process"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#spring-boot-application-architecture-with-redis",children:"Spring Boot Application Architecture"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-use-cases--patterns",children:"\ud83d\udca1 Use Cases & Patterns"}),"\n",(0,s.jsxs)(n.ol,{start:"19",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-use-cases-in-detail",children:"Redis Use Cases in Detail"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-caching-strategy",children:"Caching Strategy"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-session-store",children:"Session Store"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-leaderboard-implementation",children:"Leaderboard Implementation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-real-time-analytics",children:"Real-Time Analytics"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#5-distributed-locks",children:"Distributed Locks"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-advanced-patterns",children:"\ud83d\udd27 Advanced Patterns"}),"\n",(0,s.jsxs)(n.ol,{start:"20",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#advanced-redis-patterns",children:"Advanced Redis Patterns"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-cache-stampede-prevention",children:"Cache Stampede Prevention"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-bloom-filter-for-existence-checks",children:"Bloom Filter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-sliding-window-rate-limiter-token-bucket",children:"Sliding Window Rate Limiter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-geospatial-indexing-for-location-based-services",children:"Geospatial Indexing"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#5-job-queue-with-priority",children:"Job Queue with Priority"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#6-implement-activity-feed",children:"Activity Feed"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-best-practices",children:"\ud83d\udee1\ufe0f Best Practices"}),"\n",(0,s.jsxs)(n.ol,{start:"21",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-best-practices",children:"Redis Best Practices"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-key-naming-conventions",children:"Key Naming Conventions"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-memory-optimization",children:"Memory Optimization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-always-set-ttl-on-cache-keys",children:"Always Set TTL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-use-connection-pooling",children:"Use Connection Pooling"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#5-monitor-performance",children:"Monitor Performance"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#6-security-hardening",children:"Security Hardening"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#7-backup-strategy",children:"Backup Strategy"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#8-handle-failures-gracefully",children:"Handle Failures Gracefully"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#9-avoid-large-keys-and-values",children:"Avoid Large Keys"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#10-use-appropriate-data-structures",children:"Use Appropriate Data Structures"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-monitoring--debugging",children:"\ud83d\udcc8 Monitoring & Debugging"}),"\n",(0,s.jsxs)(n.ol,{start:"22",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-monitoring-and-debugging",children:"Redis Monitoring and Debugging"})}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-key-metrics-to-monitor",children:"Key Metrics to Monitor"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-monitoring-script-example",children:"Monitoring Script Example"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-debugging-techniques",children:"Debugging Techniques"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-common-issues-and-solutions",children:"Common Issues and Solutions"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-comparison--benchmarks",children:"\ud83d\udd04 Comparison & Benchmarks"}),"\n",(0,s.jsxs)(n.ol,{start:"23",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-vs-other-caching-solutions",children:"Redis vs Other Caching Solutions"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-performance-benchmarks",children:"Redis Performance Benchmarks"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-reference",children:"\ud83d\udcd6 Reference"}),"\n",(0,s.jsxs)(n.ol,{start:"25",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-configuration-reference",children:"Redis Configuration Reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-cheat-sheet",children:"Redis Cheat Sheet"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#redis-ecosystem-and-tools",children:"Redis Ecosystem and Tools"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"what-is-redis",children:"What is Redis?"}),"\n",(0,s.jsx)(n.p,{children:"Redis (REmote DIctionary Server) is an open-source, in-memory key-value data store that serves multiple roles in modern applications:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache"}),": High-speed data caching layer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": In-memory database with optional persistence"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Message Broker"}),": Pub/Sub and streaming capabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Session Store"}),": Distributed session management"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Characteristics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"In-Memory Storage"}),": Data stored in RAM for microsecond latency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Persistence Options"}),": Optional disk persistence (RDB/AOF)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single-Threaded"}),": Uses single thread for command execution (atomic operations)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Speed"}),": Handles millions of operations per second"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rich Data Structures"}),": Beyond simple key-value pairs"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-data-structures",children:"Redis Data Structures"}),"\n",(0,s.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,s.jsx)(n.p,{children:"The most basic type - can store text, integers, floats, or binary data up to 512MB."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Caching simple values, user tokens, counters, serialized objects"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'SET user:token "abc123xyz"\nGET user:token\nINCR page:views\nSET config:timeout 30 EX 3600\n'})}),"\n",(0,s.jsx)(n.h3,{id:"list",children:"List"}),"\n",(0,s.jsx)(n.p,{children:"Ordered collection of strings, maintains insertion order. Acts as linked list."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Queues (FIFO/LIFO), activity logs, message streams, recent items"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'LPUSH queue:jobs "job1"        # Push to head\nRPUSH queue:jobs "job2"        # Push to tail\nLPOP queue:jobs                # Pop from head\nRPOP queue:jobs                # Pop from tail\nLRANGE queue:jobs 0 -1         # Get all items\nLTRIM queue:jobs 0 99          # Keep only first 100\n'})}),"\n",(0,s.jsx)(n.h3,{id:"set",children:"Set"}),"\n",(0,s.jsx)(n.p,{children:"Unordered collection of unique strings. No duplicates allowed."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Unique tags, followers, user permissions, unique visitors"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'SADD user:100:tags "redis" "nosql" "cache"\nSMEMBERS user:100:tags\nSISMEMBER user:100:tags "redis"\nSINTER user:100:tags user:200:tags    # Intersection\nSUNION user:100:tags user:200:tags    # Union\nSCARD user:100:tags                    # Count members\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sorted-set-zset",children:"Sorted Set (ZSet)"}),"\n",(0,s.jsx)(n.p,{children:"Set where each member has an associated score for ordering."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Leaderboards, rankings, priority queues, time-series data"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'ZADD leaderboard 1000 "player1" 1500 "player2"\nZRANGE leaderboard 0 -1 WITHSCORES\nZREVRANK leaderboard "player1"          # Get rank\nZINCRBY leaderboard 50 "player1"        # Increment score\nZRANGEBYSCORE leaderboard 1000 2000     # Range query\n'})}),"\n",(0,s.jsx)(n.h3,{id:"hash",children:"Hash"}),"\n",(0,s.jsx)(n.p,{children:"Maps between string fields and string values - like a miniature Redis inside a key."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": User profiles, object storage, configuration settings"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'HSET user:1000 name "John" age 30 email "john@example.com"\nHGET user:1000 name\nHGETALL user:1000\nHINCRBY user:1000 age 1\nHMGET user:1000 name email\n'})}),"\n",(0,s.jsx)(n.h3,{id:"bitmap--bitfield",children:"Bitmap / Bitfield"}),"\n",(0,s.jsx)(n.p,{children:"String treated as array of bits. Extremely memory efficient."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Feature flags, user activity tracking (daily logins), A/B testing"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"SETBIT user:logins:2025-10-24 1000 1    # User 1000 logged in\nGETBIT user:logins:2025-10-24 1000\nBITCOUNT user:logins:2025-10-24         # Count active users\nBITOP AND result key1 key2              # Bitwise operations\n"})}),"\n",(0,s.jsx)(n.h3,{id:"hyperloglog",children:"HyperLogLog"}),"\n",(0,s.jsx)(n.p,{children:"Probabilistic data structure for cardinality estimation."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Approximate unique count (unique visitors, events) with minimal memory"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'PFADD visitors:2025-10-24 "user1" "user2" "user1"\nPFCOUNT visitors:2025-10-24             # Returns ~2\nPFMERGE visitors:week day1 day2 day3    # Merge multiple HLLs\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Memory"}),": Uses ~12KB per key regardless of cardinality!"]}),"\n",(0,s.jsx)(n.h3,{id:"stream",children:"Stream"}),"\n",(0,s.jsx)(n.p,{children:"Append-only log data structure for message queuing and event sourcing."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Real-time data pipelines, event logs, microservices communication"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'XADD orders * user_id 100 product "laptop" price 1200\nXREAD COUNT 10 STREAMS orders 0\nXGROUP CREATE orders processors 0\nXREADGROUP GROUP processors consumer1 COUNT 1 STREAMS orders >\n'})}),"\n",(0,s.jsx)(n.h3,{id:"geo-geospatial",children:"Geo (Geospatial)"}),"\n",(0,s.jsx)(n.p,{children:"Store longitude/latitude coordinates and perform spatial queries."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Location-based queries (nearby stores, delivery routing)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'GEOADD stores 77.2090 28.6139 "Delhi Store"\nGEOADD stores 72.8777 19.0760 "Mumbai Store"\nGEORADIUS stores 77.2090 28.6139 100 km WITHDIST\nGEODIST stores "Delhi Store" "Mumbai Store" km\n'})}),"\n",(0,s.jsx)(n.h2,{id:"essential-redis-commands",children:"Essential Redis Commands"}),"\n",(0,s.jsx)(n.h3,{id:"basic-key-operations",children:"Basic Key Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"SET key value [EX seconds] [NX|XX]    # Set with options\nGET key                                # Retrieve value\nDEL key [key ...]                      # Delete one or more keys\nEXISTS key [key ...]                   # Check existence\nEXPIRE key seconds                     # Set expiration\nPERSIST key                            # Remove expiration\nTTL key                                # Get remaining time (-1 = no expiry, -2 = doesn't exist)\nRENAME key newkey                      # Rename key\nTYPE key                               # Get data type\n"})}),"\n",(0,s.jsx)(n.h3,{id:"numeric-operations",children:"Numeric Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"INCR key                               # Increment by 1\nINCRBY key increment                   # Increment by n\nDECR key                               # Decrement by 1\nDECRBY key decrement                   # Decrement by n\nINCRBYFLOAT key increment              # Float increment\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-pattern-operations",children:"Key Pattern Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"KEYS pattern                           # Find keys (avoid in production!)\nSCAN cursor [MATCH pattern] [COUNT n]  # Iterate keys (production-safe)\nRANDOMKEY                              # Get random key\n"})}),"\n",(0,s.jsx)(n.h3,{id:"server--info-commands",children:"Server & Info Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"PING                                   # Test connection\nINFO [section]                         # Server statistics\nDBSIZE                                 # Count keys in current DB\nFLUSHDB                               # Clear current database\nFLUSHALL                              # Clear all databases\nSAVE                                  # Synchronous save\nBGSAVE                                # Background save\nLASTSAVE                              # Last save timestamp\nCONFIG GET parameter                   # Get config\nCONFIG SET parameter value             # Set config\nCLIENT LIST                           # List connected clients\nSLOWLOG GET [count]                   # Get slow queries\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redis-persistence",children:"Redis Persistence"}),"\n",(0,s.jsx)(n.h3,{id:"rdb-redis-database---snapshotting",children:"RDB (Redis Database) - Snapshotting"}),"\n",(0,s.jsx)(n.p,{children:"Point-in-time snapshots of the entire dataset saved to disk."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Save after 900s if at least 1 key changed\nsave 900 1\n# Save after 300s if at least 10 keys changed\nsave 300 10\n# Save after 60s if at least 10000 keys changed\nsave 60 10000\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Compact single-file backups"}),"\n",(0,s.jsx)(n.li,{children:"Faster recovery/restart times"}),"\n",(0,s.jsx)(n.li,{children:"Better for disaster recovery"}),"\n",(0,s.jsx)(n.li,{children:"Lower CPU overhead during normal operation"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Potential data loss between snapshots"}),"\n",(0,s.jsx)(n.li,{children:"Fork() can pause server with large datasets"}),"\n",(0,s.jsx)(n.li,{children:"Not suitable for minimal data loss requirements"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Manual Triggers:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"SAVE       # Synchronous (blocks server)\nBGSAVE     # Background (forks process)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"aof-append-only-file---write-logging",children:"AOF (Append Only File) - Write Logging"}),"\n",(0,s.jsx)(n.p,{children:"Logs every write operation received by the server."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'appendonly yes\nappendfilename "appendonly.aof"\n\n# Fsync policies\nappendfsync always     # Sync every write (slowest, safest)\nappendfsync everysec   # Sync every second (good balance)\nappendfsync no        # Let OS handle sync (fastest, least safe)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"More durable (minimal data loss)"}),"\n",(0,s.jsx)(n.li,{children:"Human-readable log format"}),"\n",(0,s.jsx)(n.li,{children:"Automatic rewriting to optimize size"}),"\n",(0,s.jsx)(n.li,{children:"Can be replayed for recovery"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Larger file sizes than RDB"}),"\n",(0,s.jsx)(n.li,{children:"Slower than RDB"}),"\n",(0,s.jsx)(n.li,{children:"Can be slower on restart"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"AOF Rewrite:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"BGREWRITEAOF    # Optimize AOF in background\n"})}),"\n",(0,s.jsx)(n.h3,{id:"hybrid-persistence-rdb--aof",children:"Hybrid Persistence (RDB + AOF)"}),"\n",(0,s.jsx)(n.p,{children:"Combine both for optimal durability and performance. Recommended for production!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Enable both\nsave 900 1\nappendonly yes\naof-use-rdb-preamble yes\n"})}),"\n",(0,s.jsx)(n.p,{children:"On restart, Redis loads RDB snapshot first, then replays AOF log for latest changes."}),"\n",(0,s.jsx)(n.h2,{id:"redis-expiration--ttl",children:"Redis Expiration & TTL"}),"\n",(0,s.jsx)(n.h3,{id:"setting-expiration",children:"Setting Expiration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Set key with expiration\nSET session:abc123 "user_data" EX 3600      # Expires in 3600 seconds\nSETEX session:abc123 3600 "user_data"       # Same as above\n\n# Add expiration to existing key\nEXPIRE user:token 1800                       # Expires in 1800 seconds\nEXPIREAT user:token 1729814400              # Expires at Unix timestamp\n\n# Remove expiration\nPERSIST user:token\n'})}),"\n",(0,s.jsx)(n.h3,{id:"checking-ttl",children:"Checking TTL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"TTL key         # Returns seconds remaining\n                # -1 = key exists but no expiration\n                # -2 = key doesn't exist\n\nPTTL key        # Returns milliseconds remaining\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cache-invalidation-strategy",children:"Cache Invalidation Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Pattern: Cache with automatic expiration\nSET cache:user:100 "{...json...}" EX 600\n\n# Pattern: Conditional caching\nSET cache:product:50 "{...json...}" NX EX 300    # Only if not exists\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Session management (expire inactive sessions)"}),"\n",(0,s.jsx)(n.li,{children:"Rate limiting (expire counters)"}),"\n",(0,s.jsx)(n.li,{children:"Temporary data (OTP codes, verification tokens)"}),"\n",(0,s.jsx)(n.li,{children:"Cache eviction"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-eviction-policies",children:"Redis Eviction Policies"}),"\n",(0,s.jsxs)(n.p,{children:["When Redis reaches ",(0,s.jsx)(n.code,{children:"maxmemory"})," limit, it evicts keys based on configured policy:"]}),"\n",(0,s.jsx)(n.h3,{id:"available-policies",children:"Available Policies"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Policy"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Best For"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"noeviction"})}),(0,s.jsx)(n.td,{children:"Return errors on write operations"}),(0,s.jsx)(n.td,{children:"When you never want data loss"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"allkeys-lru"})}),(0,s.jsx)(n.td,{children:"Evict least recently used keys"}),(0,s.jsx)(n.td,{children:"General caching"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"allkeys-lfu"})}),(0,s.jsx)(n.td,{children:"Evict least frequently used keys"}),(0,s.jsx)(n.td,{children:"Hotspot caching"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"allkeys-random"})}),(0,s.jsx)(n.td,{children:"Evict random keys"}),(0,s.jsx)(n.td,{children:"When all keys equally important"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"volatile-lru"})}),(0,s.jsx)(n.td,{children:"Evict LRU among keys with TTL"}),(0,s.jsx)(n.td,{children:"Mixed use (cache + persistent)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"volatile-lfu"})}),(0,s.jsx)(n.td,{children:"Evict LFU among keys with TTL"}),(0,s.jsx)(n.td,{children:"Frequency-based cache"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"volatile-random"})}),(0,s.jsx)(n.td,{children:"Evict random key with TTL"}),(0,s.jsx)(n.td,{children:"Random cache eviction"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"volatile-ttl"})}),(0,s.jsx)(n.td,{children:"Evict keys with shortest TTL"}),(0,s.jsx)(n.td,{children:"Prioritize longer-lived cache"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"CONFIG SET maxmemory 2gb\nCONFIG SET maxmemory-policy allkeys-lru\n\n# Check current memory usage\nINFO memory\nMEMORY STATS\n"})}),"\n",(0,s.jsx)(n.h3,{id:"recommendations",children:"Recommendations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pure cache"}),": Use ",(0,s.jsx)(n.code,{children:"allkeys-lru"})," or ",(0,s.jsx)(n.code,{children:"allkeys-lfu"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache + persistent data"}),": Use ",(0,s.jsx)(n.code,{children:"volatile-lru"})," (set TTL on cache keys)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production default"}),": ",(0,s.jsx)(n.code,{children:"allkeys-lru"})," with appropriate ",(0,s.jsx)(n.code,{children:"maxmemory"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-transactions",children:"Redis Transactions"}),"\n",(0,s.jsx)(n.p,{children:"Redis transactions allow executing multiple commands atomically."}),"\n",(0,s.jsx)(n.h3,{id:"basic-transaction-flow",children:"Basic Transaction Flow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"MULTI                           # Start transaction\nSET account:1 1000\nDECRBY account:1 100\nINCRBY account:2 100\nEXEC                           # Execute all commands atomically\n\n# Or discard\nMULTI\nSET key1 value1\nDISCARD                        # Cancel transaction\n"})}),"\n",(0,s.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Atomicity"}),": All commands executed or none"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolation"}),": Commands queued, not executed until EXEC"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No rollback"}),": If command fails during EXEC, other commands still execute"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"watch-for-optimistic-locking",children:"WATCH for Optimistic Locking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"WATCH balance:user:100         # Monitor key for changes\nval = GET balance:user:100\nMULTI\nSET balance:user:100 (val-100)\nEXEC                           # Fails if balance was modified\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Transfer funds between accounts"}),"\n",(0,s.jsx)(n.li,{children:"Atomic counter updates"}),"\n",(0,s.jsx)(n.li,{children:"Multi-step operations requiring consistency"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-pubsub",children:"Redis Pub/Sub"}),"\n",(0,s.jsx)(n.p,{children:"Publisher-Subscriber messaging pattern for real-time communication."}),"\n",(0,s.jsx)(n.h3,{id:"basic-commands",children:"Basic Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Subscribe to channels\nSUBSCRIBE channel1 channel2\n\n# Subscribe with pattern matching\nPSUBSCRIBE news:* sports:*\n\n# Publish message\nPUBLISH channel1 "Hello World"\n\n# Unsubscribe\nUNSUBSCRIBE channel1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"characteristics",children:"Characteristics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fire-and-forget"}),": Messages not persisted"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No delivery guarantees"}),": If no subscribers, message lost"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time"}),": Instant message delivery"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decoupling"}),": Publishers don't know about subscribers"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Chat applications"}),"\n",(0,s.jsx)(n.li,{children:"Real-time notifications"}),"\n",(0,s.jsx)(n.li,{children:"Live dashboards"}),"\n",(0,s.jsx)(n.li,{children:"Microservices event broadcasting"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No message history"}),"\n",(0,s.jsx)(n.li,{children:"No acknowledgments"}),"\n",(0,s.jsx)(n.li,{children:"No message persistence"}),"\n",(0,s.jsx)(n.li,{children:"Subscriber must be connected"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Alternative"}),": Use Redis Streams for reliable messaging with persistence!"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-streams-advanced-messaging",children:"Redis Streams (Advanced Messaging)"}),"\n",(0,s.jsx)(n.p,{children:"Append-only log structure with consumer groups - better than Pub/Sub for reliable messaging."}),"\n",(0,s.jsx)(n.h3,{id:"basic-stream-operations",children:"Basic Stream Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Add entry to stream\nXADD mystream * sensor-id 1234 temperature 19.8\n# Returns: "1526919030474-0" (ID: timestamp-sequence)\n\n# Read from stream\nXREAD COUNT 2 STREAMS mystream 0\nXREAD BLOCK 5000 STREAMS mystream $    # Block for new messages\n\n# Get stream length\nXLEN mystream\n\n# Get stream info\nXINFO STREAM mystream\n'})}),"\n",(0,s.jsx)(n.h3,{id:"consumer-groups-reliable-processing",children:"Consumer Groups (Reliable Processing)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Create consumer group\nXGROUP CREATE orders processors 0\n\n# Read as consumer\nXREADGROUP GROUP processors consumer1 COUNT 1 STREAMS orders >\n\n# Acknowledge processed message\nXACK orders processors 1526919030474-0\n\n# Claim unacknowledged messages\nXCLAIM orders processors consumer2 3600000 1526919030474-0\n"})}),"\n",(0,s.jsx)(n.h3,{id:"features-over-pubsub",children:"Features Over Pub/Sub"}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Persistence"}),": Messages stored on disk\n\u2705 ",(0,s.jsx)(n.strong,{children:"History"}),": Read old messages\n\u2705 ",(0,s.jsx)(n.strong,{children:"Consumer Groups"}),": Load balancing across consumers\n\u2705 ",(0,s.jsx)(n.strong,{children:"Acknowledgments"}),": Ensure message processing\n\u2705 ",(0,s.jsx)(n.strong,{children:"Dead Letter Queue"}),": Handle failed messages"]}),"\n",(0,s.jsx)(n.h3,{id:"use-cases-1",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Event sourcing"}),"\n",(0,s.jsx)(n.li,{children:"Microservices communication"}),"\n",(0,s.jsx)(n.li,{children:"Job queues with reliability"}),"\n",(0,s.jsx)(n.li,{children:"Activity feeds"}),"\n",(0,s.jsx)(n.li,{children:"IoT data ingestion"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-cluster-horizontal-scaling",children:"Redis Cluster (Horizontal Scaling)"}),"\n",(0,s.jsx)(n.p,{children:"Distributed Redis implementation with automatic sharding and high availability."}),"\n",(0,s.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"16,384 hash slots"})," divided among nodes"]}),"\n",(0,s.jsx)(n.li,{children:"Each node handles subset of hash slots"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sharding"}),": Keys distributed via ",(0,s.jsx)(n.code,{children:"CRC16(key) % 16384"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Replication"}),": Each master has replica nodes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic failover"}),": Replicas promoted on master failure"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-distribution",children:"Key Distribution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Node 1: Slots 0-5460\nNode 2: Slots 5461-10922\nNode 3: Slots 10923-16383\n"})}),"\n",(0,s.jsx)(n.h3,{id:"hash-tags",children:"Hash Tags"}),"\n",(0,s.jsx)(n.p,{children:"Force related keys to same slot:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# These go to same slot\nSET {user:1000}:profile "data"\nSET {user:1000}:sessions "data"\nSET {user:1000}:cart "data"\n# Everything between {} used for hash calculation\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cluster-commands",children:"Cluster Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"CLUSTER INFO                    # Cluster status\nCLUSTER NODES                  # List all nodes\nCLUSTER SLOTS                  # Show slot distribution\nCLUSTER MEET ip port          # Add node to cluster\nCLUSTER REPLICATE node-id     # Make current node replica\n"})}),"\n",(0,s.jsx)(n.h3,{id:"limitations-1",children:"Limitations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No cross-slot operations (except with hash tags)"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MULTI/EXEC"})," limited to single slot"]}),"\n",(0,s.jsx)(n.li,{children:"SELECT database command not supported (only DB 0)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Horizontal scaling"}),": Add nodes to increase capacity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High availability"}),": Automatic failover"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linear scalability"}),": Performance scales with nodes"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"No single point of failure"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-replication-master-slave",children:"Redis Replication (Master-Slave)"}),"\n",(0,s.jsx)(n.h3,{id:"basic-replication-setup",children:"Basic Replication Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# On replica node\nREPLICAOF master-host 6379\n# or\nSLAVEOF master-host 6379\n\n# Stop replication\nREPLICAOF NO ONE\n"})}),"\n",(0,s.jsx)(n.h3,{id:"characteristics-1",children:"Characteristics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Asynchronous replication"}),": Eventual consistency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic reconnection"}),": Replicas reconnect on disconnect"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read scalability"}),": Distribute reads across replicas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data redundancy"}),": Multiple copies of data"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"replication-flow",children:"Replication Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Replica connects to master"}),"\n",(0,s.jsx)(n.li,{children:"Master starts background save (BGSAVE)"}),"\n",(0,s.jsx)(n.li,{children:"Master streams RDB to replica"}),"\n",(0,s.jsx)(n.li,{children:"Master buffers new writes"}),"\n",(0,s.jsx)(n.li,{children:"Replica loads RDB, applies buffered writes"}),"\n",(0,s.jsx)(n.li,{children:"Continuous replication of new commands"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Master\nbind 0.0.0.0\nprotected-mode no\n\n# Replica\nreplicaof master-ip 6379\nreplica-read-only yes\nreplica-serve-stale-data yes\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-cases-2",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read scaling"}),": Route reads to replicas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backup"}),": Replicas as live backups"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Analytics"}),": Run queries on replica"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Geographic distribution"}),": Replicas in different regions"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"rate-limiting-pattern",children:"Rate Limiting Pattern"}),"\n",(0,s.jsx)(n.p,{children:"Implement API rate limiting using Redis counters and expiration."}),"\n",(0,s.jsx)(n.h3,{id:"fixed-window-counter",children:"Fixed Window Counter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Allow 100 requests per minute\nkey = "rate:user:123:" + current_minute\n\nINCR key\nEXPIRE key 60\n\nif count > 100:\n    reject request\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sliding-window-log",children:"Sliding Window Log"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Track individual request timestamps\nkey = "rate:user:123"\n\nZADD key current_timestamp request_id\nZREMRANGEBYSCORE key 0 (current_timestamp - 60)\nZCARD key\n\nif count > 100:\n    reject request\n\nEXPIRE key 120\n'})}),"\n",(0,s.jsx)(n.h3,{id:"token-bucket-redis-script",children:"Token Bucket (Redis Script)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local key = KEYS[1]\nlocal capacity = tonumber(ARGV[1])\nlocal rate = tonumber(ARGV[2])\nlocal now = tonumber(ARGV[3])\n\nlocal tokens = tonumber(redis.call('HGET', key, 'tokens') or capacity)\nlocal last = tonumber(redis.call('HGET', key, 'last') or now)\n\nlocal delta = math.max(0, now - last)\nlocal new_tokens = math.min(capacity, tokens + delta * rate)\n\nif new_tokens >= 1 then\n    redis.call('HMSET', key, 'tokens', new_tokens - 1, 'last', now)\n    redis.call('EXPIRE', key, 60)\n    return 1\nelse\n    return 0\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-cases-3",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"API rate limiting per user/IP"}),"\n",(0,s.jsx)(n.li,{children:"Prevent brute force attacks"}),"\n",(0,s.jsx)(n.li,{children:"Throttle resource-intensive operations"}),"\n",(0,s.jsx)(n.li,{children:"Fair usage enforcement"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pipelining",children:"Pipelining"}),"\n",(0,s.jsx)(n.p,{children:"Send multiple commands at once without waiting for individual replies - reduces network round trips."}),"\n",(0,s.jsx)(n.h3,{id:"without-pipelining",children:"Without Pipelining"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client \u2192 Server: INCR X\nServer \u2192 Client: 1\nClient \u2192 Server: INCR X\nServer \u2192 Client: 2\nClient \u2192 Server: INCR X\nServer \u2192 Client: 3\n# 3 RTTs (Round Trip Times)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"with-pipelining",children:"With Pipelining"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Client \u2192 Server: INCR X, INCR X, INCR X\nServer \u2192 Client: 1, 2, 3\n# 1 RTT\n"})}),"\n",(0,s.jsx)(n.h3,{id:"performance-impact",children:"Performance Impact"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"10x-100x faster"})," for bulk operations"]}),"\n",(0,s.jsx)(n.li,{children:"Reduces network latency overhead"}),"\n",(0,s.jsx)(n.li,{children:"Especially effective over high-latency connections"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Bulk inserts/updates"}),"\n",(0,s.jsx)(n.li,{children:"Batch processing"}),"\n",(0,s.jsx)(n.li,{children:"Multiple independent operations"}),"\n",(0,s.jsx)(n.li,{children:"High-latency network connections"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Limitation"}),": Commands in pipeline are not atomic (use transactions for atomicity)"]}),"\n",(0,s.jsx)(n.h2,{id:"lua-scripting",children:"Lua Scripting"}),"\n",(0,s.jsx)(n.p,{children:"Execute complex atomic operations on the server side."}),"\n",(0,s.jsx)(n.h3,{id:"why-lua-scripts",children:"Why Lua Scripts?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Atomicity"}),": Entire script executes atomically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced network"}),": Single round trip"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-side logic"}),": Complex operations without back-and-forth"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": No parsing overhead"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Simple Lua script\nEVAL \"return redis.call('SET', KEYS[1], ARGV[1])\" 1 mykey myvalue\n\n# Multi-step atomic operation\nEVAL \"\nlocal val = redis.call('GET', KEYS[1])\nif val == false then\n    return redis.call('SET', KEYS[1], ARGV[1])\nelse\n    return 0\nend\n\" 1 mykey newvalue\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rate-limiter-script",children:"Rate Limiter Script"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local key = KEYS[1]\nlocal limit = tonumber(ARGV[1])\nlocal current = tonumber(redis.call('GET', key) or \"0\")\n\nif current + 1 > limit then\n    return 0\nelse\n    redis.call('INCR', key)\n    redis.call('EXPIRE', key, 60)\n    return 1\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"script-management",children:"Script Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Load script (returns SHA1)\nSCRIPT LOAD \"return redis.call('GET', KEYS[1])\"\n\n# Execute by SHA1\nEVALSHA sha1 1 mykey\n\n# Check if script exists\nSCRIPT EXISTS sha1\n\n# Flush all scripts\nSCRIPT FLUSH\n"})}),"\n",(0,s.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep scripts short and fast"}),"\n",(0,s.jsx)(n.li,{children:"Use KEYS and ARGV properly"}),"\n",(0,s.jsx)(n.li,{children:"Cache script SHA1 and use EVALSHA"}),"\n",(0,s.jsx)(n.li,{children:"Handle nil values carefully"}),"\n",(0,s.jsx)(n.li,{children:"Test scripts thoroughly"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"1-connection-pooling",children:"1. Connection Pooling"}),"\n",(0,s.jsx)(n.p,{children:"Reuse connections to reduce overhead of establishing new connections."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Monitor connections\nCLIENT LIST\nINFO clients\n\n# Set connection limits\nmaxclients 10000\ntimeout 300\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-avoid-expensive-operations",children:"2. Avoid Expensive Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# \u274c Avoid in production\nKEYS *                  # O(N) - blocks server\nSMEMBERS large_set     # O(N) - returns all members\n\n# \u2705 Use instead\nSCAN 0                 # Iterates incrementally\nSSCAN set 0            # Iterates set incrementally\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-use-appropriate-data-structures",children:"3. Use Appropriate Data Structures"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Hashes"})," for objects instead of separate keys"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Sorted Sets"})," for ranked data"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Bitmaps"})," for boolean flags (millions fit in KB)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-batch-operations",children:"4. Batch Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Instead of multiple SET\nSET key1 val1\nSET key2 val2\nSET key3 val3\n\n# Use pipeline or MSET\nMSET key1 val1 key2 val2 key3 val3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-memory-optimization",children:"5. Memory Optimization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Use smaller keys\nuser:1000:profile \u2192 u:1000:p\n\n# Enable compression\nhash-max-ziplist-entries 512\nlist-max-ziplist-size -2\n\n# Monitor memory\nMEMORY STATS\nMEMORY DOCTOR\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-monitor-slow-queries",children:"6. Monitor Slow Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Configure slow log\nCONFIG SET slowlog-log-slower-than 10000    # Microseconds\nCONFIG SET slowlog-max-len 128\n\n# View slow queries\nSLOWLOG GET 10\nSLOWLOG LEN\nSLOWLOG RESET\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redis-tools",children:"Redis Tools"}),"\n",(0,s.jsx)(n.h3,{id:"redis-cli-command-line-interface",children:"redis-cli (Command Line Interface)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Connect to Redis\nredis-cli -h localhost -p 6379 -a password\n\n# Execute command directly\nredis-cli GET mykey\n\n# Interactive mode\nredis-cli\n127.0.0.1:6379> SET key value\n\n# Monitor all commands in real-time\nredis-cli MONITOR\n\n# Get server statistics\nredis-cli --stat\n\n# Scan for large keys\nredis-cli --bigkeys\n\n# Import data\ncat data.txt | redis-cli --pipe\n\n# Run Lua script from file\nredis-cli --eval script.lua key1 key2 , arg1 arg2\n\n# CSV output\nredis-cli --csv LRANGE mylist 0 -1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"redis-benchmark-performance-testing",children:"redis-benchmark (Performance Testing)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Basic benchmark\nredis-benchmark\n\n# Specific operations\nredis-benchmark -t set,get -n 100000 -q\n\n# Test with specific data size\nredis-benchmark -t set -d 100 -n 100000\n\n# Simulate real workload\nredis-benchmark -r 10000 -n 100000 -t get,set,lpush,lpop\n\n# Pipeline testing\nredis-benchmark -P 16 -q\n\n# Custom commands\nredis-benchmark -t set -n 100000 -q --csv\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output Metrics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requests per second"}),"\n",(0,s.jsx)(n.li,{children:"Latency percentiles (p50, p95, p99)"}),"\n",(0,s.jsx)(n.li,{children:"Operations completed"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"redisinsight-gui-visualization",children:"RedisInsight (GUI Visualization)"}),"\n",(0,s.jsx)(n.p,{children:"Official Redis GUI tool with advanced features:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Browser"}),": Navigate keys with visual tree"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Workbench"}),": Execute commands with auto-complete"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Profiler"}),": Real-time command monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Analysis"}),": Visualize memory usage by key pattern"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Slow Log Viewer"}),": Analyze slow queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cluster Management"}),": Visualize cluster topology"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stream Consumer Groups"}),": Monitor stream processing"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Download"}),": ",(0,s.jsx)(n.a,{href:"https://redis.com/redis-enterprise/redis-insight/",children:"https://redis.com/redis-enterprise/redis-insight/"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Best For:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Development and debugging"}),"\n",(0,s.jsx)(n.li,{children:"Visualizing data structures"}),"\n",(0,s.jsx)(n.li,{children:"Monitoring performance"}),"\n",(0,s.jsx)(n.li,{children:"Learning Redis commands"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"other-useful-tools",children:"Other Useful Tools"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"redis-rdb-tools"}),": Analyze RDB files"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"rdb --command memory dump.rdb --bytes 128 -f memory.csv\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"redis-stat"}),": Real-time monitoring"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"redis-stat --server=localhost:6379\n"})}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot-redis-integration",children:"Spring Boot Redis Integration"}),"\n",(0,s.jsx)(n.h3,{id:"maven-dependencies",children:"Maven Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    \x3c!-- Spring Boot Redis Starter --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-redis</artifactId>\n    </dependency>\n\n    \x3c!-- Spring Cache Support --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-cache</artifactId>\n    </dependency>\n\n    \x3c!-- Lettuce (default) or Jedis client --\x3e\n    <dependency>\n        <groupId>io.lettuce</groupId>\n        <artifactId>lettuce-core</artifactId>\n    </dependency>\n\n    \x3c!-- JSON serialization --\x3e\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# application.properties\nspring.data.redis.host=localhost\nspring.data.redis.port=6379\nspring.data.redis.password=\nspring.data.redis.database=0\nspring.data.redis.timeout=2000ms\n\n# Connection pool settings (Lettuce)\nspring.data.redis.lettuce.pool.max-active=20\nspring.data.redis.lettuce.pool.max-idle=10\nspring.data.redis.lettuce.pool.min-idle=5\nspring.data.redis.lettuce.pool.max-wait=-1ms\n\n# Cache settings\nspring.cache.type=redis\nspring.cache.redis.time-to-live=600000\nspring.cache.redis.cache-null-values=false\n"})}),"\n",(0,s.jsx)(n.h3,{id:"redis-configuration-class",children:"Redis Configuration Class"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableCaching\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(\n            RedisConnectionFactory connectionFactory) {\n\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(connectionFactory);\n\n        // JSON serializer\n        GenericJackson2JsonRedisSerializer serializer =\n            new GenericJackson2JsonRedisSerializer();\n\n        // String serializer for keys\n        StringRedisSerializer stringSerializer = new StringRedisSerializer();\n\n        template.setKeySerializer(stringSerializer);\n        template.setValueSerializer(serializer);\n        template.setHashKeySerializer(stringSerializer);\n        template.setHashValueSerializer(serializer);\n\n        template.afterPropertiesSet();\n        return template;\n    }\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory factory) {\n        RedisCacheConfiguration config = RedisCacheConfiguration\n            .defaultCacheConfig()\n            .entryTtl(Duration.ofMinutes(10))\n            .serializeKeysWith(\n                RedisSerializationContext.SerializationPair\n                    .fromSerializer(new StringRedisSerializer()))\n            .serializeValuesWith(\n                RedisSerializationContext.SerializationPair\n                    .fromSerializer(new GenericJackson2JsonRedisSerializer()))\n            .disableCachingNullValues();\n\n        // Different TTL for different caches\n        Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();\n        cacheConfigurations.put("users", config.entryTtl(Duration.ofMinutes(30)));\n        cacheConfigurations.put("products", config.entryTtl(Duration.ofHours(1)));\n        cacheConfigurations.put("sessions", config.entryTtl(Duration.ofHours(24)));\n\n        return RedisCacheManager.builder(factory)\n            .cacheDefaults(config)\n            .withInitialCacheConfigurations(cacheConfigurations)\n            .build();\n    }\n\n    @Bean\n    public RedisConnectionFactory redisConnectionFactory() {\n        LettuceClientConfiguration clientConfig = LettuceClientConfiguration\n            .builder()\n            .commandTimeout(Duration.ofSeconds(2))\n            .shutdownTimeout(Duration.ZERO)\n            .build();\n\n        RedisStandaloneConfiguration serverConfig =\n            new RedisStandaloneConfiguration("localhost", 6379);\n\n        return new LettuceConnectionFactory(serverConfig, clientConfig);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"service-layer-with-spring-cache-annotations",children:"Service Layer with Spring Cache Annotations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\n@Slf4j\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    /**\n     * Cache the result - subsequent calls return cached value\n     * Key: users::userId\n     */\n    @Cacheable(value = "users", key = "#userId")\n    public User getUserById(Long userId) {\n        log.info("Fetching user from database: {}", userId);\n        return userRepository.findById(userId)\n            .orElseThrow(() -> new UserNotFoundException(userId));\n    }\n\n    /**\n     * Cache result using SpEL expression\n     * Key: users::email@example.com\n     */\n    @Cacheable(value = "users", key = "#email", unless = "#result == null")\n    public User getUserByEmail(String email) {\n        log.info("Fetching user by email from database: {}", email);\n        return userRepository.findByEmail(email);\n    }\n\n    /**\n     * Update cache after method execution\n     * Updates the cached value with new data\n     */\n    @CachePut(value = "users", key = "#user.id")\n    public User updateUser(User user) {\n        log.info("Updating user: {}", user.getId());\n        return userRepository.save(user);\n    }\n\n    /**\n     * Remove specific entry from cache\n     */\n    @CacheEvict(value = "users", key = "#userId")\n    public void deleteUser(Long userId) {\n        log.info("Deleting user: {}", userId);\n        userRepository.deleteById(userId);\n    }\n\n    /**\n     * Clear entire cache\n     */\n    @CacheEvict(value = "users", allEntries = true)\n    public void clearUserCache() {\n        log.info("Clearing all user cache");\n    }\n\n    /**\n     * Multiple cache operations\n     */\n    @Caching(\n        evict = {\n            @CacheEvict(value = "users", key = "#userId"),\n            @CacheEvict(value = "userProfiles", key = "#userId")\n        }\n    )\n    public void invalidateUserCaches(Long userId) {\n        log.info("Invalidating caches for user: {}", userId);\n    }\n\n    /**\n     * Conditional caching\n     */\n    @Cacheable(\n        value = "users",\n        key = "#userId",\n        condition = "#userId > 0",\n        unless = "#result.status == \'INACTIVE\'"\n    )\n    public User getActiveUser(Long userId) {\n        return userRepository.findById(userId)\n            .orElse(null);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-cache-key-generator",children:"Custom Cache Key Generator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class CacheConfig {\n\n    @Bean("customKeyGenerator")\n    public KeyGenerator customKeyGenerator() {\n        return (target, method, params) -> {\n            StringBuilder key = new StringBuilder();\n            key.append(target.getClass().getSimpleName())\n               .append(".")\n               .append(method.getName())\n               .append(":");\n\n            for (Object param : params) {\n                if (param != null) {\n                    key.append(param.toString()).append("_");\n                }\n            }\n\n            return key.toString();\n        };\n    }\n}\n\n// Usage in service\n@Cacheable(value = "products", keyGenerator = "customKeyGenerator")\npublic Product getProduct(Long id, String category) {\n    return productRepository.findByIdAndCategory(id, category);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-redistemplate-directly",children:"Using RedisTemplate Directly"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class RedisService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    // String operations\n    public void setString(String key, String value, long timeout) {\n        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);\n    }\n\n    public String getString(String key) {\n        return (String) redisTemplate.opsForValue().get(key);\n    }\n\n    // Hash operations\n    public void setHash(String key, String field, Object value) {\n        redisTemplate.opsForHash().put(key, field, value);\n    }\n\n    public Object getHash(String key, String field) {\n        return redisTemplate.opsForHash().get(key, field);\n    }\n\n    public Map<Object, Object> getAllHash(String key) {\n        return redisTemplate.opsForHash().entries(key);\n    }\n\n    // List operations\n    public void pushToList(String key, Object value) {\n        redisTemplate.opsForList().rightPush(key, value);\n    }\n\n    public List<Object> getList(String key, long start, long end) {\n        return redisTemplate.opsForList().range(key, start, end);\n    }\n\n    // Set operations\n    public void addToSet(String key, Object... values) {\n        redisTemplate.opsForSet().add(key, values);\n    }\n\n    public Set<Object> getSet(String key) {\n        return redisTemplate.opsForSet().members(key);\n    }\n\n    // Sorted Set operations\n    public void addToSortedSet(String key, Object value, double score) {\n        redisTemplate.opsForZSet().add(key, value, score);\n    }\n\n    public Set<Object> getSortedSetRange(String key, long start, long end) {\n        return redisTemplate.opsForZSet().range(key, start, end);\n    }\n\n    // Delete key\n    public void delete(String key) {\n        redisTemplate.delete(key);\n    }\n\n    // Check if key exists\n    public boolean hasKey(String key) {\n        return Boolean.TRUE.equals(redisTemplate.hasKey(key));\n    }\n\n    // Set expiration\n    public void setExpire(String key, long timeout, TimeUnit unit) {\n        redisTemplate.expire(key, timeout, unit);\n    }\n\n    // Pipeline example\n    public List<Object> pipelineOperations() {\n        return redisTemplate.executePipelined(new RedisCallback<Object>() {\n            @Override\n            public Object doInRedis(RedisConnection connection) {\n                connection.set("key1".getBytes(), "value1".getBytes());\n                connection.set("key2".getBytes(), "value2".getBytes());\n                connection.set("key3".getBytes(), "value3".getBytes());\n                return null;\n            }\n        });\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"rate-limiting-with-spring-boot",children:"Rate Limiting with Spring Boot"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class RateLimiter {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public boolean allowRequest(String userId, int maxRequests, int windowSeconds) {\n        String key = "rate_limit:" + userId;\n        Long currentCount = redisTemplate.opsForValue().increment(key);\n\n        if (currentCount == 1) {\n            // First request in window - set expiration\n            redisTemplate.expire(key, windowSeconds, TimeUnit.SECONDS);\n        }\n\n        return currentCount <= maxRequests;\n    }\n\n    // Sliding window rate limiter\n    public boolean allowRequestSlidingWindow(String userId, int maxRequests, int windowSeconds) {\n        String key = "rate_limit:sliding:" + userId;\n        long now = System.currentTimeMillis();\n        long windowStart = now - (windowSeconds * 1000L);\n\n        // Remove old entries\n        redisTemplate.opsForZSet().removeRangeByScore(key, 0, windowStart);\n\n        // Count current requests in window\n        Long count = redisTemplate.opsForZSet().zCard(key);\n\n        if (count < maxRequests) {\n            // Add current request\n            redisTemplate.opsForZSet().add(key, UUID.randomUUID().toString(), now);\n            redisTemplate.expire(key, windowSeconds * 2, TimeUnit.SECONDS);\n            return true;\n        }\n\n        return false;\n    }\n}\n\n// Usage in controller\n@RestController\n@RequestMapping("/api")\npublic class ApiController {\n\n    @Autowired\n    private RateLimiter rateLimiter;\n\n    @GetMapping("/data")\n    public ResponseEntity<?> getData(@RequestHeader("User-Id") String userId) {\n        if (!rateLimiter.allowRequest(userId, 100, 60)) {\n            return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS)\n                .body("Rate limit exceeded. Try again later.");\n        }\n\n        // Process request\n        return ResponseEntity.ok("Data response");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"session-management-with-redis",children:"Session Management with Redis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 3600)\npublic class SessionConfig {\n    // Spring Session automatically stores sessions in Redis\n}\n\n// Controller example\n@RestController\npublic class SessionController {\n\n    @GetMapping("/session/set")\n    public String setSession(HttpSession session) {\n        session.setAttribute("user", "john_doe");\n        return "Session data set";\n    }\n\n    @GetMapping("/session/get")\n    public String getSession(HttpSession session) {\n        return (String) session.getAttribute("user");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"redis-architecture-diagrams",children:"Redis Architecture Diagrams"}),"\n",(0,s.jsx)(n.h3,{id:"basic-redis-client-server-architecture",children:"Basic Redis Client-Server Architecture"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Applications"\n        C1[Web App]\n        C2[Mobile App]\n        C3[Microservice]\n    end\n\n    subgraph "Redis Server"\n        R[Redis Engine<br/>Single-threaded]\n        M[Memory<br/>Data Structures]\n        P1[RDB<br/>Persistence]\n        P2[AOF<br/>Persistence]\n    end\n\n    C1 --\x3e|TCP Commands| R\n    C2 --\x3e|TCP Commands| R\n    C3 --\x3e|TCP Commands| R\n\n    R <--\x3e|Read/Write| M\n    R --\x3e|Snapshots| P1\n    R --\x3e|Write Log| P2\n\n    style R fill:#dc382d,color:#fff\n    style M fill:#ff6b6b,color:#fff\n    style C1 fill:#2196F3,color:#fff\n    style C2 fill:#2196F3,color:#fff\n    style C3 fill:#2196F3,color:#fff\n    style P1 fill:#4CAF50,color:#fff\n    style P2 fill:#FF9800,color:#fff'}),"\n",(0,s.jsx)(n.h3,{id:"master-replica-replication",children:"Master-Replica Replication"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Write Operations"\n        CW[Client Writes] --\x3e|Write Commands| M[Master Redis<br/>Read + Write]\n    end\n\n    subgraph "Async Replication"\n        M --\x3e|Replicate Data| R1[Replica 1<br/>Read Only]\n        M --\x3e|Replicate Data| R2[Replica 2<br/>Read Only]\n        M --\x3e|Replicate Data| R3[Replica 3<br/>Read Only]\n    end\n\n    subgraph "Read Operations"\n        CR[Client Reads] --\x3e|Read Commands| R1\n        CR --\x3e|Read Commands| R2\n        CR --\x3e|Read Commands| R3\n        CR -.Optional.-> M\n    end\n\n    style M fill:#dc382d,color:#fff\n    style R1 fill:#ff6b6b,color:#fff\n    style R2 fill:#ff6b6b,color:#fff\n    style R3 fill:#ff6b6b,color:#fff\n    style CW fill:#2196F3,color:#fff\n    style CR fill:#4CAF50,color:#fff'}),"\n",(0,s.jsx)(n.h3,{id:"redis-sentinel-high-availability",children:"Redis Sentinel High Availability"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Sentinel Cluster"\n        S1[Sentinel 1]\n        S2[Sentinel 2]\n        S3[Sentinel 3]\n    end\n\n    subgraph "Redis Nodes"\n        M[Master<br/>Active]\n        R1[Replica 1<br/>Standby]\n        R2[Replica 2<br/>Standby]\n    end\n\n    S1 -.Monitor.-> M\n    S2 -.Monitor.-> M\n    S3 -.Monitor.-> M\n\n    S1 -.Monitor.-> R1\n    S2 -.Monitor.-> R1\n    S3 -.Monitor.-> R1\n\n    S1 -.Monitor.-> R2\n    S2 -.Monitor.-> R2\n    S3 -.Monitor.-> R2\n\n    M --\x3e|Async Replication| R1\n    M --\x3e|Async Replication| R2\n\n    S1 <-.Quorum Vote.-> S2\n    S2 <-.Quorum Vote.-> S3\n    S3 <-.Quorum Vote.-> S1\n\n    C[Client] --\x3e|Service Discovery| S1\n\n    Note1[On Master Failure:<br/>1. Sentinels detect<br/>2. Vote for new master<br/>3. Promote replica<br/>4. Update clients]\n\n    style M fill:#dc382d,color:#fff\n    style R1 fill:#ff6b6b,color:#fff\n    style R2 fill:#ff6b6b,color:#fff\n    style S1 fill:#2196F3,color:#fff\n    style S2 fill:#2196F3,color:#fff\n    style S3 fill:#2196F3,color:#fff\n    style C fill:#4CAF50,color:#fff\n    style Note1 fill:#FFF9C4,color:#000'}),"\n",(0,s.jsx)(n.h3,{id:"redis-cluster-sharding-architecture",children:"Redis Cluster Sharding Architecture"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    C[Client<br/>Cluster-Aware]\n\n    subgraph "Shard 1"\n        N1[Master 1<br/>Slots: 0-5460]\n        R1[Replica 1]\n        N1 --\x3e|Replicate| R1\n    end\n\n    subgraph "Shard 2"\n        N2[Master 2<br/>Slots: 5461-10922]\n        R2[Replica 2]\n        N2 --\x3e|Replicate| R2\n    end\n\n    subgraph "Shard 3"\n        N3[Master 3<br/>Slots: 10923-16383]\n        R3[Replica 3]\n        N3 --\x3e|Replicate| R3\n    end\n\n    C --\x3e|Hash Slot 0-5460| N1\n    C --\x3e|Hash Slot 5461-10922| N2\n    C --\x3e|Hash Slot 10923-16383| N3\n\n    N1 <-.Gossip Protocol.-> N2\n    N2 <-.Gossip Protocol.-> N3\n    N3 <-.Gossip Protocol.-> N1\n\n    HC[Hash Calculation:<br/>CRC16 key mod 16384]\n\n    style C fill:#4CAF50,color:#fff\n    style N1 fill:#dc382d,color:#fff\n    style N2 fill:#dc382d,color:#fff\n    style N3 fill:#dc382d,color:#fff\n    style R1 fill:#ff6b6b,color:#fff\n    style R2 fill:#ff6b6b,color:#fff\n    style R3 fill:#ff6b6b,color:#fff\n    style HC fill:#FFF9C4,color:#000'}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-redis-caching-flow",children:"Spring Boot Redis Caching Flow"}),"\n",(0,s.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant Client\n    participant Controller\n    participant Service\n    participant CacheManager\n    participant Redis\n    participant Database\n\n    Client->>Controller: HTTP Request\n    Controller->>Service: getUserById(123)\n\n    Note over Service: @Cacheable("users")\n    Service->>CacheManager: Check cache for key "users::123"\n    CacheManager->>Redis: GET users::123\n\n    alt Cache Hit\n        Redis--\x3e>CacheManager: User data (serialized)\n        CacheManager--\x3e>Service: Deserialized User object\n        Note over Service: Return cached result\n        Service--\x3e>Controller: User object\n        Controller--\x3e>Client: HTTP Response (from cache)\n    else Cache Miss\n        Redis--\x3e>CacheManager: null (key not found)\n        CacheManager--\x3e>Service: Cache miss\n        Service->>Database: SELECT * FROM users WHERE id=123\n        Database--\x3e>Service: User data\n        Service->>CacheManager: Store in cache\n        CacheManager->>Redis: SET users::123 <data> EX 600\n        Redis--\x3e>CacheManager: OK\n        Note over Service: Return fresh data\n        Service--\x3e>Controller: User object\n        Controller--\x3e>Client: HTTP Response (from DB)\n    end\n\n    Note over Redis: Data expires after TTL<br/>or manual eviction'}),"\n",(0,s.jsx)(n.h3,{id:"redis-pubsub-vs-streams-architecture",children:"Redis Pub/Sub vs Streams Architecture"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Pub/Sub Pattern"\n        P1[Publisher 1] --\x3e|PUBLISH| CH[Channel: orders]\n        P2[Publisher 2] --\x3e|PUBLISH| CH\n\n        CH -.Fire & Forget.-> SUB1[Subscriber 1]\n        CH -.Fire & Forget.-> SUB2[Subscriber 2]\n        CH -.Fire & Forget.-> SUB3[Subscriber 3]\n\n        Note1[\u274c No persistence<br/>\u274c No history<br/>\u274c No acknowledgment]\n    end\n\n    subgraph "Streams Pattern"\n        P3[Producer 1] --\x3e|XADD| ST[Stream: orders]\n        P4[Producer 2] --\x3e|XADD| ST\n\n        ST --\x3e|Persistent Log| DISK[(Disk Storage)]\n\n        ST --\x3e|XREADGROUP| CG1[Consumer Group 1]\n        ST --\x3e|XREADGROUP| CG2[Consumer Group 2]\n\n        CG1 --\x3e C1[Consumer 1]\n        CG1 --\x3e C2[Consumer 2]\n\n        C1 -.XACK.-> ST\n        C2 -.XACK.-> ST\n\n        Note2[\u2705 Persistence<br/>\u2705 Message history<br/>\u2705 Acknowledgments<br/>\u2705 Consumer groups]\n    end\n\n    style CH fill:#FF6B6B,color:#fff\n    style ST fill:#4CAF50,color:#fff\n    style P1 fill:#2196F3,color:#fff\n    style P2 fill:#2196F3,color:#fff\n    style P3 fill:#2196F3,color:#fff\n    style P4 fill:#2196F3,color:#fff\n    style Note1 fill:#FFCDD2,color:#000\n    style Note2 fill:#C8E6C9,color:#000'}),"\n",(0,s.jsx)(n.h3,{id:"redis-data-structure-memory-layout",children:"Redis Data Structure Memory Layout"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Redis Memory Space"\n        direction TB\n\n        subgraph "String Keys"\n            K1[Key: user:1000:token]\n            V1[Value: \'eyJhbGc...\']\n            K1 --\x3e V1\n        end\n\n        subgraph "Hash"\n            K2[Key: user:1000:profile]\n            V2[name: John<br/>age: 30<br/>email: john@example.com<br/>city: New York]\n            K2 --\x3e V2\n        end\n\n        subgraph "List"\n            K3[Key: queue:tasks]\n            V3[0: task1<br/>1: task2<br/>2: task3<br/>3: task4]\n            K3 --\x3e V3\n        end\n\n        subgraph "Set"\n            K4[Key: user:1000:tags]\n            V4[redis<br/>nosql<br/>cache<br/>database]\n            K4 --\x3e V4\n        end\n\n        subgraph "Sorted Set"\n            K5[Key: leaderboard]\n            V5[player1: 1500<br/>player2: 1200<br/>player3: 1000]\n            K5 --\x3e V5\n        end\n\n        subgraph "Stream"\n            K6[Key: events]\n            V6[1729814400-0: &#123;user: 1, event: login&#125;<br/>1729814401-0: &#123;user: 2, event: purchase&#125;]\n            K6 --\x3e V6\n        end\n    end\n\n    style K1 fill:#2196F3,color:#fff\n    style K2 fill:#2196F3,color:#fff\n    style K3 fill:#2196F3,color:#fff\n    style K4 fill:#2196F3,color:#fff\n    style K5 fill:#2196F3,color:#fff\n    style K6 fill:#2196F3,color:#fff\n    style V1 fill:#4CAF50,color:#fff\n    style V2 fill:#FF9800,color:#fff\n    style V3 fill:#9C27B0,color:#fff\n    style V4 fill:#F44336,color:#fff\n    style V5 fill:#00BCD4,color:#fff\n    style V6 fill:#E91E63,color:#fff'}),"\n",(0,s.jsx)(n.h3,{id:"redis-cluster-failover-process",children:"Redis Cluster Failover Process"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant C as Client\n    participant M as Master\n    participant R1 as Replica 1\n    participant R2 as Replica 2\n    participant N2 as Other Masters\n\n    Note over M: Master is healthy\n    C->>M: Write requests\n    M->>R1: Async replication\n    M->>R2: Async replication\n\n    Note over M: Master fails\n    rect rgb(255, 200, 200)\n        M->>M: CRASH\n        C->>M: Request timeout\n    end\n\n    Note over R1: Replicas detect failure\n    Note over R2: Replicas detect failure\n    R1->>N2: Report master down\n    R2->>N2: Report master down\n\n    Note over N2: Election process begins\n    N2->>R1: Vote for promotion\n    N2->>R2: Vote for promotion\n\n    rect rgb(200, 255, 200)\n        Note over R1: Replica 1 wins election\n        R1->>R1: Promote to Master\n        R1->>N2: Announce new master\n        R1->>R2: I am new master\n    end\n\n    Note over R1: New master ready\n    C->>R1: Redirected writes\n    R1->>R2: Async replication\n\n    Note over C: Cluster reconfigured"}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-application-architecture-with-redis",children:"Spring Boot Application Architecture with Redis"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Layer"\n        WEB[Web Browser]\n        MOBILE[Mobile App]\n        API[External API]\n    end\n\n    subgraph "Spring Boot Application"\n        CONTROLLER[Controllers<br/>@RestController]\n        SERVICE[Service Layer<br/>@Cacheable/@CachePut/@CacheEvict]\n        REPO[Repository Layer<br/>JPA/MyBatis]\n\n        CONTROLLER --\x3e SERVICE\n        SERVICE --\x3e REPO\n    end\n\n    subgraph "Caching Layer"\n        CM[Cache Manager]\n        RT[RedisTemplate]\n\n        SERVICE --\x3e CM\n        SERVICE -.Direct Access.-> RT\n    end\n\n    subgraph "Redis Infrastructure"\n        REDIS[Redis Server<br/>Cache Storage]\n        SENTINEL[Redis Sentinel<br/>High Availability]\n    end\n\n    subgraph "Data Layer"\n        DB[(Primary Database<br/>PostgreSQL/MySQL)]\n    end\n\n    WEB --\x3e CONTROLLER\n    MOBILE --\x3e CONTROLLER\n    API --\x3e CONTROLLER\n\n    CM --\x3e REDIS\n    RT --\x3e REDIS\n    SENTINEL -.Monitor.-> REDIS\n\n    REPO --\x3e DB\n\n    FLOW1[First Request:<br/>1. Check Redis<br/>2. Cache miss<br/>3. Query database<br/>4. Store in Redis<br/>5. Return data]\n\n    FLOW2[Subsequent Requests:<br/>1. Check Redis<br/>2. Cache hit<br/>3. Return from cache<br/>4. Skip database]\n\n    style CONTROLLER fill:#2196F3,color:#fff\n    style SERVICE fill:#4CAF50,color:#fff\n    style CM fill:#FF9800,color:#fff\n    style RT fill:#FF9800,color:#fff\n    style REDIS fill:#dc382d,color:#fff\n    style DB fill:#9C27B0,color:#fff\n    style FLOW1 fill:#FFF9C4,color:#000\n    style FLOW2 fill:#C8E6C9,color:#000'}),"\n",(0,s.jsx)(n.h2,{id:"redis-use-cases-in-detail",children:"Redis Use Cases in Detail"}),"\n",(0,s.jsx)(n.h3,{id:"1-caching-strategy",children:"1. Caching Strategy"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cache-Aside (Lazy Loading)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User getUser(Long id) {\n    // Try cache first\n    User user = redisTemplate.opsForValue().get("user:" + id);\n\n    if (user == null) {\n        // Cache miss - load from database\n        user = database.findById(id);\n\n        // Store in cache for next time\n        redisTemplate.opsForValue().set("user:" + id, user, 10, TimeUnit.MINUTES);\n    }\n\n    return user;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Write-Through"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User updateUser(User user) {\n    // Update database first\n    User updated = database.save(user);\n\n    // Update cache immediately\n    redisTemplate.opsForValue().set("user:" + user.getId(), updated, 10, TimeUnit.MINUTES);\n\n    return updated;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Write-Behind (Write-Back)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public void updateUserAsync(User user) {\n    // Update cache immediately\n    redisTemplate.opsForValue().set("user:" + user.getId(), user);\n\n    // Queue database update asynchronously\n    taskQueue.add(new UpdateUserTask(user));\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-session-store",children:"2. Session Store"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 1800)\npublic class SessionConfig {\n    // Automatic session management in Redis\n}\n\n// Sessions automatically stored as:\n// spring:session:sessions:<session-id>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-leaderboard-implementation",children:"3. Leaderboard Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class LeaderboardService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    private static final String LEADERBOARD_KEY = "game:leaderboard";\n\n    public void addScore(String player, double score) {\n        redisTemplate.opsForZSet().add(LEADERBOARD_KEY, player, score);\n    }\n\n    public void incrementScore(String player, double increment) {\n        redisTemplate.opsForZSet().incrementScore(LEADERBOARD_KEY, player, increment);\n    }\n\n    public List<String> getTopPlayers(int count) {\n        Set<Object> top = redisTemplate.opsForZSet()\n            .reverseRange(LEADERBOARD_KEY, 0, count - 1);\n        return top.stream()\n            .map(Object::toString)\n            .collect(Collectors.toList());\n    }\n\n    public Long getPlayerRank(String player) {\n        return redisTemplate.opsForZSet().reverseRank(LEADERBOARD_KEY, player);\n    }\n\n    public Double getPlayerScore(String player) {\n        return redisTemplate.opsForZSet().score(LEADERBOARD_KEY, player);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-real-time-analytics",children:"4. Real-Time Analytics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class AnalyticsService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    // Track page views\n    public void trackPageView(String page) {\n        String key = "analytics:pageviews:" + LocalDate.now();\n        redisTemplate.opsForHash().increment(key, page, 1);\n        redisTemplate.expire(key, 30, TimeUnit.DAYS);\n    }\n\n    // Track unique visitors using HyperLogLog\n    public void trackUniqueVisitor(String userId) {\n        String key = "analytics:visitors:" + LocalDate.now();\n        redisTemplate.opsForHyperLogLog().add(key, userId);\n    }\n\n    public Long getUniqueVisitors() {\n        String key = "analytics:visitors:" + LocalDate.now();\n        return redisTemplate.opsForHyperLogLog().size(key);\n    }\n\n    // Track online users using sets\n    public void userOnline(String userId) {\n        redisTemplate.opsForSet().add("online:users", userId);\n        redisTemplate.expire("online:users", 5, TimeUnit.MINUTES);\n    }\n\n    public Long getOnlineUserCount() {\n        return redisTemplate.opsForSet().size("online:users");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"5-distributed-locks",children:"5. Distributed Locks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class RedisDistributedLock {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public boolean acquireLock(String lockKey, String requestId, long expireTime) {\n        Boolean result = redisTemplate.opsForValue()\n            .setIfAbsent(lockKey, requestId, expireTime, TimeUnit.SECONDS);\n        return Boolean.TRUE.equals(result);\n    }\n\n    public boolean releaseLock(String lockKey, String requestId) {\n        String script =\n            "if redis.call(\'get\', KEYS[1]) == ARGV[1] then " +\n            "    return redis.call(\'del\', KEYS[1]) " +\n            "else " +\n            "    return 0 " +\n            "end";\n\n        Long result = redisTemplate.execute(\n            new DefaultRedisScript<>(script, Long.class),\n            Collections.singletonList(lockKey),\n            requestId\n        );\n\n        return result != null && result == 1L;\n    }\n}\n\n// Usage\npublic void processOrder(String orderId) {\n    String lockKey = "lock:order:" + orderId;\n    String requestId = UUID.randomUUID().toString();\n\n    try {\n        if (distributedLock.acquireLock(lockKey, requestId, 30)) {\n            // Process order (only one instance can execute)\n            processOrderLogic(orderId);\n        } else {\n            throw new RuntimeException("Could not acquire lock");\n        }\n    } finally {\n        distributedLock.releaseLock(lockKey, requestId);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"redis-best-practices",children:"Redis Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-key-naming-conventions",children:"1. Key Naming Conventions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Use colons for hierarchy\nuser:1000:profile\nuser:1000:sessions\norder:2024:10:24:12345\n\n# Use descriptive prefixes\ncache:user:1000\ntemp:verification:abc123\ncounter:api:requests:user:1000\n\n# Keep keys reasonably short\n# \u274c application:production:user:profile:data:1000\n# \u2705 app:prod:user:1000\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-memory-optimization",children:"2. Memory Optimization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Use hashes for objects instead of multiple keys\n# \u274c Bad\nSET user:1000:name "John"\nSET user:1000:email "john@example.com"\nSET user:1000:age "30"\n\n# \u2705 Good\nHSET user:1000 name "John" email "john@example.com" age 30\n\n# Enable compression\nCONFIG SET hash-max-ziplist-entries 512\nCONFIG SET hash-max-ziplist-value 64\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-always-set-ttl-on-cache-keys",children:"3. Always Set TTL on Cache Keys"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# \u274c Bad - no expiration\nSET cache:data value\n\n# \u2705 Good - with TTL\nSET cache:data value EX 3600\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-use-connection-pooling",children:"4. Use Connection Pooling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Bean\npublic LettuceConnectionFactory redisConnectionFactory() {\n    GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();\n    poolConfig.setMaxTotal(20);\n    poolConfig.setMaxIdle(10);\n    poolConfig.setMinIdle(5);\n    poolConfig.setMaxWaitMillis(2000);\n\n    LettuceClientConfiguration clientConfig = LettuceClientConfiguration\n        .builder()\n        .poolConfig(poolConfig)\n        .build();\n\n    return new LettuceConnectionFactory(serverConfig, clientConfig);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-monitor-performance",children:"5. Monitor Performance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Check slow queries\nSLOWLOG GET 10\n\n# Monitor memory\nINFO memory\nMEMORY STATS\n\n# Track command statistics\nINFO commandstats\n\n# Monitor in real-time\nMONITOR  # Use with caution in production!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-security-hardening",children:"6. Security Hardening"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# Require password\nrequirepass your_strong_password\n\n# Rename dangerous commands\nrename-command FLUSHDB ""\nrename-command FLUSHALL ""\nrename-command CONFIG "CONFIG_abc123"\n\n# Bind to specific interface\nbind 127.0.0.1\n\n# Disable protected mode for production (with firewall)\nprotected-mode yes\n\n# Use TLS/SSL\ntls-port 6380\ntls-cert-file /path/to/redis.crt\ntls-key-file /path/to/redis.key\n'})}),"\n",(0,s.jsx)(n.h3,{id:"7-backup-strategy",children:"7. Backup Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Automated backups\n# Configure in redis.conf\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# Manual backup\nredis-cli BGSAVE\n\n# Copy RDB file\ncp /var/lib/redis/dump.rdb /backup/dump-$(date +%Y%m%d).rdb\n\n# Enable AOF for durability\nappendonly yes\nappendfsync everysec\n"})}),"\n",(0,s.jsx)(n.h3,{id:"8-handle-failures-gracefully",children:"8. Handle Failures Gracefully"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class ResilientCacheService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public User getUserWithFallback(Long id) {\n        try {\n            User cached = (User) redisTemplate.opsForValue().get("user:" + id);\n            if (cached != null) {\n                return cached;\n            }\n        } catch (Exception e) {\n            log.error("Redis connection failed, falling back to database", e);\n        }\n\n        // Fallback to database\n        return database.findById(id);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"9-avoid-large-keys-and-values",children:"9. Avoid Large Keys and Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:'# \u274c Bad - storing large JSON (>1MB)\nSET user:data \'{"huge": "json object with MB of data"}\'\n\n# \u2705 Good - break into smaller chunks\nHSET user:1000 profile {...}\nHSET user:1000 preferences {...}\nHSET user:1000 settings {...}\n\n# Monitor large keys\nredis-cli --bigkeys\n'})}),"\n",(0,s.jsx)(n.h3,{id:"10-use-appropriate-data-structures",children:"10. Use Appropriate Data Structures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u274c Bad - storing set as JSON string\nredisTemplate.opsForValue().set("tags", "[\\"redis\\",\\"cache\\",\\"nosql\\"]");\n\n// \u2705 Good - use native Set\nredisTemplate.opsForSet().add("tags", "redis", "cache", "nosql");\n\n// \u274c Bad - storing sorted data as list\nredisTemplate.opsForList().rightPush("scores", "player1:100");\n\n// \u2705 Good - use sorted set\nredisTemplate.opsForZSet().add("scores", "player1", 100);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-redis-patterns",children:"Advanced Redis Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"1-cache-stampede-prevention",children:"1. Cache Stampede Prevention"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class CacheStampedeService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public User getUserWithStampedePrevention(Long id) {\n        String cacheKey = "user:" + id;\n        String lockKey = "lock:" + cacheKey;\n\n        // Try to get from cache\n        User user = (User) redisTemplate.opsForValue().get(cacheKey);\n        if (user != null) {\n            return user;\n        }\n\n        // Try to acquire lock\n        Boolean lockAcquired = redisTemplate.opsForValue()\n            .setIfAbsent(lockKey, "1", 10, TimeUnit.SECONDS);\n\n        if (Boolean.TRUE.equals(lockAcquired)) {\n            try {\n                // Double-check cache\n                user = (User) redisTemplate.opsForValue().get(cacheKey);\n                if (user != null) {\n                    return user;\n                }\n\n                // Load from database\n                user = database.findById(id);\n\n                // Cache with expiration\n                redisTemplate.opsForValue().set(cacheKey, user, 10, TimeUnit.MINUTES);\n\n                return user;\n            } finally {\n                // Release lock\n                redisTemplate.delete(lockKey);\n            }\n        } else {\n            // Wait and retry\n            try {\n                Thread.sleep(100);\n                return getUserWithStampedePrevention(id);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-bloom-filter-for-existence-checks",children:"2. Bloom Filter for Existence Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class BloomFilterService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    private static final String BLOOM_KEY = "bloom:users";\n\n    // Add element to bloom filter\n    public void add(String userId) {\n        int[] hashes = getHashes(userId, 3);\n        for (int hash : hashes) {\n            redisTemplate.opsForValue().setBit(BLOOM_KEY, hash, true);\n        }\n    }\n\n    // Check if element might exist\n    public boolean mightExist(String userId) {\n        int[] hashes = getHashes(userId, 3);\n        for (int hash : hashes) {\n            Boolean bit = redisTemplate.opsForValue().getBit(BLOOM_KEY, hash);\n            if (!Boolean.TRUE.equals(bit)) {\n                return false;\n            }\n        }\n        return true; // Might exist (or false positive)\n    }\n\n    private int[] getHashes(String value, int numHashes) {\n        int[] hashes = new int[numHashes];\n        for (int i = 0; i < numHashes; i++) {\n            hashes[i] = Math.abs((value + i).hashCode()) % 10000000;\n        }\n        return hashes;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-sliding-window-rate-limiter-token-bucket",children:"3. Sliding Window Rate Limiter (Token Bucket)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class TokenBucketRateLimiter {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public boolean allowRequest(String userId, int capacity, double refillRate) {\n        String script =\n            "local key = KEYS[1]\\n" +\n            "local capacity = tonumber(ARGV[1])\\n" +\n            "local refill_rate = tonumber(ARGV[2])\\n" +\n            "local now = tonumber(ARGV[3])\\n" +\n            "local requested = tonumber(ARGV[4])\\n" +\n            "\\n" +\n            "local tokens = tonumber(redis.call(\'HGET\', key, \'tokens\'))\\n" +\n            "local last_refill = tonumber(redis.call(\'HGET\', key, \'last_refill\'))\\n" +\n            "\\n" +\n            "if tokens == nil then\\n" +\n            "    tokens = capacity\\n" +\n            "    last_refill = now\\n" +\n            "end\\n" +\n            "\\n" +\n            "local time_passed = now - last_refill\\n" +\n            "local new_tokens = math.min(capacity, tokens + time_passed * refill_rate)\\n" +\n            "\\n" +\n            "if new_tokens >= requested then\\n" +\n            "    new_tokens = new_tokens - requested\\n" +\n            "    redis.call(\'HMSET\', key, \'tokens\', new_tokens, \'last_refill\', now)\\n" +\n            "    redis.call(\'EXPIRE\', key, 3600)\\n" +\n            "    return 1\\n" +\n            "else\\n" +\n            "    return 0\\n" +\n            "end";\n\n        Long result = redisTemplate.execute(\n            new DefaultRedisScript<>(script, Long.class),\n            Collections.singletonList("rate_limit:" + userId),\n            String.valueOf(capacity),\n            String.valueOf(refillRate),\n            String.valueOf(System.currentTimeMillis() / 1000.0),\n            "1"\n        );\n\n        return result != null && result == 1L;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-geospatial-indexing-for-location-based-services",children:"4. Geospatial Indexing for Location-Based Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class LocationService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    private static final String GEO_KEY = "locations:stores";\n\n    // Add store location\n    public void addStore(String storeId, double longitude, double latitude) {\n        redisTemplate.opsForGeo().add(GEO_KEY,\n            new Point(longitude, latitude), storeId);\n    }\n\n    // Find nearby stores within radius\n    public List<String> findNearbyStores(double longitude, double latitude,\n                                         double radiusKm) {\n        Circle circle = new Circle(new Point(longitude, latitude),\n            new Distance(radiusKm, Metrics.KILOMETERS));\n\n        GeoResults<GeoLocation<Object>> results = redisTemplate.opsForGeo()\n            .radius(GEO_KEY, circle);\n\n        return results.getContent().stream()\n            .map(result -> result.getContent().getName().toString())\n            .collect(Collectors.toList());\n    }\n\n    // Get distance between two stores\n    public Double getDistance(String store1, String store2) {\n        Distance distance = redisTemplate.opsForGeo()\n            .distance(GEO_KEY, store1, store2, Metrics.KILOMETERS);\n        return distance != null ? distance.getValue() : null;\n    }\n\n    // Get store coordinates\n    public Point getStoreLocation(String storeId) {\n        List<Point> positions = redisTemplate.opsForGeo()\n            .position(GEO_KEY, storeId);\n        return positions != null && !positions.isEmpty() ? positions.get(0) : null;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"5-job-queue-with-priority",children:"5. Job Queue with Priority"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class PriorityJobQueue {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    private static final String QUEUE_KEY = "jobs:queue";\n\n    // Add job with priority (higher score = higher priority)\n    public void enqueue(String jobId, int priority) {\n        redisTemplate.opsForZSet().add(QUEUE_KEY, jobId, -priority);\n    }\n\n    // Get highest priority job\n    public String dequeue() {\n        Set<Object> jobs = redisTemplate.opsForZSet().range(QUEUE_KEY, 0, 0);\n        if (jobs != null && !jobs.isEmpty()) {\n            String jobId = jobs.iterator().next().toString();\n            redisTemplate.opsForZSet().remove(QUEUE_KEY, jobId);\n            return jobId;\n        }\n        return null;\n    }\n\n    // Peek at next job without removing\n    public String peek() {\n        Set<Object> jobs = redisTemplate.opsForZSet().range(QUEUE_KEY, 0, 0);\n        return jobs != null && !jobs.isEmpty() ?\n            jobs.iterator().next().toString() : null;\n    }\n\n    // Get queue size\n    public Long size() {\n        return redisTemplate.opsForZSet().zCard(QUEUE_KEY);\n    }\n\n    // Get all jobs in priority order\n    public List<String> getAllJobs() {\n        Set<Object> jobs = redisTemplate.opsForZSet().range(QUEUE_KEY, 0, -1);\n        return jobs.stream()\n            .map(Object::toString)\n            .collect(Collectors.toList());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"6-implement-activity-feed",children:"6. Implement Activity Feed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class ActivityFeedService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    // Add activity to user\'s feed\n    public void addActivity(Long userId, Activity activity) {\n        String feedKey = "feed:user:" + userId;\n\n        // Add to stream\n        redisTemplate.opsForStream().add(\n            StreamRecords.newRecord()\n                .in(feedKey)\n                .ofObject(activity)\n        );\n\n        // Trim to keep only last 1000 activities\n        redisTemplate.opsForStream().trim(feedKey, 1000);\n    }\n\n    // Get user\'s recent activities\n    public List<Activity> getRecentActivities(Long userId, int count) {\n        String feedKey = "feed:user:" + userId;\n\n        List<ObjectRecord<String, Activity>> records = redisTemplate.opsForStream()\n            .range(Activity.class, feedKey, Range.unbounded(), Limit.limit().count(count));\n\n        return records.stream()\n            .map(MapRecord::getValue)\n            .collect(Collectors.toList());\n    }\n\n    // Fan out activity to followers\n    public void publishActivity(Long userId, Activity activity) {\n        // Get user\'s followers\n        Set<Object> followers = redisTemplate.opsForSet()\n            .members("followers:" + userId);\n\n        if (followers != null) {\n            for (Object followerId : followers) {\n                addActivity(Long.parseLong(followerId.toString()), activity);\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"redis-monitoring-and-debugging",children:"Redis Monitoring and Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"1-key-metrics-to-monitor",children:"1. Key Metrics to Monitor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Memory usage\nINFO memory\nMEMORY STATS\nMEMORY DOCTOR\n\n# Command statistics\nINFO commandstats\n\n# Client connections\nINFO clients\nCLIENT LIST\n\n# Replication status\nINFO replication\n\n# Persistence status\nINFO persistence\n\n# Server statistics\nINFO stats\n\n# CPU usage\nINFO cpu\n\n# Keyspace statistics\nINFO keyspace\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-monitoring-script-example",children:"2. Monitoring Script Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\n@Slf4j\npublic class RedisMonitoringService {\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    @Scheduled(fixedRate = 60000) // Every minute\n    public void monitorRedis() {\n        try {\n            Properties info = redisTemplate.getConnectionFactory()\n                .getConnection()\n                .info();\n\n            // Memory usage\n            String usedMemory = info.getProperty("used_memory_human");\n            String maxMemory = info.getProperty("maxmemory_human");\n            log.info("Memory Usage: {} / {}", usedMemory, maxMemory);\n\n            // Connected clients\n            String connectedClients = info.getProperty("connected_clients");\n            log.info("Connected Clients: {}", connectedClients);\n\n            // Operations per second\n            String opsPerSec = info.getProperty("instantaneous_ops_per_sec");\n            log.info("Operations/sec: {}", opsPerSec);\n\n            // Hit rate\n            String keyspaceHits = info.getProperty("keyspace_hits");\n            String keyspaceMisses = info.getProperty("keyspace_misses");\n            if (keyspaceHits != null && keyspaceMisses != null) {\n                long hits = Long.parseLong(keyspaceHits);\n                long misses = Long.parseLong(keyspaceMisses);\n                double hitRate = hits > 0 ? (double) hits / (hits + misses) * 100 : 0;\n                log.info("Cache Hit Rate: {:.2f}%", hitRate);\n            }\n\n        } catch (Exception e) {\n            log.error("Error monitoring Redis", e);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-debugging-techniques",children:"3. Debugging Techniques"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Find large keys\nredis-cli --bigkeys\n\n# Monitor commands in real-time\nMONITOR\n\n# Analyze slow queries\nSLOWLOG GET 10\nSLOWLOG LEN\nSLOWLOG RESET\n\n# Check memory usage by key pattern\nMEMORY USAGE key\n\n# Scan keys safely\nSCAN 0 MATCH user:* COUNT 100\n\n# Get key information\nTYPE key\nOBJECT ENCODING key\nTTL key\nPTTL key\n\n# Debug specific key\nDEBUG OBJECT key\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-common-issues-and-solutions",children:"4. Common Issues and Solutions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Issue: High Memory Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Find memory hogs\nredis-cli --bigkeys\n\n# Check fragmentation\nINFO memory | grep fragmentation\n\n# Solution: Delete unused keys, set TTL, optimize data structures\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Issue: Slow Performance"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Check slow queries\nSLOWLOG GET 10\n\n# Solution: Avoid KEYS command, use SCAN\n# Use pipelining for bulk operations\n# Add more replicas for read scaling\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Issue: Connection Timeouts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Check connection settings\nCONFIG GET timeout\nCONFIG GET tcp-keepalive\n\n# Solution: Increase connection pool size\n# Set appropriate timeouts\n# Monitor network latency\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redis-vs-other-caching-solutions",children:"Redis vs Other Caching Solutions"}),"\n",(0,s.jsx)(n.h3,{id:"comparison-table",children:"Comparison Table"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Redis"}),(0,s.jsx)(n.th,{children:"Memcached"}),(0,s.jsx)(n.th,{children:"Hazelcast"}),(0,s.jsx)(n.th,{children:"Ehcache"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Data Structures"}),(0,s.jsx)(n.td,{children:"\u2705 Rich (String, Hash, List, Set, etc.)"}),(0,s.jsx)(n.td,{children:"\u274c Key-Value only"}),(0,s.jsx)(n.td,{children:"\u2705 Maps, Lists, Queues"}),(0,s.jsx)(n.td,{children:"\u2705 Limited"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Persistence"}),(0,s.jsx)(n.td,{children:"\u2705 RDB + AOF"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Replication"}),(0,s.jsx)(n.td,{children:"\u2705 Master-Replica"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u2705 Limited"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Clustering"}),(0,s.jsx)(n.td,{children:"\u2705 Built-in"}),(0,s.jsx)(n.td,{children:"\u274c Client-side"}),(0,s.jsx)(n.td,{children:"\u2705 Built-in"}),(0,s.jsx)(n.td,{children:"\u2705 Limited"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Pub/Sub"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u274c No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Transactions"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u2705 Limited"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Lua Scripting"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u274c No"}),(0,s.jsx)(n.td,{children:"\u274c No"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TTL Support"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"\u2705 Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Performance"}),(0,s.jsx)(n.td,{children:"\u26a1 Very High"}),(0,s.jsx)(n.td,{children:"\u26a1 Very High"}),(0,s.jsx)(n.td,{children:"\u26a1 High"}),(0,s.jsx)(n.td,{children:"\u26a1 High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Memory Efficiency"}),(0,s.jsx)(n.td,{children:"\u26a1 High"}),(0,s.jsx)(n.td,{children:"\u26a1 Very High"}),(0,s.jsx)(n.td,{children:"\u26a1 Medium"}),(0,s.jsx)(n.td,{children:"\u26a1 High"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-redis",children:"When to Use Redis"}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use Redis when:"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Need rich data structures beyond key-value"}),"\n",(0,s.jsx)(n.li,{children:"Require persistence and durability"}),"\n",(0,s.jsx)(n.li,{children:"Want pub/sub messaging capabilities"}),"\n",(0,s.jsx)(n.li,{children:"Need geospatial or time-series data"}),"\n",(0,s.jsx)(n.li,{children:"Require Lua scripting for complex operations"}),"\n",(0,s.jsx)(n.li,{children:"Want built-in clustering and replication"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Consider alternatives when:"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Only need simple key-value caching (Memcached might be lighter)"}),"\n",(0,s.jsx)(n.li,{children:"Need distributed computing (Hazelcast)"}),"\n",(0,s.jsx)(n.li,{children:"Want in-process caching (Ehcache/Caffeine)"}),"\n",(0,s.jsx)(n.li,{children:"Have extremely limited memory budget"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"redis-performance-benchmarks",children:"Redis Performance Benchmarks"}),"\n",(0,s.jsx)(n.h3,{id:"typical-performance-numbers",children:"Typical Performance Numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Single Instance (Standard Hardware):\n- SET operations: ~100,000 ops/sec\n- GET operations: ~100,000 ops/sec\n- INCR operations: ~100,000 ops/sec\n- LPUSH operations: ~90,000 ops/sec\n- LRANGE (100 elements): ~30,000 ops/sec\n\nWith Pipelining (16 commands):\n- SET operations: ~1,000,000 ops/sec\n- GET operations: ~1,000,000 ops/sec\n\nLatency:\n- Average: < 1ms\n- P99: < 2ms\n- P99.9: < 5ms\n"})}),"\n",(0,s.jsx)(n.h3,{id:"running-your-own-benchmarks",children:"Running Your Own Benchmarks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Basic benchmark\nredis-benchmark -t set,get -n 1000000 -q\n\n# With different data sizes\nredis-benchmark -t set,get -n 100000 -d 100 -q\nredis-benchmark -t set,get -n 100000 -d 1024 -q\n\n# Test pipelining\nredis-benchmark -t set,get -n 100000 -P 16 -q\n\n# Specific key pattern\nredis-benchmark -t set -r 100000 -n 1000000 -q\n\n# Multiple clients\nredis-benchmark -t set,get -n 100000 -c 50 -q\n\n# CSV output for analysis\nredis-benchmark -t set,get -n 100000 --csv > results.csv\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redis-configuration-reference",children:"Redis Configuration Reference"}),"\n",(0,s.jsx)(n.h3,{id:"important-configuration-parameters",children:"Important Configuration Parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:'# redis.conf\n\n# Network\nbind 127.0.0.1                    # Bind to localhost\nport 6379                         # Default port\ntcp-backlog 511                   # TCP listen backlog\ntimeout 0                         # Close idle connections after N seconds\ntcp-keepalive 300                 # TCP keepalive\n\n# Memory\nmaxmemory 2gb                     # Maximum memory limit\nmaxmemory-policy allkeys-lru      # Eviction policy\n\n# Persistence - RDB\nsave 900 1                        # Save after 900s if 1 key changed\nsave 300 10                       # Save after 300s if 10 keys changed\nsave 60 10000                     # Save after 60s if 10000 keys changed\ndbfilename dump.rdb               # RDB filename\ndir /var/lib/redis                # Working directory\n\n# Persistence - AOF\nappendonly yes                    # Enable AOF\nappendfilename "appendonly.aof"   # AOF filename\nappendfsync everysec              # Fsync policy (always/everysec/no)\nno-appendfsync-on-rewrite no      # Don\'t fsync during rewrite\nauto-aof-rewrite-percentage 100   # Rewrite when 100% larger\nauto-aof-rewrite-min-size 64mb    # Minimum size for rewrite\n\n# Replication\nreplicaof <masterip> <masterport> # Set as replica\nreplica-read-only yes             # Replicas are read-only\nrepl-diskless-sync no             # Disk-backed replication\n\n# Security\nrequirepass yourpassword          # Set password\nrename-command FLUSHDB ""         # Disable dangerous commands\n\n# Limits\nmaxclients 10000                  # Maximum number of clients\n\n# Slow Log\nslowlog-log-slower-than 10000     # Microseconds (10ms)\nslowlog-max-len 128               # Maximum slow log entries\n\n# Advanced\nhash-max-ziplist-entries 512      # Optimize hash memory\nhash-max-ziplist-value 64\nlist-max-ziplist-size -2\nset-max-intset-entries 512\n'})}),"\n",(0,s.jsx)(n.h2,{id:"redis-cheat-sheet",children:"Redis Cheat Sheet"}),"\n",(0,s.jsx)(n.h3,{id:"quick-command-reference",children:"Quick Command Reference"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-redis",children:"# Strings\nSET key value [EX seconds] [NX|XX]\nGET key\nMSET key1 val1 key2 val2\nMGET key1 key2\nINCR key\nDECR key\nAPPEND key value\n\n# Hashes\nHSET key field value\nHGET key field\nHMSET key f1 v1 f2 v2\nHMGET key f1 f2\nHGETALL key\nHDEL key field\nHINCRBY key field increment\n\n# Lists\nLPUSH key value\nRPUSH key value\nLPOP key\nRPOP key\nLRANGE key start stop\nLLEN key\nLTRIM key start stop\n\n# Sets\nSADD key member\nSREM key member\nSMEMBERS key\nSISMEMBER key member\nSINTER key1 key2\nSUNION key1 key2\nSCARD key\n\n# Sorted Sets\nZADD key score member\nZRANGE key start stop [WITHSCORES]\nZREVRANGE key start stop\nZRANK key member\nZSCORE key member\nZINCRBY key increment member\nZREM key member\n\n# Keys\nDEL key\nEXISTS key\nEXPIRE key seconds\nTTL key\nPERSIST key\nKEYS pattern\nSCAN cursor\nRENAME key newkey\n\n# Server\nPING\nINFO [section]\nCONFIG GET parameter\nCONFIG SET parameter value\nFLUSHDB\nFLUSHALL\nSAVE\nBGSAVE\nDBSIZE\nCLIENT LIST\nSLOWLOG GET\n"})}),"\n",(0,s.jsx)(n.h2,{id:"redis-ecosystem-and-tools",children:"Redis Ecosystem and Tools"}),"\n",(0,s.jsx)(n.h3,{id:"official-tools",children:"Official Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"redis-cli"}),": Command-line interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"redis-benchmark"}),": Performance testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"redis-check-aof"}),": AOF file repair"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"redis-check-rdb"}),": RDB file analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RedisInsight"}),": Official GUI (recommended)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"third-party-tools",children:"Third-Party Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis Commander"}),": Web-based management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RedisDesktopManager"}),": Desktop GUI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"redis-rdb-tools"}),": RDB file analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"redis-stat"}),": Real-time monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Medis"}),": macOS native client"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"client-libraries",children:"Client Libraries"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Java"}),": Jedis, Lettuce (recommended), Redisson"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python"}),": redis-py, aioredis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Node.js"}),": ioredis, node-redis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Go"}),": go-redis, redigo"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C#"}),": StackExchange.Redis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PHP"}),": Predis, PhpRedis"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cloud-providers",children:"Cloud Providers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AWS ElastiCache"}),": Managed Redis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Azure Cache for Redis"}),": Managed service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Google Cloud Memorystore"}),": Managed Redis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis Enterprise Cloud"}),": Official cloud offering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Upstash"}),": Serverless Redis"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Redis is a powerful, versatile in-memory data store that excels in multiple roles:"}),"\n",(0,s.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Versatility"}),": Not just a cache - database, message broker, and more"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Sub-millisecond latency for most operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rich Data Structures"}),": Choose the right structure for your use case"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Persistence"}),": Optional durability with RDB and AOF"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalability"}),": Built-in replication and clustering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spring Boot Integration"}),": Seamless caching with annotations"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"best-use-cases",children:"Best Use Cases"}),"\n",(0,s.jsx)(n.p,{children:"\u2705 Caching layer for reducing database load\n\u2705 Session storage for web applications\n\u2705 Real-time analytics and leaderboards\n\u2705 Rate limiting and API throttling\n\u2705 Message queues and pub/sub\n\u2705 Distributed locks\n\u2705 Geospatial applications"}),"\n",(0,s.jsx)(n.h3,{id:"when-not-to-use-redis",children:"When Not to Use Redis"}),"\n",(0,s.jsx)(n.p,{children:"\u274c Primary data store for critical data (use with persistence + backups)\n\u274c Complex relational queries (use RDBMS)\n\u274c Large blob storage (use object storage)\n\u274c Full-text search (use Elasticsearch)"}),"\n",(0,s.jsx)(n.h3,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Practice"}),": Set up local Redis and try commands"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integrate"}),": Add Redis caching to your Spring Boot app"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor"}),": Set up monitoring and alerting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scale"}),": Learn clustering when you need horizontal scaling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize"}),": Profile your application and optimize cache usage"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Official Documentation"}),": ",(0,s.jsx)(n.a,{href:"https://redis.io/documentation",children:"https://redis.io/documentation"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis University"}),": ",(0,s.jsx)(n.a,{href:"https://university.redis.com/",children:"https://university.redis.com/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spring Data Redis"}),": ",(0,s.jsx)(n.a,{href:"https://spring.io/projects/spring-data-redis",children:"https://spring.io/projects/spring-data-redis"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis Commands"}),": ",(0,s.jsx)(n.a,{href:"https://redis.io/commands",children:"https://redis.io/commands"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Redis combines simplicity with powerful features, making it an essential tool in modern application architecture. Master Redis, and you'll have a versatile solution for caching, messaging, and real-time data processing!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);