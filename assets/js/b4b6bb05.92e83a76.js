"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[65688],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}},46141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(74848),i=t(28453);const o={},a="Library Management System",s={id:"Low Level design/Library Management System",title:"Library Management System",description:"Table of Contents",source:"@site/docs/Low Level design/Library Management System.mdx",sourceDirName:"Low Level design",slug:"/Low Level design/Library Management System",permalink:"/docs/Low Level design/Library Management System",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Low Level design/Library Management System.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LLD Interview Cheat Sheet",permalink:"/docs/Low Level design/LLD Interview Cheat Sheet"},next:{title:"Low Level Design (LLD)",permalink:"/docs/Low Level design/"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Requirements Clarification",id:"requirements-clarification",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"Scope Boundaries",id:"scope-boundaries",level:3},{value:"Included",id:"included",level:4},{value:"Excluded",id:"excluded",level:4},{value:"Core Entities &amp; Relationships",id:"core-entities--relationships",level:2},{value:"Main Entities",id:"main-entities",level:3},{value:"Key Relationships",id:"key-relationships",level:3},{value:"Class Design",id:"class-design",level:2},{value:"Core Classes with Responsibilities",id:"core-classes-with-responsibilities",level:3},{value:"UML Class Diagram",id:"uml-class-diagram",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Enums",id:"enums",level:3},{value:"BookStatus.java",id:"bookstatusjava",level:4},{value:"ReservationStatus.java",id:"reservationstatusjava",level:4},{value:"AccountStatus.java",id:"accountstatusjava",level:4},{value:"Basic Classes",id:"basic-classes",level:3},{value:"Address.java",id:"addressjava",level:4},{value:"Person.java",id:"personjava",level:4},{value:"Author.java",id:"authorjava",level:4},{value:"Core Domain Classes",id:"core-domain-classes",level:3},{value:"Book.java",id:"bookjava",level:4},{value:"BookItem.java",id:"bookitemjava",level:4},{value:"Account Hierarchy",id:"account-hierarchy",level:3},{value:"Account.java",id:"accountjava",level:4},{value:"Member.java",id:"memberjava",level:4},{value:"Librarian.java",id:"librarianjava",level:4},{value:"Transaction Classes",id:"transaction-classes",level:3},{value:"BookLending.java",id:"booklendingjava",level:4},{value:"BookReservation.java",id:"bookreservationjava",level:4},{value:"Library (Facade/Orchestrator)",id:"library-facadeorchestrator",level:3},{value:"Library.java",id:"libraryjava",level:4},{value:"Demo/Test Class",id:"demotest-class",level:3},{value:"LibraryManagementDemo.java",id:"librarymanagementdemojava",level:4},{value:"Edge Cases &amp; Extensions",id:"edge-cases--extensions",level:2},{value:"Edge Cases Handled",id:"edge-cases-handled",level:3},{value:"Design Patterns Used",id:"design-patterns-used",level:3},{value:"Scalability Considerations",id:"scalability-considerations",level:3},{value:"Current Implementation",id:"current-implementation",level:4},{value:"Improvements for Production",id:"improvements-for-production",level:4},{value:"Thread Safety Enhancements",id:"thread-safety-enhancements",level:3},{value:"Additional Features (Extensions)",id:"additional-features-extensions",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"library-management-system",children:"Library Management System"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#requirements-clarification",children:"Requirements Clarification"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#core-entities--relationships",children:"Core Entities & Relationships"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#class-design",children:"Class Design"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#uml-class-diagram",children:"UML Class Diagram"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#implementation",children:"Implementation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#edge-cases--extensions",children:"Edge Cases & Extensions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#summary",children:"Summary"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"requirements-clarification",children:"Requirements Clarification"}),"\n",(0,r.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Book Management"}),": Add, remove, update, and search books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Member Management"}),": Register members, issue library cards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Borrowing"}),": Members can borrow books (checkout)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Returning"}),": Members can return borrowed books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Search"}),": Search books by title, author, ISBN, or subject"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fine Calculation"}),": Calculate fines for overdue books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reservation"}),": Members can reserve books that are currently borrowed"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability"}),": Support multiple branches (optional)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": Fast search operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Constraints"}),": Max 5 books per member, 14-day borrowing period"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Concurrency"}),": Handle multiple transactions simultaneously"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scope-boundaries",children:"Scope Boundaries"}),"\n",(0,r.jsx)(n.h4,{id:"included",children:"Included"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Core lending operations"}),"\n",(0,r.jsx)(n.li,{children:"Member and book management"}),"\n",(0,r.jsx)(n.li,{children:"Fine calculation"}),"\n",(0,r.jsx)(n.li,{children:"Basic search"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"excluded",children:"Excluded"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Payment processing"}),"\n",(0,r.jsx)(n.li,{children:"E-book management"}),"\n",(0,r.jsx)(n.li,{children:"Inter-library loans"}),"\n",(0,r.jsx)(n.li,{children:"Complex recommendation systems"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"core-entities--relationships",children:"Core Entities & Relationships"}),"\n",(0,r.jsx)(n.h3,{id:"main-entities",children:"Main Entities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Book"}),": Represents a book metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BookItem"}),": Physical copy of a book (composition with Book)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Member"}),": Library member who can borrow books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Librarian"}),": Staff who manages the library (inherits from Account)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BookLending"}),": Represents a borrowing transaction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BookReservation"}),": Represents a book reservation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Library"}),": Central system managing all operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-relationships",children:"Key Relationships"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Book ",(0,r.jsx)(n.strong,{children:"HAS-MANY"})," BookItem (Composition)"]}),"\n",(0,r.jsxs)(n.li,{children:["Member ",(0,r.jsx)(n.strong,{children:"HAS-MANY"})," BookLending (Association)"]}),"\n",(0,r.jsxs)(n.li,{children:["BookItem ",(0,r.jsx)(n.strong,{children:"HAS-ONE"})," BookLending (Association)"]}),"\n",(0,r.jsxs)(n.li,{children:["Account ",(0,r.jsx)(n.strong,{children:"IS-A"})," base class for Member and Librarian (Inheritance)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"class-design",children:"Class Design"}),"\n",(0,r.jsx)(n.h3,{id:"core-classes-with-responsibilities",children:"Core Classes with Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Book"}),": Stores book metadata (title, author, ISBN, publisher)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BookItem"}),": Represents individual physical copies with barcode, status (Available, Reserved, Loaned, Lost)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Member"}),": Can borrow/return books, reserve books, has borrowing limits"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Librarian"}),": Can add/remove books, manage members, block/unblock accounts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BookLending"}),": Tracks lending transaction with due date, return date, fine calculation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Library"}),": Singleton orchestrating all operations"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"uml-class-diagram",children:"UML Class Diagram"}),"\n",(0,r.jsx)(n.mermaid,{value:'classDiagram\n    class Library {\n        -String name\n        -Address address\n        -List~BookItem~ books\n        -List~Member~ members\n        +addBook(Book) boolean\n        +addBookItem(BookItem) boolean\n        +registerMember(Member) boolean\n        +issueBook(String barcode, String memberId) BookLending\n        +returnBook(String barcode) boolean\n    }\n\n    class Book {\n        -String ISBN\n        -String title\n        -String subject\n        -String publisher\n        -List~Author~ authors\n        -int publicationDate\n        +getDetails() String\n    }\n\n    class BookItem {\n        -String barcode\n        -Date borrowedDate\n        -Date dueDate\n        -double price\n        -BookStatus status\n        -Book book\n        +checkout(String memberId) boolean\n        +returnBook() boolean\n        +isAvailable() boolean\n    }\n\n    class Account {\n        <<abstract>>\n        -String id\n        -String password\n        -AccountStatus status\n        -Person person\n        +resetPassword() boolean\n    }\n\n    class Member {\n        -Date dateOfMembership\n        -int totalBooksCheckedOut\n        -List~BookLending~ activeLoans\n        -List~BookReservation~ reservations\n        +getTotalBooksCheckedOut() int\n        +reserveBook(BookItem) boolean\n        +checkoutBook(BookItem) boolean\n        +returnBook(BookItem) boolean\n        +canBorrowBook() boolean\n    }\n\n    class Librarian {\n        +addBookItem(BookItem) boolean\n        +blockMember(Member) boolean\n        +unblockMember(Member) boolean\n    }\n\n    class BookLending {\n        -String lendingId\n        -Date creationDate\n        -Date dueDate\n        -Date returnDate\n        -BookItem bookItem\n        -Member member\n        +calculateFine() double\n        +isOverdue() boolean\n    }\n\n    class BookReservation {\n        -String reservationId\n        -Date creationDate\n        -ReservationStatus status\n        -BookItem bookItem\n        -Member member\n        +cancel() boolean\n    }\n\n    class Person {\n        -String name\n        -Address address\n        -String email\n        -String phone\n    }\n\n    class Address {\n        -String streetAddress\n        -String city\n        -String state\n        -String zipCode\n        -String country\n    }\n\n    class BookStatus {\n        <<enumeration>>\n        AVAILABLE\n        RESERVED\n        LOANED\n        LOST\n    }\n\n    class ReservationStatus {\n        <<enumeration>>\n        WAITING\n        PENDING\n        COMPLETED\n        CANCELLED\n    }\n\n    class AccountStatus {\n        <<enumeration>>\n        ACTIVE\n        CLOSED\n        CANCELED\n        BLACKLISTED\n    }\n\n    class Author {\n        -String name\n        -String biography\n    }\n\n    Library "1" --\x3e "*" BookItem : manages\n    Library "1" --\x3e "*" Member : has\n    Book "1" --\x3e "*" BookItem : has copies\n    Book "*" --\x3e "*" Author : written by\n    Account <|-- Member : inherits\n    Account <|-- Librarian : inherits\n    Account "1" --\x3e "1" Person : has\n    Member "1" --\x3e "*" BookLending : has\n    Member "1" --\x3e "*" BookReservation : has\n    BookLending "*" --\x3e "1" BookItem : borrows\n    BookReservation "*" --\x3e "1" BookItem : reserves\n    BookItem --\x3e BookStatus : has\n    BookReservation --\x3e ReservationStatus : has\n    Account --\x3e AccountStatus : has'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,r.jsx)(n.h4,{id:"bookstatusjava",children:"BookStatus.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public enum BookStatus {\n    AVAILABLE,\n    RESERVED,\n    LOANED,\n    LOST\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"reservationstatusjava",children:"ReservationStatus.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public enum ReservationStatus {\n    WAITING,\n    PENDING,\n    COMPLETED,\n    CANCELLED,\n    NONE\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"accountstatusjava",children:"AccountStatus.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public enum AccountStatus {\n    ACTIVE,\n    CLOSED,\n    CANCELED,\n    BLACKLISTED\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"basic-classes",children:"Basic Classes"}),"\n",(0,r.jsx)(n.h4,{id:"addressjava",children:"Address.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Address {\n    private String streetAddress;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String country;\n\n    public Address(String street, String city, String state, String zip, String country) {\n        this.streetAddress = street;\n        this.city = city;\n        this.state = state;\n        this.zipCode = zip;\n        this.country = country;\n    }\n\n    public String getFullAddress() {\n        return streetAddress + ", " + city + ", " + state + " " + zipCode + ", " + country;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"personjava",children:"Person.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class Person {\n    private String name;\n    private Address address;\n    private String email;\n    private String phone;\n\n    public Person(String name, Address address, String email, String phone) {\n        this.name = name;\n        this.address = address;\n        this.email = email;\n        this.phone = phone;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"authorjava",children:"Author.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class Author {\n    private String name;\n    private String biography;\n\n    public Author(String name, String biography) {\n        this.name = name;\n        this.biography = biography;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"core-domain-classes",children:"Core Domain Classes"}),"\n",(0,r.jsx)(n.h4,{id:"bookjava",children:"Book.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Book {\n    private String ISBN;\n    private String title;\n    private String subject;\n    private String publisher;\n    private List<Author> authors;\n    private int publicationDate;\n\n    public Book(String ISBN, String title, String subject, String publisher, int publicationDate) {\n        this.ISBN = ISBN;\n        this.title = title;\n        this.subject = subject;\n        this.publisher = publisher;\n        this.publicationDate = publicationDate;\n        this.authors = new ArrayList<>();\n    }\n\n    public void addAuthor(Author author) {\n        authors.add(author);\n    }\n\n    public String getISBN() {\n        return ISBN;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getSubject() {\n        return subject;\n    }\n\n    public List<Author> getAuthors() {\n        return authors;\n    }\n\n    public String getDetails() {\n        StringBuilder details = new StringBuilder();\n        details.append("Title: ").append(title).append("\\n");\n        details.append("ISBN: ").append(ISBN).append("\\n");\n        details.append("Subject: ").append(subject).append("\\n");\n        details.append("Authors: ");\n        for (Author author : authors) {\n            details.append(author.getName()).append(", ");\n        }\n        return details.toString();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"bookitemjava",children:"BookItem.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\npublic class BookItem {\n    private String barcode;\n    private Date borrowedDate;\n    private Date dueDate;\n    private double price;\n    private BookStatus status;\n    private Book book;\n\n    public BookItem(String barcode, Book book, double price) {\n        this.barcode = barcode;\n        this.book = book;\n        this.price = price;\n        this.status = BookStatus.AVAILABLE;\n    }\n\n    public boolean checkout(String memberId) {\n        if (status != BookStatus.AVAILABLE) {\n            return false;\n        }\n        status = BookStatus.LOANED;\n        borrowedDate = new Date();\n        dueDate = new Date(borrowedDate.getTime() + TimeUnit.DAYS.toMillis(14));\n        return true;\n    }\n\n    public boolean returnBook() {\n        if (status != BookStatus.LOANED) {\n            return false;\n        }\n        status = BookStatus.AVAILABLE;\n        borrowedDate = null;\n        dueDate = null;\n        return true;\n    }\n\n    public boolean isAvailable() {\n        return status == BookStatus.AVAILABLE;\n    }\n\n    public String getBarcode() {\n        return barcode;\n    }\n\n    public BookStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(BookStatus status) {\n        this.status = status;\n    }\n\n    public Book getBook() {\n        return book;\n    }\n\n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public Date getBorrowedDate() {\n        return borrowedDate;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"account-hierarchy",children:"Account Hierarchy"}),"\n",(0,r.jsx)(n.h4,{id:"accountjava",children:"Account.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public abstract class Account {\n    private String id;\n    private String password;\n    private AccountStatus status;\n    private Person person;\n\n    public Account(String id, String password, Person person) {\n        this.id = id;\n        this.password = password;\n        this.person = person;\n        this.status = AccountStatus.ACTIVE;\n    }\n\n    public boolean resetPassword(String newPassword) {\n        this.password = newPassword;\n        return true;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public AccountStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(AccountStatus status) {\n        this.status = status;\n    }\n\n    public Person getPerson() {\n        return person;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"memberjava",children:"Member.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\npublic class Member extends Account {\n    private Date dateOfMembership;\n    private int totalBooksCheckedOut;\n    private List<BookLending> activeLoans;\n    private List<BookReservation> reservations;\n    private static final int MAX_BOOKS_LIMIT = 5;\n\n    public Member(String id, String password, Person person) {\n        super(id, password, person);\n        this.dateOfMembership = new Date();\n        this.totalBooksCheckedOut = 0;\n        this.activeLoans = new ArrayList<>();\n        this.reservations = new ArrayList<>();\n    }\n\n    public int getTotalBooksCheckedOut() {\n        return totalBooksCheckedOut;\n    }\n\n    public boolean canBorrowBook() {\n        return totalBooksCheckedOut < MAX_BOOKS_LIMIT &&\n               getStatus() == AccountStatus.ACTIVE;\n    }\n\n    public boolean checkoutBook(BookItem bookItem) {\n        if (!canBorrowBook()) {\n            System.out.println("Cannot borrow more books. Limit reached or account not active.");\n            return false;\n        }\n        if (!bookItem.isAvailable()) {\n            System.out.println("Book is not available.");\n            return false;\n        }\n\n        BookLending lending = new BookLending(bookItem, this);\n        activeLoans.add(lending);\n        totalBooksCheckedOut++;\n        bookItem.checkout(getId());\n        return true;\n    }\n\n    public boolean returnBook(BookItem bookItem) {\n        BookLending lendingToReturn = null;\n        for (BookLending lending : activeLoans) {\n            if (lending.getBookItem().getBarcode().equals(bookItem.getBarcode())) {\n                lendingToReturn = lending;\n                break;\n            }\n        }\n\n        if (lendingToReturn == null) {\n            System.out.println("This book was not borrowed by this member.");\n            return false;\n        }\n\n        lendingToReturn.returnBook();\n        activeLoans.remove(lendingToReturn);\n        totalBooksCheckedOut--;\n        bookItem.returnBook();\n\n        double fine = lendingToReturn.calculateFine();\n        if (fine > 0) {\n            System.out.println("Fine to be paid: $" + fine);\n        }\n\n        return true;\n    }\n\n    public boolean reserveBook(BookItem bookItem) {\n        if (bookItem.getStatus() == BookStatus.AVAILABLE) {\n            System.out.println("Book is available. No need to reserve.");\n            return false;\n        }\n        BookReservation reservation = new BookReservation(bookItem, this);\n        reservations.add(reservation);\n        bookItem.setStatus(BookStatus.RESERVED);\n        return true;\n    }\n\n    public List<BookLending> getActiveLoans() {\n        return activeLoans;\n    }\n\n    public List<BookReservation> getReservations() {\n        return reservations;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"librarianjava",children:"Librarian.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Librarian extends Account {\n\n    public Librarian(String id, String password, Person person) {\n        super(id, password, person);\n    }\n\n    public boolean addBookItem(Library library, BookItem bookItem) {\n        return library.addBookItem(bookItem);\n    }\n\n    public boolean blockMember(Member member) {\n        if (member.getStatus() == AccountStatus.ACTIVE) {\n            member.setStatus(AccountStatus.BLACKLISTED);\n            System.out.println("Member " + member.getId() + " has been blocked.");\n            return true;\n        }\n        return false;\n    }\n\n    public boolean unblockMember(Member member) {\n        if (member.getStatus() == AccountStatus.BLACKLISTED) {\n            member.setStatus(AccountStatus.ACTIVE);\n            System.out.println("Member " + member.getId() + " has been unblocked.");\n            return true;\n        }\n        return false;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"transaction-classes",children:"Transaction Classes"}),"\n",(0,r.jsx)(n.h4,{id:"booklendingjava",children:"BookLending.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.Date;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\npublic class BookLending {\n    private String lendingId;\n    private Date creationDate;\n    private Date dueDate;\n    private Date returnDate;\n    private BookItem bookItem;\n    private Member member;\n    private static final double FINE_PER_DAY = 1.0;\n\n    public BookLending(BookItem bookItem, Member member) {\n        this.lendingId = UUID.randomUUID().toString();\n        this.creationDate = new Date();\n        this.bookItem = bookItem;\n        this.member = member;\n        this.dueDate = new Date(creationDate.getTime() + TimeUnit.DAYS.toMillis(14));\n    }\n\n    public double calculateFine() {\n        if (returnDate == null) {\n            returnDate = new Date();\n        }\n\n        if (returnDate.after(dueDate)) {\n            long diffInMillis = returnDate.getTime() - dueDate.getTime();\n            long daysLate = TimeUnit.MILLISECONDS.toDays(diffInMillis);\n            return daysLate * FINE_PER_DAY;\n        }\n        return 0.0;\n    }\n\n    public boolean isOverdue() {\n        return new Date().after(dueDate) && returnDate == null;\n    }\n\n    public void returnBook() {\n        this.returnDate = new Date();\n    }\n\n    public String getLendingId() {\n        return lendingId;\n    }\n\n    public Date getCreationDate() {\n        return creationDate;\n    }\n\n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public Date getReturnDate() {\n        return returnDate;\n    }\n\n    public BookItem getBookItem() {\n        return bookItem;\n    }\n\n    public Member getMember() {\n        return member;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"bookreservationjava",children:"BookReservation.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import java.util.Date;\nimport java.util.UUID;\n\npublic class BookReservation {\n    private String reservationId;\n    private Date creationDate;\n    private ReservationStatus status;\n    private BookItem bookItem;\n    private Member member;\n\n    public BookReservation(BookItem bookItem, Member member) {\n        this.reservationId = UUID.randomUUID().toString();\n        this.creationDate = new Date();\n        this.bookItem = bookItem;\n        this.member = member;\n        this.status = ReservationStatus.WAITING;\n    }\n\n    public boolean cancel() {\n        if (status == ReservationStatus.WAITING || status == ReservationStatus.PENDING) {\n            status = ReservationStatus.CANCELLED;\n            bookItem.setStatus(BookStatus.AVAILABLE);\n            return true;\n        }\n        return false;\n    }\n\n    public String getReservationId() {\n        return reservationId;\n    }\n\n    public ReservationStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(ReservationStatus status) {\n        this.status = status;\n    }\n\n    public BookItem getBookItem() {\n        return bookItem;\n    }\n\n    public Member getMember() {\n        return member;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"library-facadeorchestrator",children:"Library (Facade/Orchestrator)"}),"\n",(0,r.jsx)(n.h4,{id:"libraryjava",children:"Library.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.util.*;\n\npublic class Library {\n    private String name;\n    private Address address;\n    private List<BookItem> bookItems;\n    private Map<String, Book> books;\n    private Map<String, Member> members;\n    private Map<String, BookItem> bookItemMap;\n\n    private static Library instance;\n\n    private Library(String name, Address address) {\n        this.name = name;\n        this.address = address;\n        this.bookItems = new ArrayList<>();\n        this.books = new HashMap<>();\n        this.members = new HashMap<>();\n        this.bookItemMap = new HashMap<>();\n    }\n\n    public static Library getInstance(String name, Address address) {\n        if (instance == null) {\n            synchronized (Library.class) {\n                if (instance == null) {\n                    instance = new Library(name, address);\n                }\n            }\n        }\n        return instance;\n    }\n\n    public boolean addBook(Book book) {\n        if (books.containsKey(book.getISBN())) {\n            System.out.println("Book already exists in catalog.");\n            return false;\n        }\n        books.put(book.getISBN(), book);\n        return true;\n    }\n\n    public boolean addBookItem(BookItem bookItem) {\n        if (bookItemMap.containsKey(bookItem.getBarcode())) {\n            System.out.println("Book item with this barcode already exists.");\n            return false;\n        }\n        bookItems.add(bookItem);\n        bookItemMap.put(bookItem.getBarcode(), bookItem);\n\n        Book book = bookItem.getBook();\n        if (!books.containsKey(book.getISBN())) {\n            books.put(book.getISBN(), book);\n        }\n        return true;\n    }\n\n    public boolean registerMember(Member member) {\n        if (members.containsKey(member.getId())) {\n            System.out.println("Member already registered.");\n            return false;\n        }\n        members.put(member.getId(), member);\n        return true;\n    }\n\n    public BookLending issueBook(String barcode, String memberId) {\n        BookItem bookItem = bookItemMap.get(barcode);\n        Member member = members.get(memberId);\n\n        if (bookItem == null) {\n            System.out.println("Book item not found.");\n            return null;\n        }\n\n        if (member == null) {\n            System.out.println("Member not found.");\n            return null;\n        }\n\n        if (member.checkoutBook(bookItem)) {\n            System.out.println("Book issued successfully to " + member.getPerson().getName());\n            List<BookLending> loans = member.getActiveLoans();\n            return loans.get(loans.size() - 1);\n        }\n        return null;\n    }\n\n    public boolean returnBook(String barcode, String memberId) {\n        BookItem bookItem = bookItemMap.get(barcode);\n        Member member = members.get(memberId);\n\n        if (bookItem == null || member == null) {\n            System.out.println("Book item or member not found.");\n            return false;\n        }\n\n        return member.returnBook(bookItem);\n    }\n\n    public List<BookItem> searchByTitle(String title) {\n        List<BookItem> result = new ArrayList<>();\n        for (BookItem item : bookItems) {\n            if (item.getBook().getTitle().toLowerCase().contains(title.toLowerCase())\n                && item.isAvailable()) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public List<BookItem> searchByAuthor(String authorName) {\n        List<BookItem> result = new ArrayList<>();\n        for (BookItem item : bookItems) {\n            for (Author author : item.getBook().getAuthors()) {\n                if (author.getName().toLowerCase().contains(authorName.toLowerCase())\n                    && item.isAvailable()) {\n                    result.add(item);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<BookItem> searchByISBN(String ISBN) {\n        List<BookItem> result = new ArrayList<>();\n        Book book = books.get(ISBN);\n        if (book != null) {\n            for (BookItem item : bookItems) {\n                if (item.getBook().getISBN().equals(ISBN) && item.isAvailable()) {\n                    result.add(item);\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<BookItem> searchBySubject(String subject) {\n        List<BookItem> result = new ArrayList<>();\n        for (BookItem item : bookItems) {\n            if (item.getBook().getSubject().toLowerCase().contains(subject.toLowerCase())\n                && item.isAvailable()) {\n                result.add(item);\n            }\n        }\n        return result;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public Map<String, Member> getMembers() {\n        return members;\n    }\n\n    public Map<String, BookItem> getBookItemMap() {\n        return bookItemMap;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"demotest-class",children:"Demo/Test Class"}),"\n",(0,r.jsx)(n.h4,{id:"librarymanagementdemojava",children:"LibraryManagementDemo.java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class LibraryManagementDemo {\n    public static void main(String[] args) {\n        Address libraryAddress = new Address("123 Main St", "New York", "NY", "10001", "USA");\n        Library library = Library.getInstance("Central Library", libraryAddress);\n\n        Author author1 = new Author("Robert Martin", "Software engineer and author");\n        Author author2 = new Author("Joshua Bloch", "Java architect");\n\n        Book book1 = new Book("978-0132350884", "Clean Code", "Programming", "Prentice Hall", 2008);\n        book1.addAuthor(author1);\n\n        Book book2 = new Book("978-0134685991", "Effective Java", "Programming", "Addison-Wesley", 2017);\n        book2.addAuthor(author2);\n\n        BookItem item1 = new BookItem("BC001", book1, 45.99);\n        BookItem item2 = new BookItem("BC002", book1, 45.99);\n        BookItem item3 = new BookItem("BC003", book2, 50.00);\n\n        library.addBookItem(item1);\n        library.addBookItem(item2);\n        library.addBookItem(item3);\n\n        Address memberAddress = new Address("456 Elm St", "New York", "NY", "10002", "USA");\n        Person person1 = new Person("John Doe", memberAddress, "john@email.com", "555-1234");\n        Member member1 = new Member("M001", "password123", person1);\n\n        Person person2 = new Person("Jane Smith", memberAddress, "jane@email.com", "555-5678");\n        Member member2 = new Member("M002", "password456", person2);\n\n        library.registerMember(member1);\n        library.registerMember(member2);\n\n        Person librarianPerson = new Person("Alice Johnson", libraryAddress, "alice@library.com", "555-9999");\n        Librarian librarian = new Librarian("L001", "libpass", librarianPerson);\n\n        System.out.println("=== Library Management System Demo ===\\n");\n\n        System.out.println("--- Member borrowing books ---");\n        library.issueBook("BC001", "M001");\n        library.issueBook("BC003", "M001");\n\n        System.out.println("\\n--- Searching for books by title \'Clean\' ---");\n        List<BookItem> searchResults = library.searchByTitle("Clean");\n        for (BookItem item : searchResults) {\n            System.out.println("Found: " + item.getBook().getTitle() + " (Barcode: " + item.getBarcode() + ")");\n        }\n\n        System.out.println("\\n--- Member 2 trying to borrow already borrowed book ---");\n        library.issueBook("BC001", "M002");\n\n        System.out.println("\\n--- Member 2 reserving the book ---");\n        member2.reserveBook(item1);\n\n        System.out.println("\\n--- Member 1\'s active loans ---");\n        for (BookLending loan : member1.getActiveLoans()) {\n            System.out.println("Book: " + loan.getBookItem().getBook().getTitle() +\n                             ", Due Date: " + loan.getDueDate());\n        }\n\n        System.out.println("\\n--- Member 1 returning book ---");\n        library.returnBook("BC001", "M001");\n\n        System.out.println("\\n--- Checking remaining loans ---");\n        System.out.println("Member 1 has " + member1.getTotalBooksCheckedOut() + " books checked out.");\n\n        System.out.println("\\n--- Librarian blocking member ---");\n        librarian.blockMember(member1);\n\n        System.out.println("\\n--- Blocked member trying to borrow ---");\n        library.issueBook("BC002", "M001");\n\n        System.out.println("\\n--- Librarian unblocking member ---");\n        librarian.unblockMember(member1);\n\n        System.out.println("\\n=== Demo Complete ===");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"edge-cases--extensions",children:"Edge Cases & Extensions"}),"\n",(0,r.jsx)(n.h3,{id:"edge-cases-handled",children:"Edge Cases Handled"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Max Book Limit"}),": Members cannot borrow more than 5 books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Account Status Check"}),": Blocked members cannot borrow"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Book Availability"}),": Cannot borrow already loaned books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fine Calculation"}),": Automatic fine calculation for overdue books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Duplicate Prevention"}),": Cannot add duplicate books or members"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"design-patterns-used",children:"Design Patterns Used"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Singleton Pattern"}),": Library class (central management)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Factory Pattern"}),": Can be used for creating different types of books"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Strategy Pattern"}),": Can be implemented for different fine calculation strategies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observer Pattern"}),": Can notify members when reserved books become available"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scalability-considerations",children:"Scalability Considerations"}),"\n",(0,r.jsx)(n.h4,{id:"current-implementation",children:"Current Implementation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In-memory storage using HashMaps for O(1) lookups"}),"\n",(0,r.jsx)(n.li,{children:"Simple list-based search (can be improved)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"improvements-for-production",children:"Improvements for Production"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Integration"}),": Use JPA/Hibernate with relational DB"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Caching"}),": Redis for frequently accessed data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Search Optimization"}),": ElasticSearch for full-text search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Concurrency"}),": Add synchronization or use concurrent collections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Notification System"}),": Email/SMS for due dates and reservations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Analytics"}),": Track popular books, borrowing patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-branch Support"}),": Add branch entity and routing logic"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"thread-safety-enhancements",children:"Thread Safety Enhancements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// For production, add synchronization\npublic synchronized boolean checkoutBook(BookItem bookItem) {\n    // Implementation with thread safety\n}\n\n// Or use ConcurrentHashMap\nprivate ConcurrentHashMap<String, Member> members = new ConcurrentHashMap<>();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"additional-features-extensions",children:"Additional Features (Extensions)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rack System"}),": Organize books by rack location"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Late Fee Payment"}),": Integration with payment gateway"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Book Renewal"}),": Extend due date if no reservations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Digital Library Card"}),": QR code generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reading History"}),": Track all books read by member"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recommendation Engine"}),": Suggest books based on history"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);