"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[88777],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(96540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}},42935:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>o});var s=i(74848),r=i(28453);const l={},t="System Design: Spotify Top-K Songs Tracker",c={id:"High Level Designs/System Design: Spotify Top-K Songs Tracker",title:"System Design: Spotify Top-K Songs Tracker",description:"Problem Statement",source:"@site/docs/High Level Designs/System Design: Spotify Top-K Songs Tracker.mdx",sourceDirName:"High Level Designs",slug:"/High Level Designs/System Design: Spotify Top-K Songs Tracker",permalink:"/docs/High Level Designs/System Design: Spotify Top-K Songs Tracker",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/High Level Designs/System Design: Spotify Top-K Songs Tracker.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Social Media Timeline Design - HLD Architecture \ud83d\udcf0",permalink:"/docs/High Level Designs/Social Media Timeline Design - HLD Architecture"},next:{title:"System Design: Top-K YouTube Videos",permalink:"/docs/High Level Designs/System Design: Top-K YouTube Videos"}},a={},o=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"High-Level Architecture",id:"high-level-architecture",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Event Stream (Apache Kafka)",id:"1-event-stream-apache-kafka",level:3},{value:"2. Stream Processing Layer (Apache Flink)",id:"2-stream-processing-layer-apache-flink",level:3},{value:"3. Count-Min Sketch (CMS)",id:"3-count-min-sketch-cms",level:3},{value:"Structure",id:"structure",level:4},{value:"Operations",id:"operations",level:4},{value:"Why Minimum?",id:"why-minimum",level:4},{value:"Parameter Selection",id:"parameter-selection",level:4},{value:"4. Top-K Heap",id:"4-top-k-heap",level:3},{value:"Structure",id:"structure-1",level:4},{value:"Operations",id:"operations-1",level:4},{value:"Data Flow: Play Event Processing",id:"data-flow-play-event-processing",level:2},{value:"Sequence Diagram",id:"sequence-diagram",level:3},{value:"Step-by-Step Flow",id:"step-by-step-flow",level:3},{value:"API Design",id:"api-design",level:2},{value:"1. Record Play Event (Internal)",id:"1-record-play-event-internal",level:3},{value:"2. Get Top-K Songs",id:"2-get-top-k-songs",level:3},{value:"3. Get Song Count",id:"3-get-song-count",level:3},{value:"Distributed System Design",id:"distributed-system-design",level:2},{value:"Scaling Strategy",id:"scaling-strategy",level:3},{value:"Horizontal Scaling",id:"horizontal-scaling",level:4},{value:"CMS Merge Operation",id:"cms-merge-operation",level:4},{value:"Top-K Merge",id:"top-k-merge",level:4},{value:"Optimizations",id:"optimizations",level:2},{value:"1. Time-Window Analysis",id:"1-time-window-analysis",level:3},{value:"2. Heavy Hitters Detection",id:"2-heavy-hitters-detection",level:3},{value:"3. Bloom Filter Pre-filtering",id:"3-bloom-filter-pre-filtering",level:3},{value:"4. Caching Layer",id:"4-caching-layer",level:3},{value:"Storage Layer",id:"storage-layer",level:2},{value:"Redis (In-Memory Cache)",id:"redis-in-memory-cache",level:3},{value:"Cassandra (Persistent Storage)",id:"cassandra-persistent-storage",level:3},{value:"Capacity Estimation",id:"capacity-estimation",level:2},{value:"Traffic",id:"traffic",level:3},{value:"Storage",id:"storage",level:3},{value:"Network",id:"network",level:3},{value:"Fault Tolerance",id:"fault-tolerance",level:2},{value:"Strategies",id:"strategies",level:3},{value:"Trade-offs &amp; Considerations",id:"trade-offs--considerations",level:2},{value:"Accuracy vs Memory",id:"accuracy-vs-memory",level:3},{value:"Latency vs Freshness",id:"latency-vs-freshness",level:3},{value:"Consistency vs Availability",id:"consistency-vs-availability",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"Key Metrics",id:"key-metrics",level:3},{value:"Alerting",id:"alerting",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"system-design-spotify-top-k-songs-tracker",children:"System Design: Spotify Top-K Songs Tracker"})}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsx)(n.p,{children:"Design a system that tracks and retrieves the top-K most played songs on Spotify in real-time, handling millions of song plays per second with minimal memory footprint."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Track song play counts in real-time"}),"\n",(0,s.jsx)(n.li,{children:"Retrieve top-K most played songs (e.g., top 100)"}),"\n",(0,s.jsx)(n.li,{children:"Handle massive data streams (millions of plays/second)"}),"\n",(0,s.jsx)(n.li,{children:"Memory-efficient (sublinear in number of songs)"}),"\n",(0,s.jsx)(n.li,{children:"Near real-time accuracy (small error acceptable)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High Throughput"}),": Process millions of events/second"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Low Latency"}),": < 100ms for Top-K queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Horizontally Scalable"}),": Add nodes to handle load"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fault Tolerant"}),": No single point of failure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Approximate Counts"}),": Trade accuracy for efficiency (\xb1\u03b5 error acceptable)"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    A[Spotify Clients<br/>Web, Mobile] --\x3e|Play Events| B[Load Balancer]\n    B --\x3e C[Event Stream Bus<br/>Apache Kafka<br/>- Partitioned<br/>- Replicated]\n    C --\x3e D[Stream Processor Layer<br/>Apache Flink/Spark]\n\n    subgraph Processing["Stream Processing"]\n        D --\x3e E[Count-Min Sketch<br/>In-Memory]\n        D --\x3e F[Top-K Heap<br/>Min-Heap]\n    end\n\n    Processing --\x3e G[Storage Layer<br/>Redis - CMS Cache<br/>Cassandra - TopK]\n    G --\x3e H[API Service<br/>REST/GraphQL]\n    H --\x3e I[Frontend/Dashboard]\n\n    style A fill:#1DB954\n    style D fill:#FFD700\n    style G fill:#FF6B6B\n    style H fill:#4ECDC4'}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(n.h3,{id:"1-event-stream-apache-kafka",children:"1. Event Stream (Apache Kafka)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Ingest and buffer millions of play events"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Design Decisions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Topics"}),": ",(0,s.jsx)(n.code,{children:"song-plays"})," topic with multiple partitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partitioning Strategy"}),": Hash by ",(0,s.jsx)(n.code,{children:"songId"})," for even distribution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Replication Factor"}),": 3 for fault tolerance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retention"}),": 7 days for replay capability"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Decouples producers from consumers"}),"\n",(0,s.jsx)(n.li,{children:"Handles traffic spikes via buffering"}),"\n",(0,s.jsx)(n.li,{children:"Enables multiple consumers for different analytics"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"2-stream-processing-layer-apache-flink",children:"2. Stream Processing Layer (Apache Flink)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Process events in real-time and maintain data structures"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Processing Logic"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"For each event:\n  1. Parse songId from event\n  2. Update Count-Min Sketch\n  3. Get estimated count from CMS\n  4. Update Top-K heap if needed\n  5. Periodically flush to storage\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parallelism"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Multiple Flink workers process different Kafka partitions"}),"\n",(0,s.jsx)(n.li,{children:"Each worker maintains local CMS + TopK"}),"\n",(0,s.jsx)(n.li,{children:"Periodic merge of local structures"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"State Management"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Checkpointing enabled (every 1 minute)"}),"\n",(0,s.jsx)(n.li,{children:"State stored in RocksDB for fault tolerance"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"3-count-min-sketch-cms",children:"3. Count-Min Sketch (CMS)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Space-efficient approximate frequency counter"]}),"\n",(0,s.jsx)(n.h4,{id:"structure",children:"Structure"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TD\n    subgraph CMS["Count-Min Sketch Table (depth=5, width=2000)"]\n        R0["Row 0: [0][0][0][0][0]...[0] - hash1(songId)"]\n        R1["Row 1: [0][0][0][0][0]...[0] - hash2(songId)"]\n        R2["Row 2: [0][0][0][0][0]...[0] - hash3(songId)"]\n        R3["Row 3: [0][0][0][0][0]...[0] - hash4(songId)"]\n        R4["Row 4: [0][0][0][0][0]...[0] - hash5(songId)"]\n    end\n\n    S[SongId: abc123] -.->|hash1| R0\n    S -.->|hash2| R1\n    S -.->|hash3| R2\n    S -.->|hash4| R3\n    S -.->|hash5| R4\n\n    style S fill:#1DB954\n    style CMS fill:#f9f9f9'}),"\n",(0,s.jsx)(n.h4,{id:"operations",children:"Operations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add Operation"})," (when song is played):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"For each hash function h_i (i = 1 to depth):\n  index = h_i(songId) % width\n  table[i][index] += 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Estimate Operation"})," (get play count):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"estimates = []\nFor each hash function h_i:\n  index = h_i(songId) % width\n  estimates.append(table[i][index])\n\nreturn min(estimates)  // Conservative estimate\n"})}),"\n",(0,s.jsx)(n.h4,{id:"why-minimum",children:"Why Minimum?"}),"\n",(0,s.jsx)(n.p,{children:"The minimum across rows gives the best estimate because:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Each counter may have hash collisions (overcount)"}),"\n",(0,s.jsx)(n.li,{children:"The true count is \u2264 all row values"}),"\n",(0,s.jsx)(n.li,{children:"Taking minimum reduces collision impact"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parameter-selection",children:"Parameter Selection"}),"\n",(0,s.jsx)(n.p,{children:"Given desired accuracy (\u03b5) and confidence (\u03b4):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Width"})," = \u2308e / \u03b5\u2309"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u03b5 = 0.01 (1% error) \u2192 width \u2248 272"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Depth"})," = \u2308ln(1/\u03b4)\u2309"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u03b4 = 0.001 (99.9% confidence) \u2192 depth \u2248 7"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Memory Usage"}),": depth \xd7 width \xd7 4 bytes (int)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Example: 7 \xd7 272 \xd7 4 = 7.6 KB per CMS!"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"4-top-k-heap",children:"4. Top-K Heap"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Maintain the K most played songs efficiently"]}),"\n",(0,s.jsx)(n.h4,{id:"structure-1",children:"Structure"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Min-Heap"})," of size K:"]}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TD\n    A["Song A: 1000<br/>(Root - Minimum)"]\n    B["Song B: 1500"]\n    C["Song C: 2000"]\n    D["Song D: 3000"]\n    E["Song E: 5000"]\n\n    A --\x3e B\n    A --\x3e C\n    B --\x3e D\n    B --\x3e E\n\n    style A fill:#FF6B6B\n    style B fill:#FFD93D\n    style C fill:#FFD93D\n    style D fill:#6BCF7F\n    style E fill:#6BCF7F'}),"\n",(0,s.jsx)(n.h4,{id:"operations-1",children:"Operations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Insert/Update"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"When new count estimate arrives:\n  IF heap.size < K:\n    heap.insert(song, count)\n  ELSE IF count > heap.peek().count:\n    heap.pop()           // Remove minimum\n    heap.insert(song, count)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Query Top-K"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Return all elements in heap, sorted descending\nTime: O(K log K)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why Min-Heap?"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Root always has the smallest count in Top-K"}),"\n",(0,s.jsx)(n.li,{children:"Easy to check if new song qualifies: compare with root"}),"\n",(0,s.jsx)(n.li,{children:"O(log K) insert/delete operations"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"data-flow-play-event-processing",children:"Data Flow: Play Event Processing"}),"\n",(0,s.jsx)(n.h3,{id:"sequence-diagram",children:"Sequence Diagram"}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client\n    participant Kafka\n    participant Flink as Flink Worker\n    participant CMS as Count-Min Sketch\n    participant Heap as Top-K Heap\n    participant DB as Redis/Cassandra\n\n    Client->>Kafka: Play Song Event\n    Note over Kafka: Event buffered<br/>(1-5ms)\n\n    Kafka->>Flink: Stream Event\n    Note over Flink: Process Event<br/>(10-20ms)\n\n    Flink->>CMS: Add(songId)\n    Note over CMS: Increment counters<br/>in all rows\n\n    CMS--\x3e>Flink: Return estimated count\n    Note over Flink: Check if count qualifies<br/>for Top-K\n\n    Flink->>Heap: Update if count > min\n    Note over Heap: Replace minimum<br/>& rebalance\n\n    Flink->>DB: Batch Flush (periodic)\n    Note over DB: Persist CMS snapshot<br/>& Top-K state\n\n    DB--\x3e>Flink: Acknowledge"}),"\n",(0,s.jsx)(n.h3,{id:"step-by-step-flow",children:"Step-by-Step Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Event Ingestion"})," (1-5 ms)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Client sends play event to Load Balancer"}),"\n",(0,s.jsx)(n.li,{children:"Event published to Kafka topic"}),"\n",(0,s.jsx)(n.li,{children:"Kafka acknowledges write"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stream Processing"})," (10-20 ms)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Flink consumer reads from Kafka partition"}),"\n",(0,s.jsx)(n.li,{children:"Extracts songId from event"}),"\n",(0,s.jsx)(n.li,{children:"Updates Count-Min Sketch in memory"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Count Estimation"})," (< 1 ms)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Query CMS for updated count"}),"\n",(0,s.jsx)(n.li,{children:"Hash songId with all hash functions"}),"\n",(0,s.jsx)(n.li,{children:"Return minimum value across rows"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Top-K Update"})," (< 1 ms)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Compare estimate with heap minimum"}),"\n",(0,s.jsx)(n.li,{children:"If higher, replace minimum in heap"}),"\n",(0,s.jsx)(n.li,{children:"Rebalance heap"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Persistence"})," (Async, periodic)"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Batch write CMS snapshots to Redis (every 10s)"}),"\n",(0,s.jsx)(n.li,{children:"Write Top-K to Cassandra (every 5s)"}),"\n",(0,s.jsx)(n.li,{children:"Enables recovery on failure"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"api-design",children:"API Design"}),"\n",(0,s.jsx)(n.h3,{id:"1-record-play-event-internal",children:"1. Record Play Event (Internal)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'POST /internal/play\nContent-Type: application/json\n\n{\n  "songId": "550e8400-e29b-41d4-a716-446655440000",\n  "userId": "user123",\n  "timestamp": 1698765432000,\n  "metadata": {\n    "device": "mobile",\n    "duration": 180\n  }\n}\n\nResponse: 202 Accepted\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-get-top-k-songs",children:"2. Get Top-K Songs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'GET /api/v1/topSongs?k=100&timeWindow=24h\n\nResponse: 200 OK\n{\n  "timestamp": 1698765432000,\n  "window": "24h",\n  "results": [\n    {\n      "rank": 1,\n      "songId": "abc123",\n      "title": "Shape of You",\n      "artist": "Ed Sheeran",\n      "playCount": 5210320,\n      "confidence": 0.999\n    },\n    {\n      "rank": 2,\n      "songId": "def456",\n      "title": "Blinding Lights",\n      "artist": "The Weeknd",\n      "playCount": 4901005,\n      "confidence": 0.999\n    }\n    // ... 98 more\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-get-song-count",children:"3. Get Song Count"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'GET /api/v1/songs/{songId}/playCount\n\nResponse: 200 OK\n{\n  "songId": "abc123",\n  "playCount": 5210320,\n  "isApproximate": true,\n  "errorBound": "\xb11%"\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"distributed-system-design",children:"Distributed System Design"}),"\n",(0,s.jsx)(n.h3,{id:"scaling-strategy",children:"Scaling Strategy"}),"\n",(0,s.jsx)(n.h4,{id:"horizontal-scaling",children:"Horizontal Scaling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502Load Balancer\u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u25bc                  \u25bc                  \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Kafka   \u2502        \u2502 Kafka   \u2502       \u2502 Kafka   \u2502\n   \u2502Partition\u2502        \u2502Partition\u2502       \u2502Partition\u2502\n   \u2502   0     \u2502        \u2502   1     \u2502       \u2502   2     \u2502\n   \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n        \u2502                  \u2502                  \u2502\n        \u25bc                  \u25bc                  \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Flink   \u2502        \u2502 Flink   \u2502       \u2502 Flink   \u2502\n   \u2502 Worker  \u2502        \u2502 Worker  \u2502       \u2502 Worker  \u2502\n   \u2502   1     \u2502        \u2502   2     \u2502       \u2502   3     \u2502\n   \u2502         \u2502        \u2502         \u2502       \u2502         \u2502\n   \u2502 CMS +   \u2502        \u2502 CMS +   \u2502       \u2502 CMS +   \u2502\n   \u2502 TopK    \u2502        \u2502 TopK    \u2502       \u2502 TopK    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n        \u2502                  \u2502                  \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  Combiner   \u2502\n                    \u2502   Service   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h4,{id:"cms-merge-operation",children:"CMS Merge Operation"}),"\n",(0,s.jsx)(n.p,{children:"Each worker maintains local CMS. Periodically merge:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Global CMS[i][j] = Worker1.CMS[i][j] +\n                   Worker2.CMS[i][j] +\n                   Worker3.CMS[i][j]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Properties"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Commutative: A + B = B + A"}),"\n",(0,s.jsx)(n.li,{children:"Associative: (A + B) + C = A + (B + C)"}),"\n",(0,s.jsx)(n.li,{children:"Perfect for distributed aggregation"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"top-k-merge",children:"Top-K Merge"}),"\n",(0,s.jsx)(n.p,{children:"Each worker reports local Top-K. Combiner:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1. Collect all local Top-K lists\n2. Merge into single list\n3. Sort by count descending\n4. Take top K elements\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"optimizations",children:"Optimizations"}),"\n",(0,s.jsx)(n.h3,{id:"1-time-window-analysis",children:"1. Time-Window Analysis"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Track Top-K for different time windows (last hour, day, week)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Multiple CMS instances per time window"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CMS Manager            \u2502\n\u2502                          \u2502\n\u2502  \u251c\u2500 CMS_1h (last hour)   \u2502\n\u2502  \u251c\u2500 CMS_24h (last day)   \u2502\n\u2502  \u2514\u2500 CMS_7d (last week)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Sliding Window Implementation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Divide time into small buckets (e.g., 5-minute buckets)"}),"\n",(0,s.jsx)(n.li,{children:"Maintain CMS per bucket"}),"\n",(0,s.jsx)(n.li,{children:"Sum relevant buckets for query window"}),"\n",(0,s.jsx)(n.li,{children:"Expire old buckets"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-heavy-hitters-detection",children:"2. Heavy Hitters Detection"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optimization"}),": Use Space-Saving Algorithm alongside CMS"]}),"\n",(0,s.jsx)(n.p,{children:"Maintain small hash map (10K entries) for frequent items:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Track exact counts for songs that appear frequently"}),"\n",(0,s.jsx)(n.li,{children:"Falls back to CMS for less popular songs"}),"\n",(0,s.jsx)(n.li,{children:"Reduces error for top songs"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-bloom-filter-pre-filtering",children:"3. Bloom Filter Pre-filtering"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": Reduce CMS updates for invalid/test plays"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Bloom Filter \u2192 Check if songId exists\n              \u2193\n           [YES] \u2192 Update CMS\n           [NO]  \u2192 Reject (invalid song)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-caching-layer",children:"4. Caching Layer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CDN / Edge Cache      \u2502\n\u2502   (Top-K results)       \u2502\n\u2502   TTL: 30 seconds       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Redis Cache           \u2502\n\u2502   (CMS snapshots)       \u2502\n\u2502   TTL: 5 minutes        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Primary Storage       \u2502\n\u2502   (Cassandra/DynamoDB)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"storage-layer",children:"Storage Layer"}),"\n",(0,s.jsx)(n.h3,{id:"redis-in-memory-cache",children:"Redis (In-Memory Cache)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Fast access to CMS and recent Top-K"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Data Structure"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Key: "cms:{timeWindow}"\nValue: Serialized CMS array\nTTL: 1 hour\n\nKey: "topk:{timeWindow}"\nValue: Sorted Set (song \u2192 count)\nTTL: 5 minutes\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cassandra-persistent-storage",children:"Cassandra (Persistent Storage)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Table Schema"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE song_stats (\n  song_id UUID,\n  time_bucket TIMESTAMP,\n  play_count BIGINT,\n  PRIMARY KEY ((time_bucket), play_count, song_id)\n) WITH CLUSTERING ORDER BY (play_count DESC);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Partition by time bucket"}),"\n",(0,s.jsx)(n.li,{children:"Cluster by play_count (descending)"}),"\n",(0,s.jsx)(n.li,{children:"Fast Top-K queries"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"capacity-estimation",children:"Capacity Estimation"}),"\n",(0,s.jsx)(n.h3,{id:"traffic",children:"Traffic"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Daily Active Users"}),": 400M"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avg Songs/User/Day"}),": 20"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Total Plays/Day"}),": 8 billion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plays/Second"}),": ~92,000 (peak: 300,000)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"storage",children:"Storage"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Count-Min Sketch"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Depth: 7, Width: 272"}),"\n",(0,s.jsx)(n.li,{children:"Per CMS: 7.6 KB"}),"\n",(0,s.jsx)(n.li,{children:"3 time windows \xd7 3 replicas: 68 KB total"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Top-K Heap"})," (K=1000):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Per entry: 16 bytes (songId) + 8 bytes (count)"}),"\n",(0,s.jsx)(n.li,{children:"Total: 24 KB \xd7 3 windows = 72 KB"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Total Memory per Worker"}),": < 200 KB (incredibly efficient!)"]}),"\n",(0,s.jsx)(n.h3,{id:"network",children:"Network"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Event size: ~200 bytes"}),"\n",(0,s.jsx)(n.li,{children:"Kafka throughput: 300K events/s \xd7 200 bytes = 60 MB/s"}),"\n",(0,s.jsx)(n.li,{children:"Distributed across partitions"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"fault-tolerance",children:"Fault Tolerance"}),"\n",(0,s.jsx)(n.h3,{id:"strategies",children:"Strategies"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Kafka Replication"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Replication factor: 3"}),"\n",(0,s.jsx)(n.li,{children:"Min in-sync replicas: 2"}),"\n",(0,s.jsx)(n.li,{children:"Leader election automatic"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Flink Checkpointing"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Periodic snapshots (1 min)"}),"\n",(0,s.jsx)(n.li,{children:"State stored in distributed FS"}),"\n",(0,s.jsx)(n.li,{children:"Exactly-once processing semantics"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Redis Sentinel/Cluster"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Master-slave replication"}),"\n",(0,s.jsx)(n.li,{children:"Automatic failover"}),"\n",(0,s.jsx)(n.li,{children:"No single point of failure"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cassandra Multi-DC"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Data replicated across 3 DCs"}),"\n",(0,s.jsx)(n.li,{children:"Quorum reads/writes"}),"\n",(0,s.jsx)(n.li,{children:"Self-healing ring architecture"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"trade-offs--considerations",children:"Trade-offs & Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"accuracy-vs-memory",children:"Accuracy vs Memory"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exact counting"}),": Requires hashmap = O(N) space for N songs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CMS"}),": O(1/\u03b5 \xd7 log(1/\u03b4)) space, independent of N"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Trade-off"}),": Accept 1% error for 1000\xd7 memory savings"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"latency-vs-freshness",children:"Latency vs Freshness"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time updates"}),": Higher CPU cost"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch updates"}),": Lower cost, slightly stale data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choice"}),": Micro-batching (100ms windows)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"consistency-vs-availability",children:"Consistency vs Availability"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strong consistency"}),": Synchronized global state (slow)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventual consistency"}),": Faster, temporary inconsistencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choice"}),": Eventual consistency acceptable for analytics"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,s.jsx)(n.h3,{id:"key-metrics",children:"Key Metrics"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Throughput"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Events/second processed"}),"\n",(0,s.jsx)(n.li,{children:"Kafka lag per partition"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Latency"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"P50, P95, P99 processing time"}),"\n",(0,s.jsx)(n.li,{children:"End-to-end event latency"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Accuracy"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Compare CMS estimates vs exact counts (sample)"}),"\n",(0,s.jsx)(n.li,{children:"Track error distribution"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Resource Usage"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"CPU per Flink worker"}),"\n",(0,s.jsx)(n.li,{children:"Memory per CMS instance"}),"\n",(0,s.jsx)(n.li,{children:"Network bandwidth"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"alerting",children:"Alerting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Kafka lag > 10K messages"}),"\n",(0,s.jsx)(n.li,{children:"Processing latency > 100ms (P95)"}),"\n",(0,s.jsx)(n.li,{children:"Flink worker failures"}),"\n",(0,s.jsx)(n.li,{children:"Error rate > 0.1%"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This system achieves:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Scalability"}),": Processes millions of plays/second."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Efficiency"}),": < 200 KB memory per worker."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Accuracy"}),": 99%+ accurate with configurable bounds."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Fault Tolerance"}),": No single point of failure."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Low Latency"}),": Sub-100ms Top-K queries."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Innovation"}),": Count-Min Sketch enables probabilistic counting at massive scale with minimal resources, making real-time analytics feasible."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);