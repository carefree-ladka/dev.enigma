"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9815],{9846:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(4848),i=t(8453);const a={},s="Java Beginner's Guide",l={id:"Java/JavaBeginner'sGuide",title:"Java Beginner's Guide",description:"Table of Contents",source:"@site/docs/Java/JavaBeginner'sGuide.mdx",sourceDirName:"Java",slug:"/Java/JavaBeginner'sGuide",permalink:"/js.enigma/docs/Java/JavaBeginner'sGuide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/JavaBeginner'sGuide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Language Basics - Execution, Memory & JVM",permalink:"/js.enigma/docs/Java/Java Language Basics"},next:{title:"Java Call by Value vs Call by Reference",permalink:"/js.enigma/docs/Java/JavaCallbyValuevsCallbyReference"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction to Java",id:"introduction-to-java",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Setting Up Java Environment",id:"setting-up-java-environment",level:2},{value:"Required Components",id:"required-components",level:3},{value:"First Program Structure",id:"first-program-structure",level:3},{value:"Basic Program Structure",id:"basic-program-structure",level:2},{value:"Essential Components",id:"essential-components",level:3},{value:"Key Rules",id:"key-rules",level:3},{value:"Data Types",id:"data-types",level:2},{value:"1. Primitive Data Types",id:"1-primitive-data-types",level:3},{value:"Examples:",id:"examples",level:3},{value:"2. Non-Primitive (Reference) Data Types",id:"2-non-primitive-reference-data-types",level:3},{value:"Variables and Constants",id:"variables-and-constants",level:2},{value:"Variable Declaration",id:"variable-declaration",level:3},{value:"Constants (Final Variables)",id:"constants-final-variables",level:3},{value:"Variable Naming Rules",id:"variable-naming-rules",level:3},{value:"Operators",id:"operators",level:2},{value:"1. Arithmetic Operators",id:"1-arithmetic-operators",level:3},{value:"2. Assignment Operators",id:"2-assignment-operators",level:3},{value:"3. Comparison Operators",id:"3-comparison-operators",level:3},{value:"4. Logical Operators",id:"4-logical-operators",level:3},{value:"5. Increment/Decrement Operators",id:"5-incrementdecrement-operators",level:3},{value:"Input and Output",id:"input-and-output",level:2},{value:"Output with System.out",id:"output-with-systemout",level:3},{value:"Scanner Class",id:"scanner-class",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Scanner Methods",id:"scanner-methods",level:3},{value:"Common Scanner Issues and Solutions",id:"common-scanner-issues-and-solutions",level:3},{value:"Random Class",id:"random-class",level:2},{value:"Basic Usage",id:"basic-usage-1",level:3},{value:"Practical Examples",id:"practical-examples",level:3},{value:"Number Formatting",id:"number-formatting",level:2},{value:"Using DecimalFormat",id:"using-decimalformat",level:3},{value:"Using printf for Formatting",id:"using-printf-for-formatting",level:3},{value:"Currency and Percentage Formatting",id:"currency-and-percentage-formatting",level:3},{value:"Strings",id:"strings",level:2},{value:"String Creation and Basic Operations",id:"string-creation-and-basic-operations",level:3},{value:"String Manipulation",id:"string-manipulation",level:3},{value:"StringBuilder for Efficient String Building",id:"stringbuilder-for-efficient-string-building",level:3},{value:"Control Structures",id:"control-structures",level:2},{value:"If-Else Statements",id:"if-else-statements",level:3},{value:"Switch Statements",id:"switch-statements",level:3},{value:"Loops",id:"loops",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Array Declaration and Initialization",id:"array-declaration-and-initialization",level:3},{value:"Multi-dimensional Arrays",id:"multi-dimensional-arrays",level:3},{value:"Array Utility Methods",id:"array-utility-methods",level:3},{value:"Methods",id:"methods",level:2},{value:"Method Declaration and Usage",id:"method-declaration-and-usage",level:3},{value:"Utility Methods Example",id:"utility-methods-example",level:3},{value:"Practice Exercises",id:"practice-exercises",level:2},{value:"Exercise 1: Basic Calculator",id:"exercise-1-basic-calculator",level:3},{value:"Exercise 2: Number Guessing Game",id:"exercise-2-number-guessing-game",level:3},{value:"Exercise 3: Student Grade Management",id:"exercise-3-student-grade-management",level:3},{value:"Exercise 4: Word Counter and Analyzer",id:"exercise-4-word-counter-and-analyzer",level:3},{value:"Exercise 5: Simple Banking System",id:"exercise-5-simple-banking-system",level:3},{value:"Summary and Next Steps",id:"summary-and-next-steps",level:2},{value:"Key Concepts Covered",id:"key-concepts-covered",level:3},{value:"Comparison with JavaScript (Key Differences)",id:"comparison-with-javascript-key-differences",level:3},{value:"Best Practices for Java Beginners",id:"best-practices-for-java-beginners",level:3},{value:"Next Steps in Your Java Journey",id:"next-steps-in-your-java-journey",level:3},{value:"Practice Recommendations",id:"practice-recommendations",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"java-beginners-guide",children:"Java Beginner's Guide"})}),"\n",(0,r.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#introduction-to-java",children:"Introduction to Java"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#setting-up-java-environment",children:"Setting Up Java Environment"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#basic-program-structure",children:"Basic Program Structure"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#data-types",children:"Data Types"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#variables-and-constants",children:"Variables and Constants"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#operators",children:"Operators"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#input-and-output",children:"Input and Output"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#scanner-class",children:"Scanner Class"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#random-class",children:"Random Class"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#number-formatting",children:"Number Formatting"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#strings",children:"Strings"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#control-structures",children:"Control Structures"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#arrays",children:"Arrays"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#methods",children:"Methods"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#practice-exercises",children:"Practice Exercises"})}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"introduction-to-java",children:"Introduction to Java"}),"\n",(0,r.jsx)(e.p,{children:"Java is a high-level, object-oriented programming language developed by Sun Microsystems (now owned by Oracle). Unlike JavaScript, Java is:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Compiled language"})," (JavaScript is interpreted)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Statically typed"})," (JavaScript is dynamically typed)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Platform independent"}),' ("Write once, run anywhere")']}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Strongly typed"})," (more strict about data types)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Object-Oriented Programming (OOP)"}),"\n",(0,r.jsx)(e.li,{children:"Platform Independence"}),"\n",(0,r.jsx)(e.li,{children:"Memory Management (Garbage Collection)"}),"\n",(0,r.jsx)(e.li,{children:"Multi-threading support"}),"\n",(0,r.jsx)(e.li,{children:"Rich Standard Library"}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"setting-up-java-environment",children:"Setting Up Java Environment"}),"\n",(0,r.jsx)(e.h3,{id:"required-components",children:"Required Components"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"JDK (Java Development Kit)"})," - Contains compiler and development tools"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"IDE"})," - IntelliJ IDEA, Eclipse, or VS Code with Java extensions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Text Editor"})," - Any text editor works for simple programs"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"first-program-structure",children:"First Program Structure"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'// Every Java program needs a class\npublic class HelloWorld {\n    // Main method - entry point of program\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Comparison with JavaScript:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'// JavaScript - much simpler\nconsole.log("Hello, World!");\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"basic-program-structure",children:"Basic Program Structure"}),"\n",(0,r.jsx)(e.h3,{id:"essential-components",children:"Essential Components"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'// 1. Package declaration (optional)\npackage com.example;\n\n// 2. Import statements\nimport java.util.Scanner;\nimport java.util.Random;\n\n// 3. Class declaration\npublic class MyProgram {\n\n    // 4. Main method (required for executable programs)\n    public static void main(String[] args) {\n        // Program code goes here\n        System.out.println("Program starts here");\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"key-rules",children:"Key Rules"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Class name"})," must match filename"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Case sensitive"})," (MyClass \u2260 myclass)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Semicolon required"})," after each statement"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Curly braces"})," define code blocks"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"data-types",children:"Data Types"}),"\n",(0,r.jsx)(e.p,{children:"Java has two categories of data types:"}),"\n",(0,r.jsx)(e.h3,{id:"1-primitive-data-types",children:"1. Primitive Data Types"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Type"}),(0,r.jsx)(e.th,{children:"Size"}),(0,r.jsx)(e.th,{children:"Range"}),(0,r.jsx)(e.th,{children:"Default"}),(0,r.jsx)(e.th,{children:"JavaScript Equivalent"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"byte"})}),(0,r.jsx)(e.td,{children:"8 bits"}),(0,r.jsx)(e.td,{children:"-128 to 127"}),(0,r.jsx)(e.td,{children:"0"}),(0,r.jsx)(e.td,{children:"Number"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"short"})}),(0,r.jsx)(e.td,{children:"16 bits"}),(0,r.jsx)(e.td,{children:"-32,768 to 32,767"}),(0,r.jsx)(e.td,{children:"0"}),(0,r.jsx)(e.td,{children:"Number"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"int"})}),(0,r.jsx)(e.td,{children:"32 bits"}),(0,r.jsx)(e.td,{children:"-2\xb3\xb9 to 2\xb3\xb9-1"}),(0,r.jsx)(e.td,{children:"0"}),(0,r.jsx)(e.td,{children:"Number"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"long"})}),(0,r.jsx)(e.td,{children:"64 bits"}),(0,r.jsx)(e.td,{children:"-2\u2076\xb3 to 2\u2076\xb3-1"}),(0,r.jsx)(e.td,{children:"0L"}),(0,r.jsx)(e.td,{children:"BigInt"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"float"})}),(0,r.jsx)(e.td,{children:"32 bits"}),(0,r.jsx)(e.td,{children:"\xb13.4E38"}),(0,r.jsx)(e.td,{children:"0.0f"}),(0,r.jsx)(e.td,{children:"Number"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"double"})}),(0,r.jsx)(e.td,{children:"64 bits"}),(0,r.jsx)(e.td,{children:"\xb11.7E308"}),(0,r.jsx)(e.td,{children:"0.0"}),(0,r.jsx)(e.td,{children:"Number"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"char"})}),(0,r.jsx)(e.td,{children:"16 bits"}),(0,r.jsx)(e.td,{children:"0 to 65,535"}),(0,r.jsx)(e.td,{children:"'\\u0000'"}),(0,r.jsx)(e.td,{children:"String (single char)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"boolean"})}),(0,r.jsx)(e.td,{children:"1 bit"}),(0,r.jsx)(e.td,{children:"true/false"}),(0,r.jsx)(e.td,{children:"false"}),(0,r.jsx)(e.td,{children:"Boolean"})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"examples",children:"Examples:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"public class DataTypesDemo {\n    public static void main(String[] args) {\n        // Integer types\n        byte age = 25;\n        short year = 2024;\n        int population = 1000000;\n        long distance = 384400000L; // Note the 'L' suffix\n\n        // Floating-point types\n        float price = 19.99f; // Note the 'f' suffix\n        double pi = 3.14159265359;\n\n        // Character and boolean\n        char grade = 'A';\n        boolean isActive = true;\n\n        // Printing values\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Price: $\" + price);\n        System.out.println(\"Is Active: \" + isActive);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-non-primitive-reference-data-types",children:"2. Non-Primitive (Reference) Data Types"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'// Strings\nString name = "John Doe";\nString message = new String("Hello World");\n\n// Arrays\nint[] numbers = {1, 2, 3, 4, 5};\nString[] names = {"Alice", "Bob", "Charlie"};\n\n// Objects\nScanner input = new Scanner(System.in);\nRandom random = new Random();\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"variables-and-constants",children:"Variables and Constants"}),"\n",(0,r.jsx)(e.h3,{id:"variable-declaration",children:"Variable Declaration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'// Syntax: dataType variableName = value;\nint age = 25;\ndouble salary = 50000.50;\nString name = "Alice";\n\n// Multiple variables of same type\nint x = 10, y = 20, z = 30;\n\n// Declaration without initialization\nint count;\ncount = 100; // Initialize later\n'})}),"\n",(0,r.jsx)(e.h3,{id:"constants-final-variables",children:"Constants (Final Variables)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Use 'final' keyword for constants\nfinal double PI = 3.14159;\nfinal int MAX_USERS = 1000;\nfinal String COMPANY_NAME = \"TechCorp\";\n\n// Constants are typically in UPPER_CASE\n"})}),"\n",(0,r.jsx)(e.h3,{id:"variable-naming-rules",children:"Variable Naming Rules"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Start with letter, underscore, or dollar sign"}),"\n",(0,r.jsx)(e.li,{children:"Can contain letters, digits, underscores, dollar signs"}),"\n",(0,r.jsx)(e.li,{children:"Cannot be Java keywords"}),"\n",(0,r.jsx)(e.li,{children:"Case sensitive"}),"\n",(0,r.jsx)(e.li,{children:"Use camelCase convention"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Valid variable names\nint studentAge;\ndouble bankBalance;\nString firstName;\nboolean isLoggedIn;\n\n// Invalid variable names\n// int 2ndPlace;  // Starts with digit\n// String class;  // Java keyword\n// double my-salary; // Contains hyphen\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"operators",children:"Operators"}),"\n",(0,r.jsx)(e.h3,{id:"1-arithmetic-operators",children:"1. Arithmetic Operators"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class ArithmeticDemo {\n    public static void main(String[] args) {\n        int a = 10, b = 3;\n\n        System.out.println("Addition: " + (a + b));        // 13\n        System.out.println("Subtraction: " + (a - b));     // 7\n        System.out.println("Multiplication: " + (a * b));  // 30\n        System.out.println("Division: " + (a / b));        // 3 (integer division)\n        System.out.println("Modulus: " + (a % b));         // 1\n\n        // For decimal division\n        double result = (double) a / b;\n        System.out.println("Decimal Division: " + result); // 3.333...\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2-assignment-operators",children:"2. Assignment Operators"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"int x = 10;\n\nx += 5;  // x = x + 5;  (x becomes 15)\nx -= 3;  // x = x - 3;  (x becomes 12)\nx *= 2;  // x = x * 2;  (x becomes 24)\nx /= 4;  // x = x / 4;  (x becomes 6)\nx %= 4;  // x = x % 4;  (x becomes 2)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-comparison-operators",children:"3. Comparison Operators"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"int a = 10, b = 20;\n\nSystem.out.println(a == b);  // false (equal to)\nSystem.out.println(a != b);  // true  (not equal to)\nSystem.out.println(a < b);   // true  (less than)\nSystem.out.println(a > b);   // false (greater than)\nSystem.out.println(a <= b);  // true  (less than or equal)\nSystem.out.println(a >= b);  // false (greater than or equal)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"4-logical-operators",children:"4. Logical Operators"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'boolean x = true, y = false;\n\nSystem.out.println(x && y);  // false (AND)\nSystem.out.println(x || y);  // true  (OR)\nSystem.out.println(!x);      // false (NOT)\n\n// Short-circuit evaluation\nint a = 10, b = 0;\nif (b != 0 && a / b > 0) {  // Second condition won\'t execute if b == 0\n    System.out.println("Safe division");\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"5-incrementdecrement-operators",children:"5. Increment/Decrement Operators"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"int count = 5;\n\n// Pre-increment/decrement\nSystem.out.println(++count); // 6 (increment first, then use)\nSystem.out.println(--count); // 5 (decrement first, then use)\n\n// Post-increment/decrement\nSystem.out.println(count++); // 5 (use first, then increment)\nSystem.out.println(count--); // 6 (use first, then decrement)\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"input-and-output",children:"Input and Output"}),"\n",(0,r.jsx)(e.h3,{id:"output-with-systemout",children:"Output with System.out"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class OutputDemo {\n    public static void main(String[] args) {\n        String name = "Alice";\n        int age = 25;\n        double salary = 50000.50;\n\n        // Different ways to print\n        System.out.println("Simple message");\n        System.out.println("Name: " + name);\n        System.out.print("Age: "); // Doesn\'t add new line\n        System.out.println(age);\n\n        // Formatted output\n        System.out.printf("Name: %s, Age: %d, Salary: $%.2f%n", name, age, salary);\n\n        // Format specifiers:\n        // %s - String\n        // %d - Integer\n        // %f - Float/Double\n        // %.2f - Float with 2 decimal places\n        // %n - New line (platform independent)\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"scanner-class",children:"Scanner Class"}),"\n",(0,r.jsx)(e.p,{children:"The Scanner class is used for reading input from various sources (keyboard, files, etc.)."}),"\n",(0,r.jsx)(e.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Scanner;\n\npublic class ScannerDemo {\n    public static void main(String[] args) {\n        // Create Scanner object for keyboard input\n        Scanner scanner = new Scanner(System.in);\n\n        // Reading different data types\n        System.out.print("Enter your name: ");\n        String name = scanner.nextLine();\n\n        System.out.print("Enter your age: ");\n        int age = scanner.nextInt();\n\n        System.out.print("Enter your salary: ");\n        double salary = scanner.nextDouble();\n\n        System.out.print("Are you employed? (true/false): ");\n        boolean employed = scanner.nextBoolean();\n\n        // Display results\n        System.out.println("\\n--- Your Information ---");\n        System.out.println("Name: " + name);\n        System.out.println("Age: " + age);\n        System.out.println("Salary: $" + salary);\n        System.out.println("Employed: " + employed);\n\n        // Always close the scanner\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"scanner-methods",children:"Scanner Methods"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"Scanner input = new Scanner(System.in);\n\n// Reading different types\nString line = input.nextLine();      // Reads entire line\nString word = input.next();          // Reads single word\nint number = input.nextInt();        // Reads integer\ndouble decimal = input.nextDouble(); // Reads double\nboolean flag = input.nextBoolean();  // Reads boolean\nchar character = input.next().charAt(0); // Reads single character\n\n// Checking if input is available\nif (input.hasNextInt()) {\n    int num = input.nextInt();\n}\n\nif (input.hasNextLine()) {\n    String line = input.nextLine();\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"common-scanner-issues-and-solutions",children:"Common Scanner Issues and Solutions"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'Scanner input = new Scanner(System.in);\n\nSystem.out.print("Enter age: ");\nint age = input.nextInt();\n\n// Problem: nextInt() leaves newline character\nSystem.out.print("Enter name: ");\nString name = input.nextLine(); // This will be empty!\n\n// Solution: Use nextLine() after nextInt()\ninput.nextLine(); // Consume the leftover newline\nSystem.out.print("Enter name: ");\nString name = input.nextLine(); // Now this works correctly\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"random-class",children:"Random Class"}),"\n",(0,r.jsx)(e.p,{children:"The Random class is used to generate random numbers."}),"\n",(0,r.jsx)(e.h3,{id:"basic-usage-1",children:"Basic Usage"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Random;\n\npublic class RandomDemo {\n    public static void main(String[] args) {\n        // Create Random object\n        Random random = new Random();\n\n        // Generate different types of random numbers\n        int randomInt = random.nextInt();           // Any integer\n        int diceRoll = random.nextInt(6) + 1;      // 1 to 6\n        int range = random.nextInt(100);           // 0 to 99\n\n        double randomDouble = random.nextDouble(); // 0.0 to 1.0\n        boolean randomBoolean = random.nextBoolean();\n\n        // Generate random numbers in specific ranges\n        int min = 10, max = 50;\n        int randomInRange = random.nextInt(max - min + 1) + min; // 10 to 50\n\n        System.out.println("Random integer: " + randomInt);\n        System.out.println("Dice roll: " + diceRoll);\n        System.out.println("Random 0-99: " + range);\n        System.out.println("Random double: " + randomDouble);\n        System.out.println("Random boolean: " + randomBoolean);\n        System.out.println("Random 10-50: " + randomInRange);\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Random;\n\npublic class RandomExamples {\n    public static void main(String[] args) {\n        Random rand = new Random();\n\n        // Random password generator\n        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";\n        StringBuilder password = new StringBuilder();\n        for (int i = 0; i < 8; i++) {\n            int index = rand.nextInt(chars.length());\n            password.append(chars.charAt(index));\n        }\n        System.out.println("Random password: " + password);\n\n        // Coin flip simulation\n        System.out.print("Coin flip: ");\n        if (rand.nextBoolean()) {\n            System.out.println("Heads");\n        } else {\n            System.out.println("Tails");\n        }\n\n        // Random color selection\n        String[] colors = {"Red", "Blue", "Green", "Yellow", "Purple"};\n        String randomColor = colors[rand.nextInt(colors.length)];\n        System.out.println("Random color: " + randomColor);\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"number-formatting",children:"Number Formatting"}),"\n",(0,r.jsx)(e.p,{children:"Java provides several ways to format numbers for better presentation."}),"\n",(0,r.jsx)(e.h3,{id:"using-decimalformat",children:"Using DecimalFormat"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.text.DecimalFormat;\n\npublic class NumberFormatting {\n    public static void main(String[] args) {\n        double number = 1234567.89123;\n\n        // Create DecimalFormat objects with patterns\n        DecimalFormat df1 = new DecimalFormat("#,###.##");\n        DecimalFormat df2 = new DecimalFormat("$#,###.00");\n        DecimalFormat df3 = new DecimalFormat("0.0000");\n        DecimalFormat df4 = new DecimalFormat("#.##%");\n\n        System.out.println("Original: " + number);\n        System.out.println("Formatted 1: " + df1.format(number));\n        System.out.println("Currency: " + df2.format(number));\n        System.out.println("Fixed decimals: " + df3.format(number));\n        System.out.println("Percentage: " + df4.format(0.75));\n\n        // Common patterns:\n        // # - Optional digit\n        // 0 - Required digit\n        // , - Thousands separator\n        // . - Decimal point\n        // % - Percentage\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"using-printf-for-formatting",children:"Using printf for Formatting"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class PrintfFormatting {\n    public static void main(String[] args) {\n        double price = 19.99;\n        int quantity = 5;\n        String item = "Books";\n\n        // Various formatting options\n        System.out.printf("Item: %-10s Qty: %3d Price: $%6.2f%n", item, quantity, price);\n        System.out.printf("Total: $%.2f%n", price * quantity);\n\n        // Number formatting\n        double pi = Math.PI;\n        System.out.printf("Pi: %.2f%n", pi);      // 2 decimal places\n        System.out.printf("Pi: %.4f%n", pi);      // 4 decimal places\n        System.out.printf("Pi: %10.2f%n", pi);    // Width 10, 2 decimals\n        System.out.printf("Pi: %010.2f%n", pi);   // Pad with zeros\n\n        // Integer formatting\n        int num = 42;\n        System.out.printf("Number: %d%n", num);    // Standard integer\n        System.out.printf("Number: %5d%n", num);   // Width 5, right-aligned\n        System.out.printf("Number: %-5d%n", num);  // Width 5, left-aligned\n        System.out.printf("Number: %05d%n", num);  // Width 5, zero-padded\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"currency-and-percentage-formatting",children:"Currency and Percentage Formatting"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.text.NumberFormat;\nimport java.util.Locale;\n\npublic class CurrencyFormatting {\n    public static void main(String[] args) {\n        double amount = 1234567.89;\n        double percentage = 0.75;\n\n        // Currency formatting\n        NumberFormat currencyUS = NumberFormat.getCurrencyInstance(Locale.US);\n        NumberFormat currencyUK = NumberFormat.getCurrencyInstance(Locale.UK);\n\n        System.out.println("US Currency: " + currencyUS.format(amount));\n        System.out.println("UK Currency: " + currencyUK.format(amount));\n\n        // Percentage formatting\n        NumberFormat percent = NumberFormat.getPercentInstance();\n        System.out.println("Percentage: " + percent.format(percentage));\n\n        // Number formatting with grouping\n        NumberFormat number = NumberFormat.getNumberInstance();\n        System.out.println("Number: " + number.format(amount));\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"strings",children:"Strings"}),"\n",(0,r.jsx)(e.p,{children:"Strings are objects in Java, not primitive types (unlike JavaScript where they can be both)."}),"\n",(0,r.jsx)(e.h3,{id:"string-creation-and-basic-operations",children:"String Creation and Basic Operations"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class StringDemo {\n    public static void main(String[] args) {\n        // String creation\n        String str1 = "Hello World";           // String literal\n        String str2 = new String("Hello World"); // Using constructor\n\n        // String properties\n        System.out.println("Length: " + str1.length());\n        System.out.println("Empty? " + str1.isEmpty());\n        System.out.println("Character at index 0: " + str1.charAt(0));\n\n        // String comparison (IMPORTANT: Don\'t use == for strings!)\n        String name1 = "Alice";\n        String name2 = "Alice";\n        String name3 = new String("Alice");\n\n        System.out.println(name1.equals(name2));        // true\n        System.out.println(name1.equals(name3));        // true\n        System.out.println(name1 == name2);             // true (string pool)\n        System.out.println(name1 == name3);             // false (different objects)\n        System.out.println(name1.equalsIgnoreCase("ALICE")); // true\n\n        // String searching\n        String text = "Java Programming";\n        System.out.println("Contains \'Java\': " + text.contains("Java"));\n        System.out.println("Starts with \'Java\': " + text.startsWith("Java"));\n        System.out.println("Ends with \'ing\': " + text.endsWith("ing"));\n        System.out.println("Index of \'Pro\': " + text.indexOf("Pro"));\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"string-manipulation",children:"String Manipulation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class StringManipulation {\n    public static void main(String[] args) {\n        String original = "  Hello World  ";\n\n        // Case conversion\n        System.out.println("Upper: " + original.toUpperCase());\n        System.out.println("Lower: " + original.toLowerCase());\n\n        // Trimming whitespace\n        System.out.println("Trimmed: \'" + original.trim() + "\'");\n\n        // Substring operations\n        String text = "Java Programming";\n        System.out.println("Substring(0,4): " + text.substring(0, 4)); // "Java"\n        System.out.println("Substring(5): " + text.substring(5));       // "Programming"\n\n        // String replacement\n        System.out.println("Replace \'a\' with \'@\': " + text.replace(\'a\', \'@\'));\n        System.out.println("Replace \'Java\': " + text.replace("Java", "Python"));\n\n        // String splitting\n        String csv = "apple,banana,orange,grape";\n        String[] fruits = csv.split(",");\n        System.out.println("Fruits count: " + fruits.length);\n        for (String fruit : fruits) {\n            System.out.println("- " + fruit);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"stringbuilder-for-efficient-string-building",children:"StringBuilder for Efficient String Building"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class StringBuilderDemo {\n    public static void main(String[] args) {\n        // StringBuilder is mutable and efficient for multiple concatenations\n        StringBuilder sb = new StringBuilder();\n\n        sb.append("Hello");\n        sb.append(" ");\n        sb.append("World");\n        sb.append("!");\n\n        System.out.println("StringBuilder result: " + sb.toString());\n\n        // Inserting and deleting\n        sb.insert(5, " Beautiful");\n        System.out.println("After insert: " + sb.toString());\n\n        sb.delete(5, 15); // Remove " Beautiful"\n        System.out.println("After delete: " + sb.toString());\n\n        // Reversing\n        sb.reverse();\n        System.out.println("Reversed: " + sb.toString());\n\n        // Performance comparison (for large operations)\n        long startTime = System.currentTimeMillis();\n\n        // Using String concatenation (inefficient)\n        String result = "";\n        for (int i = 0; i < 10000; i++) {\n            result += "a";\n        }\n\n        long endTime = System.currentTimeMillis();\n        System.out.println("String concatenation time: " + (endTime - startTime) + "ms");\n\n        startTime = System.currentTimeMillis();\n\n        // Using StringBuilder (efficient)\n        StringBuilder efficientSb = new StringBuilder();\n        for (int i = 0; i < 10000; i++) {\n            efficientSb.append("a");\n        }\n        String efficientResult = efficientSb.toString();\n\n        endTime = System.currentTimeMillis();\n        System.out.println("StringBuilder time: " + (endTime - startTime) + "ms");\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"control-structures",children:"Control Structures"}),"\n",(0,r.jsx)(e.h3,{id:"if-else-statements",children:"If-Else Statements"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class IfElseDemo {\n    public static void main(String[] args) {\n        int score = 85;\n\n        // Simple if-else\n        if (score >= 90) {\n            System.out.println("Grade: A");\n        } else if (score >= 80) {\n            System.out.println("Grade: B");\n        } else if (score >= 70) {\n            System.out.println("Grade: C");\n        } else if (score >= 60) {\n            System.out.println("Grade: D");\n        } else {\n            System.out.println("Grade: F");\n        }\n\n        // Ternary operator (shorthand if-else)\n        String result = (score >= 60) ? "Pass" : "Fail";\n        System.out.println("Result: " + result);\n\n        // Nested conditions\n        int age = 20;\n        boolean hasLicense = true;\n\n        if (age >= 18) {\n            if (hasLicense) {\n                System.out.println("Can drive");\n            } else {\n                System.out.println("Need license to drive");\n            }\n        } else {\n            System.out.println("Too young to drive");\n        }\n\n        // Logical operators in conditions\n        if (age >= 18 && hasLicense) {\n            System.out.println("Eligible to drive");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"switch-statements",children:"Switch Statements"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class SwitchDemo {\n    public static void main(String[] args) {\n        int dayNumber = 3;\n        String dayName;\n\n        // Traditional switch\n        switch (dayNumber) {\n            case 1:\n                dayName = "Monday";\n                break;\n            case 2:\n                dayName = "Tuesday";\n                break;\n            case 3:\n                dayName = "Wednesday";\n                break;\n            case 4:\n                dayName = "Thursday";\n                break;\n            case 5:\n                dayName = "Friday";\n                break;\n            case 6:\n                dayName = "Saturday";\n                break;\n            case 7:\n                dayName = "Sunday";\n                break;\n            default:\n                dayName = "Invalid day";\n        }\n        System.out.println("Day: " + dayName);\n\n        // Switch with multiple cases\n        char grade = \'B\';\n        switch (grade) {\n            case \'A\':\n            case \'a\':\n                System.out.println("Excellent!");\n                break;\n            case \'B\':\n            case \'b\':\n                System.out.println("Good job!");\n                break;\n            case \'C\':\n            case \'c\':\n                System.out.println("Average");\n                break;\n            default:\n                System.out.println("Keep trying!");\n        }\n\n        // Modern switch expression (Java 14+)\n        String season = switch (dayNumber) {\n            case 1, 2, 12 -> "Winter";\n            case 3, 4, 5 -> "Spring";\n            case 6, 7, 8 -> "Summer";\n            case 9, 10, 11 -> "Fall";\n            default -> "Invalid month";\n        };\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"loops",children:"Loops"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class LoopsDemo {\n    public static void main(String[] args) {\n\n        // 1. For Loop\n        System.out.println("=== For Loop ===");\n        for (int i = 1; i <= 5; i++) {\n            System.out.println("Count: " + i);\n        }\n\n        // For loop with different increments\n        for (int i = 0; i < 10; i += 2) {\n            System.out.print(i + " "); // 0 2 4 6 8\n        }\n        System.out.println();\n\n        // Countdown\n        for (int i = 5; i >= 1; i--) {\n            System.out.println("Countdown: " + i);\n        }\n\n        // 2. While Loop\n        System.out.println("\\n=== While Loop ===");\n        int count = 1;\n        while (count <= 3) {\n            System.out.println("While count: " + count);\n            count++;\n        }\n\n        // 3. Do-While Loop (executes at least once)\n        System.out.println("\\n=== Do-While Loop ===");\n        int num = 6;\n        do {\n            System.out.println("Do-while num: " + num);\n            num++;\n        } while (num <= 5); // This will execute once even though condition is false\n\n        // 4. Enhanced For Loop (for arrays and collections)\n        System.out.println("\\n=== Enhanced For Loop ===");\n        int[] numbers = {10, 20, 30, 40, 50};\n        for (int number : numbers) {\n            System.out.println("Number: " + number);\n        }\n\n        // 5. Nested Loops\n        System.out.println("\\n=== Nested Loops (Multiplication Table) ===");\n        for (int i = 1; i <= 3; i++) {\n            for (int j = 1; j <= 3; j++) {\n                System.out.print((i * j) + "\\t");\n            }\n            System.out.println(); // New line after each row\n        }\n\n        // 6. Loop Control Statements\n        System.out.println("\\n=== Loop Control ===");\n        for (int i = 1; i <= 10; i++) {\n            if (i == 3) {\n                continue; // Skip iteration when i = 3\n            }\n            if (i == 8) {\n                break; // Exit loop when i = 8\n            }\n            System.out.print(i + " ");\n        }\n        System.out.println();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"arrays",children:"Arrays"}),"\n",(0,r.jsx)(e.p,{children:"Arrays store multiple values of the same type in a single variable."}),"\n",(0,r.jsx)(e.h3,{id:"array-declaration-and-initialization",children:"Array Declaration and Initialization"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class ArraysDemo {\n    public static void main(String[] args) {\n        // Array declaration and initialization\n        int[] numbers = {10, 20, 30, 40, 50}; // Method 1\n\n        String[] names = new String[5]; // Method 2 - declare size first\n        names[0] = "Alice";\n        names[1] = "Bob";\n        names[2] = "Charlie";\n        names[3] = "Diana";\n        names[4] = "Eve";\n\n        double[] prices = new double[]{19.99, 29.99, 39.99}; // Method 3\n\n        // Array properties\n        System.out.println("Numbers length: " + numbers.length);\n        System.out.println("First number: " + numbers[0]);\n        System.out.println("Last number: " + numbers[numbers.length - 1]);\n\n        // Accessing array elements\n        System.out.println("\\n=== Numbers Array ===");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println("Index " + i + ": " + numbers[i]);\n        }\n\n        // Enhanced for loop (for-each)\n        System.out.println("\\n=== Names Array ===");\n        for (String name : names) {\n            System.out.println("Name: " + name);\n        }\n\n        // Array operations\n        System.out.println("\\n=== Array Operations ===");\n\n        // Finding maximum value\n        int max = numbers[0];\n        for (int num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        System.out.println("Maximum: " + max);\n\n        // Calculating sum and average\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        double average = (double) sum / numbers.length;\n        System.out.println("Sum: " + sum);\n        System.out.println("Average: " + average);\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"multi-dimensional-arrays",children:"Multi-dimensional Arrays"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class MultiDimensionalArrays {\n    public static void main(String[] args) {\n        // 2D Array (matrix)\n        int[][] matrix = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n\n        // Alternative declaration\n        int[][] grid = new int[3][3];\n        grid[0][0] = 1;\n        grid[1][1] = 5;\n        grid[2][2] = 9;\n\n        // Printing 2D array\n        System.out.println("=== Matrix ===");\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                System.out.print(matrix[i][j] + " ");\n            }\n            System.out.println(); // New line after each row\n        }\n\n        // Enhanced for loop with 2D arrays\n        System.out.println("\\n=== Grid (Enhanced For) ===");\n        for (int[] row : grid) {\n            for (int value : row) {\n                System.out.print(value + " ");\n            }\n            System.out.println();\n        }\n\n        // Jagged arrays (arrays of different lengths)\n        int[][] jaggedArray = {\n            {1, 2},\n            {3, 4, 5, 6},\n            {7, 8, 9}\n        };\n\n        System.out.println("\\n=== Jagged Array ===");\n        for (int i = 0; i < jaggedArray.length; i++) {\n            System.out.print("Row " + i + ": ");\n            for (int j = 0; j < jaggedArray[i].length; j++) {\n                System.out.print(jaggedArray[i][j] + " ");\n            }\n            System.out.println();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"array-utility-methods",children:"Array Utility Methods"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Arrays;\n\npublic class ArrayUtilities {\n    public static void main(String[] args) {\n        int[] numbers = {5, 2, 8, 1, 9, 3};\n\n        System.out.println("Original: " + Arrays.toString(numbers));\n\n        // Sorting array\n        int[] sortedNumbers = numbers.clone(); // Create a copy\n        Arrays.sort(sortedNumbers);\n        System.out.println("Sorted: " + Arrays.toString(sortedNumbers));\n\n        // Binary search (array must be sorted first)\n        int index = Arrays.binarySearch(sortedNumbers, 8);\n        System.out.println("Index of 8: " + index);\n\n        // Filling array with same value\n        int[] filled = new int[5];\n        Arrays.fill(filled, 42);\n        System.out.println("Filled: " + Arrays.toString(filled));\n\n        // Comparing arrays\n        int[] array1 = {1, 2, 3};\n        int[] array2 = {1, 2, 3};\n        int[] array3 = {1, 2, 4};\n\n        System.out.println("array1 equals array2: " + Arrays.equals(array1, array2)); // true\n        System.out.println("array1 equals array3: " + Arrays.equals(array1, array3)); // false\n\n        // Copying arrays\n        int[] copy1 = Arrays.copyOf(numbers, numbers.length);\n        int[] copy2 = Arrays.copyOfRange(numbers, 1, 4); // Copy elements from index 1 to 3\n\n        System.out.println("Full copy: " + Arrays.toString(copy1));\n        System.out.println("Range copy: " + Arrays.toString(copy2));\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(e.p,{children:"Methods are blocks of code that perform specific tasks and can be reused throughout your program."}),"\n",(0,r.jsx)(e.h3,{id:"method-declaration-and-usage",children:"Method Declaration and Usage"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class MethodsDemo {\n\n    // Method with no parameters and no return value\n    public static void greet() {\n        System.out.println("Hello, World!");\n    }\n\n    // Method with parameters and return value\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    // Method with multiple parameters\n    public static double calculateArea(double length, double width) {\n        return length * width;\n    }\n\n    // Method that returns a String\n    public static String getFullName(String firstName, String lastName) {\n        return firstName + " " + lastName;\n    }\n\n    // Method with boolean return type\n    public static boolean isEven(int number) {\n        return number % 2 == 0;\n    }\n\n    // Method with array parameter\n    public static int findMax(int[] numbers) {\n        if (numbers.length == 0) {\n            throw new IllegalArgumentException("Array cannot be empty");\n        }\n\n        int max = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n        }\n        return max;\n    }\n\n    // Method with variable arguments (varargs)\n    public static int sum(int... numbers) {\n        int total = 0;\n        for (int num : numbers) {\n            total += num;\n        }\n        return total;\n    }\n\n    // Method overloading (same name, different parameters)\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static double multiply(double a, double b, double c) {\n        return a * b * c;\n    }\n\n    public static void main(String[] args) {\n        // Calling methods\n        greet();\n\n        int result = add(10, 5);\n        System.out.println("10 + 5 = " + result);\n\n        double area = calculateArea(5.5, 3.2);\n        System.out.println("Area: " + area);\n\n        String fullName = getFullName("John", "Doe");\n        System.out.println("Full name: " + fullName);\n\n        System.out.println("Is 4 even? " + isEven(4));\n        System.out.println("Is 7 even? " + isEven(7));\n\n        int[] numbers = {10, 5, 20, 15, 30};\n        int max = findMax(numbers);\n        System.out.println("Maximum value: " + max);\n\n        // Using varargs method\n        System.out.println("Sum of 1,2,3: " + sum(1, 2, 3));\n        System.out.println("Sum of 1,2,3,4,5: " + sum(1, 2, 3, 4, 5));\n\n        // Method overloading examples\n        System.out.println("Int multiply: " + multiply(3, 4));\n        System.out.println("Double multiply: " + multiply(3.5, 2.5));\n        System.out.println("Triple multiply: " + multiply(2.0, 3.0, 4.0));\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"utility-methods-example",children:"Utility Methods Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Scanner;\n\npublic class UtilityMethods {\n\n    // Method to validate if a number is within range\n    public static boolean isInRange(int number, int min, int max) {\n        return number >= min && number <= max;\n    }\n\n    // Method to get input with validation\n    public static int getValidInput(Scanner scanner, String prompt, int min, int max) {\n        int input;\n        do {\n            System.out.print(prompt);\n            input = scanner.nextInt();\n            if (!isInRange(input, min, max)) {\n                System.out.println("Please enter a number between " + min + " and " + max);\n            }\n        } while (!isInRange(input, min, max));\n        return input;\n    }\n\n    // Method to format currency\n    public static String formatCurrency(double amount) {\n        return String.format("$%.2f", amount);\n    }\n\n    // Method to calculate grade\n    public static char calculateGrade(int score) {\n        if (score >= 90) return \'A\';\n        else if (score >= 80) return \'B\';\n        else if (score >= 70) return \'C\';\n        else if (score >= 60) return \'D\';\n        else return \'F\';\n    }\n\n    // Method to reverse a string\n    public static String reverseString(String str) {\n        StringBuilder reversed = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            reversed.append(str.charAt(i));\n        }\n        return reversed.toString();\n    }\n\n    // Method to count vowels\n    public static int countVowels(String str) {\n        int count = 0;\n        String vowels = "aeiouAEIOU";\n        for (int i = 0; i < str.length(); i++) {\n            if (vowels.indexOf(str.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Using utility methods\n        int age = getValidInput(scanner, "Enter your age (1-120): ", 1, 120);\n        System.out.println("Your age is: " + age);\n\n        double price = 29.99;\n        System.out.println("Price: " + formatCurrency(price));\n\n        int score = 85;\n        System.out.println("Grade for score " + score + ": " + calculateGrade(score));\n\n        String text = "Hello World";\n        System.out.println("Original: " + text);\n        System.out.println("Reversed: " + reverseString(text));\n        System.out.println("Vowel count: " + countVowels(text));\n\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"practice-exercises",children:"Practice Exercises"}),"\n",(0,r.jsx)(e.p,{children:"Here are practical exercises to reinforce your Java learning:"}),"\n",(0,r.jsx)(e.h3,{id:"exercise-1-basic-calculator",children:"Exercise 1: Basic Calculator"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Scanner;\n\npublic class Calculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println("=== Simple Calculator ===");\n        System.out.print("Enter first number: ");\n        double num1 = scanner.nextDouble();\n\n        System.out.print("Enter operator (+, -, *, /): ");\n        char operator = scanner.next().charAt(0);\n\n        System.out.print("Enter second number: ");\n        double num2 = scanner.nextDouble();\n\n        double result = 0;\n        boolean validOperation = true;\n\n        switch (operator) {\n            case \'+\':\n                result = num1 + num2;\n                break;\n            case \'-\':\n                result = num1 - num2;\n                break;\n            case \'*\':\n                result = num1 * num2;\n                break;\n            case \'/\':\n                if (num2 != 0) {\n                    result = num1 / num2;\n                } else {\n                    System.out.println("Error: Division by zero!");\n                    validOperation = false;\n                }\n                break;\n            default:\n                System.out.println("Error: Invalid operator!");\n                validOperation = false;\n        }\n\n        if (validOperation) {\n            System.out.printf("Result: %.2f %c %.2f = %.2f%n", num1, operator, num2, result);\n        }\n\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"exercise-2-number-guessing-game",children:"Exercise 2: Number Guessing Game"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Random;\nimport java.util.Scanner;\n\npublic class NumberGuessingGame {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Random random = new Random();\n\n        int targetNumber = random.nextInt(100) + 1; // 1 to 100\n        int attempts = 0;\n        int maxAttempts = 7;\n        boolean hasWon = false;\n\n        System.out.println("=== Number Guessing Game ===");\n        System.out.println("I\'m thinking of a number between 1 and 100.");\n        System.out.println("You have " + maxAttempts + " attempts to guess it!");\n\n        while (attempts < maxAttempts && !hasWon) {\n            System.out.print("Attempt " + (attempts + 1) + " - Enter your guess: ");\n            int guess = scanner.nextInt();\n            attempts++;\n\n            if (guess == targetNumber) {\n                hasWon = true;\n                System.out.println("\ud83c\udf89 Congratulations! You guessed it in " + attempts + " attempts!");\n            } else if (guess < targetNumber) {\n                System.out.println("Too low! Try a higher number.");\n            } else {\n                System.out.println("Too high! Try a lower number.");\n            }\n\n            if (!hasWon && attempts < maxAttempts) {\n                System.out.println("Attempts remaining: " + (maxAttempts - attempts));\n            }\n        }\n\n        if (!hasWon) {\n            System.out.println("Game over! The number was: " + targetNumber);\n        }\n\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"exercise-3-student-grade-management",children:"Exercise 3: Student Grade Management"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Scanner;\n\npublic class GradeManager {\n\n    public static double calculateAverage(double[] scores) {\n        double sum = 0;\n        for (double score : scores) {\n            sum += score;\n        }\n        return sum / scores.length;\n    }\n\n    public static char getLetterGrade(double average) {\n        if (average >= 90) return \'A\';\n        else if (average >= 80) return \'B\';\n        else if (average >= 70) return \'C\';\n        else if (average >= 60) return \'D\';\n        else return \'F\';\n    }\n\n    public static void displayResults(String studentName, double[] scores, double average, char letterGrade) {\n        System.out.println("\\n=== Grade Report ===");\n        System.out.println("Student: " + studentName);\n        System.out.print("Scores: ");\n        for (int i = 0; i < scores.length; i++) {\n            System.out.printf("%.1f", scores[i]);\n            if (i < scores.length - 1) System.out.print(", ");\n        }\n        System.out.println();\n        System.out.printf("Average: %.2f%n", average);\n        System.out.println("Letter Grade: " + letterGrade);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print("Enter student name: ");\n        String studentName = scanner.nextLine();\n\n        System.out.print("Enter number of subjects: ");\n        int numSubjects = scanner.nextInt();\n\n        double[] scores = new double[numSubjects];\n\n        // Input scores\n        for (int i = 0; i < numSubjects; i++) {\n            System.out.print("Enter score for subject " + (i + 1) + ": ");\n            scores[i] = scanner.nextDouble();\n        }\n\n        // Calculate results\n        double average = calculateAverage(scores);\n        char letterGrade = getLetterGrade(average);\n\n        // Display results\n        displayResults(studentName, scores, average, letterGrade);\n\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"exercise-4-word-counter-and-analyzer",children:"Exercise 4: Word Counter and Analyzer"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.Scanner;\n\npublic class TextAnalyzer {\n\n    public static int countWords(String text) {\n        if (text == null || text.trim().isEmpty()) {\n            return 0;\n        }\n        return text.trim().split("\\\\s+").length;\n    }\n\n    public static int countVowels(String text) {\n        int count = 0;\n        String vowels = "aeiouAEIOU";\n        for (char c : text.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static int countConsonants(String text) {\n        int count = 0;\n        for (char c : text.toCharArray()) {\n            if (Character.isLetter(c) && "aeiouAEIOU".indexOf(c) == -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static String reverseWords(String text) {\n        String[] words = text.split(" ");\n        StringBuilder reversed = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed.append(words[i]);\n            if (i > 0) reversed.append(" ");\n        }\n        return reversed.toString();\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println("=== Text Analyzer ===");\n        System.out.print("Enter a sentence: ");\n        String text = scanner.nextLine();\n\n        // Perform analysis\n        int characters = text.length();\n        int charactersNoSpaces = text.replace(" ", "").length();\n        int words = countWords(text);\n        int vowels = countVowels(text);\n        int consonants = countConsonants(text);\n        String reversed = reverseWords(text);\n\n        // Display results\n        System.out.println("\\n=== Analysis Results ===");\n        System.out.println("Original text: " + text);\n        System.out.println("Total characters: " + characters);\n        System.out.println("Characters (no spaces): " + charactersNoSpaces);\n        System.out.println("Word count: " + words);\n        System.out.println("Vowels: " + vowels);\n        System.out.println("Consonants: " + consonants);\n        System.out.println("Reversed words: " + reversed);\n        System.out.println("Uppercase: " + text.toUpperCase());\n        System.out.println("Lowercase: " + text.toLowerCase());\n\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"exercise-5-simple-banking-system",children:"Exercise 5: Simple Banking System"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class SimpleBankAccount {\n    private static double balance = 1000.0; // Starting balance\n    private static DecimalFormat currency = new DecimalFormat("$#,##0.00");\n\n    public static void displayMenu() {\n        System.out.println("\\n=== Simple Banking System ===");\n        System.out.println("1. Check Balance");\n        System.out.println("2. Deposit Money");\n        System.out.println("3. Withdraw Money");\n        System.out.println("4. Exit");\n        System.out.print("Choose an option (1-4): ");\n    }\n\n    public static void checkBalance() {\n        System.out.println("Current Balance: " + currency.format(balance));\n    }\n\n    public static void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println("Deposited: " + currency.format(amount));\n            System.out.println("New Balance: " + currency.format(balance));\n        } else {\n            System.out.println("Invalid deposit amount!");\n        }\n    }\n\n    public static void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println("Withdrawn: " + currency.format(amount));\n            System.out.println("New Balance: " + currency.format(balance));\n        } else if (amount > balance) {\n            System.out.println("Insufficient funds! Your balance is " + currency.format(balance));\n        } else {\n            System.out.println("Invalid withdrawal amount!");\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int choice;\n\n        System.out.println("Welcome to Simple Bank!");\n\n        do {\n            displayMenu();\n            choice = scanner.nextInt();\n\n            switch (choice) {\n                case 1:\n                    checkBalance();\n                    break;\n                case 2:\n                    System.out.print("Enter deposit amount: $");\n                    double depositAmount = scanner.nextDouble();\n                    deposit(depositAmount);\n                    break;\n                case 3:\n                    System.out.print("Enter withdrawal amount: $");\n                    double withdrawAmount = scanner.nextDouble();\n                    withdraw(withdrawAmount);\n                    break;\n                case 4:\n                    System.out.println("Thank you for using Simple Bank!");\n                    break;\n                default:\n                    System.out.println("Invalid option! Please choose 1-4.");\n            }\n        } while (choice != 4);\n\n        scanner.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"summary-and-next-steps",children:"Summary and Next Steps"}),"\n",(0,r.jsx)(e.h3,{id:"key-concepts-covered",children:"Key Concepts Covered"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Data Types"}),": Primitive and reference types, proper usage"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Variables and Constants"}),": Declaration, initialization, naming conventions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Operators"}),": Arithmetic, comparison, logical, assignment"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Input/Output"}),": Scanner class for input, various output methods"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Random Class"}),": Generating random numbers and values"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Number Formatting"}),": DecimalFormat, printf, currency formatting"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Strings"}),": Creation, manipulation, StringBuilder for efficiency"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Control Structures"}),": if-else, switch, loops (for, while, do-while)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Arrays"}),": Single and multi-dimensional arrays, array utilities"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Methods"}),": Declaration, parameters, return types, overloading"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"comparison-with-javascript-key-differences",children:"Comparison with JavaScript (Key Differences)"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Static Typing"}),": Java requires explicit type declarations"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Compilation"}),": Java is compiled to bytecode, JavaScript is interpreted"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Object-Oriented"}),": Java is primarily OOP, JavaScript supports multiple paradigms"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Memory Management"}),": Java has automatic garbage collection"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Platform Independence"}),': Java\'s "write once, run anywhere" philosophy']}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"best-practices-for-java-beginners",children:"Best Practices for Java Beginners"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Always close Scanner objects"})," to prevent resource leaks"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use meaningful variable names"})," (camelCase convention)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Handle exceptions"})," properly (we'll cover this in advanced topics)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use StringBuilder"})," for multiple string concatenations"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Initialize variables"})," before using them"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Follow proper indentation"})," and code formatting"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Write comments"})," to explain complex logic"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"next-steps-in-your-java-journey",children:"Next Steps in Your Java Journey"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Object-Oriented Programming"}),": Classes, objects, inheritance, polymorphism"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Exception Handling"}),": try-catch blocks, custom exceptions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Collections Framework"}),": ArrayList, HashMap, Set, etc."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"File I/O"}),": Reading from and writing to files"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"GUI Development"}),": Swing or JavaFX for desktop applications"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Web Development"}),": Spring Framework for web applications"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Database Connectivity"}),": JDBC for database operations"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"practice-recommendations",children:"Practice Recommendations"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Solve coding problems daily (start with simple, progress to complex)"}),"\n",(0,r.jsx)(e.li,{children:"Build small projects (calculator, todo list, simple games)"}),"\n",(0,r.jsx)(e.li,{children:"Read and understand other people's code"}),"\n",(0,r.jsx)(e.li,{children:"Join Java communities and forums"}),"\n",(0,r.jsx)(e.li,{children:"Practice with online coding platforms"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Remember: Programming is learned by doing. The more you practice writing Java code, the more comfortable you'll become with the language. Start with simple programs and gradually work your way up to more complex applications."}),"\n",(0,r.jsx)(e.p,{children:"Good luck with your Java programming journey! \ud83d\ude80"})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var r=t(6540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);