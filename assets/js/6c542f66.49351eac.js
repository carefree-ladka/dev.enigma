"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[72529],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},67393:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(74848),o=t(28453);const r={title:"Boyer\u2013Moore Majority Vote Algorithm"},a=void 0,l={id:"DSA/DSA with JavaScript/BoyerMoore",title:"Boyer\u2013Moore Majority Vote Algorithm",description:"Boyer\u2013Moore Majority Vote Algorithm",source:"@site/docs/DSA/DSA with JavaScript/BoyerMoore.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/BoyerMoore",permalink:"/docs/DSA/DSA with JavaScript/BoyerMoore",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/BoyerMoore.mdx",tags:[],version:"current",frontMatter:{title:"Boyer\u2013Moore Majority Vote Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Bit Manipulation Basics",permalink:"/docs/DSA/DSA with JavaScript/BitManipulation"},next:{title:"Bucket Sort",permalink:"/docs/DSA/DSA with JavaScript/BucketSort"}},s={},c=[{value:"Boyer\u2013Moore Majority Vote Algorithm",id:"boyermoore-majority-vote-algorithm",level:2},{value:"Algorithm Overview",id:"algorithm-overview",level:3},{value:"Algorithm Steps",id:"algorithm-steps",level:3},{value:"Example Implementation",id:"example-implementation",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"boyermoore-majority-vote-algorithm",children:"Boyer\u2013Moore Majority Vote Algorithm"}),"\n",(0,i.jsx)(n.p,{children:"The Boyer\u2013Moore Majority Vote Algorithm is an efficient algorithm for finding the majority element in an array. The majority element is the element that appears more than half the time in the array. The algorithm operates in linear time, O(n), and uses constant space, O(1)."}),"\n",(0,i.jsx)(n.h3,{id:"algorithm-overview",children:"Algorithm Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Boyer\u2013Moore Majority Vote Algorithm consists of two main phases:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Finding a Candidate"}),": Traverse the array to find a potential candidate that could be the majority element."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verifying the Candidate"}),": Verify if the candidate is indeed the majority element by counting its occurrences."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Initialization"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Set a ",(0,i.jsx)(n.code,{children:"candidate"})," variable to ",(0,i.jsx)(n.code,{children:"null"})," and a ",(0,i.jsx)(n.code,{children:"count"})," variable to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Find the Candidate"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Iterate through the array. If ",(0,i.jsx)(n.code,{children:"count"})," is ",(0,i.jsx)(n.code,{children:"0"}),", set the ",(0,i.jsx)(n.code,{children:"candidate"})," to the current element."]}),"\n",(0,i.jsxs)(n.li,{children:["Adjust ",(0,i.jsx)(n.code,{children:"count"})," based on whether the current element matches the ",(0,i.jsx)(n.code,{children:"candidate"})," or not."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verify the Candidate"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Count the occurrences of the ",(0,i.jsx)(n.code,{children:"candidate"})," in the array to ensure it appears more than half the time."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Code Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"/**\n * Find the majority element in an array using the Boyer\u2013Moore Majority Vote Algorithm.\n * @param {number[]} nums - The input array of numbers.\n * @return {number} - The majority element if it exists, otherwise null.\n */\nconst majorityElement = nums => {\n  let candidate = null;\n  let count = 0;\n\n  // Phase 1: Find the candidate\n  for (const num of nums) {\n    if (count === 0) {\n      candidate = num;\n    }\n    count += num === candidate ? 1 : -1;\n  }\n\n  // Phase 2: Verify the candidate\n  count = 0;\n  for (const num of nums) {\n    if (num === candidate) {\n      count++;\n    }\n  }\n\n  return count > nums.length / 2 ? candidate : null;\n};\n\n// Example usage:\nconst nums = [3, 2, 3];\nconsole.log(majorityElement(nums)); // Output: 3\n\nconst nums2 = [1, 2, 3, 4, 5];\nconsole.log(majorityElement(nums2)); // Output: null (no majority element)\n\n// We can also do this , if you like\nconst majorityElement = nums => {\n  let candidate = 0;\n  let count = 0;\n\n  for (let n of nums) {\n    if (count === 0) candidate = n;\n    count += n === candidate ? 1 : -1;\n  }\n\n  return candidate;\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);