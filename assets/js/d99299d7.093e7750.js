"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1998],{28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>l});var r=n(96540);const s={},t=r.createContext(s);function a(e){const i=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:i},e.children)}},93583:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var r=n(74848),s=n(28453);const t={},a="Sharding vs Replication vs Partitioning",l={id:"Database/Sharding vs Replication vs Partitioning",title:"Sharding vs Replication vs Partitioning",description:"A comprehensive guide to database scaling strategies with practical examples and decision frameworks.",source:"@site/docs/Database/Sharding vs Replication vs Partitioning.mdx",sourceDirName:"Database",slug:"/Database/Sharding vs Replication vs Partitioning",permalink:"/dev.enigma/docs/Database/Sharding vs Replication vs Partitioning",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Database/Sharding vs Replication vs Partitioning.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Essentials for Java Backend Developers",permalink:"/dev.enigma/docs/Database/SQL Essentials for Java Backend Developers"},next:{title:"Frontend System Design",permalink:"/dev.enigma/docs/category/frontend-system-design"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"\ud83d\udd04 Replication",id:"-replication",level:2},{value:"What is it?",id:"what-is-it",level:3},{value:"Architecture Patterns",id:"architecture-patterns",level:3},{value:"Master-Slave Replication",id:"master-slave-replication",level:4},{value:"Master-Master Replication",id:"master-master-replication",level:4},{value:"Key Characteristics",id:"key-characteristics",level:3},{value:"Replication Strategies",id:"replication-strategies",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Example Scenario",id:"example-scenario",level:3},{value:"\ud83d\udcca Partitioning",id:"-partitioning",level:2},{value:"What is it?",id:"what-is-it-1",level:3},{value:"Partitioning Types",id:"partitioning-types",level:3},{value:"Horizontal Partitioning (Row-based)",id:"horizontal-partitioning-row-based",level:4},{value:"Vertical Partitioning (Column-based)",id:"vertical-partitioning-column-based",level:4},{value:"Partitioning Strategies",id:"partitioning-strategies",level:3},{value:"Key Characteristics",id:"key-characteristics-1",level:3},{value:"Use Cases",id:"use-cases-1",level:3},{value:"Example Scenario",id:"example-scenario-1",level:3},{value:"\ud83d\uddc2\ufe0f Sharding",id:"\ufe0f-sharding",level:2},{value:"What is it?",id:"what-is-it-2",level:3},{value:"Sharding Architecture",id:"sharding-architecture",level:3},{value:"Sharding with Replication",id:"sharding-with-replication",level:3},{value:"Sharding Strategies",id:"sharding-strategies",level:3},{value:"Key Characteristics",id:"key-characteristics-2",level:3},{value:"Challenges",id:"challenges",level:3},{value:"Use Cases",id:"use-cases-2",level:3},{value:"Example Scenario",id:"example-scenario-2",level:3},{value:"\ud83c\udfaf Comparison Matrix",id:"-comparison-matrix",level:2},{value:"\ud83c\udfa8 Combined Strategies",id:"-combined-strategies",level:2},{value:"Example: E-commerce Platform",id:"example-e-commerce-platform",level:3},{value:"\ud83d\udea6 Decision Tree",id:"-decision-tree",level:2},{value:"\ud83d\udcdd Quick Decision Guide",id:"-quick-decision-guide",level:2},{value:"Start with Replication if:",id:"start-with-replication-if",level:3},{value:"Add Partitioning if:",id:"add-partitioning-if",level:3},{value:"Move to Sharding when:",id:"move-to-sharding-when",level:3},{value:"\ud83d\udca1 Best Practices",id:"-best-practices",level:2},{value:"Replication",id:"replication",level:3},{value:"Partitioning",id:"partitioning",level:3},{value:"Sharding",id:"sharding",level:3},{value:"\ud83d\udd27 Implementation Examples",id:"-implementation-examples",level:2},{value:"Replication Setup (PostgreSQL)",id:"replication-setup-postgresql",level:3},{value:"Partitioning Setup (PostgreSQL)",id:"partitioning-setup-postgresql",level:3},{value:"Sharding Logic (Application Level)",id:"sharding-logic-application-level",level:3},{value:"\ud83d\udcda Summary",id:"-summary",level:2},{value:"\ud83c\udf93 Further Reading",id:"-further-reading",level:2}];function h(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"sharding-vs-replication-vs-partitioning",children:"Sharding vs Replication vs Partitioning"})}),"\n",(0,r.jsx)(i.p,{children:"A comprehensive guide to database scaling strategies with practical examples and decision frameworks."}),"\n",(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(i.p,{children:"These three strategies solve different problems in distributed systems:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Replication"}),": Copying the same data across multiple servers"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Partitioning"}),": Splitting data logically within a database"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Sharding"}),": Distributing data across multiple physical databases"]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-replication",children:"\ud83d\udd04 Replication"}),"\n",(0,r.jsx)(i.h3,{id:"what-is-it",children:"What is it?"}),"\n",(0,r.jsx)(i.p,{children:"Replication creates multiple copies of the same dataset across different servers. Each replica contains the full dataset (or a subset in partial replication)."}),"\n",(0,r.jsx)(i.h3,{id:"architecture-patterns",children:"Architecture Patterns"}),"\n",(0,r.jsx)(i.h4,{id:"master-slave-replication",children:"Master-Slave Replication"}),"\n",(0,r.jsx)(i.mermaid,{value:"graph TB\n    Client[Client Application]\n    Master[(Master DB<br/>Writes)]\n    Slave1[(Slave DB 1<br/>Reads)]\n    Slave2[(Slave DB 2<br/>Reads)]\n    Slave3[(Slave DB 3<br/>Reads)]\n\n    Client --\x3e|Write| Master\n    Client --\x3e|Read| Slave1\n    Client --\x3e|Read| Slave2\n    Client --\x3e|Read| Slave3\n\n    Master -.->|Replicate| Slave1\n    Master -.->|Replicate| Slave2\n    Master -.->|Replicate| Slave3\n\n    style Master fill:#ff6b6b\n    style Slave1 fill:#51cf66\n    style Slave2 fill:#51cf66\n    style Slave3 fill:#51cf66"}),"\n",(0,r.jsx)(i.h4,{id:"master-master-replication",children:"Master-Master Replication"}),"\n",(0,r.jsx)(i.mermaid,{value:"graph TB\n    Client1[Client 1]\n    Client2[Client 2]\n    Master1[(Master DB 1<br/>Read/Write)]\n    Master2[(Master DB 2<br/>Read/Write)]\n\n    Client1 --\x3e|Read/Write| Master1\n    Client2 --\x3e|Read/Write| Master2\n\n    Master1 <-.->|Bi-directional<br/>Replication| Master2\n\n    style Master1 fill:#ff6b6b\n    style Master2 fill:#ff6b6b"}),"\n",(0,r.jsx)(i.h3,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Aspect"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Purpose"})}),(0,r.jsx)(i.td,{children:"High availability & read scalability"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Data Distribution"})}),(0,r.jsx)(i.td,{children:"Full copy on each server"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Consistency"})}),(0,r.jsx)(i.td,{children:"Eventual or strong (depending on sync method)"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Failure Impact"})}),(0,r.jsx)(i.td,{children:"Redundancy protects against server failure"})]})]})]}),"\n",(0,r.jsx)(i.h3,{id:"replication-strategies",children:"Replication Strategies"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Synchronous Replication"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Write confirmed only after all replicas acknowledge"}),"\n",(0,r.jsx)(i.li,{children:"Strong consistency"}),"\n",(0,r.jsx)(i.li,{children:"Higher latency"}),"\n",(0,r.jsx)(i.li,{children:"Lower availability (all replicas must be online)"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Asynchronous Replication"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Write confirmed immediately"}),"\n",(0,r.jsx)(i.li,{children:"Eventual consistency"}),"\n",(0,r.jsx)(i.li,{children:"Lower latency"}),"\n",(0,r.jsx)(i.li,{children:"Higher availability"}),"\n",(0,r.jsx)(i.li,{children:"Risk of data loss on master failure"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsxs)(i.p,{children:["\u2705 ",(0,r.jsx)(i.strong,{children:"When to use Replication:"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"High read-to-write ratio (95% reads)"}),"\n",(0,r.jsx)(i.li,{children:"Need for high availability and fault tolerance"}),"\n",(0,r.jsx)(i.li,{children:"Geographic distribution for low latency"}),"\n",(0,r.jsx)(i.li,{children:"Analytics workloads on read replicas"}),"\n",(0,r.jsx)(i.li,{children:"Disaster recovery requirements"}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["\u274c ",(0,r.jsx)(i.strong,{children:"When NOT to use:"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Write-heavy workloads (all replicas must handle writes)"}),"\n",(0,r.jsx)(i.li,{children:"Storage constraints (full copy per replica)"}),"\n",(0,r.jsx)(i.li,{children:"Complex conflict resolution required"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-scenario",children:"Example Scenario"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"E-commerce Product Catalog"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Master DB: Handles product updates (rare)\nReplica 1 (US East): Serves customer browsing\nReplica 2 (US West): Serves customer browsing\nReplica 3 (Europe): Serves customer browsing\n"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-partitioning",children:"\ud83d\udcca Partitioning"}),"\n",(0,r.jsx)(i.h3,{id:"what-is-it-1",children:"What is it?"}),"\n",(0,r.jsx)(i.p,{children:"Partitioning divides a large table into smaller pieces within the same database instance. Each partition contains a subset of rows but shares the same schema."}),"\n",(0,r.jsx)(i.h3,{id:"partitioning-types",children:"Partitioning Types"}),"\n",(0,r.jsx)(i.h4,{id:"horizontal-partitioning-row-based",children:"Horizontal Partitioning (Row-based)"}),"\n",(0,r.jsx)(i.mermaid,{value:'graph TB\n    subgraph "Single Database Server"\n        Table[Users Table<br/>100M rows]\n        P1[Partition 1<br/>Users 2020<br/>25M rows]\n        P2[Partition 2<br/>Users 2021<br/>25M rows]\n        P3[Partition 3<br/>Users 2022<br/>25M rows]\n        P4[Partition 4<br/>Users 2023-2024<br/>25M rows]\n    end\n\n    Table --\x3e P1\n    Table --\x3e P2\n    Table --\x3e P3\n    Table --\x3e P4\n\n    style Table fill:#4dabf7\n    style P1 fill:#74c0fc\n    style P2 fill:#74c0fc\n    style P3 fill:#74c0fc\n    style P4 fill:#74c0fc'}),"\n",(0,r.jsx)(i.h4,{id:"vertical-partitioning-column-based",children:"Vertical Partitioning (Column-based)"}),"\n",(0,r.jsx)(i.mermaid,{value:'graph LR\n    subgraph "Single Database Server"\n        FullTable[Full User Table]\n\n        subgraph P1[Partition 1: Core Data]\n            C1[user_id<br/>email<br/>username]\n        end\n\n        subgraph P2[Partition 2: Profile]\n            C2[user_id<br/>bio<br/>avatar<br/>preferences]\n        end\n\n        subgraph P3[Partition 3: Activity]\n            C3[user_id<br/>last_login<br/>login_count]\n        end\n    end\n\n    FullTable --\x3e P1\n    FullTable --\x3e P2\n    FullTable --\x3e P3\n\n    style FullTable fill:#4dabf7\n    style P1 fill:#74c0fc\n    style P2 fill:#74c0fc\n    style P3 fill:#74c0fc'}),"\n",(0,r.jsx)(i.h3,{id:"partitioning-strategies",children:"Partitioning Strategies"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Range Partitioning"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- By date\nPartition P1: created_at BETWEEN '2023-01-01' AND '2023-12-31'\nPartition P2: created_at BETWEEN '2024-01-01' AND '2024-12-31'\n\n-- By ID\nPartition P1: user_id BETWEEN 1 AND 1000000\nPartition P2: user_id BETWEEN 1000001 AND 2000000\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Hash Partitioning"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- Distribute evenly using hash function\nPartition P1: HASH(user_id) % 4 = 0\nPartition P2: HASH(user_id) % 4 = 1\nPartition P3: HASH(user_id) % 4 = 2\nPartition P4: HASH(user_id) % 4 = 3\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"List Partitioning"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- By discrete values\nPartition P1: region IN ('US', 'Canada')\nPartition P2: region IN ('UK', 'Germany', 'France')\nPartition P3: region IN ('India', 'Singapore')\n"})}),"\n",(0,r.jsx)(i.h3,{id:"key-characteristics-1",children:"Key Characteristics"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Aspect"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Purpose"})}),(0,r.jsx)(i.td,{children:"Query performance & manageability"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Scope"})}),(0,r.jsx)(i.td,{children:"Single database instance"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Transparency"})}),(0,r.jsx)(i.td,{children:"Often transparent to application"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Scalability"})}),(0,r.jsx)(i.td,{children:"Limited by single server resources"})]})]})]}),"\n",(0,r.jsx)(i.h3,{id:"use-cases-1",children:"Use Cases"}),"\n",(0,r.jsxs)(i.p,{children:["\u2705 ",(0,r.jsx)(i.strong,{children:"When to use Partitioning:"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Large tables slowing down queries"}),"\n",(0,r.jsx)(i.li,{children:"Time-series data with predictable access patterns"}),"\n",(0,r.jsx)(i.li,{children:"Easy data archival/deletion (drop old partitions)"}),"\n",(0,r.jsx)(i.li,{children:"Maintenance operations on specific data ranges"}),"\n",(0,r.jsx)(i.li,{children:"Query patterns that filter on partition key"}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["\u274c ",(0,r.jsx)(i.strong,{children:"When NOT to use:"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Small tables (< 1GB)"}),"\n",(0,r.jsx)(i.li,{children:"Queries don't align with partition key"}),"\n",(0,r.jsx)(i.li,{children:"Need to scale beyond single server"}),"\n",(0,r.jsx)(i.li,{children:"Uniform access across all data"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-scenario-1",children:"Example Scenario"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Analytics Platform with Time-Series Data"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"logs_2024_01: January data (can archive after 90 days)\nlogs_2024_02: February data\nlogs_2024_03: March data (hot data, frequently queried)\nlogs_2024_04: April data (hot data, frequently queried)\n"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"\ufe0f-sharding",children:"\ud83d\uddc2\ufe0f Sharding"}),"\n",(0,r.jsx)(i.h3,{id:"what-is-it-2",children:"What is it?"}),"\n",(0,r.jsx)(i.p,{children:"Sharding distributes data across multiple independent database servers (shards). Each shard contains a unique subset of the data and operates autonomously."}),"\n",(0,r.jsx)(i.h3,{id:"sharding-architecture",children:"Sharding Architecture"}),"\n",(0,r.jsx)(i.mermaid,{value:"graph TB\n    Client[Client Application]\n    Router[Shard Router/<br/>Query Router]\n\n    subgraph Shard1[Shard 1 - US Users]\n        DB1[(Database 1<br/>user_id: 1-1M)]\n    end\n\n    subgraph Shard2[Shard 2 - EU Users]\n        DB2[(Database 2<br/>user_id: 1M-2M)]\n    end\n\n    subgraph Shard3[Shard 3 - Asia Users]\n        DB3[(Database 3<br/>user_id: 2M-3M)]\n    end\n\n    subgraph Shard4[Shard 4 - Other]\n        DB4[(Database 4<br/>user_id: 3M-4M)]\n    end\n\n    Client --\x3e Router\n    Router --\x3e|Route by user_id| DB1\n    Router --\x3e|Route by user_id| DB2\n    Router --\x3e|Route by user_id| DB3\n    Router --\x3e|Route by user_id| DB4\n\n    style Router fill:#ffd43b\n    style DB1 fill:#845ef7\n    style DB2 fill:#845ef7\n    style DB3 fill:#845ef7\n    style DB4 fill:#845ef7"}),"\n",(0,r.jsx)(i.h3,{id:"sharding-with-replication",children:"Sharding with Replication"}),"\n",(0,r.jsx)(i.mermaid,{value:"graph TB\n    Client[Client]\n    Router[Shard Router]\n\n    subgraph Shard1[Shard 1]\n        M1[(Master 1)]\n        S1[(Replica 1)]\n        M1 -.-> S1\n    end\n\n    subgraph Shard2[Shard 2]\n        M2[(Master 2)]\n        S2[(Replica 2)]\n        M2 -.-> S2\n    end\n\n    subgraph Shard3[Shard 3]\n        M3[(Master 3)]\n        S3[(Replica 3)]\n        M3 -.-> S3\n    end\n\n    Client --\x3e Router\n    Router --\x3e M1\n    Router --\x3e M2\n    Router --\x3e M3\n    Router --\x3e S1\n    Router --\x3e S2\n    Router --\x3e S3\n\n    style Router fill:#ffd43b\n    style M1 fill:#ff6b6b\n    style M2 fill:#ff6b6b\n    style M3 fill:#ff6b6b\n    style S1 fill:#51cf66\n    style S2 fill:#51cf66\n    style S3 fill:#51cf66"}),"\n",(0,r.jsx)(i.h3,{id:"sharding-strategies",children:"Sharding Strategies"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Range-Based Sharding"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Shard 1: user_id 1 to 1,000,000\nShard 2: user_id 1,000,001 to 2,000,000\nShard 3: user_id 2,000,001 to 3,000,000\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Hash-Based Sharding"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Shard = HASH(user_id) % number_of_shards\n\nuser_id 12345 \u2192 HASH \u2192 2 \u2192 Shard 2\nuser_id 67890 \u2192 HASH \u2192 1 \u2192 Shard 1\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Geographic Sharding"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Shard US: users where region = 'US'\nShard EU: users where region = 'EU'\nShard ASIA: users where region = 'ASIA'\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Entity/Directory-Based Sharding"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Shard mapping stored in lookup table:\ntenant_id: 1001 \u2192 Shard 1\ntenant_id: 1002 \u2192 Shard 3\ntenant_id: 1003 \u2192 Shard 1\n"})}),"\n",(0,r.jsx)(i.h3,{id:"key-characteristics-2",children:"Key Characteristics"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Aspect"}),(0,r.jsx)(i.th,{children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Purpose"})}),(0,r.jsx)(i.td,{children:"Horizontal scalability for writes & storage"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Scope"})}),(0,r.jsx)(i.td,{children:"Multiple independent database servers"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Complexity"})}),(0,r.jsx)(i.td,{children:"High (routing, joins, transactions)"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Scalability"})}),(0,r.jsx)(i.td,{children:"Nearly unlimited (add more shards)"})]})]})]}),"\n",(0,r.jsx)(i.h3,{id:"challenges",children:"Challenges"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Cross-Shard Queries"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- This query spans multiple shards\nSELECT COUNT(*) FROM users WHERE created_at > '2024-01-01'\n-- Must query all shards and aggregate results\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Cross-Shard Joins"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- Users on Shard 1, Orders on Shard 2\nSELECT users.name, orders.total\nFROM users\nJOIN orders ON users.id = orders.user_id\n-- Very expensive or impossible\n"})}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Distributed Transactions"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Maintaining ACID across shards is complex"}),"\n",(0,r.jsx)(i.li,{children:"Often requires 2-phase commit"}),"\n",(0,r.jsx)(i.li,{children:"Can use eventual consistency instead"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Rebalancing"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Adding/removing shards requires data migration"}),"\n",(0,r.jsx)(i.li,{children:"Can cause downtime or performance issues"}),"\n",(0,r.jsx)(i.li,{children:"Hash-based sharding makes this harder"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"use-cases-2",children:"Use Cases"}),"\n",(0,r.jsxs)(i.p,{children:["\u2705 ",(0,r.jsx)(i.strong,{children:"When to use Sharding:"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Massive data volume (TBs/PBs)"}),"\n",(0,r.jsx)(i.li,{children:"High write throughput requirements"}),"\n",(0,r.jsx)(i.li,{children:"Single database can't handle load"}),"\n",(0,r.jsx)(i.li,{children:"Multi-tenant applications (shard by tenant)"}),"\n",(0,r.jsx)(i.li,{children:"Data sovereignty requirements (geographic sharding)"}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["\u274c ",(0,r.jsx)(i.strong,{children:"When NOT to use:"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Can scale with replication/partitioning"}),"\n",(0,r.jsx)(i.li,{children:"Frequent cross-shard queries needed"}),"\n",(0,r.jsx)(i.li,{children:"Complex transactions across entities"}),"\n",(0,r.jsx)(i.li,{children:"Small team without devops expertise"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-scenario-2",children:"Example Scenario"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Social Media Platform"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Shard 1: Users with last_name A-F (10M users)\nShard 2: Users with last_name G-M (10M users)\nShard 3: Users with last_name N-S (10M users)\nShard 4: Users with last_name T-Z (10M users)\n\nEach shard has its own master + 2 replicas\n"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-comparison-matrix",children:"\ud83c\udfaf Comparison Matrix"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{children:"Feature"}),(0,r.jsx)(i.th,{children:"Replication"}),(0,r.jsx)(i.th,{children:"Partitioning"}),(0,r.jsx)(i.th,{children:"Sharding"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Data Distribution"})}),(0,r.jsx)(i.td,{children:"Full copy per node"}),(0,r.jsx)(i.td,{children:"Subset per partition"}),(0,r.jsx)(i.td,{children:"Subset per shard"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Scalability"})}),(0,r.jsx)(i.td,{children:"Read scalability"}),(0,r.jsx)(i.td,{children:"Single server limit"}),(0,r.jsx)(i.td,{children:"Unlimited horizontal"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Write Performance"})}),(0,r.jsx)(i.td,{children:"No improvement"}),(0,r.jsx)(i.td,{children:"Improved for specific queries"}),(0,r.jsx)(i.td,{children:"Linear improvement"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Read Performance"})}),(0,r.jsx)(i.td,{children:"Linear improvement"}),(0,r.jsx)(i.td,{children:"Improved for partition-aware queries"}),(0,r.jsx)(i.td,{children:"Improved"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Complexity"})}),(0,r.jsx)(i.td,{children:"Low-Medium"}),(0,r.jsx)(i.td,{children:"Low"}),(0,r.jsx)(i.td,{children:"High"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Storage Cost"})}),(0,r.jsx)(i.td,{children:"High (full copies)"}),(0,r.jsx)(i.td,{children:"Same as original"}),(0,r.jsx)(i.td,{children:"Distributed"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Query Complexity"})}),(0,r.jsx)(i.td,{children:"Simple"}),(0,r.jsx)(i.td,{children:"Simple"}),(0,r.jsx)(i.td,{children:"Complex (cross-shard)"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Failure Impact"})}),(0,r.jsx)(i.td,{children:"Other replicas available"}),(0,r.jsx)(i.td,{children:"Single point of failure"}),(0,r.jsx)(i.td,{children:"Only affected shard"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Setup Difficulty"})}),(0,r.jsx)(i.td,{children:"Easy"}),(0,r.jsx)(i.td,{children:"Easy"}),(0,r.jsx)(i.td,{children:"Difficult"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{children:(0,r.jsx)(i.strong,{children:"Maintenance"})}),(0,r.jsx)(i.td,{children:"Medium"}),(0,r.jsx)(i.td,{children:"Easy"}),(0,r.jsx)(i.td,{children:"Difficult"})]})]})]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-combined-strategies",children:"\ud83c\udfa8 Combined Strategies"}),"\n",(0,r.jsx)(i.p,{children:"Real-world systems often combine these approaches:"}),"\n",(0,r.jsx)(i.h3,{id:"example-e-commerce-platform",children:"Example: E-commerce Platform"}),"\n",(0,r.jsx)(i.mermaid,{value:'graph TB\n    subgraph "US Region"\n        subgraph "Shard 1: US East Orders"\n            M1[(Master<br/>Write)]\n            R1[(Replica 1<br/>Read)]\n            R2[(Replica 2<br/>Read)]\n\n            subgraph "Partitions"\n                P1[Orders 2023]\n                P2[Orders 2024]\n            end\n\n            M1 --\x3e P1\n            M1 --\x3e P2\n            M1 -.-> R1\n            M1 -.-> R2\n        end\n    end\n\n    subgraph "EU Region"\n        subgraph "Shard 2: EU Orders"\n            M2[(Master<br/>Write)]\n            R3[(Replica 1<br/>Read)]\n            R4[(Replica 2<br/>Read)]\n\n            subgraph "Partitions2"\n                P3[Orders 2023]\n                P4[Orders 2024]\n            end\n\n            M2 --\x3e P3\n            M2 --\x3e P4\n            M2 -.-> R3\n            M2 -.-> R4\n        end\n    end\n\n    style M1 fill:#ff6b6b\n    style M2 fill:#ff6b6b\n    style R1 fill:#51cf66\n    style R2 fill:#51cf66\n    style R3 fill:#51cf66\n    style R4 fill:#51cf66\n    style P1 fill:#74c0fc\n    style P2 fill:#74c0fc\n    style P3 fill:#74c0fc\n    style P4 fill:#74c0fc'}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.strong,{children:"Strategy:"})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Sharding"})," by geographic region (data locality)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Replication"})," within each shard (high availability + read scaling)"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Partitioning"})," by year (query performance + easy archival)"]}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-decision-tree",children:"\ud83d\udea6 Decision Tree"}),"\n",(0,r.jsx)(i.mermaid,{value:"graph TD\n    Start[Start: Need to Scale?]\n    Start --\x3e Q1{Read or Write<br/>Bottleneck?}\n\n    Q1 --\x3e|Reads| Q2{Single server<br/>sufficient?}\n    Q1 --\x3e|Writes| Q3{Data fits on<br/>one server?}\n    Q1 --\x3e|Both| Q4{Massive scale<br/>TBs of data?}\n\n    Q2 --\x3e|Yes| Partition[Use Partitioning]\n    Q2 --\x3e|No| Replication[Use Replication]\n\n    Q3 --\x3e|Yes| Partition2[Use Partitioning<br/>+ Replication]\n    Q3 --\x3e|No| Sharding[Use Sharding]\n\n    Q4 --\x3e|Yes| ShardingFull[Use Sharding<br/>+ Replication<br/>+ Partitioning]\n    Q4 --\x3e|No| Replication2[Use Replication<br/>+ Partitioning]\n\n    style Partition fill:#4dabf7\n    style Replication fill:#51cf66\n    style Sharding fill:#845ef7\n    style Partition2 fill:#4dabf7\n    style Replication2 fill:#51cf66\n    style ShardingFull fill:#845ef7"}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-quick-decision-guide",children:"\ud83d\udcdd Quick Decision Guide"}),"\n",(0,r.jsx)(i.h3,{id:"start-with-replication-if",children:"Start with Replication if:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Your reads outnumber writes 10:1 or more"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You need high availability"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You want geographic distribution"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Your data fits comfortably on one server"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You're starting out and need simple scaling"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"add-partitioning-if",children:"Add Partitioning if:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Single tables are becoming very large (>100GB)"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Queries have predictable access patterns (time-based, range-based)"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You need to archive/delete old data regularly"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Query performance is degrading despite indexes"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You're still on a single database server"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"move-to-sharding-when",children:"Move to Sharding when:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You've exhausted vertical scaling (bigger servers)"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Replication doesn't help (write bottleneck)"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Data exceeds single server capacity (multi-TB)"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You need linear write scalability"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf You have multi-tenant architecture"}),"\n",(0,r.jsx)(i.li,{children:"\ud83c\udfaf Data sovereignty requires geographic separation"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-best-practices",children:"\ud83d\udca1 Best Practices"}),"\n",(0,r.jsx)(i.h3,{id:"replication",children:"Replication"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Monitor replication lag"}),"\n",(0,r.jsx)(i.li,{children:"Use read replicas for analytics"}),"\n",(0,r.jsx)(i.li,{children:"Implement retry logic for failover"}),"\n",(0,r.jsx)(i.li,{children:"Consider async for performance, sync for consistency"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"partitioning",children:"Partitioning"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Choose partition key carefully (used in WHERE clauses)"}),"\n",(0,r.jsx)(i.li,{children:"Keep partitions relatively equal in size"}),"\n",(0,r.jsx)(i.li,{children:"Plan for growth (add partitions in advance)"}),"\n",(0,r.jsx)(i.li,{children:"Use partition pruning in queries"}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"sharding",children:"Sharding"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Choose a stable shard key (won't change)"}),"\n",(0,r.jsx)(i.li,{children:"Distribute data evenly (avoid hot shards)"}),"\n",(0,r.jsx)(i.li,{children:"Plan for rebalancing from day one"}),"\n",(0,r.jsx)(i.li,{children:"Minimize cross-shard operations"}),"\n",(0,r.jsx)(i.li,{children:"Use consistent hashing for dynamic sharding"}),"\n",(0,r.jsx)(i.li,{children:"Keep shard mapping external (not hardcoded)"}),"\n"]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-implementation-examples",children:"\ud83d\udd27 Implementation Examples"}),"\n",(0,r.jsx)(i.h3,{id:"replication-setup-postgresql",children:"Replication Setup (PostgreSQL)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- On Master\nCREATE PUBLICATION my_publication FOR ALL TABLES;\n\n-- On Replica\nCREATE SUBSCRIPTION my_subscription\nCONNECTION 'host=master_host dbname=mydb user=repl_user'\nPUBLICATION my_publication;\n"})}),"\n",(0,r.jsx)(i.h3,{id:"partitioning-setup-postgresql",children:"Partitioning Setup (PostgreSQL)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-sql",children:"-- Create partitioned table\nCREATE TABLE orders (\n    order_id BIGSERIAL,\n    created_at TIMESTAMP,\n    customer_id INTEGER,\n    total DECIMAL\n) PARTITION BY RANGE (created_at);\n\n-- Create partitions\nCREATE TABLE orders_2023 PARTITION OF orders\n    FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');\n\nCREATE TABLE orders_2024 PARTITION OF orders\n    FOR VALUES FROM ('2024-01-01') TO ('2025-01-01');\n"})}),"\n",(0,r.jsx)(i.h3,{id:"sharding-logic-application-level",children:"Sharding Logic (Application Level)"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:'def get_shard(user_id, num_shards=4):\n    """Hash-based sharding"""\n    shard_id = hash(user_id) % num_shards\n    return f"shard_{shard_id}"\n\ndef get_connection(user_id):\n    """Get database connection for user"""\n    shard = get_shard(user_id)\n    return connection_pool[shard]\n\n# Usage\nuser_id = 12345\ndb = get_connection(user_id)\nuser = db.query("SELECT * FROM users WHERE id = ?", user_id)\n'})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-summary",children:"\ud83d\udcda Summary"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Replication"})," = Same data, multiple places \u2192 High availability & read scaling"]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Partitioning"})," = Split data logically, same server \u2192 Query performance & manageability"]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Sharding"})," = Split data physically, multiple servers \u2192 Unlimited horizontal scaling"]}),"\n",(0,r.jsx)(i.p,{children:"Start simple (replication + partitioning), move to sharding only when necessary. Most applications never need sharding."}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-further-reading",children:"\ud83c\udf93 Further Reading"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"PostgreSQL Replication Documentation"}),"\n",(0,r.jsx)(i.li,{children:"MySQL Sharding Strategies"}),"\n",(0,r.jsx)(i.li,{children:"MongoDB Sharding Architecture"}),"\n",(0,r.jsx)(i.li,{children:"Vitess (Sharding layer for MySQL)"}),"\n",(0,r.jsx)(i.li,{children:"Citus (Distributed PostgreSQL)"}),"\n",(0,r.jsx)(i.li,{children:"Consistent Hashing Algorithms"}),"\n",(0,r.jsx)(i.li,{children:"CAP Theorem and Distributed Systems"}),"\n"]})]})}function o(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);