"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1048],{7319:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>h});var i=s(4848),t=s(8453);const r={},l="REST vs GraphQL",a={id:"Frontend System Design/RESTvsGraphQL",title:"REST vs GraphQL",description:"REST (Representational State Transfer)",source:"@site/docs/Frontend System Design/RESTvsGraphQL.mdx",sourceDirName:"Frontend System Design",slug:"/Frontend System Design/RESTvsGraphQL",permalink:"/js.enigma/docs/Frontend System Design/RESTvsGraphQL",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Frontend System Design/RESTvsGraphQL.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RADIO Framework Cheatsheet",permalink:"/js.enigma/docs/Frontend System Design/RADIO"},next:{title:"System Design Fundamentals",permalink:"/js.enigma/docs/Frontend System Design/SystemDesignFundamentals"}},d={},h=[{value:"<strong>REST (Representational State Transfer)</strong>",id:"rest-representational-state-transfer",level:2},{value:"<strong>What It Is:</strong>",id:"what-it-is",level:3},{value:"<strong>Key Characteristics:</strong>",id:"key-characteristics",level:3},{value:"<strong>Advantages:</strong>",id:"advantages",level:3},{value:"<strong>Disadvantages:</strong>",id:"disadvantages",level:3},{value:"<strong>When to Use REST:</strong>",id:"when-to-use-rest",level:3},{value:"<strong>GraphQL</strong>",id:"graphql",level:2},{value:"<strong>What It Is:</strong>",id:"what-it-is-1",level:3},{value:"<strong>Key Characteristics:</strong>",id:"key-characteristics-1",level:3},{value:"<strong>Advantages:</strong>",id:"advantages-1",level:3},{value:"<strong>Disadvantages:</strong>",id:"disadvantages-1",level:3},{value:"<strong>When to Use GraphQL:</strong>",id:"when-to-use-graphql",level:3},{value:"<strong>Comparison Table</strong>",id:"comparison-table",level:2},{value:"<strong>When to Use Which?</strong>",id:"when-to-use-which",level:2},{value:"Use <strong>REST</strong> When:",id:"use-rest-when",level:3},{value:"Use <strong>GraphQL</strong> When:",id:"use-graphql-when",level:3},{value:"<strong>REST and GraphQL in the Same System</strong>",id:"rest-and-graphql-in-the-same-system",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rest-vs-graphql",children:"REST vs GraphQL"})}),"\n",(0,i.jsx)(n.h2,{id:"rest-representational-state-transfer",children:(0,i.jsx)(n.strong,{children:"REST (Representational State Transfer)"})}),"\n",(0,i.jsx)(n.h3,{id:"what-it-is",children:(0,i.jsx)(n.strong,{children:"What It Is:"})}),"\n",(0,i.jsx)(n.p,{children:"A stateless architecture style for designing networked applications using standard HTTP methods like GET, POST, PUT, DELETE."}),"\n",(0,i.jsx)(n.h3,{id:"key-characteristics",children:(0,i.jsx)(n.strong,{children:"Key Characteristics:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"URL endpoints represent resources."}),"\n",(0,i.jsx)(n.li,{children:"Communication via HTTP methods."}),"\n",(0,i.jsx)(n.li,{children:"Data format is typically JSON but can also include XML, plain text, etc."}),"\n",(0,i.jsx)(n.li,{children:"Stateless interactions; each request contains all the necessary information."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advantages",children:(0,i.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Simple and widely adopted."}),"\n",(0,i.jsx)(n.li,{children:"Leverages HTTP caching to improve performance."}),"\n",(0,i.jsx)(n.li,{children:"Language-agnostic and framework-agnostic."}),"\n",(0,i.jsx)(n.li,{children:"Suitable for simple CRUD operations."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages",children:(0,i.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Over-fetching and under-fetching issues (clients often receive more or less data than needed)."}),"\n",(0,i.jsx)(n.li,{children:"Changes in API versions require maintaining multiple endpoints."}),"\n",(0,i.jsx)(n.li,{children:"Limited flexibility in requesting specific data."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-rest",children:(0,i.jsx)(n.strong,{children:"When to Use REST:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Applications with well-defined and stable resources (e.g., blog posts, user profiles)."}),"\n",(0,i.jsx)(n.li,{children:"Systems requiring simple CRUD operations."}),"\n",(0,i.jsx)(n.li,{children:"When caching is critical for performance."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"graphql",children:(0,i.jsx)(n.strong,{children:"GraphQL"})}),"\n",(0,i.jsx)(n.h3,{id:"what-it-is-1",children:(0,i.jsx)(n.strong,{children:"What It Is:"})}),"\n",(0,i.jsx)(n.p,{children:"A query language and runtime for APIs that allows clients to request exactly the data they need."}),"\n",(0,i.jsx)(n.h3,{id:"key-characteristics-1",children:(0,i.jsx)(n.strong,{children:"Key Characteristics:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Single endpoint (e.g., ",(0,i.jsx)(n.code,{children:"/graphql"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Clients define the structure of the response."}),"\n",(0,i.jsx)(n.li,{children:"Strongly typed schema (SDL - Schema Definition Language)."}),"\n",(0,i.jsx)(n.li,{children:"Supports queries, mutations, and subscriptions."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advantages-1",children:(0,i.jsx)(n.strong,{children:"Advantages:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"No over-fetching or under-fetching; clients get precisely what they request."}),"\n",(0,i.jsx)(n.li,{children:"Flexible and efficient for evolving APIs."}),"\n",(0,i.jsx)(n.li,{children:"Built-in introspection and documentation."}),"\n",(0,i.jsx)(n.li,{children:"Reduces the number of requests for complex data structures."}),"\n",(0,i.jsx)(n.li,{children:"Supports real-time updates via subscriptions."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disadvantages-1",children:(0,i.jsx)(n.strong,{children:"Disadvantages:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Complexity in setup and maintenance."}),"\n",(0,i.jsx)(n.li,{children:"Overhead of query parsing and execution."}),"\n",(0,i.jsx)(n.li,{children:"Challenges with caching due to dynamic queries."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-graphql",children:(0,i.jsx)(n.strong,{children:"When to Use GraphQL:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Applications with complex data relationships (e.g., social media, dashboards)."}),"\n",(0,i.jsx)(n.li,{children:"When front-end developers need more control over the API."}),"\n",(0,i.jsx)(n.li,{children:"Rapidly evolving systems with frequent changes to data requirements."}),"\n",(0,i.jsx)(n.li,{children:"Scenarios requiring real-time data updates."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"comparison-table",children:(0,i.jsx)(n.strong,{children:"Comparison Table"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Feature"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"REST"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"GraphQL"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Endpoint Structure"})}),(0,i.jsx)(n.td,{children:"Multiple endpoints for resources"}),(0,i.jsxs)(n.td,{children:["Single endpoint (",(0,i.jsx)(n.code,{children:"/graphql"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Data Fetching"})}),(0,i.jsx)(n.td,{children:"Over-fetching or under-fetching possible"}),(0,i.jsx)(n.td,{children:"Fetch exactly what you need"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Real-Time Updates"})}),(0,i.jsx)(n.td,{children:"Requires custom implementation (e.g., WebSockets)"}),(0,i.jsx)(n.td,{children:"Supported via subscriptions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Caching"})}),(0,i.jsx)(n.td,{children:"Simple with HTTP caching"}),(0,i.jsx)(n.td,{children:"More complex due to dynamic queries"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Tooling"})}),(0,i.jsx)(n.td,{children:"Mature tools like Postman"}),(0,i.jsx)(n.td,{children:"GraphQL playground, Apollo DevTools"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ease of Setup"})}),(0,i.jsx)(n.td,{children:"Easier and faster"}),(0,i.jsx)(n.td,{children:"More complex, requires schema design"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Use Cases"})}),(0,i.jsx)(n.td,{children:"CRUD-heavy applications"}),(0,i.jsx)(n.td,{children:"Complex, flexible, or real-time applications"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-which",children:(0,i.jsx)(n.strong,{children:"When to Use Which?"})}),"\n",(0,i.jsxs)(n.h3,{id:"use-rest-when",children:["Use ",(0,i.jsx)(n.strong,{children:"REST"})," When:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Your API involves simple CRUD operations."}),"\n",(0,i.jsx)(n.li,{children:"Performance can be improved with HTTP caching."}),"\n",(0,i.jsx)(n.li,{children:"The system is already using REST and doesn't require advanced features."}),"\n",(0,i.jsx)(n.li,{children:"You need quick implementation with minimal complexity."}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"use-graphql-when",children:["Use ",(0,i.jsx)(n.strong,{children:"GraphQL"})," When:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You want precise control over the data fetched."}),"\n",(0,i.jsx)(n.li,{children:"Your application has complex or nested data relationships."}),"\n",(0,i.jsx)(n.li,{children:"There are frequent changes to the front-end's data requirements."}),"\n",(0,i.jsx)(n.li,{children:"Real-time features like live updates or subscriptions are needed."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"rest-and-graphql-in-the-same-system",children:(0,i.jsx)(n.strong,{children:"REST and GraphQL in the Same System"})}),"\n",(0,i.jsx)(n.p,{children:"It is possible to use both REST and GraphQL in the same system:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use REST for public APIs where simplicity and performance matter."}),"\n",(0,i.jsx)(n.li,{children:"Use GraphQL for internal APIs or client-facing systems requiring flexibility and customizability."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"This cheatsheet provides a comprehensive overview to help you decide between REST and GraphQL for your frontend system design. Let me know if you need additional details or examples!"})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);