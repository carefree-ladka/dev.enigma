"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5353],{5457:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});var o=r(4848),i=r(8453);const s={},a="Docker Basics for Spring Boot Applications",t={id:"Java/Docker Basics for Spring Boot Applications",title:"Docker Basics for Spring Boot Applications",description:"What is Docker?",source:"@site/docs/Java/Docker Basics for Spring Boot Applications.mdx",sourceDirName:"Java",slug:"/Java/Docker Basics for Spring Boot Applications",permalink:"/js.enigma/docs/Java/Docker Basics for Spring Boot Applications",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Docker Basics for Spring Boot Applications.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Complete SQL & MySQL Guide for Java Developers",permalink:"/js.enigma/docs/Java/Complete SQL & MySQL"},next:{title:"GitHub Actions + Docker CI/CD Pipeline for Spring Boot",permalink:"/js.enigma/docs/Java/GitHub Actions + Docker CICD Pipeline for Spring Boot"}},c={},l=[{value:"What is Docker?",id:"what-is-docker",level:2},{value:"Core Docker Concepts",id:"core-docker-concepts",level:2},{value:"Images",id:"images",level:3},{value:"Containers",id:"containers",level:3},{value:"Dockerfile",id:"dockerfile",level:3},{value:"Essential Dockerfile for Spring Boot",id:"essential-dockerfile-for-spring-boot",level:2},{value:"Basic Dockerfile Structure",id:"basic-dockerfile-structure",level:3},{value:"Multi-Stage Build Dockerfile (Recommended)",id:"multi-stage-build-dockerfile-recommended",level:3},{value:"Optimized Dockerfile with Layers",id:"optimized-dockerfile-with-layers",level:3},{value:"Essential Docker Commands",id:"essential-docker-commands",level:2},{value:"Image Operations",id:"image-operations",level:3},{value:"Container Operations",id:"container-operations",level:3},{value:"Development Commands",id:"development-commands",level:3},{value:"Docker Compose for Spring Boot",id:"docker-compose-for-spring-boot",level:2},{value:"Basic docker-compose.yml",id:"basic-docker-composeyml",level:3},{value:"Development-Focused docker-compose.yml",id:"development-focused-docker-composeyml",level:3},{value:"Spring Boot Docker Integration",id:"spring-boot-docker-integration",level:2},{value:"Application Properties for Docker",id:"application-properties-for-docker",level:3},{value:"Maven Configuration",id:"maven-configuration",level:3},{value:"Best Practices for Spring Boot + Docker",id:"best-practices-for-spring-boot--docker",level:2},{value:"1. Security",id:"1-security",level:3},{value:"2. Health Checks",id:"2-health-checks",level:3},{value:"3. Efficient Layering",id:"3-efficient-layering",level:3},{value:"4. Environment-Specific Images",id:"4-environment-specific-images",level:3},{value:"Common Docker Commands for Development",id:"common-docker-commands-for-development",level:2},{value:"Quick Development Workflow",id:"quick-development-workflow",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Docker Networking for Spring Boot",id:"docker-networking-for-spring-boot",level:2},{value:"Creating Networks",id:"creating-networks",level:3},{value:"Service Discovery",id:"service-discovery",level:3},{value:"Volume Management",id:"volume-management",level:2},{value:"Persistent Data",id:"persistent-data",level:3},{value:"Development Volumes",id:"development-volumes",level:3},{value:"Deployment Considerations",id:"deployment-considerations",level:2},{value:"Production Dockerfile",id:"production-dockerfile",level:3},{value:"Environment Variables",id:"environment-variables",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"docker-basics-for-spring-boot-applications",children:"Docker Basics for Spring Boot Applications"})}),"\n",(0,o.jsx)(n.h2,{id:"what-is-docker",children:"What is Docker?"}),"\n",(0,o.jsx)(n.p,{children:"Docker is a containerization platform that packages applications and their dependencies into lightweight, portable containers. For Spring Boot applications, Docker provides consistent deployment environments across development, testing, and production."}),"\n",(0,o.jsx)(n.h2,{id:"core-docker-concepts",children:"Core Docker Concepts"}),"\n",(0,o.jsx)(n.h3,{id:"images",children:"Images"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": Read-only templates used to create containers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Spring Boot Context"}),": Contains your JAR file, JVM, and runtime dependencies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Example"}),": ",(0,o.jsx)(n.code,{children:"openjdk:17-jre-slim"})," as base image for Spring Boot apps"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"containers",children:"Containers"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": Running instances of Docker images"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Spring Boot Context"}),": Your application running in an isolated environment"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lifecycle"}),": Created, started, stopped, and removed"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"dockerfile",children:"Dockerfile"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Definition"}),": Text file with instructions to build Docker images"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": Automates the image creation process"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"essential-dockerfile-for-spring-boot",children:"Essential Dockerfile for Spring Boot"}),"\n",(0,o.jsx)(n.h3,{id:"basic-dockerfile-structure",children:"Basic Dockerfile Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'# Use official OpenJDK runtime as base image\nFROM openjdk:17-jre-slim\n\n# Set working directory inside container\nWORKDIR /app\n\n# Copy the JAR file into container\nCOPY target/myapp-1.0.0.jar app.jar\n\n# Expose the port Spring Boot runs on\nEXPOSE 8080\n\n# Command to run the application\nENTRYPOINT ["java", "-jar", "app.jar"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"multi-stage-build-dockerfile-recommended",children:"Multi-Stage Build Dockerfile (Recommended)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'# Build stage\nFROM maven:3.8.4-openjdk-17 AS build\nWORKDIR /app\nCOPY pom.xml .\nCOPY src ./src\nRUN mvn clean package -DskipTests\n\n# Runtime stage\nFROM openjdk:17-jre-slim\nWORKDIR /app\nCOPY --from=build /app/target/*.jar app.jar\nEXPOSE 8080\nENTRYPOINT ["java", "-jar", "app.jar"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"optimized-dockerfile-with-layers",children:"Optimized Dockerfile with Layers"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'FROM openjdk:17-jre-slim\n\n# Create non-root user for security\nRUN groupadd -r spring && useradd -r -g spring spring\n\nWORKDIR /app\n\n# Copy dependencies first (better caching)\nCOPY target/dependency/ ./\nCOPY target/classes ./classes/\nCOPY target/*.jar app.jar\n\n# Change ownership to spring user\nRUN chown -R spring:spring /app\nUSER spring\n\nEXPOSE 8080\n\nHEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \\\n  CMD curl -f http://localhost:8080/actuator/health || exit 1\n\nENTRYPOINT ["java", "-cp", "/app/classes:/app/dependency/*", "com.example.Application"]\n'})}),"\n",(0,o.jsx)(n.h2,{id:"essential-docker-commands",children:"Essential Docker Commands"}),"\n",(0,o.jsx)(n.h3,{id:"image-operations",children:"Image Operations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Build image from Dockerfile\ndocker build -t myapp:latest .\n\n# List images\ndocker images\n\n# Remove image\ndocker rmi myapp:latest\n\n# Pull image from registry\ndocker pull openjdk:17-jre-slim\n"})}),"\n",(0,o.jsx)(n.h3,{id:"container-operations",children:"Container Operations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run container\ndocker run -p 8080:8080 myapp:latest\n\n# Run in detached mode\ndocker run -d -p 8080:8080 --name myapp-container myapp:latest\n\n# List running containers\ndocker ps\n\n# List all containers\ndocker ps -a\n\n# Stop container\ndocker stop myapp-container\n\n# Remove container\ndocker rm myapp-container\n\n# Execute command in running container\ndocker exec -it myapp-container bash\n"})}),"\n",(0,o.jsx)(n.h3,{id:"development-commands",children:"Development Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Run with environment variables\ndocker run -p 8080:8080 -e SPRING_PROFILES_ACTIVE=dev myapp:latest\n\n# Mount volume for logs\ndocker run -p 8080:8080 -v $(pwd)/logs:/app/logs myapp:latest\n\n# Run with network\ndocker run -p 8080:8080 --network mynetwork myapp:latest\n"})}),"\n",(0,o.jsx)(n.h2,{id:"docker-compose-for-spring-boot",children:"Docker Compose for Spring Boot"}),"\n",(0,o.jsx)(n.h3,{id:"basic-docker-composeyml",children:"Basic docker-compose.yml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "8080:8080"\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n    depends_on:\n      - database\n    networks:\n      - app-network\n\n  database:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - app-network\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  app-network:\n    driver: bridge\n'})}),"\n",(0,o.jsx)(n.h3,{id:"development-focused-docker-composeyml",children:"Development-Focused docker-compose.yml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    ports:\n      - "8080:8080"\n      - "5005:5005"  # Debug port\n    environment:\n      - SPRING_PROFILES_ACTIVE=dev\n      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005\n    volumes:\n      - .:/app\n      - /app/target\n    depends_on:\n      - database\n      - redis\n\n  database:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp_dev\n      POSTGRES_USER: dev\n      POSTGRES_PASSWORD: dev123\n    ports:\n      - "5432:5432"\n    volumes:\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"spring-boot-docker-integration",children:"Spring Boot Docker Integration"}),"\n",(0,o.jsx)(n.h3,{id:"application-properties-for-docker",children:"Application Properties for Docker"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"# application-docker.properties\nspring.datasource.url=jdbc:postgresql://database:5432/myapp\nspring.datasource.username=${DB_USER:user}\nspring.datasource.password=${DB_PASSWORD:password}\n\n# Redis configuration\nspring.redis.host=redis\nspring.redis.port=6379\n\n# Actuator for health checks\nmanagement.endpoints.web.exposure.include=health,info\nmanagement.endpoint.health.show-details=always\n"})}),"\n",(0,o.jsx)(n.h3,{id:"maven-configuration",children:"Maven Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Add to ",(0,o.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<properties>\n    <docker.image.name>myapp</docker.image.name>\n</properties>\n\n<build>\n    <plugins>\n        \x3c!-- Spring Boot Maven Plugin --\x3e\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <image>\n                    <name>${docker.image.name}:${project.version}</name>\n                </image>\n            </configuration>\n        </plugin>\n\n        \x3c!-- Docker Maven Plugin --\x3e\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>dockerfile-maven-plugin</artifactId>\n            <version>1.4.13</version>\n            <configuration>\n                <repository>${docker.image.name}</repository>\n                <tag>${project.version}</tag>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-for-spring-boot--docker",children:"Best Practices for Spring Boot + Docker"}),"\n",(0,o.jsx)(n.h3,{id:"1-security",children:"1. Security"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:"# Use non-root user\nRUN addgroup --system spring && adduser --system spring --ingroup spring\nUSER spring:spring\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-health-checks",children:"2. Health Checks"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:"HEALTHCHECK --interval=30s --timeout=10s --start-period=60s \\\n  CMD curl -f http://localhost:8080/actuator/health || exit 1\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-efficient-layering",children:"3. Efficient Layering"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:"# Copy dependencies separately for better caching\nCOPY target/dependency/ ./dependency/\nCOPY target/classes ./classes/\nCOPY target/*.jar app.jar\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-environment-specific-images",children:"4. Environment-Specific Images"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Development\ndocker build -f Dockerfile.dev -t myapp:dev .\n\n# Production\ndocker build -f Dockerfile.prod -t myapp:prod .\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-docker-commands-for-development",children:"Common Docker Commands for Development"}),"\n",(0,o.jsx)(n.h3,{id:"quick-development-workflow",children:"Quick Development Workflow"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Build and run\ndocker build -t myapp . && docker run -p 8080:8080 myapp\n\n# Using docker-compose\ndocker-compose up --build\n\n# Rebuild and restart specific service\ndocker-compose up --build app\n\n# View logs\ndocker-compose logs -f app\n\n# Clean up\ndocker-compose down\ndocker system prune -f\n"})}),"\n",(0,o.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Run with debug port exposed\ndocker run -p 8080:8080 -p 5005:5005 -e JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005" myapp\n\n# Access container shell\ndocker exec -it container-name bash\n\n# Check logs\ndocker logs container-name -f\n'})}),"\n",(0,o.jsx)(n.h2,{id:"docker-networking-for-spring-boot",children:"Docker Networking for Spring Boot"}),"\n",(0,o.jsx)(n.h3,{id:"creating-networks",children:"Creating Networks"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Create custom network\ndocker network create myapp-network\n\n# Run containers on same network\ndocker run --network myapp-network --name database postgres:13\ndocker run --network myapp-network -p 8080:8080 myapp\n"})}),"\n",(0,o.jsx)(n.h3,{id:"service-discovery",children:"Service Discovery"}),"\n",(0,o.jsx)(n.p,{children:"In docker-compose, services can communicate using service names:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spring.datasource.url=jdbc:postgresql://database:5432/myapp\n"})}),"\n",(0,o.jsx)(n.h2,{id:"volume-management",children:"Volume Management"}),"\n",(0,o.jsx)(n.h3,{id:"persistent-data",children:"Persistent Data"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Create named volume\ndocker volume create myapp-data\n\n# Use volume\ndocker run -v myapp-data:/app/data myapp\n"})}),"\n",(0,o.jsx)(n.h3,{id:"development-volumes",children:"Development Volumes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Mount source code for hot reload\ndocker run -v $(pwd):/app -p 8080:8080 myapp:dev\n"})}),"\n",(0,o.jsx)(n.h2,{id:"deployment-considerations",children:"Deployment Considerations"}),"\n",(0,o.jsx)(n.h3,{id:"production-dockerfile",children:"Production Dockerfile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'FROM openjdk:17-jre-slim\n\n# Security updates\nRUN apt-get update && apt-get upgrade -y && rm -rf /var/lib/apt/lists/*\n\n# Non-root user\nRUN groupadd -r spring && useradd -r -g spring spring\n\nWORKDIR /app\nCOPY --chown=spring:spring target/*.jar app.jar\n\nUSER spring\n\nEXPOSE 8080\n\n# Production JVM options\nENV JAVA_OPTS="-Xms512m -Xmx1024m -XX:+UseG1GC"\n\nENTRYPOINT exec java $JAVA_OPTS -jar app.jar\n'})}),"\n",(0,o.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Production deployment\ndocker run -d \\\n  -p 8080:8080 \\\n  -e SPRING_PROFILES_ACTIVE=prod \\\n  -e DB_HOST=prod-db-host \\\n  -e DB_PASSWORD=secure-password \\\n  --name myapp-prod \\\n  myapp:latest\n"})}),"\n",(0,o.jsx)(n.p,{children:"This guide covers the essential Docker concepts and practical examples needed for developing and deploying Spring Boot applications effectively."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var o=r(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);