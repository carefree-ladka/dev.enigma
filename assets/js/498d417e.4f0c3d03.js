"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[23],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var t=n(96540);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}},58382:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(74848),r=n(28453);const i={},o="Web Communication Protocols",l={id:"Frontend System Design/HTTPProtocols",title:"Web Communication Protocols",description:"1. HTTP (Hypertext Transfer Protocol)",source:"@site/docs/Frontend System Design/HTTPProtocols.mdx",sourceDirName:"Frontend System Design",slug:"/Frontend System Design/HTTPProtocols",permalink:"/dev.enigma/docs/Frontend System Design/HTTPProtocols",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Frontend System Design/HTTPProtocols.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functional and Non-Functional Areas",permalink:"/dev.enigma/docs/Frontend System Design/GenericRequirements"},next:{title:"RADIO Framework Cheatsheet",permalink:"/dev.enigma/docs/Frontend System Design/RADIO"}},d={},c=[{value:"1. HTTP (Hypertext Transfer Protocol)",id:"1-http-hypertext-transfer-protocol",level:2},{value:"<strong>Theory</strong>",id:"theory",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases",level:3},{value:"<strong>Limitations</strong>",id:"limitations",level:3},{value:"2. WebSockets",id:"2-websockets",level:2},{value:"<strong>Theory</strong>",id:"theory-1",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-1",level:3},{value:"<strong>Limitations</strong>",id:"limitations-1",level:3},{value:"3. HTTP Polling",id:"3-http-polling",level:2},{value:"<strong>Theory</strong>",id:"theory-2",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-2",level:3},{value:"<strong>Limitations</strong>",id:"limitations-2",level:3},{value:"4. SSE (Server-Sent Events)",id:"4-sse-server-sent-events",level:2},{value:"<strong>Theory</strong>",id:"theory-3",level:3},{value:"<strong>Use Cases</strong>",id:"use-cases-3",level:3},{value:"<strong>Limitations</strong>",id:"limitations-3",level:3},{value:"<strong>Comparison Table</strong>",id:"comparison-table",level:2},{value:"<strong>When to Use What?</strong>",id:"when-to-use-what",level:2}];function a(e){const s={br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"web-communication-protocols",children:"Web Communication Protocols"})}),"\n",(0,t.jsx)(s.h2,{id:"1-http-hypertext-transfer-protocol",children:"1. HTTP (Hypertext Transfer Protocol)"}),"\n",(0,t.jsx)(s.h3,{id:"theory",children:(0,t.jsx)(s.strong,{children:"Theory"})}),"\n",(0,t.jsxs)(s.p,{children:["HTTP is a ",(0,t.jsx)(s.strong,{children:"request-response"})," protocol where the client (browser) sends a request to the server, and the server responds with the requested data. It is ",(0,t.jsx)(s.strong,{children:"stateless"}),", meaning each request is independent."]}),"\n",(0,t.jsx)(s.h3,{id:"use-cases",children:(0,t.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)(s.p,{children:["\u2705 Static content delivery (HTML, CSS, JS, images, videos).",(0,t.jsx)(s.br,{}),"\n","\u2705 RESTful APIs for client-server communication.",(0,t.jsx)(s.br,{}),"\n","\u2705 CRUD operations (Create, Read, Update, Delete)."]}),"\n",(0,t.jsx)(s.h3,{id:"limitations",children:(0,t.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,t.jsxs)(s.p,{children:["\u274c No real-time updates without polling or websockets.",(0,t.jsx)(s.br,{}),"\n","\u274c Each request establishes a new connection, adding latency."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"2-websockets",children:"2. WebSockets"}),"\n",(0,t.jsx)(s.h3,{id:"theory-1",children:(0,t.jsx)(s.strong,{children:"Theory"})}),"\n",(0,t.jsxs)(s.p,{children:["WebSockets provide a ",(0,t.jsx)(s.strong,{children:"persistent, full-duplex"})," communication channel between the client and server over a single TCP connection. Unlike HTTP, WebSockets enable ",(0,t.jsx)(s.strong,{children:"real-time bidirectional"})," communication."]}),"\n",(0,t.jsx)(s.h3,{id:"use-cases-1",children:(0,t.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)(s.p,{children:["\u2705 Chat applications (Slack, WhatsApp, Messenger).",(0,t.jsx)(s.br,{}),"\n","\u2705 Live notifications and real-time stock market updates.",(0,t.jsx)(s.br,{}),"\n","\u2705 Multiplayer gaming (instant interactions between players).",(0,t.jsx)(s.br,{}),"\n","\u2705 Collaborative tools (Google Docs-style live editing).",(0,t.jsx)(s.br,{}),"\n","\u2705 Video/audio streaming."]}),"\n",(0,t.jsx)(s.h3,{id:"limitations-1",children:(0,t.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,t.jsxs)(s.p,{children:["\u274c Not ideal for one-time or infrequent updates.",(0,t.jsx)(s.br,{}),"\n","\u274c Requires more server resources due to persistent connections.",(0,t.jsx)(s.br,{}),"\n","\u274c WebSocket connections may be blocked by certain firewalls or proxies."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"3-http-polling",children:"3. HTTP Polling"}),"\n",(0,t.jsx)(s.h3,{id:"theory-2",children:(0,t.jsx)(s.strong,{children:"Theory"})}),"\n",(0,t.jsxs)(s.p,{children:["HTTP Polling is a technique where the client ",(0,t.jsx)(s.strong,{children:"periodically sends requests"})," to the server to check for updates. The server responds with the latest data (if any)."]}),"\n",(0,t.jsx)(s.h3,{id:"use-cases-2",children:(0,t.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)(s.p,{children:["\u2705 When WebSockets are not supported but real-time updates are needed.",(0,t.jsx)(s.br,{}),"\n","\u2705 Less frequent updates (e.g., refreshing a dashboard every 30 seconds).",(0,t.jsx)(s.br,{}),"\n","\u2705 Environments where long-lived connections are not feasible."]}),"\n",(0,t.jsx)(s.h3,{id:"limitations-2",children:(0,t.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,t.jsxs)(s.p,{children:["\u274c Higher server load due to frequent requests.",(0,t.jsx)(s.br,{}),"\n","\u274c Increased latency since updates arrive only on the next request cycle.",(0,t.jsx)(s.br,{}),"\n","\u274c Inefficient for high-frequency real-time data."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"4-sse-server-sent-events",children:"4. SSE (Server-Sent Events)"}),"\n",(0,t.jsx)(s.h3,{id:"theory-3",children:(0,t.jsx)(s.strong,{children:"Theory"})}),"\n",(0,t.jsxs)(s.p,{children:["SSE is a ",(0,t.jsx)(s.strong,{children:"one-way communication"})," method where the server pushes updates to the client over an HTTP connection. The connection remains open, and the server sends data when available."]}),"\n",(0,t.jsx)(s.h3,{id:"use-cases-3",children:(0,t.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)(s.p,{children:["\u2705 Live feeds (news updates, sports scores).",(0,t.jsx)(s.br,{}),"\n","\u2705 Stock market updates where only the client needs to receive data.",(0,t.jsx)(s.br,{}),"\n","\u2705 Real-time notifications that don\u2019t require two-way communication.",(0,t.jsx)(s.br,{}),"\n","\u2705 Realtime analytics dashboards."]}),"\n",(0,t.jsx)(s.h3,{id:"limitations-3",children:(0,t.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,t.jsxs)(s.p,{children:["\u274c Only supports server-to-client communication (not bidirectional).",(0,t.jsx)(s.br,{}),"\n","\u274c Limited browser support (mainly works well in modern browsers).",(0,t.jsx)(s.br,{}),"\n","\u274c Less scalable compared to WebSockets for very high concurrency."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"comparison-table",children:(0,t.jsx)(s.strong,{children:"Comparison Table"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Feature"}),(0,t.jsx)(s.th,{children:"HTTP"}),(0,t.jsx)(s.th,{children:"WebSockets"}),(0,t.jsx)(s.th,{children:"HTTP Polling"}),(0,t.jsx)(s.th,{children:"SSE"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Real-time"})}),(0,t.jsx)(s.td,{children:"\u274c No"}),(0,t.jsx)(s.td,{children:"\u2705 Yes"}),(0,t.jsx)(s.td,{children:"\u26a0\ufe0f Delayed"}),(0,t.jsx)(s.td,{children:"\u2705 Yes (one-way)"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Bidirectional"})}),(0,t.jsx)(s.td,{children:"\u274c No"}),(0,t.jsx)(s.td,{children:"\u2705 Yes"}),(0,t.jsx)(s.td,{children:"\u274c No"}),(0,t.jsx)(s.td,{children:"\u274c No"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Efficiency"})}),(0,t.jsx)(s.td,{children:"\u26a0\ufe0f Medium"}),(0,t.jsx)(s.td,{children:"\u2705 High"}),(0,t.jsx)(s.td,{children:"\u274c Low (high overhead)"}),(0,t.jsx)(s.td,{children:"\u2705 High"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Use Case"})}),(0,t.jsx)(s.td,{children:"Static content, APIs"}),(0,t.jsx)(s.td,{children:"Chat, notifications, games"}),(0,t.jsx)(s.td,{children:"Periodic updates"}),(0,t.jsx)(s.td,{children:"Live updates"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Latency"})}),(0,t.jsx)(s.td,{children:"High"}),(0,t.jsx)(s.td,{children:"Low"}),(0,t.jsx)(s.td,{children:"Medium-High"}),(0,t.jsx)(s.td,{children:"Low"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Scalability"})}),(0,t.jsx)(s.td,{children:"High"}),(0,t.jsx)(s.td,{children:"Medium"}),(0,t.jsx)(s.td,{children:"Low"}),(0,t.jsx)(s.td,{children:"Medium"})]})]})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"when-to-use-what",children:(0,t.jsx)(s.strong,{children:"When to Use What?"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Use HTTP"})," for standard web page requests and API calls."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Use WebSockets"})," for real-time, bidirectional communication like chat apps and multiplayer games."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Use HTTP Polling"})," when WebSockets are not an option and occasional updates are needed."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Use SSE"})," for real-time server-to-client updates where bidirectional communication is unnecessary."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);