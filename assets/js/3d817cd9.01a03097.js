"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7248],{1674:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=r(4848),t=r(8453);const s={},a="Median of Two Sorted Arrays",o={id:"DSA/MedianOfTwoSortedArrays",title:"Median of Two Sorted Arrays",description:"Core Concepts",source:"@site/docs/DSA/MedianOfTwoSortedArrays.mdx",sourceDirName:"DSA",slug:"/DSA/MedianOfTwoSortedArrays",permalink:"/js.enigma/docs/DSA/MedianOfTwoSortedArrays",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/MedianOfTwoSortedArrays.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Linked List",permalink:"/js.enigma/docs/DSA/LinkedList"},next:{title:"Merge Sort",permalink:"/js.enigma/docs/DSA/MergeSort"}},l={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Definition of Median",id:"1-definition-of-median",level:3},{value:"2. Key Properties",id:"2-key-properties",level:3},{value:"Approaches",id:"approaches",level:2},{value:"1. Merge and Find (O(n+m))",id:"1-merge-and-find-onm",level:3},{value:"2. Binary Search (Optimal O(log(min(n,m))))",id:"2-binary-search-optimal-ologminnm",level:3},{value:"Common Patterns and Edge Cases",id:"common-patterns-and-edge-cases",level:2},{value:"1. Edge Cases to Handle",id:"1-edge-cases-to-handle",level:3},{value:"2. Partition Property Checks",id:"2-partition-property-checks",level:3},{value:"Optimization Techniques",id:"optimization-techniques",level:2},{value:"1. Ensure Working with Shorter Array",id:"1-ensure-working-with-shorter-array",level:3},{value:"2. Early Return for Special Cases",id:"2-early-return-for-special-cases",level:3},{value:"Common Mistakes to Avoid",id:"common-mistakes-to-avoid",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Problem Variations",id:"problem-variations",level:2},{value:"1. K-th Element in Two Sorted Arrays",id:"1-k-th-element-in-two-sorted-arrays",level:3},{value:"2. Median of Three Sorted Arrays",id:"2-median-of-three-sorted-arrays",level:3}];function h(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"median-of-two-sorted-arrays",children:"Median of Two Sorted Arrays"})}),"\n",(0,i.jsx)(e.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(e.h3,{id:"1-definition-of-median",children:"1. Definition of Median"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// For array of length n:\r\n// If n is odd: median = array[n/2]\r\n// If n is even: median = (array[n/2 - 1] + array[n/2]) / 2\r\n\r\n// Examples:\r\n// [1,2,3] => 2\r\n// [1,2,3,4] => (2 + 3) / 2 = 2.5\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-key-properties",children:"2. Key Properties"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["For sorted arrays A and B:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"All elements in left partition \u2264 all elements in right partition"}),"\n",(0,i.jsx)(e.li,{children:"Left partition size = (n1 + n2 + 1) / 2 for odd total length"}),"\n",(0,i.jsx)(e.li,{children:"Left partition size = (n1 + n2) / 2 for even total length"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"approaches",children:"Approaches"}),"\n",(0,i.jsx)(e.h3,{id:"1-merge-and-find-onm",children:"1. Merge and Find (O(n+m))"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findMedianSortedArrays_merge(nums1, nums2) {\r\n    const merged = [];\r\n    let i = 0, j = 0;\r\n    \r\n    // Merge arrays\r\n    while (i < nums1.length && j < nums2.length) {\r\n        if (nums1[i] <= nums2[j]) {\r\n            merged.push(nums1[i++]);\r\n        } else {\r\n            merged.push(nums2[j++]);\r\n        }\r\n    }\r\n    \r\n    // Add remaining elements\r\n    while (i < nums1.length) merged.push(nums1[i++]);\r\n    while (j < nums2.length) merged.push(nums2[j++]);\r\n    \r\n    const mid = Math.floor(merged.length / 2);\r\n    \r\n    // Return median\r\n    return merged.length % 2 === 0\r\n        ? (merged[mid - 1] + merged[mid]) / 2\r\n        : merged[mid];\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-binary-search-optimal-ologminnm",children:"2. Binary Search (Optimal O(log(min(n,m))))"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findMedianSortedArrays(nums1, nums2) {\r\n    // Ensure nums1 is the shorter array\r\n    if (nums1.length > nums2.length) {\r\n        [nums1, nums2] = [nums2, nums1];\r\n    }\r\n    \r\n    const n1 = nums1.length;\r\n    const n2 = nums2.length;\r\n    const totalLength = n1 + n2;\r\n    const halfLength = Math.floor((totalLength + 1) / 2);\r\n    \r\n    let left = 0;\r\n    let right = n1;\r\n    \r\n    while (left <= right) {\r\n        const partition1 = Math.floor((left + right) / 2);\r\n        const partition2 = halfLength - partition1;\r\n        \r\n        // Find partition elements\r\n        const left1 = partition1 === 0 ? -Infinity : nums1[partition1 - 1];\r\n        const right1 = partition1 === n1 ? Infinity : nums1[partition1];\r\n        const left2 = partition2 === 0 ? -Infinity : nums2[partition2 - 1];\r\n        const right2 = partition2 === n2 ? Infinity : nums2[partition2];\r\n        \r\n        // Check if partition is correct\r\n        if (left1 <= right2 && left2 <= right1) {\r\n            // Found correct partition\r\n            if (totalLength % 2 === 0) {\r\n                return (Math.max(left1, left2) + \r\n                        Math.min(right1, right2)) / 2;\r\n            } else {\r\n                return Math.max(left1, left2);\r\n            }\r\n        } else if (left1 > right2) {\r\n            right = partition1 - 1;\r\n        } else {\r\n            left = partition1 + 1;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"common-patterns-and-edge-cases",children:"Common Patterns and Edge Cases"}),"\n",(0,i.jsx)(e.h3,{id:"1-edge-cases-to-handle",children:"1. Edge Cases to Handle"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Empty arrays\r\nif (nums1.length === 0) {\r\n    const mid = Math.floor(nums2.length / 2);\r\n    return nums2.length % 2 === 0\r\n        ? (nums2[mid - 1] + nums2[mid]) / 2\r\n        : nums2[mid];\r\n}\r\n\r\n// Single element arrays\r\nif (nums1.length === 1 && nums2.length === 1) {\r\n    return (nums1[0] + nums2[0]) / 2;\r\n}\r\n\r\n// Arrays of different lengths\r\n// Already handled in binary search approach\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-partition-property-checks",children:"2. Partition Property Checks"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function isValidPartition(left1, right1, left2, right2) {\r\n    return left1 <= right2 && left2 <= right1;\r\n}\r\n\r\nfunction getPartitionElements(nums1, nums2, partition1, partition2) {\r\n    const left1 = partition1 === 0 ? -Infinity : nums1[partition1 - 1];\r\n    const right1 = partition1 === nums1.length ? Infinity : nums1[partition1];\r\n    const left2 = partition2 === 0 ? -Infinity : nums2[partition2 - 1];\r\n    const right2 = partition2 === nums2.length ? Infinity : nums2[partition2];\r\n    \r\n    return { left1, right1, left2, right2 };\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"optimization-techniques",children:"Optimization Techniques"}),"\n",(0,i.jsx)(e.h3,{id:"1-ensure-working-with-shorter-array",children:"1. Ensure Working with Shorter Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"if (nums1.length > nums2.length) {\r\n    return findMedianSortedArrays(nums2, nums1);\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-early-return-for-special-cases",children:"2. Early Return for Special Cases"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findMedianSortedArrays_optimized(nums1, nums2) {\r\n    // Handle empty arrays\r\n    if (nums1.length === 0) {\r\n        return getMedian(nums2);\r\n    }\r\n    if (nums2.length === 0) {\r\n        return getMedian(nums1);\r\n    }\r\n    \r\n    // Handle non-overlapping arrays\r\n    if (nums1[nums1.length - 1] <= nums2[0]) {\r\n        return getMedianOfNonOverlapping(nums1, nums2);\r\n    }\r\n    if (nums2[nums2.length - 1] <= nums1[0]) {\r\n        return getMedianOfNonOverlapping(nums2, nums1);\r\n    }\r\n    \r\n    // Continue with binary search...\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"common-mistakes-to-avoid",children:"Common Mistakes to Avoid"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Not handling array bounds correctly"}),"\n",(0,i.jsx)(e.li,{children:"Incorrect partition size calculation"}),"\n",(0,i.jsx)(e.li,{children:"Not considering even/odd total length"}),"\n",(0,i.jsx)(e.li,{children:"Not handling -Infinity/Infinity for edge partitions"}),"\n",(0,i.jsx)(e.li,{children:"Using wrong comparison operators for partition validation"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Use binary search approach for optimal performance"}),"\n",(0,i.jsx)(e.li,{children:"Avoid creating merged array for space efficiency"}),"\n",(0,i.jsx)(e.li,{children:"Work with shorter array in binary search"}),"\n",(0,i.jsx)(e.li,{children:"Use bit shifting for division operations"}),"\n",(0,i.jsx)(e.li,{children:"Consider integer overflow in large arrays"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"problem-variations",children:"Problem Variations"}),"\n",(0,i.jsx)(e.h3,{id:"1-k-th-element-in-two-sorted-arrays",children:"1. K-th Element in Two Sorted Arrays"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findKthElement(nums1, nums2, k) {\r\n    if (nums1.length > nums2.length) {\r\n        return findKthElement(nums2, nums1, k);\r\n    }\r\n    \r\n    let left = 0;\r\n    let right = Math.min(nums1.length, k);\r\n    \r\n    while (left <= right) {\r\n        const partition1 = Math.floor((left + right) / 2);\r\n        const partition2 = k - partition1;\r\n        \r\n        const left1 = partition1 === 0 ? -Infinity : nums1[partition1 - 1];\r\n        const right1 = partition1 === nums1.length ? Infinity : nums1[partition1];\r\n        const left2 = partition2 === 0 ? -Infinity : nums2[partition2 - 1];\r\n        const right2 = partition2 === nums2.length ? Infinity : nums2[partition2];\r\n        \r\n        if (left1 <= right2 && left2 <= right1) {\r\n            return Math.max(left1, left2);\r\n        } else if (left1 > right2) {\r\n            right = partition1 - 1;\r\n        } else {\r\n            left = partition1 + 1;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-median-of-three-sorted-arrays",children:"2. Median of Three Sorted Arrays"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findMedianOfThree(nums1, nums2, nums3) {\r\n    // Convert to two arrays problem\r\n    const merged = mergeTwoSorted(nums1, nums2);\r\n    return findMedianSortedArrays(merged, nums3);\r\n}\n"})})]})}function c(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var i=r(6540);const t={},s=i.createContext(t);function a(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);