"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5998],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},31962:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=r(74848),t=r(28453);const s={},l="Java 8 Stream Practice Problems",a={id:"Java Interview Guide/Java 8 Stream Practice Problems",title:"Java 8 Stream Practice Problems",description:"Category 1: filter() - Filtering Operations",source:"@site/docs/Java Interview Guide/Java 8 Stream Practice Problems.mdx",sourceDirName:"Java Interview Guide",slug:"/Java Interview Guide/Java 8 Stream Practice Problems",permalink:"/docs/Java Interview Guide/Java 8 Stream Practice Problems",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java Interview Guide/Java 8 Stream Practice Problems.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How Programs Execute: CPU, RAM & Memory Management",permalink:"/docs/Java Interview Guide/How Programs Execute: CPU, RAM & Memory Management"},next:{title:"Java Backend Developer Interview Questions - 2025",permalink:"/docs/Java Interview Guide/Java Backend Developer Interview Questions - 2025"}},o={},c=[{value:"Category 1: filter() - Filtering Operations",id:"category-1-filter---filtering-operations",level:2},{value:"Category 2: map() - Transformation Operations",id:"category-2-map---transformation-operations",level:2},{value:"Category 3: flatMap() - Flattening Operations",id:"category-3-flatmap---flattening-operations",level:2},{value:"Category 4: distinct() - Removing Duplicates",id:"category-4-distinct---removing-duplicates",level:2},{value:"Category 5: sorted() - Sorting Operations",id:"category-5-sorted---sorting-operations",level:2},{value:"Category 6: limit() &amp; skip() - Pagination Operations",id:"category-6-limit--skip---pagination-operations",level:2},{value:"Category 7: peek() - Debugging Operations",id:"category-7-peek---debugging-operations",level:2},{value:"Category 8: collect() - Collection Operations",id:"category-8-collect---collection-operations",level:2},{value:"Category 9: reduce() - Reduction Operations",id:"category-9-reduce---reduction-operations",level:2},{value:"Category 10: count() - Counting Operations",id:"category-10-count---counting-operations",level:2},{value:"Category 11: anyMatch(), allMatch(), noneMatch() - Matching Operations",id:"category-11-anymatch-allmatch-nonematch---matching-operations",level:2},{value:"Category 12: findFirst() &amp; findAny() - Finding Operations",id:"category-12-findfirst--findany---finding-operations",level:2},{value:"Category 13: min() &amp; max() - Min/Max Operations",id:"category-13-min--max---minmax-operations",level:2},{value:"Category 14: forEach() &amp; forEachOrdered() - Iteration Operations",id:"category-14-foreach--foreachordered---iteration-operations",level:2},{value:"Category 15: toArray() - Array Conversion",id:"category-15-toarray---array-conversion",level:2},{value:"Category 16: Numeric Stream Operations (IntStream, LongStream, DoubleStream)",id:"category-16-numeric-stream-operations-intstream-longstream-doublestream",level:2},{value:"Category 17: Parallel Streams",id:"category-17-parallel-streams",level:2},{value:"Category 18: Optional Operations",id:"category-18-optional-operations",level:2},{value:"Category 19: Collectors Advanced",id:"category-19-collectors-advanced",level:2},{value:"Category 20: Complex Real-World Problems",id:"category-20-complex-real-world-problems",level:2},{value:"Bonus: Interview Favorites (Most Asked)",id:"bonus-interview-favorites-most-asked",level:2},{value:"Practice Tips:",id:"practice-tips",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"java-8-stream-practice-problems",children:"Java 8 Stream Practice Problems"})}),"\n",(0,i.jsx)(n.h2,{id:"category-1-filter---filtering-operations",children:"Category 1: filter() - Filtering Operations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filter Even Numbers"}),": Given a list of integers, filter and return only even numbers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filter Strings by Length"}),": From a list of strings, filter strings that have length greater than 5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filter Employees by Salary"}),": Given a list of Employee objects, filter employees whose salary is greater than 50000."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filter Null Values"}),": Remove all null values from a list of strings."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filter by Multiple Conditions"}),': From a list of products, filter products where price > 100 AND category equals "Electronics".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filter Distinct Prime Numbers"}),": Filter prime numbers from a list and remove duplicates."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-2-map---transformation-operations",children:"Category 2: map() - Transformation Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Convert to Uppercase"}),": Convert all strings in a list to uppercase."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extract Property"}),": From a list of Employee objects, extract and return a list of all employee names."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Square Numbers"}),": Given a list of integers, return a list with each number squared."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"String to Length"}),": Convert a list of strings to a list of their lengths."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object Transformation"}),": Convert a list of Employee objects to EmployeeDTO objects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concatenate Prefix"}),': Add a prefix "Mr. " to all names in a list.']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-3-flatmap---flattening-operations",children:"Category 3: flatMap() - Flattening Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"13",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flatten Nested Lists"}),": Given a list of lists of integers, flatten it to a single list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Split and Flatten"}),": From a list of sentences, split each into words and return all words as a single list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flatten Object Collections"}),": Given a list of Department objects (each containing a list of Employees), get all employees in a single list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Character Stream"}),": Convert a list of strings into a stream of all individual characters."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flatten Optional Values"}),": Given a list of ",(0,i.jsx)(n.code,{children:"Optional<String>"}),", flatten to get all present values."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-4-distinct---removing-duplicates",children:"Category 4: distinct() - Removing Duplicates"}),"\n",(0,i.jsxs)(n.ol,{start:"18",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Remove Duplicate Numbers"}),": From a list of integers with duplicates, return unique values."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unique Employee IDs"}),": From a list of employees, get unique employee IDs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Case-Insensitive Unique Strings"}),": Get unique strings ignoring case sensitivity."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-5-sorted---sorting-operations",children:"Category 5: sorted() - Sorting Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"21",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sort Numbers Ascending"}),": Sort a list of integers in ascending order."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sort Strings Descending"}),": Sort a list of strings in descending order."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sort by Multiple Fields"}),": Sort employees first by department, then by salary within each department."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sort by Custom Comparator"}),": Sort products by price in descending order, then by name alphabetically."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sort with Null Handling"}),": Sort a list of strings where some values might be null (nulls last)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-6-limit--skip---pagination-operations",children:"Category 6: limit() & skip() - Pagination Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"26",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Get First N Elements"}),": Return the first 5 elements from a list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Skip and Take"}),": Skip first 10 elements and take next 5 elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Top 3 Salaries"}),": Get the top 3 highest salaries from employee list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pagination"}),": Implement pagination - get page 3 with page size 10."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-7-peek---debugging-operations",children:"Category 7: peek() - Debugging Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"30",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debug Stream Pipeline"}),": Use peek() to print each element while processing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logging Transformation"}),": Log each element before and after transformation."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-8-collect---collection-operations",children:"Category 8: collect() - Collection Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"32",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collect to List"}),": Convert stream to ArrayList."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collect to Set"}),": Convert stream to HashSet to remove duplicates."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collect to Map"}),": Convert list of employees to a Map with employeeId as key."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Joining Strings"}),": Join all strings in a list with comma separator."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Partitioning"}),": Partition employees into two groups: salary > 50000 and salary ",(0,i.jsx)(n.code,{children:"<="})," 50000."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grouping by Property"}),": Group employees by their department."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grouping with Counting"}),": Count number of employees in each department."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Grouping with Sum"}),": Calculate total salary by department."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-level Grouping"}),": Group employees by department, then by city within each department."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-9-reduce---reduction-operations",children:"Category 9: reduce() - Reduction Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"41",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sum of Numbers"}),": Calculate sum of all integers in a list using reduce."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Product of Numbers"}),": Calculate product of all numbers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Concatenate Strings"}),": Concatenate all strings using reduce."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Maximum"}),": Find maximum number using reduce."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Minimum Salary"}),": Find employee with minimum salary using reduce."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex Reduction"}),": Calculate total price of products after applying 10% discount."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-10-count---counting-operations",children:"Category 10: count() - Counting Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"47",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Count Elements"}),": Count total number of elements in a stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Count After Filter"}),": Count how many employees have salary > 50000."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Count Distinct Values"}),": Count unique values in a list."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-11-anymatch-allmatch-nonematch---matching-operations",children:"Category 11: anyMatch(), allMatch(), noneMatch() - Matching Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"50",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Any Match"}),": Check if any employee has salary > 100000."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"All Match"}),": Check if all products have price > 0."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"None Match"}),": Check if no employee is below 18 years old."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Conditions"}),': Check if any string starts with "A" and has length > 5.']}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-12-findfirst--findany---finding-operations",children:"Category 12: findFirst() & findAny() - Finding Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"54",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find First Element"}),": Get the first element from a stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find First After Filter"}),": Find first employee with salary > 50000."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Any in Parallel"}),": Use findAny() in parallel stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find First Even Number"}),": Find first even number greater than 100."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-13-min--max---minmax-operations",children:"Category 13: min() & max() - Min/Max Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"58",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Maximum Salary"}),": Find employee with maximum salary."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Minimum Length String"}),": Find shortest string in a list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Max Using Custom Comparator"}),": Find oldest employee by date of birth."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-14-foreach--foreachordered---iteration-operations",children:"Category 14: forEach() & forEachOrdered() - Iteration Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"61",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Print All Elements"}),": Print each element in the stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update State"}),": Increase salary of all employees by 10% (use forEach)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ordered Processing"}),": Ensure elements are processed in order using forEachOrdered."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-15-toarray---array-conversion",children:"Category 15: toArray() - Array Conversion"}),"\n",(0,i.jsxs)(n.ol,{start:"64",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Convert to Array"}),": Convert stream of strings to String array."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Convert to Integer Array"}),": Convert list to Integer[] array."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-16-numeric-stream-operations-intstream-longstream-doublestream",children:"Category 16: Numeric Stream Operations (IntStream, LongStream, DoubleStream)"}),"\n",(0,i.jsxs)(n.ol,{start:"66",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sum Using IntStream"}),": Calculate sum using IntStream.sum()."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Average Calculation"}),": Calculate average of numbers using average()."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Range Generation"}),": Generate numbers from 1 to 100 using IntStream.range()."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Statistics"}),": Get max, min, average, sum in one go using summaryStatistics()."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Map to Int"}),": Convert list of strings to IntStream of their lengths and find sum."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-17-parallel-streams",children:"Category 17: Parallel Streams"}),"\n",(0,i.jsxs)(n.ol,{start:"71",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel Processing"}),": Convert sequential stream to parallel and compare performance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel Sum"}),": Calculate sum of large list using parallel stream."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread Safety"}),": Demonstrate thread-safety issues with parallel streams."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-18-optional-operations",children:"Category 18: Optional Operations"}),"\n",(0,i.jsxs)(n.ol,{start:"74",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle Empty Stream"}),": Use Optional to handle empty stream results."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional with orElse"}),": Find employee by ID, return default if not found."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional Chaining"}),": Use Optional with map and flatMap."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-19-collectors-advanced",children:"Category 19: Collectors Advanced"}),"\n",(0,i.jsxs)(n.ol,{start:"77",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collectors.toMap with Merge Function"}),": Handle duplicate keys while collecting to map."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Downstream Collectors"}),": Group by department and get max salary in each."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mapping Collector"}),": Group employees by department and collect only their names."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Collector"}),": Create a custom collector to calculate median."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"category-20-complex-real-world-problems",children:"Category 20: Complex Real-World Problems"}),"\n",(0,i.jsxs)(n.ol,{start:"81",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Second Highest Salary"}),": Find second highest salary from employee list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Most Frequent Element"}),": Find the most frequently occurring element in a list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Remove Duplicates Preserve Order"}),": Remove duplicates while maintaining insertion order."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Anagram Grouping"}),": Group strings that are anagrams of each other."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Duplicate Elements"}),": Find all duplicate elements in a list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nth Highest Element"}),": Find nth highest salary (generic solution)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Merge Two Lists"}),": Merge two lists and remove duplicates."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Department with Max Employees"}),": Find department with maximum number of employees."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"String Frequency Map"}),": Create a map of each string and its frequency count."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Employee with Longest Name"}),": Find employee with the longest name in each department."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cumulative Sum"}),": Create a list of cumulative sums from original list."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intersection of Lists"}),": Find common elements between two lists."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Partition and Transform"}),": Partition list into two groups and apply different transformations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reverse Each Word"}),": Reverse each word in a sentence while maintaining word order."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find Missing Numbers"}),": Find missing numbers in a sequence from 1 to N."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Age Group Classification"}),": Classify employees into age groups (18-30, 31-50, 51+)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Calculate Percentile"}),": Calculate 90th percentile of salaries."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rolling Average"}),": Calculate rolling average of last 3 elements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pair Sum Target"}),": Find pairs of numbers that sum to a target value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hierarchical Grouping"}),": Create hierarchical grouping: Country -> State -> City -> Employees."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"bonus-interview-favorites-most-asked",children:"Bonus: Interview Favorites (Most Asked)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Find duplicate elements in a list"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Second/Nth highest salary"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Group employees by department and count"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Convert list of objects to map"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Remove duplicates while preserving order"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Find first non-repeated character"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Sort map by values"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Flat map nested structures"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Partition based on predicate"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Calculate running total/cumulative sum"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"practice-tips",children:"Practice Tips:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Start with basic operations (filter, map, collect)"}),"\n",(0,i.jsx)(n.li,{children:"Progress to intermediate (grouping, reducing)"}),"\n",(0,i.jsx)(n.li,{children:"Master complex scenarios (multi-level grouping, custom collectors)"}),"\n",(0,i.jsx)(n.li,{children:"Practice with Employee, Product, Department sample classes"}),"\n",(0,i.jsx)(n.li,{children:"Time yourself and optimize solutions"}),"\n",(0,i.jsx)(n.li,{children:"Try solving same problem with different Stream approaches"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);