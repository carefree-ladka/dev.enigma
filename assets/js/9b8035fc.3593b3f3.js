"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7359],{6657:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>i});var t=r(4848),c=r(8453);const s={},o="React Hooks Polyfills",a={id:"WebDev/React/HooksPolyfills",title:"React Hooks Polyfills",description:"useState",source:"@site/docs/WebDev/React/HooksPolyfills.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/HooksPolyfills",permalink:"/js.enigma/docs/WebDev/React/HooksPolyfills",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/HooksPolyfills.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React Functional Component Lifecycle",permalink:"/js.enigma/docs/WebDev/React/FunctionalComponentsLifeCycle"},next:{title:"React Lifecycle Methods",permalink:"/js.enigma/docs/WebDev/React/LifeCycleMethods"}},l={},i=[{value:"useState",id:"usestate",level:2},{value:"useEffect",id:"useeffect",level:2},{value:"React App with Custom Hooks",id:"react-app-with-custom-hooks",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"react-hooks-polyfills",children:"React Hooks Polyfills"})}),"\n",(0,t.jsx)(n.h2,{id:"usestate",children:"useState"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:'  const useMyState = (initialValue) => {\r\n    const hookIdTrackerRef = useRef(0); // Component-specific tracker\r\n    const statesRef = useRef([]); // Component-specific state storage\r\n\r\n    const localHookId = hookIdTrackerRef.current++; // Assign unique ID for this hook\r\n\r\n    // Initialize state lazily\r\n    if (statesRef.current[localHookId] === undefined) {\r\n      statesRef.current[localHookId] =\r\n        typeof initialValue === "function" ? initialValue() : initialValue;\r\n    }\r\n\r\n    const currentState = statesRef.current[localHookId]; // Get the current state\r\n\r\n    const [, rerender] = useReducer(() => ({}), {}); // Trigger re-render\r\n\r\n    const setValue = (newValue) => {\r\n      // If newValue is a function, compute based on the current state\r\n      if (typeof newValue === "function") {\r\n        newValue = newValue(statesRef.current[localHookId]);\r\n      }\r\n\r\n      // Check for state change\r\n      const isValueChanged = !Object.is(newValue, statesRef.current[localHookId]);\r\n      if (isValueChanged) {\r\n        statesRef.current[localHookId] = newValue; // Update state\r\n        hookIdTrackerRef.current = 0;\r\n        rerender({}); // Trigger re-render\r\n      }\r\n    };\r\n\r\n    return [currentState, setValue];\r\n  };\n'})}),"\n",(0,t.jsx)(n.h2,{id:"useeffect",children:"useEffect"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:'  const myEffect = (callback, depsArray) => {\r\n    const firstRenderRef = useRef(true); // Tracks if it\'s the first render\r\n    const prevDepsRef = useRef([]); // Stores the previous dependencies\r\n    const cleanupRef = useRef(null); // Stores the cleanup function\r\n\r\n    // Handle first render\r\n    if (firstRenderRef.current) {\r\n      firstRenderRef.current = false;\r\n      cleanupRef.current = callback(); // Call effect\r\n      prevDepsRef.current = depsArray ?? []; // Store dependencies\r\n      return;\r\n    }\r\n\r\n    // Check if dependencies have changed\r\n    const haveDepsChanged =\r\n      !depsArray ||\r\n      depsArray.some((dep, i) => !Object.is(dep, prevDepsRef.current[i]));\r\n\r\n    // Cleanup and invoke callback if dependencies changed\r\n    if (haveDepsChanged) {\r\n      if (typeof cleanupRef.current === "function") {\r\n        cleanupRef.current(); // Call cleanup\r\n      }\r\n      cleanupRef.current = callback(); // Call effect\r\n    }\r\n\r\n    prevDepsRef.current = depsArray || []; // Update dependencies\r\n  };\n'})}),"\n",(0,t.jsx)(n.h2,{id:"react-app-with-custom-hooks",children:"React App with Custom Hooks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:'import { MyReact } from \'./Polyfills\';\r\n\r\nconst Counter = () => {\r\n  const [count, setCount] = MyReact.useMyState(0);\r\n\r\n  //Runs on First render\r\n  //Runs when count changes\r\n  //Clean up doesn\'t run on first render\r\n\r\n  MyReact.myEffect(() => {\r\n    console.log("Effect ran with count:", count);\r\n\r\n    return () => {\r\n      console.log("Cleanup for count:", count);\r\n    };\r\n  }, [count]);\r\n\r\n  //Runs on every render\r\n  MyReact.myEffect(() => {\r\n    console.log("Runs always...");\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount((prev) => prev + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n    <>\r\n      <Counter />\r\n      <Counter />\r\n    </>\r\n  );\r\n}\n'})})]})}function f(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const c={},s=t.createContext(c);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);