"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2794],{4195:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(4848),a=n(8453);const i={},s="Tracking the amount of time a user spends on a site",o={id:"WebDev/JavaScript/TrackTime",title:"Tracking the amount of time a user spends on a site",description:"",source:"@site/docs/WebDev/JavaScript/TrackTime.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/TrackTime",permalink:"/js.enigma/docs/WebDev/JavaScript/TrackTime",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/TrackTime.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Throttle & Debounce",permalink:"/js.enigma/docs/WebDev/JavaScript/ThrottleDebounce"},next:{title:"WeakMap, WeakSet, and Generators",permalink:"/js.enigma/docs/WebDev/JavaScript/WeakSetWeakMapGenerator"}},c={},l=[];function m(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"tracking-the-amount-of-time-a-user-spends-on-a-site",children:"Tracking the amount of time a user spends on a site"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"// Record the time when the page loads\r\nlet startTime = new Date();\r\nlet totalActiveTime = 0; // Total active time spent on the page\r\nlet isPageActive = true; // Track if the page is currently active\r\n\r\n// Function to calculate time spent\r\nfunction calculateTimeSpent() {\r\n    let endTime = new Date();\r\n    let timeSpent = (endTime - startTime) / 1000; // Convert to seconds\r\n\r\n    if (isPageActive) {\r\n        totalActiveTime += timeSpent; // Add to total active time\r\n    }\r\n\r\n    console.log(`Total active time spent on page: ${totalActiveTime} seconds`);\r\n\r\n    // Send the data to your server or analytics tool\r\n    fetch('/track-time-spent', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ timeSpent: totalActiveTime }),\r\n    });\r\n\r\n    // Reset startTime for the next interval\r\n    startTime = new Date();\r\n}\r\n\r\n// Track when the user leaves the page\r\nwindow.addEventListener('beforeunload', calculateTimeSpent);\r\n\r\n// Track when the user switches tabs or minimizes the browser\r\ndocument.addEventListener('visibilitychange', function () {\r\n    if (document.hidden) {\r\n        // Page is hidden (user switched tabs or minimized the browser)\r\n        isPageActive = false;\r\n        calculateTimeSpent(); // Calculate time spent up to this point\r\n    } else {\r\n        // Page is visible again\r\n        isPageActive = true;\r\n        startTime = new Date(); // Reset the start time\r\n    }\r\n});\r\n\r\n// Optional: Track time spent periodically (e.g., every 10 seconds)\r\nsetInterval(calculateTimeSpent, 10000);\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);