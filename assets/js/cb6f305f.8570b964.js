"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9712],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(96540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}},68293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(74848),i=n(28453);const a={},s="Circular Buffer",o={id:"DSA/DSA with JavaScript/CircularBuffer",title:"Circular Buffer",description:"A circular buffer, also known as a ring buffer, is a fixed-size data structure that operates in a circular manner, meaning that once the buffer reaches the end, it wraps around to the beginning. It is commonly used in situations where data is produced and consumed at different rates, such as in streaming data or buffering in IO operations.",source:"@site/docs/DSA/DSA with JavaScript/CircularBuffer.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/CircularBuffer",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/CircularBuffer",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/CircularBuffer.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cantor's Diagonalization and Knuth's Algorithms Guide",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/Cantor"},next:{title:"Combinations and Modular Inverse",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/Combinatrix"}},c={},u=[];function f(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"circular-buffer",children:"Circular Buffer"})}),"\n",(0,r.jsx)(t.p,{children:"A circular buffer, also known as a ring buffer, is a fixed-size data structure that operates in a circular manner, meaning that once the buffer reaches the end, it wraps around to the beginning. It is commonly used in situations where data is produced and consumed at different rates, such as in streaming data or buffering in IO operations."}),"\n",(0,r.jsx)(t.h1,{id:"key-properties-of-a-circular-buffer",children:"Key Properties of a Circular Buffer"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"1. Fixed Size"})," : The buffer has a maximum capacity, and once it is full, new data overwrites the oldest data if no other operation is performed."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"2. Wraparound Behavior"})," : When you reach the end of the buffer, it wraps around to the beginning (first position) to continue writing or reading data."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"3. Efficient Operations"})," : Access to the head and tail (read and write operations) is efficient, typically constant time O(1)."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"4. Two Pointers"}),"\nA circular buffer generally uses two pointers:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Head pointer"}),": Points to the position where data is to be read."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Tail pointer"}),": Points to the position where new data will be written."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"class CircularBuffer {\n  constructor(size) {\n    this.size = size;\n    this.buffer = new Array(size);\n    this.head = 0;\n    this.tail = 0;\n    this.count = 0;\n  }\n\n  // Write data to the buffer\n  write(data) {\n    if (this.count === this.size) {\n      console.log('Buffer is full, overwriting data');\n      this.head = (this.head + 1) % this.size; // Overwrite the oldest data\n    } else {\n      this.count++;\n    }\n    this.buffer[this.tail] = data;\n    this.tail = (this.tail + 1) % this.size;\n  }\n\n  // Read data from the buffer\n  read() {\n    if (this.count === 0) {\n      console.log('Buffer is empty');\n      return null;\n    }\n    const data = this.buffer[this.head];\n    this.head = (this.head + 1) % this.size;\n    this.count--;\n    return data;\n  }\n\n  // Check if the buffer is full\n  isFull() {\n    return this.count === this.size;\n  }\n\n  // Check if the buffer is empty\n  isEmpty() {\n    return this.count === 0;\n  }\n\n  // Peek at the data at the head of the buffer\n  peek() {\n    if (this.count === 0) {\n      console.log('Buffer is empty');\n      return null;\n    }\n    return this.buffer[this.head];\n  }\n}\n\n// Usage\nconst buffer = new CircularBuffer(3);\nbuffer.write(10);\nbuffer.write(20);\nbuffer.write(30);\nconsole.log(buffer.read()); // 10\nbuffer.write(40); // Overwrites 20\nconsole.log(buffer.read()); // 20 (overwritten)\nconsole.log(buffer.peek()); // 30\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}}}]);