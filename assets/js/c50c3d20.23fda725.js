"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9755],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},88302:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var i=s(74848),r=s(28453);const l={},t="Instagram System Design",a={id:"Backend System Design/Instagram System Design",title:"Instagram System Design",description:"Table of Contents",source:"@site/docs/Backend System Design/Instagram System Design.mdx",sourceDirName:"Backend System Design",slug:"/Backend System Design/Instagram System Design",permalink:"/js.enigma/docs/Backend System Design/Instagram System Design",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Backend System Design/Instagram System Design.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Distributed Systems: The Complete Guide",permalink:"/js.enigma/docs/Backend System Design/Distributed Systems: The Complete Guide"},next:{title:"Latency vs Throughput",permalink:"/js.enigma/docs/Backend System Design/Latency vs Throughput"}},o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Requirements (~5 minutes)",id:"requirements-5-minutes",level:2},{value:"1) Functional Requirements",id:"1-functional-requirements",level:3},{value:"2) Non-functional Requirements",id:"2-non-functional-requirements",level:3},{value:"3) Capacity Estimation",id:"3-capacity-estimation",level:3},{value:"Core Entities (~2 minutes)",id:"core-entities-2-minutes",level:2},{value:"API or System Interface (~5 minutes)",id:"api-or-system-interface-5-minutes",level:2},{value:"Protocol Choice: REST",id:"protocol-choice-rest",level:3},{value:"Core API Endpoints",id:"core-api-endpoints",level:3},{value:"Data Flow (~5 minutes)",id:"data-flow-5-minutes",level:2},{value:"Photo Upload Flow",id:"photo-upload-flow",level:3},{value:"Feed Generation Flow",id:"feed-generation-flow",level:3},{value:"High Level Design (~10-15 minutes)",id:"high-level-design-10-15-minutes",level:2},{value:"Design Approach",id:"design-approach",level:3},{value:"System Architecture",id:"system-architecture",level:3},{value:"Detailed Component Design",id:"detailed-component-design",level:3},{value:"Database Schema",id:"database-schema",level:3},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Deep Dives (~10 minutes)",id:"deep-dives-10-minutes",level:2},{value:"1. Feed Generation Strategy",id:"1-feed-generation-strategy",level:3},{value:"2. Image Storage and CDN Strategy",id:"2-image-storage-and-cdn-strategy",level:3},{value:"3. Database Scaling Strategy",id:"3-database-scaling-strategy",level:3},{value:"4. Caching Strategy",id:"4-caching-strategy",level:3},{value:"5. Performance Optimizations",id:"5-performance-optimizations",level:3},{value:"6. Monitoring and Observability",id:"6-monitoring-and-observability",level:3},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"instagram-system-design",children:"Instagram System Design"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#requirements-5-minutes",children:"Requirements (~5 minutes)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#1-functional-requirements",children:"Functional Requirements"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#2-non-functional-requirements",children:"Non-functional Requirements"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#3-capacity-estimation",children:"Capacity Estimation"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#core-entities-2-minutes",children:"Core Entities (~2 minutes)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#api-or-system-interface-5-minutes",children:"API or System Interface (~5 minutes)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#data-flow-5-minutes",children:"Data Flow (~5 minutes)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#high-level-design-10-15-minutes",children:"High Level Design (~10-15 minutes)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#deep-dives-10-minutes",children:"Deep Dives (~10 minutes)"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"requirements-5-minutes",children:"Requirements (~5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"1-functional-requirements",children:"1) Functional Requirements"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Questions Asked:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Q: Should we focus on photo sharing or include Stories/Reels?"}),"\n",(0,i.jsx)(n.li,{children:"A: Focus on core photo sharing - upload, feed, social interactions"}),"\n",(0,i.jsx)(n.li,{children:"Q: Do we need direct messaging?"}),"\n",(0,i.jsx)(n.li,{children:"A: No, focus on public social features"}),"\n",(0,i.jsx)(n.li,{children:"Q: Should we support video uploads?"}),"\n",(0,i.jsx)(n.li,{children:"A: Start with photos only, mention video as future enhancement"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Core Functional Requirements:"})}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Users should be able to upload and share photos with captions"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Users should be able to follow/unfollow other users"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Users should be able to view their personalized feed of photos from followed users"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Users should be able to like and comment on photos"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Users should be able to search for other users"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,i.jsx)(n.strong,{children:"Tip:"})," Focusing on these 5 core features ensures we build a complete working system."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-non-functional-requirements",children:"2) Non-functional Requirements"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"System Quality Requirements:"})}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"High Availability:"})," System should maintain 99.9% uptime (prioritize availability over consistency)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Scale:"})," Support 100M+ daily active users with 50M+ photos uploaded daily"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Performance:"})," Feed loading should be < 300ms, image loading < 500ms"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Storage:"})," Handle petabytes of image data with global distribution"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Consistency:"})," Eventually consistent system (likes/comments can have slight delays)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rationale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Availability over Consistency:"})," Social media users expect the app to always work, slight delays in like counts are acceptable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Low Latency:"})," Critical for user engagement and retention"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Massive Scale:"})," Instagram-level requires handling billions of requests daily"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-capacity-estimation",children:"3) Capacity Estimation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Calculations That Influence Design:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Storage Requirements:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"50M photos/day \xd7 2MB average size = 100TB/day = 36PB/year"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Impact:"})," Requires distributed object storage + CDN strategy"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Read vs Write Ratio:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Assumption: 100:1 read-to-write ratio (users browse much more than post)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Impact:"})," Heavy caching and read replica strategy needed"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"QPS Estimates:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"100M DAU \xd7 50 feed refreshes/day = 5B requests/day \u2248 58K QPS average"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Impact:"})," Need horizontal scaling and load balancing"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"These calculations directly influence our CDN, caching, and database sharding strategies."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-entities-2-minutes",children:"Core Entities (~2 minutes)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Primary Entities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User:"})," Profile information, followers/following counts, authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Post:"})," Photo content, caption, metadata, upload timestamp"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Follow:"})," Relationship between users (follower_id, following_id)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Like:"})," User engagement on posts (user_id, post_id, timestamp)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comment:"})," User-generated content on posts (user_id, post_id, text, timestamp)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Entity Relationships:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User has many Posts (1",":N",")"]}),"\n",(0,i.jsxs)(n.li,{children:["User can follow many Users (N",":M"," via Follow table)"]}),"\n",(0,i.jsxs)(n.li,{children:["Post can have many Likes and Comments (1",":N"," each)"]}),"\n",(0,i.jsxs)(n.li,{children:["User can create many Likes and Comments (1",":N"," each)"]}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"These entities map directly to our API resources and database tables."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"api-or-system-interface-5-minutes",children:"API or System Interface (~5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"protocol-choice-rest",children:"Protocol Choice: REST"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reasoning:"})," Standard HTTP-based CRUD operations fit well with Instagram's resource-based model (posts, users, likes). Mobile apps can easily consume REST APIs."]}),"\n",(0,i.jsx)(n.h3,{id:"core-api-endpoints",children:"Core API Endpoints"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Authentication & Users:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"POST /v1/auth/login\nPOST /v1/auth/register\nGET /v1/users/:userId -> User\nPUT /v1/users/:userId -> User\nGET /v1/users/:userId/posts -> Post[]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Posts & Content:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'POST /v1/posts\nContent-Type: multipart/form-data\nbody: {\n  "image": file,\n  "caption": "Amazing sunset! #photography",\n  "location": "San Francisco, CA"\n}\n-> {post_id, image_url, upload_status}\n\nGET /v1/posts/:postId -> Post\nDELETE /v1/posts/:postId\nGET /v1/posts/:postId/comments -> Comment[]\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Social Features:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'POST /v1/users/:userId/follow\nDELETE /v1/users/:userId/follow\n\nPOST /v1/posts/:postId/like\nDELETE /v1/posts/:postId/like\n\nPOST /v1/posts/:postId/comments\nbody: {"text": "Beautiful photo!"}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Feed & Discovery:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"GET /v1/feed?page=1&limit=20 -> Post[]\nGET /v1/users/search?q=john&limit=10 -> User[]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Security Notes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All endpoints require authentication via JWT token in Authorization header"}),"\n",(0,i.jsx)(n.li,{children:"User ID derived from auth token, never from request body"}),"\n",(0,i.jsx)(n.li,{children:"Rate limiting applied per user (e.g., 100 posts/hour, 1000 likes/hour)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"data-flow-5-minutes",children:"Data Flow (~5 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"photo-upload-flow",children:"Photo Upload Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client Upload:"})," Mobile app uploads photo with metadata"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation:"})," Server validates file type, size (max 10MB), user permissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Image Processing:"})," Resize/compress image into multiple formats (thumbnail, medium, full)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage:"})," Store processed images in object storage (S3) across multiple regions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database:"})," Save post metadata with image URLs to database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feed Update:"})," Asynchronously update followers' feeds via background jobs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response:"})," Return success with post_id and CDN URLs to client"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"feed-generation-flow",children:"Feed Generation Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feed Request:"})," User opens app and requests feed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Check:"})," Check Redis cache for pre-generated feed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Hit:"})," Return cached feed items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Miss:"})," Query database for posts from followed users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ranking:"})," Apply feed ranking algorithm (recency, engagement, user preferences)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Update:"})," Store generated feed in cache with TTL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response:"})," Return ranked feed with CDN image URLs"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"high-level-design-10-15-minutes",children:"High Level Design (~10-15 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"design-approach",children:"Design Approach"}),"\n",(0,i.jsx)(n.p,{children:"Building the architecture endpoint by endpoint to ensure we satisfy all functional requirements:"}),"\n",(0,i.jsx)(n.h3,{id:"system-architecture",children:"System Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[Mobile Apps] -> [CDN (CloudFront)] -> [Load Balancer (ALB)]\n                                            |\n                                      [API Gateway]\n                                            |\n                    +-------------------+---+-------------------+\n                    |                   |   |                   |\n              [User Service]    [Post Service]  [Feed Service]  [Notification Service]\n                    |                   |   |                   |\n                    |                   |   |                   |\n              [User Database]   [Post Database]  [Feed Cache]   [Message Queue]\n               (PostgreSQL)     (PostgreSQL)     (Redis)        (SQS/RabbitMQ)\n                    |                   |\n                    +-------+-----------+\n                            |\n                    [Follow Database]\n                     (PostgreSQL)\n                            |\n                    [Media Storage]\n                        (S3 + CDN)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"detailed-component-design",children:"Detailed Component Design"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. POST /v1/posts (Photo Upload)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client"})," \u2192 ",(0,i.jsx)(n.strong,{children:"Load Balancer"})," \u2192 ",(0,i.jsx)(n.strong,{children:"API Gateway"})," \u2192 ",(0,i.jsx)(n.strong,{children:"Post Service"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Post Service"})," validates and processes image"]}),"\n",(0,i.jsxs)(n.li,{children:["Store image in ",(0,i.jsx)(n.strong,{children:"S3"}),", metadata in ",(0,i.jsx)(n.strong,{children:"Post Database"})]}),"\n",(0,i.jsxs)(n.li,{children:["Trigger async ",(0,i.jsx)(n.strong,{children:"Feed Service"})," to update followers' feeds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notification Service"})," sends push notifications to followers"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. GET /v1/feed (Feed Generation)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client"})," \u2192 ",(0,i.jsx)(n.strong,{children:"Load Balancer"})," \u2192 ",(0,i.jsx)(n.strong,{children:"API Gateway"})," \u2192 ",(0,i.jsx)(n.strong,{children:"Feed Service"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feed Service"})," checks ",(0,i.jsx)(n.strong,{children:"Redis Cache"})," first"]}),"\n",(0,i.jsxs)(n.li,{children:["On cache miss: Query ",(0,i.jsx)(n.strong,{children:"Follow Database"})," + ",(0,i.jsx)(n.strong,{children:"Post Database"})]}),"\n",(0,i.jsx)(n.li,{children:"Apply ranking algorithm and cache result"}),"\n",(0,i.jsxs)(n.li,{children:["Return posts with ",(0,i.jsx)(n.strong,{children:"CDN URLs"})," for images"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["3. POST /v1/users/",":userId","/follow"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client"})," \u2192 ",(0,i.jsx)(n.strong,{children:"API Gateway"})," \u2192 ",(0,i.jsx)(n.strong,{children:"User Service"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Service"})," updates ",(0,i.jsx)(n.strong,{children:"Follow Database"})]}),"\n",(0,i.jsxs)(n.li,{children:["Invalidate follower's feed cache in ",(0,i.jsx)(n.strong,{children:"Redis"})]}),"\n",(0,i.jsx)(n.li,{children:"Update follower/following counts"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Users Table:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"users:\n- id (UUID, Primary Key)\n- username (VARCHAR, UNIQUE)\n- email (VARCHAR, UNIQUE)\n- profile_image_url (VARCHAR)\n- followers_count (INT, denormalized)\n- following_count (INT, denormalized)\n- created_at (TIMESTAMP)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Posts Table:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"posts:\n- id (UUID, Primary Key)\n- user_id (UUID, Foreign Key \u2192 users.id)\n- image_url (VARCHAR) -- CDN URL\n- thumbnail_url (VARCHAR) -- CDN URL\n- caption (TEXT)\n- location (VARCHAR)\n- likes_count (INT, denormalized)\n- comments_count (INT, denormalized)\n- created_at (TIMESTAMP)\n- updated_at (TIMESTAMP)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Follows Table:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"follows:\n- follower_id (UUID, Foreign Key \u2192 users.id)\n- following_id (UUID, Foreign Key \u2192 users.id)\n- created_at (TIMESTAMP)\n- PRIMARY KEY (follower_id, following_id)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Likes Table:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"likes:\n- user_id (UUID, Foreign Key \u2192 users.id)\n- post_id (UUID, Foreign Key \u2192 posts.id)\n- created_at (TIMESTAMP)\n- PRIMARY KEY (user_id, post_id)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Comments Table:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"comments:\n- id (UUID, Primary Key)\n- user_id (UUID, Foreign Key \u2192 users.id)\n- post_id (UUID, Foreign Key \u2192 users.id)\n- text (TEXT)\n- created_at (TIMESTAMP)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Application:"})," Node.js/Python microservices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database:"})," PostgreSQL for structured data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache:"})," Redis for feed caching and session storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage:"})," AWS S3 for image storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CDN:"})," CloudFront for global image delivery"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Queue:"})," AWS SQS for async processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Balancer:"})," AWS Application Load Balancer"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"deep-dives-10-minutes",children:"Deep Dives (~10 minutes)"}),"\n",(0,i.jsx)(n.h3,{id:"1-feed-generation-strategy",children:"1. Feed Generation Strategy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge:"})," With 100M users following hundreds of accounts, generating personalized feeds in real-time is computationally expensive."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution: Hybrid Fanout Approach"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Regular Users (< 1M followers):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fanout-on-Write (Push Model):"})," Pre-generate feeds when posts are created"]}),"\n",(0,i.jsx)(n.li,{children:"When user posts, push to all followers' feed caches"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Fast feed loading (< 100ms)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons:"})," High write amplification, storage cost"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Celebrity Users (> 1M followers):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fanout-on-Read (Pull Model):"})," Generate feed when user requests"]}),"\n",(0,i.jsx)(n.li,{children:"Query celebrity posts in real-time and merge with pre-generated feed"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Lower storage cost, no write amplification"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons:"})," Higher latency for feed generation"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def generate_feed(user_id):\n    # Get pre-computed feed from cache\n    regular_posts = redis.get(f"feed:{user_id}")\n\n    # Get celebrity posts in real-time\n    celebrity_following = get_celebrity_following(user_id)\n    celebrity_posts = get_recent_posts(celebrity_following, limit=10)\n\n    # Merge and rank\n    merged_feed = merge_and_rank(regular_posts, celebrity_posts)\n    return merged_feed[:20]  # Return top 20\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-image-storage-and-cdn-strategy",children:"2. Image Storage and CDN Strategy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge:"})," Storing and serving petabytes of images globally with low latency."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Multi-tier Storage Strategy:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tier 1: Hot Data (Recent posts, < 30 days)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Store in ",(0,i.jsx)(n.strong,{children:"multiple S3 regions"})," with Cross-Region Replication"]}),"\n",(0,i.jsxs)(n.li,{children:["Cached in ",(0,i.jsx)(n.strong,{children:"CloudFront CDN"})," with 24-hour TTL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Image formats:"})," Original, 1080p, 720p, 480p, thumbnail (150px)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tier 2: Warm Data (30 days - 1 year)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"S3 Standard-IA (Infrequent Access)"}),"\n",(0,i.jsx)(n.li,{children:"CDN cache on demand"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tier 3: Cold Data (> 1 year)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"S3 Glacier for cost optimization"}),"\n",(0,i.jsx)(n.li,{children:"Longer retrieval time acceptable for old content"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Image Processing Pipeline:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Upload \u2192 [Lambda] \u2192 [Resize/Compress] \u2192 [S3 Multi-format] \u2192 [CDN Distribution]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-database-scaling-strategy",children:"3. Database Scaling Strategy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Challenge:"})," Handling billions of posts, likes, and relationships."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Horizontal Sharding Strategy:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"User Data Sharding:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Shard by ",(0,i.jsx)(n.code,{children:"user_id"})," hash across 100 database shards"]}),"\n",(0,i.jsx)(n.li,{children:"Co-locate user profile, posts, and social graph data"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Posts Sharding:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Shard function\nshard_id = hash(user_id) % 100\n\n-- Example queries\nSELECT * FROM posts_shard_42 WHERE user_id = 'uuid';\nSELECT * FROM follows_shard_42 WHERE follower_id = 'uuid';\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Read Scaling:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"3 read replicas"})," per shard for read-heavy workload"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection pooling"})," to manage database connections efficiently"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Indexing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Critical indexes for performance\nCREATE INDEX idx_posts_user_created ON posts(user_id, created_at DESC);\nCREATE INDEX idx_follows_follower ON follows(follower_id);\nCREATE INDEX idx_likes_post ON likes(post_id);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-caching-strategy",children:"4. Caching Strategy"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Multi-level Caching:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"L1: CDN (CloudFront)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cache images and static content globally"}),"\n",(0,i.jsx)(n.li,{children:"24-hour TTL for images, 1-hour for thumbnails"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"L2: Application Cache (Redis)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Feed caching\nredis.setex(f"feed:{user_id}", 300, json.dumps(feed_data))  # 5-min TTL\n\n# User profile caching\nredis.setex(f"user:{user_id}", 1800, json.dumps(user_data))  # 30-min TTL\n\n# Post metadata caching\nredis.setex(f"post:{post_id}", 3600, json.dumps(post_data))  # 1-hour TTL\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"L3: Database Query Cache"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PostgreSQL query result caching"}),"\n",(0,i.jsx)(n.li,{children:"Connection pooling with PgBouncer"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cache Invalidation Strategy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write-through:"})," Update cache when database is updated"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TTL-based:"})," Automatic expiration for eventually consistent data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event-driven:"})," Invalidate specific cache entries on user actions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-performance-optimizations",children:"5. Performance Optimizations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Database Optimizations:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Denormalized counts for performance\nUPDATE users SET followers_count = followers_count + 1 WHERE id = :user_id;\nUPDATE posts SET likes_count = likes_count + 1 WHERE id = :post_id;\n\n-- Async count updates to handle inconsistencies\n-- Background job recalculates accurate counts periodically\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Feed Ranking Algorithm:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def calculate_post_score(post):\n    recency_score = 1.0 / (hours_since_posted + 1)\n    engagement_score = (likes + comments) / max(followers, 1)\n    user_affinity = get_user_interaction_score(viewer_id, post.user_id)\n\n    return 0.5 * recency_score + 0.3 * engagement_score + 0.2 * user_affinity\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6-monitoring-and-observability",children:"6. Monitoring and Observability"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Metrics:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Business:"})," Daily Active Users, Posts per User, Feed Engagement Rate"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"System:"})," API latency (p95, p99), Error rates, Database connection pools"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Infrastructure:"})," CDN hit rates, Image upload success rates"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Alerting:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Feed loading > 500ms for 5 minutes \u2192 Page on-call"}),"\n",(0,i.jsx)(n.li,{children:"Image upload failure rate > 5% \u2192 Critical alert"}),"\n",(0,i.jsx)(n.li,{children:"Database CPU > 80% \u2192 Auto-scale read replicas"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Distributed Tracing:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Trace requests across microservices (User \u2192 Feed \u2192 Database)"}),"\n",(0,i.jsx)(n.li,{children:"Identify bottlenecks in complex feed generation flow"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"This Instagram design successfully handles the core requirements:"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Functional Requirements Met:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Photo upload/sharing with metadata"}),"\n",(0,i.jsx)(n.li,{children:"User following system"}),"\n",(0,i.jsx)(n.li,{children:"Personalized feed generation"}),"\n",(0,i.jsx)(n.li,{children:"Social interactions (likes, comments)"}),"\n",(0,i.jsx)(n.li,{children:"User search functionality"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Non-functional Requirements Addressed:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scale:"})," Horizontally sharded databases handle 100M+ users"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance:"})," Multi-tier caching achieves < 300ms feed loading"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Availability:"})," Microservices with read replicas provide 99.9% uptime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage:"})," S3 + CDN handles petabytes of image data globally"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Production-Ready Deep Dives:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Hybrid fanout strategy balances performance and cost"}),"\n",(0,i.jsx)(n.li,{children:"Multi-tier storage optimizes for access patterns"}),"\n",(0,i.jsx)(n.li,{children:"Comprehensive caching strategy reduces database load"}),"\n",(0,i.jsx)(n.li,{children:"Monitoring ensures system reliability"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The design scales from thousands to millions of users by leveraging cloud services, proper database sharding, and intelligent caching strategies while maintaining the core user experience that makes Instagram engaging."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);