"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[1074],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(96540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}},33647:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>a,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=s(74848),l=s(28453);const r={},t="Linked List Problems - Comprehensive Guide",o={id:"DSA/DSA Problems/Linked List Problems - Comprehensive Guide",title:"Linked List Problems - Comprehensive Guide",description:"Table of Contents",source:"@site/docs/DSA/DSA Problems/Linked List Problems - Comprehensive Guide.mdx",sourceDirName:"DSA/DSA Problems",slug:"/DSA/DSA Problems/Linked List Problems - Comprehensive Guide",permalink:"/docs/DSA/DSA Problems/Linked List Problems - Comprehensive Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA Problems/Linked List Problems - Comprehensive Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intervals & Line Sweep - Comprehensive Guide",permalink:"/docs/DSA/DSA Problems/Intervals & Line Sweep - Comprehensive Guide"},next:{title:"Sliding Window & Two Pointers - Comprehensive Guide",permalink:"/docs/DSA/DSA Problems/Sliding Window & Two Pointers - Comprehensive Guide"}},d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Basic Operations",id:"1-basic-operations",level:2},{value:"2. Two Pointer Technique",id:"2-two-pointer-technique",level:2},{value:"3. Reversal Problems",id:"3-reversal-problems",level:2},{value:"4. Cycle Detection",id:"4-cycle-detection",level:2},{value:"5. Merge &amp; Sort",id:"5-merge--sort",level:2},{value:"6. Intersection &amp; Connection",id:"6-intersection--connection",level:2},{value:"7. Deletion Problems",id:"7-deletion-problems",level:2},{value:"8. Reordering &amp; Rearrangement",id:"8-reordering--rearrangement",level:2},{value:"9. Partition &amp; Split",id:"9-partition--split",level:2},{value:"10. Doubly Linked List",id:"10-doubly-linked-list",level:2},{value:"11. Complex Manipulation",id:"11-complex-manipulation",level:2},{value:"12. Design Problems",id:"12-design-problems",level:2},{value:"Common Patterns &amp; Techniques",id:"common-patterns--techniques",level:2},{value:"1. <strong>Two Pointer Technique</strong>",id:"1-two-pointer-technique",level:3},{value:"2. <strong>Dummy Head Pattern</strong>",id:"2-dummy-head-pattern",level:3},{value:"3. <strong>Reversal Pattern</strong>",id:"3-reversal-pattern",level:3},{value:"4. <strong>Floyd&#39;s Cycle Detection</strong>",id:"4-floyds-cycle-detection",level:3},{value:"5. <strong>Merge Pattern</strong>",id:"5-merge-pattern",level:3},{value:"6. <strong>Runner Technique</strong>",id:"6-runner-technique",level:3},{value:"Practice Strategy",id:"practice-strategy",level:2},{value:"<strong>Beginner Level</strong> (Start Here)",id:"beginner-level-start-here",level:3},{value:"<strong>Intermediate Level</strong>",id:"intermediate-level",level:3},{value:"<strong>Advanced Level</strong>",id:"advanced-level",level:3},{value:"Key Tips",id:"key-tips",level:2},{value:"Pointer Management",id:"pointer-management",level:3},{value:"Common Edge Cases",id:"common-edge-cases",level:3},{value:"Time Complexity Goals",id:"time-complexity-goals",level:3},{value:"Space Complexity",id:"space-complexity",level:3},{value:"Problem-Solving Approach",id:"problem-solving-approach",level:3},{value:"Essential Templates",id:"essential-templates",level:2},{value:"Template 1: Iterative Reversal",id:"template-1-iterative-reversal",level:3},{value:"Template 2: Two Pointer (Fast/Slow)",id:"template-2-two-pointer-fastslow",level:3},{value:"Template 3: Merge Two Lists",id:"template-3-merge-two-lists",level:3},{value:"Template 4: Cycle Detection",id:"template-4-cycle-detection",level:3},{value:"Interview Preparation Checklist",id:"interview-preparation-checklist",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"linked-list-problems---comprehensive-guide",children:"Linked List Problems - Comprehensive Guide"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#1-basic-operations",children:"Basic Operations"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#2-two-pointer-technique",children:"Two Pointer Technique"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#3-reversal-problems",children:"Reversal Problems"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#4-cycle-detection",children:"Cycle Detection"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#5-merge--sort",children:"Merge & Sort"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#6-intersection--connection",children:"Intersection & Connection"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#7-deletion-problems",children:"Deletion Problems"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#8-reordering--rearrangement",children:"Reordering & Rearrangement"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#9-partition--split",children:"Partition & Split"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#10-doubly-linked-list",children:"Doubly Linked List"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#11-complex-manipulation",children:"Complex Manipulation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#12-design-problems",children:"Design Problems"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-basic-operations",children:"1. Basic Operations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-linked-list/",children:"Reverse Linked List"})})," - Reverse a singly linked list (iterative & recursive)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/middle-of-the-linked-list/",children:"Middle of the Linked List"})})," - Find the middle node using slow-fast pointer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/merge-two-sorted-lists/",children:"Merge Two Sorted Lists"})})," - Merge two sorted linked lists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-linked-list-elements/",children:"Remove Linked List Elements"})})," - Remove all nodes with specific value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/delete-node-in-a-linked-list/",children:"Delete Node in a Linked List"})})," - Delete node when only node reference given"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle/",children:"Linked List Cycle"})})," - Detect if cycle exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-linked-list/",children:"Palindrome Linked List"})})," - Check if linked list is palindrome"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",children:"Intersection of Two Linked Lists"})})," - Find intersection point of two lists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/",children:"Convert Binary Number in a Linked List to Integer"})})," - Convert binary linked list to decimal"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-two-pointer-technique",children:"2. Two Pointer Technique"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/",children:"Remove Nth Node From End of List"})})," - Remove nth node from end in one pass"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/happy-number/",children:"Happy Number"})})," - Use Floyd's cycle detection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-duplicate-number/",children:"Find the Duplicate Number"})})," - Find duplicate using cycle detection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle-ii/",children:"Linked List Cycle II"})})," - Find the start of cycle"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list/",children:"Remove Duplicates from Sorted List"})})," - Remove duplicates from sorted list"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",children:"Remove Duplicates from Sorted List II"})})," - Remove all duplicate nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/",children:"Delete the Middle Node of a Linked List"})})," - Delete middle using two pointers"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-reversal-problems",children:"3. Reversal Problems"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-linked-list/",children:"Reverse Linked List"})})," - Basic reversal (iterative & recursive)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-linked-list-ii/",children:"Reverse Linked List II"})})," - Reverse between positions left and right"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-nodes-in-k-group/",children:"Reverse Nodes in k-Group"})})," - Reverse k nodes at a time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/swap-nodes-in-pairs/",children:"Swap Nodes in Pairs"})})," - Swap every two adjacent nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-nodes-in-even-length-groups/",children:"Reverse Nodes in Even Length Groups"})})," - Reverse nodes in groups based on pattern"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/swapping-nodes-in-a-linked-list/",children:"Swapping Nodes in a Linked List"})})," - Swap kth node from beginning and end"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/reverse-alternate-nodes-in-k-group/",children:"Reverse Alternate K Nodes"})})," - Reverse alternate k groups"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-cycle-detection",children:"4. Cycle Detection"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle/",children:"Linked List Cycle"})})," - Detect cycle using Floyd's algorithm"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle-ii/",children:"Linked List Cycle II"})})," - Return starting node of cycle"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-duplicate-number/",children:"Find the Duplicate Number"})})," - Array treated as linked list"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/happy-number/",children:"Happy Number"})})," - Cycle detection variant"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/circular-linked-list/",children:"Circular Linked List"})})," - Check if list is circular"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/remove-loop-in-linked-list/",children:"Remove Loop in Linked List"})})," - Detect and remove cycle"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-merge--sort",children:"5. Merge & Sort"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/merge-two-sorted-lists/",children:"Merge Two Sorted Lists"})})," - Merge two sorted lists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/merge-k-sorted-lists/",children:"Merge k Sorted Lists"})})," - Merge k sorted linked lists efficiently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/sort-list/",children:"Sort List"})})," - Sort linked list in O(n log n) time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/insertion-sort-list/",children:"Insertion Sort List"})})," - Sort using insertion sort"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/merge-in-between-linked-lists/",children:"Merge In Between Linked Lists"})})," - Merge one list into another between positions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/split-linked-list-in-parts/",children:"Split Linked List in Parts"})})," - Split into k consecutive parts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/merge-nodes-in-between-zeros/",children:"Merge Nodes in Between Zeros"})})," - Merge nodes between zeros"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-intersection--connection",children:"6. Intersection & Connection"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",children:"Intersection of Two Linked Lists"})})," - Find intersection node"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers/",children:"Add Two Numbers"})})," - Add two numbers represented by linked lists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/add-two-numbers-ii/",children:"Add Two Numbers II"})})," - Add when most significant digit is first"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/plus-one-linked-list/",children:"Plus One Linked List"})})," - Add 1 to number represented by list"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/multiply-two-linked-lists/",children:"Multiply Two Numbers Represented by Linked Lists"})})," - Multiply two numbers"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-deletion-problems",children:"7. Deletion Problems"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/delete-node-in-a-linked-list/",children:"Delete Node in a Linked List"})})," - Delete with only node access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-linked-list-elements/",children:"Remove Linked List Elements"})})," - Remove all occurrences of value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/",children:"Remove Nth Node From End of List"})})," - Remove nth from end"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list/",children:"Remove Duplicates from Sorted List"})})," - Keep one copy of duplicates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",children:"Remove Duplicates from Sorted List II"})})," - Remove all duplicates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/",children:"Delete the Middle Node of a Linked List"})})," - Delete middle node"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/",children:"Remove Zero Sum Consecutive Nodes"})})," - Remove nodes that sum to zero"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/delete-n-nodes-after-m-nodes-of-a-linked-list/",children:"Delete N Nodes After M Nodes"})})," - Pattern-based deletion"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-reordering--rearrangement",children:"8. Reordering & Rearrangement"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reorder-list/",children:"Reorder List"})})," - Reorder L0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2026"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/odd-even-linked-list/",children:"Odd Even Linked List"})})," - Group odd and even indexed nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/sort-list/",children:"Sort List"})})," - Sort in O(n log n) time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/insertion-sort-list/",children:"Insertion Sort List"})})," - Insertion sort implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/partition-list/",children:"Partition List"})})," - Partition around value x"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/rotate-list/",children:"Rotate List"})})," - Rotate list to the right by k places"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/swap-nodes-in-pairs/",children:"Swap Nodes in Pairs"})})," - Swap adjacent nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/reverse-alternate-nodes-in-k-group/",children:"Reverse Alternate K Nodes"})})," - Reverse alternate k groups"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/zigzag-linked-list/",children:"Rearrange a Linked List in Zig-Zag Fashion"})})," - Create zig-zag pattern"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"9-partition--split",children:"9. Partition & Split"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/partition-list/",children:"Partition List"})})," - Partition nodes less than x before nodes \u2265 x"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/split-linked-list-in-parts/",children:"Split Linked List in Parts"})})," - Split into k consecutive parts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-linked-list/",children:"Palindrome Linked List"})})," - Check palindrome by splitting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/odd-even-linked-list/",children:"Odd Even Linked List"})})," - Split into odd/even indexed nodes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list/",children:"Separate Even and Odd Nodes"})})," - Segregate by value parity"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"10-doubly-linked-list",children:"10. Doubly Linked List"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/",children:"Flatten a Multilevel Doubly Linked List"})})," - Flatten multilevel list"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/lru-cache/",children:"LRU Cache"})})," - Implement LRU using doubly linked list"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/design-browser-history/",children:"Design Browser History"})})," - Browser back/forward using DLL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/all-oone-data-structure/",children:"All O`one Data Structure"})})," - Support inc/dec/getMax/getMin"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list/",children:"Insert into a Sorted Circular Linked List"})})," - Insert into circular DLL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/",children:"Convert Binary Search Tree to Sorted Doubly Linked List"})})," - BST to DLL conversion"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"11-complex-manipulation",children:"11. Complex Manipulation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/copy-list-with-random-pointer/",children:"Copy List with Random Pointer"})})," - Deep copy with random pointers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/",children:"Flatten a Multilevel Doubly Linked List"})})," - Flatten complex structure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/clone-a-linked-list-with-next-and-random-pointer/",children:"Clone a Linked List with Next and Random Pointer"})})," - Deep copy variant"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reverse-nodes-in-even-length-groups/",children:"Reverse Nodes in Even Length Groups"})})," - Complex reversal pattern"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/",children:"Remove Zero Sum Consecutive Nodes"})})," - Prefix sum approach"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/add-two-polynomials/",children:"Add Two Polynomials Represented as Linked Lists"})})," - Polynomial addition"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/",children:"Flatten Binary Tree to Linked List"})})," - Tree to list conversion"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/design-skiplist/",children:"Design Skiplist"})})," - Implement skiplist data structure"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"12-design-problems",children:"12. Design Problems"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/design-linked-list/",children:"Design Linked List"})})," - Implement singly/doubly linked list from scratch"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/lru-cache/",children:"LRU Cache"})})," - Implement LRU cache"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/lfu-cache/",children:"LFU Cache"})})," - Implement LFU cache"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/design-browser-history/",children:"Design Browser History"})})," - Browser navigation system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/design-skiplist/",children:"Design Skiplist"})})," - Skiplist with search/add/erase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/all-oone-data-structure/",children:"All O`one Data Structure"})})," - O(1) operations data structure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/design-hashmap/",children:"Design HashMap"})})," - HashMap using linked list for chaining"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/implement-queue-using-linked-list/",children:"Implement Queue using Linked List"})})," - Queue implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://practice.geeksforgeeks.org/problems/implement-stack-using-linked-list/",children:"Implement Stack using Linked List"})})," - Stack implementation"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns--techniques",children:"Common Patterns & Techniques"}),"\n",(0,i.jsxs)(n.h3,{id:"1-two-pointer-technique",children:["1. ",(0,i.jsx)(n.strong,{children:"Two Pointer Technique"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow and fast pointer (cycle detection, middle finding)"}),"\n",(0,i.jsx)(n.li,{children:"Two pointers at different speeds"}),"\n",(0,i.jsx)(n.li,{children:"Distance-based pointers (remove nth from end)"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-dummy-head-pattern",children:["2. ",(0,i.jsx)(n.strong,{children:"Dummy Head Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use dummy node to simplify edge cases"}),"\n",(0,i.jsx)(n.li,{children:"Helpful in merge, partition, and deletion problems"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-reversal-pattern",children:["3. ",(0,i.jsx)(n.strong,{children:"Reversal Pattern"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"prev = None\ncurr = head\nwhile curr:\n    next_node = curr.next\n    curr.next = prev\n    prev = curr\n    curr = next_node\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-floyds-cycle-detection",children:["4. ",(0,i.jsx)(n.strong,{children:"Floyd's Cycle Detection"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow pointer moves 1 step"}),"\n",(0,i.jsx)(n.li,{children:"Fast pointer moves 2 steps"}),"\n",(0,i.jsx)(n.li,{children:"If they meet, cycle exists"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"5-merge-pattern",children:["5. ",(0,i.jsx)(n.strong,{children:"Merge Pattern"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use dummy node"}),"\n",(0,i.jsx)(n.li,{children:"Compare values and link"}),"\n",(0,i.jsx)(n.li,{children:"Attach remaining nodes"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"6-runner-technique",children:["6. ",(0,i.jsx)(n.strong,{children:"Runner Technique"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"One pointer runs ahead"}),"\n",(0,i.jsx)(n.li,{children:"Useful for middle finding, cycle detection"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"practice-strategy",children:"Practice Strategy"}),"\n",(0,i.jsxs)(n.h3,{id:"beginner-level-start-here",children:[(0,i.jsx)(n.strong,{children:"Beginner Level"})," (Start Here)"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Basic Operations (Problems 1-9)"}),"\n",(0,i.jsx)(n.li,{children:"Two Pointer Technique (Problems 1-4)"}),"\n",(0,i.jsx)(n.li,{children:"Simple Reversal (Reverse Linked List)"}),"\n",(0,i.jsx)(n.li,{children:"Cycle Detection basics"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),": Master basic traversal, pointer manipulation, and two-pointer technique"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"intermediate-level",children:(0,i.jsx)(n.strong,{children:"Intermediate Level"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Advanced Reversal (Reverse in groups)"}),"\n",(0,i.jsx)(n.li,{children:"Merge & Sort problems"}),"\n",(0,i.jsx)(n.li,{children:"Deletion problems"}),"\n",(0,i.jsx)(n.li,{children:"Reordering & Rearrangement"}),"\n",(0,i.jsx)(n.li,{children:"Partition problems"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),": Handle complex pointer manipulations and multiple operations"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"advanced-level",children:(0,i.jsx)(n.strong,{children:"Advanced Level"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Complex Manipulation (Random pointer, multilevel)"}),"\n",(0,i.jsx)(n.li,{children:"Design Problems (LRU/LFU Cache)"}),"\n",(0,i.jsx)(n.li,{children:"Optimize space and time complexity"}),"\n",(0,i.jsx)(n.li,{children:"Doubly Linked List advanced problems"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),": Solve complex design problems and optimize solutions"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-tips",children:"Key Tips"}),"\n",(0,i.jsx)(n.h3,{id:"pointer-management",children:"Pointer Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always check for ",(0,i.jsx)(n.code,{children:"null"})," pointers"]}),"\n",(0,i.jsx)(n.li,{children:"Draw diagrams for complex problems"}),"\n",(0,i.jsx)(n.li,{children:"Use dummy nodes to handle edge cases"}),"\n",(0,i.jsx)(n.li,{children:"Store next pointer before modifying links"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-edge-cases",children:"Common Edge Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Empty list (head = null)"}),"\n",(0,i.jsx)(n.li,{children:"Single node list"}),"\n",(0,i.jsx)(n.li,{children:"Two node list"}),"\n",(0,i.jsx)(n.li,{children:"Odd vs even length lists"}),"\n",(0,i.jsx)(n.li,{children:"Cycles in the list"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"time-complexity-goals",children:"Time Complexity Goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Traversal: O(n)"}),"\n",(0,i.jsx)(n.li,{children:"Search: O(n)"}),"\n",(0,i.jsx)(n.li,{children:"Insertion: O(1) if position known"}),"\n",(0,i.jsx)(n.li,{children:"Deletion: O(1) if position known"}),"\n",(0,i.jsx)(n.li,{children:"Reversal: O(n)"}),"\n",(0,i.jsx)(n.li,{children:"Sorting: O(n log n) for merge sort"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"space-complexity",children:"Space Complexity"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aim for O(1) space when possible"}),"\n",(0,i.jsx)(n.li,{children:"Recursive solutions use O(n) stack space"}),"\n",(0,i.jsx)(n.li,{children:"Consider iterative alternatives"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"problem-solving-approach",children:"Problem-Solving Approach"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Draw the linked list"}),"\n",(0,i.jsx)(n.li,{children:"Identify pattern (reversal, two-pointer, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Handle edge cases first"}),"\n",(0,i.jsx)(n.li,{children:"Write clean, modular code"}),"\n",(0,i.jsx)(n.li,{children:"Test with small examples"}),"\n",(0,i.jsx)(n.li,{children:"Optimize if needed"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"essential-templates",children:"Essential Templates"}),"\n",(0,i.jsx)(n.h3,{id:"template-1-iterative-reversal",children:"Template 1: Iterative Reversal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def reverse(head):\n    prev, curr = None, head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev\n"})}),"\n",(0,i.jsx)(n.h3,{id:"template-2-two-pointer-fastslow",children:"Template 2: Two Pointer (Fast/Slow)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def findMiddle(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n"})}),"\n",(0,i.jsx)(n.h3,{id:"template-3-merge-two-lists",children:"Template 3: Merge Two Lists"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def merge(l1, l2):\n    dummy = curr = ListNode(0)\n    while l1 and l2:\n        if l1.val < l2.val:\n            curr.next = l1\n            l1 = l1.next\n        else:\n            curr.next = l2\n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next\n"})}),"\n",(0,i.jsx)(n.h3,{id:"template-4-cycle-detection",children:"Template 4: Cycle Detection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def hasCycle(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"interview-preparation-checklist",children:"Interview Preparation Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2713 Master basic operations (insert, delete, traverse)"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Understand two-pointer technique thoroughly"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Practice reversal in various forms"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Know Floyd's cycle detection algorithm"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Be comfortable with dummy nodes"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Handle edge cases automatically"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Solve without drawing for simple problems"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Explain approach before coding"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Write clean, bug-free code"}),"\n",(0,i.jsx)(n.li,{children:"\u2713 Analyze time and space complexity"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recommended Practice"}),": Solve 3-5 problems daily, mixing difficulty levels. Start with basics, then move to pattern-specific problems."]})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);