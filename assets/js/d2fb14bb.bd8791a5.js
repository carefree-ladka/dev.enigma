"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5874],{26369:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=s(74848),i=s(28453);const r={},a="MockMvc Spring Boot Testing Guide",o={id:"Java/MockMvc Spring Boot Testing Guide",title:"MockMvc Spring Boot Testing Guide",description:"Table of Contents",source:"@site/docs/Java/MockMvc Spring Boot Testing Guide.mdx",sourceDirName:"Java",slug:"/Java/MockMvc Spring Boot Testing Guide",permalink:"/dev.enigma/docs/Java/MockMvc Spring Boot Testing Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/MockMvc Spring Boot Testing Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Jenkins for Beginners - Spring Boot Development Guide",permalink:"/dev.enigma/docs/Java/Jenkins for Beginners - Spring Boot Development Guide"},next:{title:"OOP and Java 8 Interview Questions",permalink:"/dev.enigma/docs/Java/OOP and Java 8 Interview Questions"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction to MockMvc",id:"introduction-to-mockmvc",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Setting Up Test Dependencies",id:"setting-up-test-dependencies",level:2},{value:"Maven Dependencies",id:"maven-dependencies",level:3},{value:"Gradle Dependencies",id:"gradle-dependencies",level:3},{value:"Testing Controllers",id:"testing-controllers",level:2},{value:"Basic Controller Test Setup",id:"basic-controller-test-setup",level:3},{value:"Testing POST Requests",id:"testing-post-requests",level:3},{value:"Testing PUT Requests",id:"testing-put-requests",level:3},{value:"Testing DELETE Requests",id:"testing-delete-requests",level:3},{value:"Testing Query Parameters",id:"testing-query-parameters",level:3},{value:"Testing Request Headers",id:"testing-request-headers",level:3},{value:"Testing Services",id:"testing-services",level:2},{value:"Unit Testing Services with Mockito",id:"unit-testing-services-with-mockito",level:3},{value:"Testing Service with @MockBean in Spring Context",id:"testing-service-with-mockbean-in-spring-context",level:3},{value:"Testing Repositories",id:"testing-repositories",level:2},{value:"Testing JPA Repositories with @DataJpaTest",id:"testing-jpa-repositories-with-datajpatest",level:3},{value:"Testing Custom Repository Methods",id:"testing-custom-repository-methods",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"Full Integration Test with @SpringBootTest",id:"full-integration-test-with-springboottest",level:3},{value:"Testing with MockMvc and Real Database",id:"testing-with-mockmvc-and-real-database",level:3},{value:"Testing Security",id:"testing-security",level:2},{value:"Testing Secured Endpoints",id:"testing-secured-endpoints",level:3},{value:"Testing JWT Authentication",id:"testing-jwt-authentication",level:3},{value:"Testing JSON Serialization/Deserialization",id:"testing-json-serializationdeserialization",level:2},{value:"Testing JSON Serialization with @JsonTest",id:"testing-json-serialization-with-jsontest",level:3},{value:"Testing Exception Handling",id:"testing-exception-handling",level:2},{value:"Testing Global Exception Handler",id:"testing-global-exception-handler",level:3},{value:"Advanced Testing Techniques",id:"advanced-testing-techniques",level:2},{value:"Testing File Uploads",id:"testing-file-uploads",level:3},{value:"Testing Async Operations",id:"testing-async-operations",level:3},{value:"Testing with Custom Argument Resolvers",id:"testing-with-custom-argument-resolvers",level:3},{value:"Testing Caching",id:"testing-caching",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Test Organization",id:"1-test-organization",level:3},{value:"2. Test Data Builders",id:"2-test-data-builders",level:3},{value:"3. Custom Matchers",id:"3-custom-matchers",level:3},{value:"4. Test Configuration",id:"4-test-configuration",level:3},{value:"5. Test Profiles",id:"5-test-profiles",level:3},{value:"6. Parameterized Tests",id:"6-parameterized-tests",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mockmvc-spring-boot-testing-guide",children:"MockMvc Spring Boot Testing Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#introduction-to-mockmvc",children:"Introduction to MockMvc"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#setting-up-test-dependencies",children:"Setting Up Test Dependencies"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-controllers",children:"Testing Controllers"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-services",children:"Testing Services"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-repositories",children:"Testing Repositories"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#integration-testing",children:"Integration Testing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-security",children:"Testing Security"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-json-serializationdeserialization",children:"Testing JSON Serialization/Deserialization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-exception-handling",children:"Testing Exception Handling"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#advanced-testing-techniques",children:"Advanced Testing Techniques"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-mockmvc",children:"Introduction to MockMvc"}),"\n",(0,t.jsx)(n.p,{children:"MockMvc is a powerful testing framework in Spring Boot that allows you to test Spring MVC controllers without starting a full HTTP server. It provides a fluent API for performing HTTP requests and validating responses."}),"\n",(0,t.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fast execution"})," - No need to start a web server"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Isolated testing"})," - Test specific layers independently"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Comprehensive assertions"})," - Rich API for validating responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mock integration"})," - Easy integration with Mockito"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-test-dependencies",children:"Setting Up Test Dependencies"}),"\n",(0,t.jsx)(n.h3,{id:"maven-dependencies",children:"Maven Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    \x3c!-- Spring Boot Test Starter --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n\n    \x3c!-- Spring Boot Web Starter (for MockMvc) --\x3e\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    \x3c!-- Spring Security Test (if using security) --\x3e\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gradle-dependencies",children:"Gradle Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:"dependencies {\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    testImplementation 'org.springframework.security:spring-security-test' // if using security\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"testing-controllers",children:"Testing Controllers"}),"\n",(0,t.jsx)(n.h3,{id:"basic-controller-test-setup",children:"Basic Controller Test Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\nclass UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void shouldGetUserById() throws Exception {\n        // Given\n        User user = new User(1L, "John Doe", "john@example.com");\n        when(userService.findById(1L)).thenReturn(user);\n\n        // When & Then\n        mockMvc.perform(get("/api/users/1"))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath("$.id").value(1))\n                .andExpect(jsonPath("$.name").value("John Doe"))\n                .andExpect(jsonPath("$.email").value("john@example.com"));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-post-requests",children:"Testing POST Requests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldCreateUser() throws Exception {\n    // Given\n    User newUser = new User(null, "Jane Doe", "jane@example.com");\n    User savedUser = new User(2L, "Jane Doe", "jane@example.com");\n\n    when(userService.save(any(User.class))).thenReturn(savedUser);\n\n    // When & Then\n    mockMvc.perform(post("/api/users")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content("""\n                {\n                    "name": "Jane Doe",\n                    "email": "jane@example.com"\n                }\n                """))\n            .andExpect(status().isCreated())\n            .andExpect(jsonPath("$.id").value(2))\n            .andExpect(jsonPath("$.name").value("Jane Doe"));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-put-requests",children:"Testing PUT Requests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldUpdateUser() throws Exception {\n    // Given\n    User updatedUser = new User(1L, "John Smith", "johnsmith@example.com");\n    when(userService.update(eq(1L), any(User.class))).thenReturn(updatedUser);\n\n    // When & Then\n    mockMvc.perform(put("/api/users/1")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content("""\n                {\n                    "name": "John Smith",\n                    "email": "johnsmith@example.com"\n                }\n                """))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath("$.name").value("John Smith"));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-delete-requests",children:"Testing DELETE Requests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldDeleteUser() throws Exception {\n    // Given\n    doNothing().when(userService).deleteById(1L);\n\n    // When & Then\n    mockMvc.perform(delete("/api/users/1"))\n            .andExpect(status().isNoContent());\n\n    verify(userService).deleteById(1L);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-query-parameters",children:"Testing Query Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldGetUsersWithPagination() throws Exception {\n    // Given\n    List<User> users = Arrays.asList(\n        new User(1L, "John", "john@example.com"),\n        new User(2L, "Jane", "jane@example.com")\n    );\n\n    when(userService.findAll(0, 10)).thenReturn(users);\n\n    // When & Then\n    mockMvc.perform(get("/api/users")\n            .param("page", "0")\n            .param("size", "10"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath("$", hasSize(2)))\n            .andExpect(jsonPath("$[0].name").value("John"))\n            .andExpect(jsonPath("$[1].name").value("Jane"));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-request-headers",children:"Testing Request Headers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldAcceptCustomHeader() throws Exception {\n    mockMvc.perform(get("/api/users/1")\n            .header("X-Request-ID", "12345")\n            .header("Accept", MediaType.APPLICATION_JSON_VALUE))\n            .andExpect(status().isOk());\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"testing-services",children:"Testing Services"}),"\n",(0,t.jsx)(n.h3,{id:"unit-testing-services-with-mockito",children:"Unit Testing Services with Mockito"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private EmailService emailService;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void shouldFindUserById() {\n        // Given\n        User user = new User(1L, "John Doe", "john@example.com");\n        when(userRepository.findById(1L)).thenReturn(Optional.of(user));\n\n        // When\n        User result = userService.findById(1L);\n\n        // Then\n        assertThat(result).isNotNull();\n        assertThat(result.getName()).isEqualTo("John Doe");\n        verify(userRepository).findById(1L);\n    }\n\n    @Test\n    void shouldThrowExceptionWhenUserNotFound() {\n        // Given\n        when(userRepository.findById(1L)).thenReturn(Optional.empty());\n\n        // When & Then\n        assertThatThrownBy(() -> userService.findById(1L))\n                .isInstanceOf(UserNotFoundException.class)\n                .hasMessage("User not found with id: 1");\n    }\n\n    @Test\n    void shouldSaveUserAndSendWelcomeEmail() {\n        // Given\n        User user = new User(null, "John Doe", "john@example.com");\n        User savedUser = new User(1L, "John Doe", "john@example.com");\n\n        when(userRepository.save(user)).thenReturn(savedUser);\n\n        // When\n        User result = userService.save(user);\n\n        // Then\n        assertThat(result.getId()).isEqualTo(1L);\n        verify(userRepository).save(user);\n        verify(emailService).sendWelcomeEmail("john@example.com");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-service-with-mockbean-in-spring-context",children:"Testing Service with @MockBean in Spring Context"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\nclass UserServiceIntegrationTest {\n\n    @MockBean\n    private UserRepository userRepository;\n\n    @Autowired\n    private UserService userService;\n\n    @Test\n    void shouldFindAllUsers() {\n        // Given\n        List<User> users = Arrays.asList(\n            new User(1L, "John", "john@example.com"),\n            new User(2L, "Jane", "jane@example.com")\n        );\n        when(userRepository.findAll()).thenReturn(users);\n\n        // When\n        List<User> result = userService.findAll();\n\n        // Then\n        assertThat(result).hasSize(2);\n        assertThat(result.get(0).getName()).isEqualTo("John");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"testing-repositories",children:"Testing Repositories"}),"\n",(0,t.jsx)(n.h3,{id:"testing-jpa-repositories-with-datajpatest",children:"Testing JPA Repositories with @DataJpaTest"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@DataJpaTest\nclass UserRepositoryTest {\n\n    @Autowired\n    private TestEntityManager entityManager;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldFindUserByEmail() {\n        // Given\n        User user = new User(null, "John Doe", "john@example.com");\n        entityManager.persistAndFlush(user);\n\n        // When\n        Optional<User> result = userRepository.findByEmail("john@example.com");\n\n        // Then\n        assertThat(result).isPresent();\n        assertThat(result.get().getName()).isEqualTo("John Doe");\n    }\n\n    @Test\n    void shouldFindUsersByNameContaining() {\n        // Given\n        User user1 = new User(null, "John Doe", "john@example.com");\n        User user2 = new User(null, "Jane Doe", "jane@example.com");\n        User user3 = new User(null, "Bob Smith", "bob@example.com");\n\n        entityManager.persistAndFlush(user1);\n        entityManager.persistAndFlush(user2);\n        entityManager.persistAndFlush(user3);\n\n        // When\n        List<User> result = userRepository.findByNameContaining("Doe");\n\n        // Then\n        assertThat(result).hasSize(2);\n        assertThat(result).extracting(User::getName)\n                .containsExactlyInAnyOrder("John Doe", "Jane Doe");\n    }\n\n    @Test\n    void shouldDeleteUserById() {\n        // Given\n        User user = new User(null, "John Doe", "john@example.com");\n        User savedUser = entityManager.persistAndFlush(user);\n\n        // When\n        userRepository.deleteById(savedUser.getId());\n\n        // Then\n        Optional<User> result = userRepository.findById(savedUser.getId());\n        assertThat(result).isEmpty();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-custom-repository-methods",children:"Testing Custom Repository Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@DataJpaTest\nclass UserRepositoryCustomTest {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    @Sql("/test-data.sql") // Load test data from SQL file\n    void shouldFindActiveUsersCreatedAfterDate() {\n        // Given\n        LocalDateTime cutoffDate = LocalDateTime.of(2023, 1, 1, 0, 0);\n\n        // When\n        List<User> result = userRepository.findActiveUsersCreatedAfter(cutoffDate);\n\n        // Then\n        assertThat(result).isNotEmpty();\n        assertThat(result).allMatch(user ->\n            user.isActive() && user.getCreatedAt().isAfter(cutoffDate));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,t.jsx)(n.h3,{id:"full-integration-test-with-springboottest",children:"Full Integration Test with @SpringBootTest"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@Testcontainers\nclass UserIntegrationTest {\n\n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:13")\n            .withDatabaseName("testdb")\n            .withUsername("test")\n            .withPassword("test");\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldCreateAndRetrieveUser() {\n        // Given\n        User user = new User(null, "Integration Test User", "integration@example.com");\n\n        // When - Create user\n        ResponseEntity<User> createResponse = restTemplate.postForEntity(\n                "/api/users", user, User.class);\n\n        // Then - Verify creation\n        assertThat(createResponse.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n        assertThat(createResponse.getBody()).isNotNull();\n        Long userId = createResponse.getBody().getId();\n\n        // When - Retrieve user\n        ResponseEntity<User> getResponse = restTemplate.getForEntity(\n                "/api/users/" + userId, User.class);\n\n        // Then - Verify retrieval\n        assertThat(getResponse.getStatusCode()).isEqualTo(HttpStatus.OK);\n        assertThat(getResponse.getBody().getName()).isEqualTo("Integration Test User");\n\n        // Verify in database\n        Optional<User> dbUser = userRepository.findById(userId);\n        assertThat(dbUser).isPresent();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-with-mockmvc-and-real-database",children:"Testing with MockMvc and Real Database"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@AutoConfigureMockMvc\n@Transactional\nclass UserControllerIntegrationTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldCreateUserInDatabase() throws Exception {\n        // When\n        mockMvc.perform(post("/api/users")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content("""\n                    {\n                        "name": "Database Test User",\n                        "email": "dbtest@example.com"\n                    }\n                    """))\n                .andExpect(status().isCreated())\n                .andExpect(jsonPath("$.id").exists());\n\n        // Then - Verify in database\n        Optional<User> user = userRepository.findByEmail("dbtest@example.com");\n        assertThat(user).isPresent();\n        assertThat(user.get().getName()).isEqualTo("Database Test User");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"testing-security",children:"Testing Security"}),"\n",(0,t.jsx)(n.h3,{id:"testing-secured-endpoints",children:"Testing Secured Endpoints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\n@Import(SecurityConfig.class)\nclass UserControllerSecurityTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void shouldReturnUnauthorizedWhenNoToken() throws Exception {\n        mockMvc.perform(get("/api/users/1"))\n                .andExpect(status().isUnauthorized());\n    }\n\n    @Test\n    @WithMockUser(roles = "USER")\n    void shouldAllowUserRoleAccess() throws Exception {\n        User user = new User(1L, "John", "john@example.com");\n        when(userService.findById(1L)).thenReturn(user);\n\n        mockMvc.perform(get("/api/users/1"))\n                .andExpect(status().isOk());\n    }\n\n    @Test\n    @WithMockUser(roles = "ADMIN")\n    void shouldAllowAdminToDeleteUser() throws Exception {\n        doNothing().when(userService).deleteById(1L);\n\n        mockMvc.perform(delete("/api/users/1"))\n                .andExpect(status().isNoContent());\n    }\n\n    @Test\n    @WithMockUser(roles = "USER")\n    void shouldForbidUserFromDeletingUser() throws Exception {\n        mockMvc.perform(delete("/api/users/1"))\n                .andExpect(status().isForbidden());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-jwt-authentication",children:"Testing JWT Authentication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldAuthenticateWithValidJWT() throws Exception {\n    String token = jwtTokenProvider.createToken("john@example.com", Arrays.asList("ROLE_USER"));\n\n    mockMvc.perform(get("/api/users/profile")\n            .header("Authorization", "Bearer " + token))\n            .andExpect(status().isOk());\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"testing-json-serializationdeserialization",children:"Testing JSON Serialization/Deserialization"}),"\n",(0,t.jsx)(n.h3,{id:"testing-json-serialization-with-jsontest",children:"Testing JSON Serialization with @JsonTest"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@JsonTest\nclass UserJsonTest {\n\n    @Autowired\n    private JacksonTester<User> json;\n\n    @Test\n    void shouldSerializeUser() throws Exception {\n        User user = new User(1L, "John Doe", "john@example.com");\n\n        assertThat(json.write(user)).isEqualToJson("expected-user.json");\n        assertThat(json.write(user)).hasJsonPathStringValue("@.name");\n        assertThat(json.write(user)).extractingJsonPathStringValue("@.name")\n                .isEqualTo("John Doe");\n    }\n\n    @Test\n    void shouldDeserializeUser() throws Exception {\n        String jsonContent = """\n            {\n                "id": 1,\n                "name": "John Doe",\n                "email": "john@example.com"\n            }\n            """;\n\n        assertThat(json.parse(jsonContent))\n                .usingRecursiveComparison()\n                .isEqualTo(new User(1L, "John Doe", "john@example.com"));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"testing-exception-handling",children:"Testing Exception Handling"}),"\n",(0,t.jsx)(n.h3,{id:"testing-global-exception-handler",children:"Testing Global Exception Handler"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\nclass UserControllerExceptionTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void shouldHandleUserNotFoundException() throws Exception {\n        when(userService.findById(999L))\n                .thenThrow(new UserNotFoundException("User not found with id: 999"));\n\n        mockMvc.perform(get("/api/users/999"))\n                .andExpect(status().isNotFound())\n                .andExpect(jsonPath("$.message").value("User not found with id: 999"))\n                .andExpect(jsonPath("$.timestamp").exists());\n    }\n\n    @Test\n    void shouldHandleValidationErrors() throws Exception {\n        mockMvc.perform(post("/api/users")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content("""\n                    {\n                        "name": "",\n                        "email": "invalid-email"\n                    }\n                    """))\n                .andExpect(status().isBadRequest())\n                .andExpect(jsonPath("$.validationErrors").exists())\n                .andExpect(jsonPath("$.validationErrors.name").value("Name is required"))\n                .andExpect(jsonPath("$.validationErrors.email").value("Email format is invalid"));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"advanced-testing-techniques",children:"Advanced Testing Techniques"}),"\n",(0,t.jsx)(n.h3,{id:"testing-file-uploads",children:"Testing File Uploads"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldUploadUserProfilePicture() throws Exception {\n    MockMultipartFile file = new MockMultipartFile(\n            "file",\n            "profile.jpg",\n            MediaType.IMAGE_JPEG_VALUE,\n            "image content".getBytes());\n\n    mockMvc.perform(multipart("/api/users/1/profile-picture")\n            .file(file))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath("$.message").value("Profile picture uploaded successfully"));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-async-operations",children:"Testing Async Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid shouldProcessAsyncUserRegistration() throws Exception {\n    when(userService.registerAsync(any(User.class)))\n            .thenReturn(CompletableFuture.completedFuture("Registration completed"));\n\n    MvcResult result = mockMvc.perform(post("/api/users/register-async")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content("""\n                {\n                    "name": "Async User",\n                    "email": "async@example.com"\n                }\n                """))\n            .andExpect(request().asyncStarted())\n            .andReturn();\n\n    mockMvc.perform(asyncDispatch(result))\n            .andExpect(status().isOk())\n            .andExpect(content().string("Registration completed"));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-with-custom-argument-resolvers",children:"Testing with Custom Argument Resolvers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\n@Import(CustomArgumentResolverConfig.class)\nclass UserControllerCustomResolverTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    void shouldResolveCurrentUserFromToken() throws Exception {\n        mockMvc.perform(get("/api/users/current")\n                .header("Authorization", "Bearer valid-jwt-token"))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath("$.name").value("Current User"));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"testing-caching",children:"Testing Caching"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@AutoConfigureMockMvc\nclass UserCachingTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserRepository userRepository;\n\n    @Test\n    void shouldCacheUserData() throws Exception {\n        User user = new User(1L, "John", "john@example.com");\n        when(userRepository.findById(1L)).thenReturn(Optional.of(user));\n\n        // First call - should hit the repository\n        mockMvc.perform(get("/api/users/1"))\n                .andExpect(status().isOk());\n\n        // Second call - should use cache\n        mockMvc.perform(get("/api/users/1"))\n                .andExpect(status().isOk());\n\n        // Verify repository was called only once\n        verify(userRepository, times(1)).findById(1L);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-test-organization",children:"1. Test Organization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@DisplayName("User Controller Tests")\nclass UserControllerTest {\n\n    @Nested\n    @DisplayName("GET /api/users/{id}")\n    class GetUserById {\n\n        @Test\n        @DisplayName("Should return user when valid ID provided")\n        void shouldReturnUser_WhenValidIdProvided() {\n            // Test implementation\n        }\n\n        @Test\n        @DisplayName("Should return 404 when user not found")\n        void shouldReturn404_WhenUserNotFound() {\n            // Test implementation\n        }\n    }\n\n    @Nested\n    @DisplayName("POST /api/users")\n    class CreateUser {\n\n        @Test\n        @DisplayName("Should create user with valid data")\n        void shouldCreateUser_WithValidData() {\n            // Test implementation\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-test-data-builders",children:"2. Test Data Builders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserTestDataBuilder {\n    private Long id = 1L;\n    private String name = "John Doe";\n    private String email = "john@example.com";\n    private boolean active = true;\n\n    public static UserTestDataBuilder aUser() {\n        return new UserTestDataBuilder();\n    }\n\n    public UserTestDataBuilder withId(Long id) {\n        this.id = id;\n        return this;\n    }\n\n    public UserTestDataBuilder withName(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public UserTestDataBuilder withEmail(String email) {\n        this.email = email;\n        return this;\n    }\n\n    public UserTestDataBuilder inactive() {\n        this.active = false;\n        return this;\n    }\n\n    public User build() {\n        return new User(id, name, email, active);\n    }\n}\n\n// Usage in tests\n@Test\nvoid shouldCreateInactiveUser() {\n    User user = aUser().withName("Jane").inactive().build();\n    // Test with user\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-custom-matchers",children:"3. Custom Matchers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserMatchers {\n\n    public static Matcher<User> hasName(String expectedName) {\n        return new TypeSafeMatcher<User>() {\n            @Override\n            protected boolean matchesSafely(User user) {\n                return Objects.equals(user.getName(), expectedName);\n            }\n\n            @Override\n            public void describeTo(Description description) {\n                description.appendText("user with name ").appendValue(expectedName);\n            }\n        };\n    }\n}\n\n// Usage\nassertThat(user, hasName("John Doe"));\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-test-configuration",children:"4. Test Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@TestConfiguration\npublic class TestConfig {\n\n    @Bean\n    @Primary\n    public Clock testClock() {\n        return Clock.fixed(Instant.parse("2023-01-01T00:00:00Z"), ZoneOffset.UTC);\n    }\n\n    @Bean\n    @Primary\n    public EmailService mockEmailService() {\n        return Mockito.mock(EmailService.class);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-test-profiles",children:"5. Test Profiles"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# application-test.yml\nspring:\n  datasource:\n    url: jdbc:h2:mem:testdb\n    driver-class-name: org.h2.Driver\n  jpa:\n    hibernate:\n      ddl-auto: create-drop\n  logging:\n    level:\n      org.springframework.web: DEBUG\n"})}),"\n",(0,t.jsx)(n.h3,{id:"6-parameterized-tests",children:"6. Parameterized Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ParameterizedTest\n@ValueSource(strings = {"", " ", "invalid-email", "@example.com"})\nvoid shouldRejectInvalidEmails(String invalidEmail) throws Exception {\n    mockMvc.perform(post("/api/users")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content(String.format("""\n                {\n                    "name": "Test User",\n                    "email": "%s"\n                }\n                """, invalidEmail)))\n            .andExpect(status().isBadRequest());\n}\n\n@ParameterizedTest\n@CsvSource({\n    "1, John, john@example.com",\n    "2, Jane, jane@example.com",\n    "3, Bob, bob@example.com"\n})\nvoid shouldReturnUsersWithValidData(Long id, String name, String email) throws Exception {\n    User user = new User(id, name, email);\n    when(userService.findById(id)).thenReturn(user);\n\n    mockMvc.perform(get("/api/users/" + id))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath("$.name").value(name))\n            .andExpect(jsonPath("$.email").value(email));\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"This guide covers comprehensive testing strategies for Spring Boot applications using MockMvc:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Controller Testing"}),": Unit tests with mocked dependencies"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Testing"}),": Business logic validation with mocked repositories"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repository Testing"}),": Data access layer testing with @DataJpaTest"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integration Testing"}),": End-to-end testing with real databases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security Testing"}),": Authentication and authorization testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Advanced Techniques"}),": File uploads, async operations, caching"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Remember to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use appropriate test slices (@WebMvcTest, @DataJpaTest, @JsonTest)"}),"\n",(0,t.jsx)(n.li,{children:"Mock external dependencies appropriately"}),"\n",(0,t.jsx)(n.li,{children:"Write clear, descriptive test names"}),"\n",(0,t.jsx)(n.li,{children:"Organize tests logically with @Nested classes"}),"\n",(0,t.jsx)(n.li,{children:"Use test data builders for complex objects"}),"\n",(0,t.jsx)(n.li,{children:"Follow the AAA pattern (Arrange, Act, Assert)"}),"\n",(0,t.jsx)(n.li,{children:"Keep tests independent and repeatable"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);