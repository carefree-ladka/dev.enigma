"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[9075],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(96540);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},82772:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=i(74848),r=i(28453);const a={title:"Sliding Window Technique"},s=void 0,o={id:"DSA/DSA with JavaScript/SlidingWindow",title:"Sliding Window Technique",description:"Sliding Window Technique",source:"@site/docs/DSA/DSA with JavaScript/SlidingWindow.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/SlidingWindow",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/SlidingWindow",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/SlidingWindow.mdx",tags:[],version:"current",frontMatter:{title:"Sliding Window Technique"},sidebar:"tutorialSidebar",previous:{title:"Sieve of Eratosthenes",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/SieveOfEratosthenes"},next:{title:"Fast and Slow Pointers Technique",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/SlowFastPointer"}},l={},d=[{value:"Sliding Window Technique",id:"sliding-window-technique",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Types of Sliding Window Techniques",id:"types-of-sliding-window-techniques",level:3},{value:"Algorithm Overview",id:"algorithm-overview",level:3},{value:"Fixed-Size Window Example",id:"fixed-size-window-example",level:3},{value:"Other Variations to Write Sliding Window",id:"other-variations-to-write-sliding-window",level:3},{value:"Variable-Size Window Example",id:"variable-size-window-example",level:3},{value:"Sliding Window Problems",id:"sliding-window-problems",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"sliding-window-technique",children:"Sliding Window Technique"}),"\n",(0,t.jsx)(n.p,{children:'The Sliding Window technique is a powerful approach used to solve problems involving sequences, substrings, or subarrays efficiently. It optimizes the process of examining or modifying contiguous segments of an array or string by maintaining a window of fixed or variable size that "slides" across the data.'}),"\n",(0,t.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsx)(n.p,{children:"The Sliding Window technique is commonly applied to problems where you need to find the maximum, minimum, or other aggregated value of a contiguous segment within an array or string, or where you need to identify specific patterns or conditions."}),"\n",(0,t.jsx)(n.h3,{id:"types-of-sliding-window-techniques",children:"Types of Sliding Window Techniques"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Fixed-Size Window"}),": The window has a constant size and moves through the data. Useful for problems like finding the maximum sum of any subarray of size ",(0,t.jsx)(n.code,{children:"k"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Variable-Size Window"}),": The window size is adjusted dynamically based on certain conditions. Useful for problems like finding the smallest substring containing all characters of a given set."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"algorithm-overview",children:"Algorithm Overview"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initialization"}),": Set up pointers or indices to represent the current window."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expand Window"}),": Extend the window by moving the end pointer or index."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Contract Window"}),": Shrink the window by moving the start pointer or index when necessary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update Result"}),": Perform calculations or checks within the window to maintain or update the result."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"fixed-size-window-example",children:"Fixed-Size Window Example"}),"\n",(0,t.jsxs)(n.p,{children:["Find the maximum sum of any subarray of size ",(0,t.jsx)(n.code,{children:"k"})," in a given array:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"/**\n * Find the maximum sum of any subarray of size k.\n * @param {number[]} arr - The input array.\n * @param {number} k - The size of the subarray.\n * @return {number} - The maximum sum of any subarray of size k.\n */\nconst maxSumSubarray = (arr, k) => {\n  let maxSum = 0;\n  let windowSum = 0;\n\n  // Compute the sum of the first window\n  for (let i = 0; i < k; i++) {\n    windowSum += arr[i];\n  }\n  maxSum = windowSum;\n\n  // Slide the window across the array\n  for (let i = k; i < arr.length; i++) {\n    windowSum += arr[i] - arr[i - k];\n    maxSum = Math.max(maxSum, windowSum);\n  }\n\n  return maxSum;\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"other-variations-to-write-sliding-window",children:"Other Variations to Write Sliding Window"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const maxSumSubarray = (nums = [], k) => {\n  let max = -Infinity\n  let sum = 0\n  let left = 0\n\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n\n    if (i + left - 1 === k) {\n      max = Math.max(max, sum)\n      sum -= nums[left++]\n    }\n  }\n\n  return max\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const maxSumSubarray = (arr, k) => {\n  let maxSum = 0;\n  let windowSum = 0;\n\n  // Slide the window from start to end\n  for (let i = 0; i < arr.length; i++) {\n    windowSum += arr[i]\n    if (i >= k - 1) {\n      maxSum = Math.max(maxSum, windowSum);\n      windowSum -= arr[i - k + 1]\n    }\n  }\n\n  return maxSum;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"variable-size-window-example",children:"Variable-Size Window Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"/**\n * Find the maximum sum of any subarray with length between minLen and maxLen.\n * @param {number[]} arr - The input array.\n * @param {number} minLen - Minimum length of the subarray.\n * @param {number} maxLen - Maximum length of the subarray.\n * @return {number} - The maximum sum of any valid subarray.\n */\nconst maxSumSubarrayVariableSize = (arr, minLen, maxLen) => {\n  let start = 0;\n  let end = 0;\n  let currentSum = 0;\n  let maxSum = -Infinity;\n\n  while (end < arr.length) {\n    // Expand the window by including arr[end]\n    currentSum += arr[end];\n\n    // Ensure the window size is within the specified range\n    if (end - start + 1 > maxLen) {\n      currentSum -= arr[start];\n      start++;\n    }\n\n    // Update maxSum if the current window size is within the range\n    if (end - start + 1 >= minLen) {\n      maxSum = Math.max(maxSum, currentSum);\n    }\n\n    // Move the end pointer to expand the window\n    end++;\n  }\n\n  return maxSum;\n}\n\n// Example usage:\nconst arr = [1, 2, 3, 4, 5, 6, 7];\nconst minLen = 2;\nconst maxLen = 4;\n\nconsole.log(maxSumSubarrayVariableSize(arr, minLen, maxLen)); // Output: 22\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sliding-window-problems",children:"Sliding Window Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",children:"Longest Substring Without Repeating Characters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/description/",children:"Longest Substring with At Least K Repeating Characters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/description/",children:"Longest Substring with At Most K Distinct Characters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-repeating-character-replacement/description/",children:"Longest Repeating Character Replacement"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/max-consecutive-ones-iii/description/",children:"Max Consecutive Ones III"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/description/",children:"Maximum Sum of Distinct Subarrays with Length K"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/description/",children:"Longest Substring with At Most Two Distinct Characters"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/sliding-window-maximum/description/",children:"Sliding Window Maximum"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/max-consecutive-ones-ii/description",children:"Max Consecutive Ones II"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-average-subarray-i",children:"Maximum Average Subarray I"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/fruit-into-baskets/description",children:"Fruit Into Baskets"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/longest-nice-subarray/description/",children:"Longest Nice Subarray"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);