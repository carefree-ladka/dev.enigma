"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7533],{3955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var i=t(74848),r=t(28453);const s={},l="Two Pointer",a={id:"DSA/DSA with JavaScript/DSA Cheatsheets/Two Pointer",title:"Two Pointer",description:"A comprehensive guide to mastering two-pointer patterns for Data Structures and Algorithms interviews and competitive programming.",source:"@site/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Two Pointer.mdx",sourceDirName:"DSA/DSA with JavaScript/DSA Cheatsheets",slug:"/DSA/DSA with JavaScript/DSA Cheatsheets/Two Pointer",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Two Pointer",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Two Pointer.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Trie",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Trie"},next:{title:"0-1 BFS Algorithm",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/01BFS"}},o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"When to Use Two Pointers",id:"when-to-use-two-pointers",level:3},{value:"Core Patterns",id:"core-patterns",level:2},{value:"1. Opposite Direction (Converging Pointers)",id:"1-opposite-direction-converging-pointers",level:3},{value:"2. Same Direction (Fast/Slow Pointers)",id:"2-same-direction-fastslow-pointers",level:3},{value:"3. Gap Method (Fixed Distance)",id:"3-gap-method-fixed-distance",level:3},{value:"Linked List Applications",id:"linked-list-applications",level:2},{value:"1. Find Middle Node (Floyd&#39;s Tortoise and Hare)",id:"1-find-middle-node-floyds-tortoise-and-hare",level:3},{value:"2. Detect Cycle (Floyd&#39;s Cycle Detection)",id:"2-detect-cycle-floyds-cycle-detection",level:3},{value:"3. Find Cycle Start Node",id:"3-find-cycle-start-node",level:3},{value:"4. Remove Nth Node from End",id:"4-remove-nth-node-from-end",level:3},{value:"5. Find Intersection of Two Lists",id:"5-find-intersection-of-two-lists",level:3},{value:"Array Applications",id:"array-applications",level:2},{value:"1. Two Sum (Sorted Array)",id:"1-two-sum-sorted-array",level:3},{value:"2. Three Sum",id:"2-three-sum",level:3},{value:"3. Container With Most Water",id:"3-container-with-most-water",level:3},{value:"4. Remove Duplicates from Sorted Array",id:"4-remove-duplicates-from-sorted-array",level:3},{value:"5. Move Zeros",id:"5-move-zeros",level:3},{value:"String Applications",id:"string-applications",level:2},{value:"1. Valid Palindrome",id:"1-valid-palindrome",level:3},{value:"2. Reverse Words in String",id:"2-reverse-words-in-string",level:3},{value:"3. Longest Palindromic Substring",id:"3-longest-palindromic-substring",level:3},{value:"Advanced Techniques",id:"advanced-techniques",level:2},{value:"1. Sliding Window with Two Pointers",id:"1-sliding-window-with-two-pointers",level:3},{value:"2. Dutch National Flag (Three Pointers)",id:"2-dutch-national-flag-three-pointers",level:3},{value:"3. Trapping Rain Water",id:"3-trapping-rain-water",level:3},{value:"Problem-Solving Framework",id:"problem-solving-framework",level:2},{value:"Step-by-Step Approach",id:"step-by-step-approach",level:3},{value:"Template Code",id:"template-code",level:3},{value:"Practice Problems",id:"practice-problems",level:2},{value:"Beginner Level",id:"beginner-level",level:3},{value:"Intermediate Level",id:"intermediate-level",level:3},{value:"Advanced Level",id:"advanced-level",level:3},{value:"Time Complexity Analysis",id:"time-complexity-analysis",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"\u2705 <strong>Advantages</strong>",id:"-advantages",level:3},{value:"\u26a0\ufe0f <strong>Common Pitfalls</strong>",id:"\ufe0f-common-pitfalls",level:3},{value:"\ud83c\udfaf <strong>Best Practices</strong>",id:"-best-practices",level:3},{value:"Cheat Sheet",id:"cheat-sheet",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"two-pointer",children:"Two Pointer"})}),"\n",(0,i.jsx)(n.p,{children:"A comprehensive guide to mastering two-pointer patterns for Data Structures and Algorithms interviews and competitive programming."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#core-patterns",children:"Core Patterns"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#linked-list-applications",children:"Linked List Applications"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#array-applications",children:"Array Applications"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#string-applications",children:"String Applications"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#advanced-techniques",children:"Advanced Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#problem-solving-framework",children:"Problem-Solving Framework"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#practice-problems",children:"Practice Problems"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Two Pointer Technique"})," is a powerful algorithmic pattern that uses two pointers to traverse data structures efficiently. It's particularly effective for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reducing time complexity"})," from O(n\xb2) to O(n)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solving problems"})," involving pairs, subarrays, or subsequences"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimizing space usage"})," by avoiding extra data structures"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-two-pointers",children:"When to Use Two Pointers"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Use when you see:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sorted arrays or linked lists"}),"\n",(0,i.jsx)(n.li,{children:"Finding pairs with specific properties"}),"\n",(0,i.jsx)(n.li,{children:"Palindrome checks"}),"\n",(0,i.jsx)(n.li,{children:"Cycle detection"}),"\n",(0,i.jsx)(n.li,{children:"Finding middle elements"}),"\n",(0,i.jsx)(n.li,{children:"Sliding window problems"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Avoid when:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data is completely unsorted and can't be sorted"}),"\n",(0,i.jsx)(n.li,{children:"Need to maintain original order strictly"}),"\n",(0,i.jsx)(n.li,{children:"Problem requires complex backtracking"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-patterns",children:"Core Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"1-opposite-direction-converging-pointers",children:"1. Opposite Direction (Converging Pointers)"}),"\n",(0,i.jsx)(n.p,{children:"Pointers start at opposite ends and move toward each other."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function twoPointerConverging(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left < right) {\n        const sum = arr[left] + arr[right];\n\n        if (sum === target) {\n            return [left, right];\n        } else if (sum < target) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n\n    return [-1, -1]; // Not found\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(n.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(n.h3,{id:"2-same-direction-fastslow-pointers",children:"2. Same Direction (Fast/Slow Pointers)"}),"\n",(0,i.jsx)(n.p,{children:"Both pointers move in the same direction at different speeds."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function twoPointerSameDirection(arr) {\n    let slow = 0;\n    let fast = 0;\n\n    while (fast < arr.length) {\n        // Process element at fast pointer\n        if (shouldIncludeSlow(arr[fast])) {\n            arr[slow] = arr[fast];\n            slow++;\n        }\n        fast++;\n    }\n\n    return slow; // New length or position\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-gap-method-fixed-distance",children:"3. Gap Method (Fixed Distance)"}),"\n",(0,i.jsx)(n.p,{children:"One pointer maintains a fixed distance from the other."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function gapMethod(arr, k) {\n    let first = 0;\n    let second = 0;\n\n    // Create gap of k positions\n    for (let i = 0; i < k && first < arr.length; i++) {\n        first++;\n    }\n\n    // Move both pointers\n    while (first < arr.length) {\n        // Process pair at (second, first)\n        first++;\n        second++;\n    }\n\n    return second;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"linked-list-applications",children:"Linked List Applications"}),"\n",(0,i.jsx)(n.h3,{id:"1-find-middle-node-floyds-tortoise-and-hare",children:"1. Find Middle Node (Floyd's Tortoise and Hare)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find the middle node of a linked list in one pass."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function findMiddle(head) {\n    if (!head) return null;\n\n    let slow = head;  // Tortoise\n    let fast = head;  // Hare\n\n    while (fast && fast.next) {\n        slow = slow.next;        // Move 1 step\n        fast = fast.next.next;   // Move 2 steps\n    }\n\n    return slow; // Middle node\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why it works:"})," When fast pointer reaches the end, slow pointer is at the middle."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 Pro Tip:"})," For even-length lists, this returns the second middle node. To get the first middle node, modify the condition to ",(0,i.jsx)(n.code,{children:"fast.next && fast.next.next"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-detect-cycle-floyds-cycle-detection",children:"2. Detect Cycle (Floyd's Cycle Detection)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Determine if a linked list has a cycle."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function hasCycle(head) {\n    if (!head || !head.next) return false;\n\n    let slow = head;\n    let fast = head;\n\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow === fast) {\n            return true; // Cycle detected\n        }\n    }\n\n    return false; // No cycle\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Algorithm Insight:"}),' If there\'s a cycle, the fast pointer will eventually "lap" the slow pointer.']}),"\n",(0,i.jsx)(n.h3,{id:"3-find-cycle-start-node",children:"3. Find Cycle Start Node"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," If a cycle exists, find where it begins."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function detectCycleStart(head) {\n    if (!head || !head.next) return null;\n\n    let slow = head;\n    let fast = head;\n\n    // Phase 1: Detect if cycle exists\n    while (fast && fast.next) {\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow === fast) {\n            break; // Cycle found\n        }\n    }\n\n    // No cycle\n    if (!fast || !fast.next) return null;\n\n    // Phase 2: Find cycle start\n    slow = head; // Reset slow to head\n    while (slow !== fast) {\n        slow = slow.next;\n        fast = fast.next; // Move both at same speed\n    }\n\n    return slow; // Cycle start node\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mathematical Proof:"})," Distance from head to cycle start equals distance from meeting point to cycle start."]}),"\n",(0,i.jsx)(n.h3,{id:"4-remove-nth-node-from-end",children:"4. Remove Nth Node from End"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Remove the nth node from the end of a linked list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function removeNthFromEnd(head, n) {\n    const dummy = new ListNode(0);\n    dummy.next = head;\n\n    let first = dummy;\n    let second = dummy;\n\n    // Create gap of n+1 positions\n    for (let i = 0; i <= n; i++) {\n        first = first.next;\n    }\n\n    // Move both pointers until first reaches end\n    while (first) {\n        first = first.next;\n        second = second.next;\n    }\n\n    // Remove the nth node\n    second.next = second.next.next;\n\n    return dummy.next;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Technique:"})," Using dummy node handles edge case of removing the head."]}),"\n",(0,i.jsx)(n.h3,{id:"5-find-intersection-of-two-lists",children:"5. Find Intersection of Two Lists"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find the node where two linked lists intersect."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function getIntersectionNode(headA, headB) {\n    if (!headA || !headB) return null;\n\n    let pA = headA;\n    let pB = headB;\n\n    // Each pointer traverses both lists\n    while (pA !== pB) {\n        pA = pA ? pA.next : headB; // Switch to other list when done\n        pB = pB ? pB.next : headA;\n    }\n\n    return pA; // Intersection node or null\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Elegant Solution:"})," Each pointer travels the same total distance, meeting at intersection or null."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"array-applications",children:"Array Applications"}),"\n",(0,i.jsx)(n.h3,{id:"1-two-sum-sorted-array",children:"1. Two Sum (Sorted Array)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find two numbers that add up to a target in a sorted array."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function twoSum(numbers, target) {\n    let left = 0;\n    let right = numbers.length - 1;\n\n    while (left < right) {\n        const sum = numbers[left] + numbers[right];\n\n        if (sum === target) {\n            return [left, right];\n        } else if (sum < target) {\n            left++; // Need larger sum\n        } else {\n            right--; // Need smaller sum\n        }\n    }\n\n    return []; // No solution\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-three-sum",children:"2. Three Sum"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find all unique triplets that sum to zero."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function threeSum(nums) {\n    nums.sort((a, b) => a - b);\n    const result = [];\n\n    for (let i = 0; i < nums.length - 2; i++) {\n        // Skip duplicates for first number\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n\n        let left = i + 1;\n        let right = nums.length - 1;\n        const target = -nums[i];\n\n        while (left < right) {\n            const sum = nums[left] + nums[right];\n\n            if (sum === target) {\n                result.push([nums[i], nums[left], nums[right]]);\n\n                // Skip duplicates\n                while (left < right && nums[left] === nums[left + 1]) left++;\n                while (left < right && nums[right] === nums[right - 1]) right--;\n\n                left++;\n                right--;\n            } else if (sum < target) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-container-with-most-water",children:"3. Container With Most Water"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find two lines that together form a container holding the most water."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function maxArea(height) {\n    let left = 0;\n    let right = height.length - 1;\n    let maxWater = 0;\n\n    while (left < right) {\n        const width = right - left;\n        const currentHeight = Math.min(height[left], height[right]);\n        const water = width * currentHeight;\n\n        maxWater = Math.max(maxWater, water);\n\n        // Move pointer with smaller height\n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n\n    return maxWater;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight:"})," Always move the pointer with the smaller height to potentially find a larger area."]}),"\n",(0,i.jsx)(n.h3,{id:"4-remove-duplicates-from-sorted-array",children:"4. Remove Duplicates from Sorted Array"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Remove duplicates in-place from a sorted array."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function removeDuplicates(nums) {\n    if (nums.length <= 1) return nums.length;\n\n    let slow = 0; // Points to last unique element\n\n    for (let fast = 1; fast < nums.length; fast++) {\n        if (nums[fast] !== nums[slow]) {\n            slow++;\n            nums[slow] = nums[fast];\n        }\n    }\n\n    return slow + 1; // New length\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-move-zeros",children:"5. Move Zeros"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Move all zeros to the end while maintaining relative order."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function moveZeroes(nums) {\n    let slow = 0; // Points to next position for non-zero\n\n    // Move all non-zero elements to front\n    for (let fast = 0; fast < nums.length; fast++) {\n        if (nums[fast] !== 0) {\n            nums[slow] = nums[fast];\n            slow++;\n        }\n    }\n\n    // Fill remaining positions with zeros\n    while (slow < nums.length) {\n        nums[slow] = 0;\n        slow++;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"string-applications",children:"String Applications"}),"\n",(0,i.jsx)(n.h3,{id:"1-valid-palindrome",children:"1. Valid Palindrome"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Check if a string is a palindrome, ignoring non-alphanumeric characters."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function isPalindrome(s) {\n    let left = 0;\n    let right = s.length - 1;\n\n    while (left < right) {\n        // Skip non-alphanumeric characters\n        while (left < right && !isAlphaNumeric(s[left])) {\n            left++;\n        }\n        while (left < right && !isAlphaNumeric(s[right])) {\n            right--;\n        }\n\n        // Compare characters (case-insensitive)\n        if (s[left].toLowerCase() !== s[right].toLowerCase()) {\n            return false;\n        }\n\n        left++;\n        right--;\n    }\n\n    return true;\n}\n\nfunction isAlphaNumeric(char) {\n    return /[a-zA-Z0-9]/.test(char);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-reverse-words-in-string",children:"2. Reverse Words in String"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Reverse the order of words in a string."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function reverseWords(s) {\n    // Convert to array and clean up spaces\n    const chars = s.trim().split('');\n\n    // Reverse entire string\n    reverse(chars, 0, chars.length - 1);\n\n    // Reverse each word back\n    let start = 0;\n    for (let i = 0; i <= chars.length; i++) {\n        if (i === chars.length || chars[i] === ' ') {\n            reverse(chars, start, i - 1);\n            start = i + 1;\n        }\n    }\n\n    return chars.join('').replace(/\\s+/g, ' ');\n}\n\nfunction reverse(arr, left, right) {\n    while (left < right) {\n        [arr[left], arr[right]] = [arr[right], arr[left]];\n        left++;\n        right--;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-longest-palindromic-substring",children:"3. Longest Palindromic Substring"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find the longest palindromic substring."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function longestPalindrome(s) {\n    if (!s || s.length < 2) return s;\n\n    let start = 0;\n    let maxLength = 1;\n\n    for (let i = 0; i < s.length; i++) {\n        // Check for odd-length palindromes\n        const len1 = expandAroundCenter(s, i, i);\n\n        // Check for even-length palindromes\n        const len2 = expandAroundCenter(s, i, i + 1);\n\n        const currentMax = Math.max(len1, len2);\n\n        if (currentMax > maxLength) {\n            maxLength = currentMax;\n            start = i - Math.floor((currentMax - 1) / 2);\n        }\n    }\n\n    return s.substring(start, start + maxLength);\n}\n\nfunction expandAroundCenter(s, left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n        left--;\n        right++;\n    }\n    return right - left - 1;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"advanced-techniques",children:"Advanced Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"1-sliding-window-with-two-pointers",children:"1. Sliding Window with Two Pointers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Find the minimum window substring containing all characters of pattern."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'function minWindow(s, t) {\n    if (s.length < t.length) return "";\n\n    // Character frequency map for pattern\n    const need = new Map();\n    for (const char of t) {\n        need.set(char, (need.get(char) || 0) + 1);\n    }\n\n    let left = 0;\n    let right = 0;\n    let formed = 0; // Characters satisfied\n    let minLen = Infinity;\n    let minStart = 0;\n\n    const windowCounts = new Map();\n\n    while (right < s.length) {\n        // Expand window\n        const char = s[right];\n        windowCounts.set(char, (windowCounts.get(char) || 0) + 1);\n\n        if (need.has(char) && windowCounts.get(char) === need.get(char)) {\n            formed++;\n        }\n\n        // Contract window\n        while (formed === need.size && left <= right) {\n            if (right - left + 1 < minLen) {\n                minLen = right - left + 1;\n                minStart = left;\n            }\n\n            const leftChar = s[left];\n            windowCounts.set(leftChar, windowCounts.get(leftChar) - 1);\n\n            if (need.has(leftChar) && windowCounts.get(leftChar) < need.get(leftChar)) {\n                formed--;\n            }\n\n            left++;\n        }\n\n        right++;\n    }\n\n    return minLen === Infinity ? "" : s.substring(minStart, minStart + minLen);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-dutch-national-flag-three-pointers",children:"2. Dutch National Flag (Three Pointers)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Sort array of 0s, 1s, and 2s in-place."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function sortColors(nums) {\n    let left = 0;   // Next position for 0\n    let right = nums.length - 1;  // Next position for 2\n    let current = 0; // Current element\n\n    while (current <= right) {\n        if (nums[current] === 0) {\n            [nums[left], nums[current]] = [nums[current], nums[left]];\n            left++;\n            current++;\n        } else if (nums[current] === 2) {\n            [nums[current], nums[right]] = [nums[right], nums[current]];\n            right--;\n            // Don't increment current (need to check swapped element)\n        } else {\n            current++; // nums[current] === 1\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-trapping-rain-water",children:"3. Trapping Rain Water"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"})," Calculate how much water can be trapped after raining."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function trap(height) {\n    if (height.length < 3) return 0;\n\n    let left = 0;\n    let right = height.length - 1;\n    let leftMax = 0;\n    let rightMax = 0;\n    let water = 0;\n\n    while (left < right) {\n        if (height[left] < height[right]) {\n            if (height[left] >= leftMax) {\n                leftMax = height[left];\n            } else {\n                water += leftMax - height[left];\n            }\n            left++;\n        } else {\n            if (height[right] >= rightMax) {\n                rightMax = height[right];\n            } else {\n                water += rightMax - height[right];\n            }\n            right--;\n        }\n    }\n\n    return water;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"problem-solving-framework",children:"Problem-Solving Framework"}),"\n",(0,i.jsx)(n.h3,{id:"step-by-step-approach",children:"Step-by-Step Approach"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Identify the Pattern"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Is the data sorted?"}),"\n",(0,i.jsx)(n.li,{children:"Are we looking for pairs/triplets?"}),"\n",(0,i.jsx)(n.li,{children:"Do we need to find cycles or middle elements?"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Choose Pointer Strategy"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Converging:"})," Opposite ends moving toward each other"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Same Direction:"})," Fast/slow or gap method"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Expanding:"})," From center outward"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Handle Edge Cases"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Empty inputs"}),"\n",(0,i.jsx)(n.li,{children:"Single element"}),"\n",(0,i.jsx)(n.li,{children:"All elements are the same"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimize"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can we avoid extra space?"}),"\n",(0,i.jsx)(n.li,{children:"Can we reduce the number of comparisons?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"template-code",children:"Template Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"function twoPointerTemplate(input) {\n    // Initialize pointers based on pattern\n    let left = 0;\n    let right = input.length - 1; // or other initialization\n\n    while (/* termination condition */) {\n        // Process current state\n        if (/* condition met */) {\n            // Found solution or update result\n            return result;\n        } else if (/* need to move left */) {\n            left++;\n        } else if (/* need to move right */) {\n            right--;\n        }\n\n        // Handle duplicates if necessary\n        // Update other variables\n    }\n\n    return /* default result */;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,i.jsx)(n.h3,{id:"beginner-level",children:"Beginner Level"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Two Sum II"})," (Sorted array)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Remove Duplicates from Sorted Array"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Valid Palindrome"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Move Zeroes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Reverse String"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"intermediate-level",children:"Intermediate Level"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"3Sum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Container With Most Water"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Find the Duplicate Number"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Linked List Cycle II"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Sort Colors"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"advanced-level",children:"Advanced Level"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Minimum Window Substring"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Trapping Rain Water"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"4Sum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Palindromic Substrings"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Shortest Unsorted Continuous Subarray"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"time-complexity-analysis",children:"Time Complexity Analysis"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pattern"}),(0,i.jsx)(n.th,{children:"Typical Time"}),(0,i.jsx)(n.th,{children:"Typical Space"}),(0,i.jsx)(n.th,{children:"Use Cases"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Converging Pointers"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Two Sum, Palindrome"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Fast/Slow Pointers"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Cycle Detection, Middle"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Gap Method"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Nth from End"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Sliding Window"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(k)"}),(0,i.jsx)(n.td,{children:"Substring Problems"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Expanding Centers"}),(0,i.jsx)(n.td,{children:"O(n\xb2)"}),(0,i.jsx)(n.td,{children:"O(1)"}),(0,i.jsx)(n.td,{children:"Palindrome Expansion"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.h3,{id:"-advantages",children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Advantages"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time Efficient:"})," Often reduces O(n\xb2) to O(n)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Space Efficient:"})," Usually O(1) extra space"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple Logic:"})," Easy to understand and implement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Versatile:"})," Works on arrays, strings, and linked lists"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"\ufe0f-common-pitfalls",children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Common Pitfalls"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Off-by-one errors"})," in pointer initialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Infinite loops"})," from incorrect pointer updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing edge cases"})," like empty inputs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Not handling duplicates"})," properly"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"-best-practices",children:["\ud83c\udfaf ",(0,i.jsx)(n.strong,{children:"Best Practices"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Draw diagrams to visualize pointer movement"}),"\n",(0,i.jsx)(n.li,{children:"Test with small examples first"}),"\n",(0,i.jsx)(n.li,{children:"Handle edge cases explicitly"}),"\n",(0,i.jsx)(n.li,{children:"Use meaningful variable names"}),"\n",(0,i.jsx)(n.li,{children:"Comment your pointer logic"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"cheat-sheet",children:"Cheat Sheet"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Converging Pointers (Two Sum)\nlet left = 0, right = arr.length - 1;\nwhile (left < right) {\n    if (condition) return result;\n    else if (needSmaller) right--;\n    else left++;\n}\n\n// Fast/Slow (Cycle Detection)\nlet slow = head, fast = head;\nwhile (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n    if (slow === fast) return true;\n}\n\n// Gap Method (Nth from End)\nlet first = head, second = head;\nfor (let i = 0; i < n; i++) first = first.next;\nwhile (first) {\n    first = first.next;\n    second = second.next;\n}\n\n// Same Direction (Remove Duplicates)\nlet slow = 0;\nfor (let fast = 1; fast < arr.length; fast++) {\n    if (arr[fast] !== arr[slow]) {\n        arr[++slow] = arr[fast];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);