"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6646],{28453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>a});var t=i(96540);const r={},s=t.createContext(r);function l(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),t.createElement(s.Provider,{value:e},n.children)}},37259:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=i(74848),r=i(28453);const s={},l="Binary Search",a={id:"DSA/DSA with JavaScript/DSA Cheatsheets/Binary Search",title:"Binary Search",description:"A comprehensive guide to binary search algorithms and techniques for Data Structures and Algorithms.",source:"@site/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Binary Search.mdx",sourceDirName:"DSA/DSA with JavaScript/DSA Cheatsheets",slug:"/DSA/DSA with JavaScript/DSA Cheatsheets/Binary Search",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Binary Search",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Binary Search.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Backtracking",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Backtracking"},next:{title:"Binary Tree View Implementations",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Binary Tree View Implementations"}},d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Basic Binary Search",id:"basic-binary-search",level:2},{value:"1. Classic Binary Search",id:"1-classic-binary-search",level:3},{value:"2. Recursive Binary Search",id:"2-recursive-binary-search",level:3},{value:"3. Insert Position",id:"3-insert-position",level:3},{value:"Template Patterns",id:"template-patterns",level:2},{value:"Template 1: Basic Search",id:"template-1-basic-search",level:3},{value:"Template 2: Find Left Boundary",id:"template-2-find-left-boundary",level:3},{value:"Template 3: Find Right Boundary",id:"template-3-find-right-boundary",level:3},{value:"Search in Modified Arrays",id:"search-in-modified-arrays",level:2},{value:"1. Search in Rotated Sorted Array",id:"1-search-in-rotated-sorted-array",level:3},{value:"2. Search in Rotated Array II (with Duplicates)",id:"2-search-in-rotated-array-ii-with-duplicates",level:3},{value:"3. Find Minimum in Rotated Array",id:"3-find-minimum-in-rotated-array",level:3},{value:"4. Find Peak Element",id:"4-find-peak-element",level:3},{value:"Finding Boundaries",id:"finding-boundaries",level:2},{value:"1. First and Last Position",id:"1-first-and-last-position",level:3},{value:"2. Count Occurrences",id:"2-count-occurrences",level:3},{value:"3. Find Floor and Ceiling",id:"3-find-floor-and-ceiling",level:3},{value:"Peak Finding",id:"peak-finding",level:2},{value:"1. Single Peak in 1D Array",id:"1-single-peak-in-1d-array",level:3},{value:"2. Peak in Mountain Array",id:"2-peak-in-mountain-array",level:3},{value:"Search in 2D Arrays",id:"search-in-2d-arrays",level:2},{value:"1. Search in Row-wise and Column-wise Sorted Matrix",id:"1-search-in-row-wise-and-column-wise-sorted-matrix",level:3},{value:"2. Search in Row-sorted Matrix",id:"2-search-in-row-sorted-matrix",level:3},{value:"3. Find Kth Smallest in Sorted Matrix",id:"3-find-kth-smallest-in-sorted-matrix",level:3},{value:"Binary Search on Answer Space",id:"binary-search-on-answer-space",level:2},{value:"General Pattern",id:"general-pattern",level:3},{value:"Pattern 1: Minimize Answer (Find First True)",id:"pattern-1-minimize-answer-find-first-true",level:2},{value:"Template for Minimization",id:"template-for-minimization",level:3},{value:"Setup for Minimization:",id:"setup-for-minimization",level:3},{value:"1. Koko Eating Bananas",id:"1-koko-eating-bananas",level:3},{value:"2. Capacity to Ship Packages",id:"2-capacity-to-ship-packages",level:3},{value:"3. Minimum Days to Make Bouquets",id:"3-minimum-days-to-make-bouquets",level:3},{value:"Pattern 2: Maximize Answer (Find Last True)",id:"pattern-2-maximize-answer-find-last-true",level:2},{value:"Template for Maximization",id:"template-for-maximization",level:3},{value:"Setup for Maximization:",id:"setup-for-maximization",level:3},{value:"1. Magnetic Force Between Balls",id:"1-magnetic-force-between-balls",level:3},{value:"2. Aggressive Cows (Classic Problem)",id:"2-aggressive-cows-classic-problem",level:3},{value:"Precision-Based Binary Search",id:"precision-based-binary-search",level:2},{value:"Square Root with Precision",id:"square-root-with-precision",level:3},{value:"3. Split Array - Largest Sum",id:"3-split-array---largest-sum",level:3},{value:"Summary Table",id:"summary-table",level:2},{value:"Integer vs. Precision Binary Search",id:"integer-vs-precision-binary-search",level:2},{value:"How to Decide?",id:"how-to-decide",level:3},{value:"Common Problems by Pattern",id:"common-problems-by-pattern",level:2},{value:"Pattern 1 - Minimize (Find First True):",id:"pattern-1---minimize-find-first-true",level:3},{value:"Pattern 2 - Maximize (Find Last True):",id:"pattern-2---maximize-find-last-true",level:3},{value:"Precision-Based Problems:",id:"precision-based-problems",level:3},{value:"Advanced Applications",id:"advanced-applications",level:2},{value:"1. Find Duplicate Number",id:"1-find-duplicate-number",level:3},{value:"2. H-Index II",id:"2-h-index-ii",level:3},{value:"3. Russian Doll Envelopes (LIS with Binary Search)",id:"3-russian-doll-envelopes-lis-with-binary-search",level:3},{value:"4. Median of Two Sorted Arrays",id:"4-median-of-two-sorted-arrays",level:3},{value:"Common Pitfalls and Tips",id:"common-pitfalls-and-tips",level:2},{value:"1. Integer Overflow Prevention",id:"1-integer-overflow-prevention",level:3},{value:"2. Loop Termination Conditions",id:"2-loop-termination-conditions",level:3},{value:"3. Mid Calculation for Right Boundary",id:"3-mid-calculation-for-right-boundary",level:3},{value:"4. Helper Functions for Complex Problems",id:"4-helper-functions-for-complex-problems",level:3},{value:"Time Complexity Summary",id:"time-complexity-summary",level:2},{value:"Pattern Recognition Guide",id:"pattern-recognition-guide",level:2},{value:"When to Use Binary Search:",id:"when-to-use-binary-search",level:3},{value:"Key Questions to Ask:",id:"key-questions-to-ask",level:3},{value:"Template Selection:",id:"template-selection",level:3},{value:"Practice Problems by Category",id:"practice-problems-by-category",level:2},{value:"Beginner:",id:"beginner",level:3},{value:"Intermediate:",id:"intermediate",level:3},{value:"Advanced:",id:"advanced",level:3}];function h(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"binary-search",children:"Binary Search"})}),"\n",(0,t.jsx)(e.p,{children:"A comprehensive guide to binary search algorithms and techniques for Data Structures and Algorithms."}),"\n",(0,t.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#basic-binary-search",children:"Basic Binary Search"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#template-patterns",children:"Template Patterns"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#search-in-modified-arrays",children:"Search in Modified Arrays"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#finding-boundaries",children:"Finding Boundaries"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#peak-finding",children:"Peak Finding"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#search-in-2d-arrays",children:"Search in 2D Arrays"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#answer-search-binary-search-on-answer",children:"Answer Search (Binary Search on Answer)"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#advanced-applications",children:"Advanced Applications"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"#common-pitfalls-and-tips",children:"Common Pitfalls and Tips"})}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"basic-binary-search",children:"Basic Binary Search"}),"\n",(0,t.jsx)(e.p,{children:"Binary search is a divide-and-conquer algorithm that searches for a target value in a sorted array by repeatedly dividing the search interval in half."}),"\n",(0,t.jsx)(e.h3,{id:"1-classic-binary-search",children:"1. Classic Binary Search"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function binarySearch(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] === target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1; // Target not found\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," O(log n) | ",(0,t.jsx)(e.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,t.jsx)(e.h3,{id:"2-recursive-binary-search",children:"2. Recursive Binary Search"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function binarySearchRecursive(nums, target, left = 0, right = nums.length - 1) {\n    if (left > right) return -1;\n\n    const mid = Math.floor((left + right) / 2);\n\n    if (nums[mid] === target) {\n        return mid;\n    } else if (nums[mid] < target) {\n        return binarySearchRecursive(nums, target, mid + 1, right);\n    } else {\n        return binarySearchRecursive(nums, target, left, mid - 1);\n    }\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," O(log n) | ",(0,t.jsx)(e.strong,{children:"Space Complexity:"})," O(log n) due to recursion stack"]}),"\n",(0,t.jsx)(e.h3,{id:"3-insert-position",children:"3. Insert Position"}),"\n",(0,t.jsx)(e.p,{children:"Find the index where target should be inserted to maintain sorted order:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function searchInsert(nums, target) {\n    let left = 0;\n    let right = nums.length;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\ud83d\udca1 Pro Tip:"})," Notice we use ",(0,t.jsx)(e.code,{children:"right = nums.length"})," and ",(0,t.jsx)(e.code,{children:"left < right"})," for insertion problems!"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"template-patterns",children:"Template Patterns"}),"\n",(0,t.jsx)(e.p,{children:"Understanding different binary search templates helps solve various problem types."}),"\n",(0,t.jsx)(e.h3,{id:"template-1-basic-search",children:"Template 1: Basic Search"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use when:"})," Direct target comparison\n",(0,t.jsx)(e.strong,{children:"Condition:"})," ",(0,t.jsx)(e.code,{children:"left <= right"}),"\n",(0,t.jsx)(e.strong,{children:"Mid Calculation:"})," ",(0,t.jsx)(e.code,{children:"Math.floor((left + right) / 2)"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function template1(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] === target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"template-2-find-left-boundary",children:"Template 2: Find Left Boundary"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use when:"})," Finding first occurrence or left boundary\n",(0,t.jsx)(e.strong,{children:"Condition:"})," ",(0,t.jsx)(e.code,{children:"left < right"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function template2(nums, target) {\n    let left = 0;\n    let right = nums.length;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"template-3-find-right-boundary",children:"Template 3: Find Right Boundary"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use when:"})," Finding last occurrence or right boundary\n",(0,t.jsx)(e.strong,{children:"Condition:"})," ",(0,t.jsx)(e.code,{children:"left < right"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function template3(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left < right) {\n        const mid = Math.ceil((left + right) / 2);\n\n        if (nums[mid] > target) {\n            right = mid - 1;\n        } else {\n            left = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\ud83d\udd27 Technique:"})," Notice we use ",(0,t.jsx)(e.code,{children:"Math.ceil"})," for right boundary to avoid infinite loops!"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"search-in-modified-arrays",children:"Search in Modified Arrays"}),"\n",(0,t.jsx)(e.h3,{id:"1-search-in-rotated-sorted-array",children:"1. Search in Rotated Sorted Array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function searchRotated(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] === target) {\n            return mid;\n        }\n\n        // Check which half is sorted\n        if (nums[left] <= nums[mid]) {\n            // Left half is sorted\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            // Right half is sorted\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-search-in-rotated-array-ii-with-duplicates",children:"2. Search in Rotated Array II (with Duplicates)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function searchRotatedII(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] === target) {\n            return true;\n        }\n\n        // Handle duplicates\n        if (nums[left] === nums[mid] && nums[mid] === nums[right]) {\n            left++;\n            right--;\n        } else if (nums[left] <= nums[mid]) {\n            // Left half is sorted\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            // Right half is sorted\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-find-minimum-in-rotated-array",children:"3. Find Minimum in Rotated Array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function findMin(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] > nums[right]) {\n            // Minimum is in right half\n            left = mid + 1;\n        } else {\n            // Minimum is in left half (including mid)\n            right = mid;\n        }\n    }\n\n    return nums[left];\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-find-peak-element",children:"4. Find Peak Element"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function findPeakElement(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] < nums[mid + 1]) {\n            // Peak is on the right\n            left = mid + 1;\n        } else {\n            // Peak is on the left (including mid)\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"finding-boundaries",children:"Finding Boundaries"}),"\n",(0,t.jsx)(e.h3,{id:"1-first-and-last-position",children:"1. First and Last Position"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function searchRange(nums, target) {\n    const findFirst = () => {\n        let left = 0;\n        let right = nums.length;\n\n        while (left < right) {\n            const mid = Math.floor((left + right) / 2);\n\n            if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n\n        return left;\n    };\n\n    const findLast = () => {\n        let left = 0;\n        let right = nums.length;\n\n        while (left < right) {\n            const mid = Math.floor((left + right) / 2);\n\n            if (nums[mid] <= target) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n\n        return left - 1;\n    };\n\n    const first = findFirst();\n\n    if (first >= nums.length || nums[first] !== target) {\n        return [-1, -1];\n    }\n\n    return [first, findLast()];\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-count-occurrences",children:"2. Count Occurrences"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function countOccurrences(nums, target) {\n    const [first, last] = searchRange(nums, target);\n\n    if (first === -1) return 0;\n\n    return last - first + 1;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-find-floor-and-ceiling",children:"3. Find Floor and Ceiling"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function findFloor(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n    let floor = -1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] <= target) {\n            floor = nums[mid];\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return floor;\n}\n\nfunction findCeiling(nums, target) {\n    let left = 0;\n    let right = nums.length - 1;\n    let ceiling = -1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (nums[mid] >= target) {\n            ceiling = nums[mid];\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return ceiling;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"peak-finding",children:"Peak Finding"}),"\n",(0,t.jsx)(e.h3,{id:"1-single-peak-in-1d-array",children:"1. Single Peak in 1D Array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function findSinglePeak(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        // Check if mid is a peak\n        const leftVal = mid > 0 ? nums[mid - 1] : -Infinity;\n        const rightVal = mid < nums.length - 1 ? nums[mid + 1] : -Infinity;\n\n        if (nums[mid] >= leftVal && nums[mid] >= rightVal) {\n            return mid;\n        }\n\n        // Move towards the higher side\n        if (leftVal > nums[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-peak-in-mountain-array",children:"2. Peak in Mountain Array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function peakIndexInMountainArray(arr) {\n    let left = 1;\n    let right = arr.length - 2;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {\n            return mid;\n        }\n\n        if (arr[mid] < arr[mid + 1]) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"search-in-2d-arrays",children:"Search in 2D Arrays"}),"\n",(0,t.jsx)(e.h3,{id:"1-search-in-row-wise-and-column-wise-sorted-matrix",children:"1. Search in Row-wise and Column-wise Sorted Matrix"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function searchMatrix(matrix, target) {\n    if (!matrix || matrix.length === 0) return false;\n\n    let row = 0;\n    let col = matrix[0].length - 1;\n\n    while (row < matrix.length && col >= 0) {\n        if (matrix[row][col] === target) {\n            return true;\n        } else if (matrix[row][col] > target) {\n            col--;\n        } else {\n            row++;\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," O(m + n)"]}),"\n",(0,t.jsx)(e.h3,{id:"2-search-in-row-sorted-matrix",children:"2. Search in Row-sorted Matrix"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function searchMatrixRowSorted(matrix, target) {\n    if (!matrix || matrix.length === 0) return false;\n\n    const m = matrix.length;\n    const n = matrix[0].length;\n\n    let left = 0;\n    let right = m * n - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        const midVal = matrix[Math.floor(mid / n)][mid % n];\n\n        if (midVal === target) {\n            return true;\n        } else if (midVal < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Time Complexity:"})," O(log(m * n))"]}),"\n",(0,t.jsx)(e.h3,{id:"3-find-kth-smallest-in-sorted-matrix",children:"3. Find Kth Smallest in Sorted Matrix"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function kthSmallest(matrix, k) {\n    const n = matrix.length;\n    let left = matrix[0][0];\n    let right = matrix[n - 1][n - 1];\n\n    const countLessEqual = (mid) => {\n        let count = 0;\n        let j = n - 1;\n\n        for (let i = 0; i < n; i++) {\n            while (j >= 0 && matrix[i][j] > mid) {\n                j--;\n            }\n            count += (j + 1);\n        }\n\n        return count;\n    };\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (countLessEqual(mid) < k) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"binary-search-on-answer-space",children:"Binary Search on Answer Space"}),"\n",(0,t.jsxs)(e.p,{children:["This powerful technique searches for an ",(0,t.jsx)(e.strong,{children:"answer within a range"})," rather than searching within an array. We use binary search to minimize or maximize some value that meets a condition (predicate)."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Key Insight:"})," Instead of searching ",(0,t.jsx)(e.strong,{children:"within an array"}),", we are searching for an ",(0,t.jsx)(e.strong,{children:"answer"})," within a ",(0,t.jsx)(e.strong,{children:"range"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"This is especially useful for problems like:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Minimum days to complete tasks"}),"\n",(0,t.jsx)(e.li,{children:"Maximum/minimum capacity (e.g., boats, weights)"}),"\n",(0,t.jsx)(e.li,{children:"Scheduling problems"}),"\n",(0,t.jsx)(e.li,{children:"Optimization problems with monotonic properties"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"general-pattern",children:"General Pattern"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function binarySearchSpace(low, high, condition) {\n    let answer = -1;\n\n    while (low <= high) {\n        const mid = Math.floor((low + high) / 2);\n\n        if (condition(mid)) {\n            answer = mid;\n            high = mid - 1; // Try for a smaller valid value\n        } else {\n            low = mid + 1; // Need a bigger value\n        }\n    }\n\n    return answer;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"pattern-1-minimize-answer-find-first-true",children:"Pattern 1: Minimize Answer (Find First True)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Goal:"})," Find the ",(0,t.jsx)(e.strong,{children:"minimum value"})," that satisfies a condition.\n",(0,t.jsx)(e.strong,{children:"Test Case Pattern:"})," ",(0,t.jsx)(e.code,{children:"F F F T T T"})]}),"\n",(0,t.jsx)(e.h3,{id:"template-for-minimization",children:"Template for Minimization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const binarySearchFirstTrue = (minPossible, maxPossible, isValid) => {\n    let left = minPossible;\n    let right = maxPossible;\n    let answer = -1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (isValid(mid)) {\n            answer = mid;        // Record candidate\n            right = mid - 1;     // Try smaller value\n        } else {\n            left = mid + 1;      // Go larger\n        }\n    }\n\n    return answer;\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"setup-for-minimization",children:"Setup for Minimization:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"low"})," = ",(0,t.jsx)(e.strong,{children:"smallest possible value"})," of the answer"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"high"})," = ",(0,t.jsx)(e.strong,{children:"largest possible value"})," of the answer"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Return:"})," ",(0,t.jsx)(e.code,{children:"low"})," (because loop ends when low == smallest valid)"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"1-koko-eating-bananas",children:"1. Koko Eating Bananas"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function minEatingSpeed(piles, h) {\n    const canFinish = (speed) => {\n        let hours = 0;\n        for (const pile of piles) {\n            hours += Math.ceil(pile / speed);\n        }\n        return hours <= h;\n    };\n\n    let left = 1; // Minimum possible speed\n    let right = Math.max(...piles); // Maximum possible speed\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (canFinish(mid)) {\n            right = mid; // Try smaller speed\n        } else {\n            left = mid + 1; // Need faster speed\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-capacity-to-ship-packages",children:"2. Capacity to Ship Packages"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function shipWithinDays(weights, days) {\n    const canShip = (capacity) => {\n        let daysNeeded = 1;\n        let currentWeight = 0;\n\n        for (const weight of weights) {\n            if (currentWeight + weight > capacity) {\n                daysNeeded++;\n                currentWeight = weight;\n            } else {\n                currentWeight += weight;\n            }\n        }\n\n        return daysNeeded <= days;\n    };\n\n    let left = Math.max(...weights); // Must carry heaviest item\n    let right = weights.reduce((sum, weight) => sum + weight, 0); // Carry all at once\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (canShip(mid)) {\n            right = mid; // Try smaller capacity\n        } else {\n            left = mid + 1; // Need larger capacity\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-minimum-days-to-make-bouquets",children:"3. Minimum Days to Make Bouquets"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function minDays(bloomDay, m, k) {\n    const canMakeBouquets = (day) => {\n        let bouquets = 0;\n        let consecutive = 0;\n\n        for (const bloom of bloomDay) {\n            if (bloom <= day) {\n                consecutive++;\n                if (consecutive === k) {\n                    bouquets++;\n                    consecutive = 0;\n                }\n            } else {\n                consecutive = 0;\n            }\n        }\n\n        return bouquets >= m;\n    };\n\n    if (m * k > bloomDay.length) return -1;\n\n    let left = Math.min(...bloomDay);\n    let right = Math.max(...bloomDay);\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (canMakeBouquets(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"pattern-2-maximize-answer-find-last-true",children:"Pattern 2: Maximize Answer (Find Last True)"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Goal:"})," Find the ",(0,t.jsx)(e.strong,{children:"maximum value"})," that still satisfies the condition.\n",(0,t.jsx)(e.strong,{children:"Test Case Pattern:"})," ",(0,t.jsx)(e.code,{children:"T T T F F F"})]}),"\n",(0,t.jsx)(e.h3,{id:"template-for-maximization",children:"Template for Maximization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const binarySearchLastTrue = (minPossible, maxPossible, isValid) => {\n    let left = minPossible;\n    let right = maxPossible;\n    let answer = -1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (isValid(mid)) {\n            answer = mid;       // Record candidate\n            left = mid + 1;     // Try larger value\n        } else {\n            right = mid - 1;    // Go smaller\n        }\n    }\n\n    return answer;\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"setup-for-maximization",children:"Setup for Maximization:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"low"})," = ",(0,t.jsx)(e.strong,{children:"smallest possible value"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"high"})," = ",(0,t.jsx)(e.strong,{children:"largest possible value"})]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Return:"})," ",(0,t.jsx)(e.code,{children:"high"})," (last value that passed)"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"1-magnetic-force-between-balls",children:"1. Magnetic Force Between Balls"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function maxDistance(position, m) {\n    position.sort((a, b) => a - b);\n\n    const canPlace = (minDist) => {\n        let count = 1;\n        let lastPos = position[0];\n\n        for (let i = 1; i < position.length; i++) {\n            if (position[i] - lastPos >= minDist) {\n                count++;\n                lastPos = position[i];\n                if (count >= m) return true;\n            }\n        }\n\n        return false;\n    };\n\n    let left = 1; // Minimum possible distance\n    let right = position[position.length - 1] - position[0]; // Maximum possible distance\n    let answer = 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (canPlace(mid)) {\n            answer = mid;\n            left = mid + 1; // Try larger distance\n        } else {\n            right = mid - 1; // Reduce distance\n        }\n    }\n\n    return answer;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-aggressive-cows-classic-problem",children:"2. Aggressive Cows (Classic Problem)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function aggressiveCows(stalls, cows) {\n    stalls.sort((a, b) => a - b);\n\n    const canPlaceCows = (minDist) => {\n        let count = 1;\n        let lastPos = stalls[0];\n\n        for (let i = 1; i < stalls.length; i++) {\n            if (stalls[i] - lastPos >= minDist) {\n                count++;\n                lastPos = stalls[i];\n                if (count >= cows) return true;\n            }\n        }\n\n        return false;\n    };\n\n    let left = 1;\n    let right = stalls[stalls.length - 1] - stalls[0];\n    let answer = 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (canPlaceCows(mid)) {\n            answer = mid;\n            left = mid + 1; // Try larger distance\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return answer;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"precision-based-binary-search",children:"Precision-Based Binary Search"}),"\n",(0,t.jsx)(e.p,{children:"For problems requiring decimal/floating-point answers:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function precisionBinarySearch(low, high, condition, precision = 1e-6) {\n    while (high - low > precision) {\n        const mid = (low + high) / 2;\n\n        if (condition(mid)) {\n            low = mid; // For maximize\n            // high = mid; // For minimize\n        } else {\n            high = mid; // For maximize\n            // low = mid; // For minimize\n        }\n    }\n\n    return (low + high) / 2;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"square-root-with-precision",children:"Square Root with Precision"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function sqrtPrecision(x, precision = 1e-6) {\n    if (x === 0) return 0;\n\n    let low = 0;\n    let high = x > 1 ? x : 1;\n\n    while (high - low > precision) {\n        const mid = (low + high) / 2;\n\n        if (mid * mid <= x) {\n            low = mid;\n        } else {\n            high = mid;\n        }\n    }\n\n    return (low + high) / 2;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-split-array---largest-sum",children:"3. Split Array - Largest Sum"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function splitArray(nums, m) {\n    const canSplit = (maxSum) => {\n        let splits = 1;\n        let currentSum = 0;\n\n        for (const num of nums) {\n            if (currentSum + num > maxSum) {\n                splits++;\n                currentSum = num;\n            } else {\n                currentSum += num;\n            }\n        }\n\n        return splits <= m;\n    };\n\n    let left = Math.max(...nums);\n    let right = nums.reduce((sum, num) => sum + num, 0);\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (canSplit(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Goal"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Search For"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"If Condition Passes"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Return"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Minimize"})}),(0,t.jsxs)(e.td,{children:["First ",(0,t.jsx)(e.code,{children:"T"})," in ",(0,t.jsx)(e.code,{children:"F F T T T"})]}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"right = mid - 1"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"low"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Maximize"})}),(0,t.jsxs)(e.td,{children:["Last ",(0,t.jsx)(e.code,{children:"T"})," in ",(0,t.jsx)(e.code,{children:"T T T F F"})]}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"left = mid + 1"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"high"})})]})]})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"integer-vs-precision-binary-search",children:"Integer vs. Precision Binary Search"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Type"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Use When..."})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Exit Condition"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Return"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Integer"})}),(0,t.jsx)(e.td,{children:"Answer is a whole number"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"left <= right"})}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"low"})," or ",(0,t.jsx)(e.code,{children:"high"})]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Precision"})}),(0,t.jsx)(e.td,{children:"Answer is decimal/floating-point"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"high - low > precision"})}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.code,{children:"(low + high) / 2"})})]})]})]}),"\n",(0,t.jsx)(e.h3,{id:"how-to-decide",children:"How to Decide?"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Situation"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Use This"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:["Answer is in ",(0,t.jsx)(e.strong,{children:"integer range"})]}),(0,t.jsx)(e.td,{children:"Integer binary search"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsxs)(e.td,{children:["Answer is ",(0,t.jsx)(e.strong,{children:"fractional/decimal"})]}),(0,t.jsx)(e.td,{children:"Precision-based binary search"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"You need answers with 3-6 decimal places"}),(0,t.jsxs)(e.td,{children:["Precision search with ",(0,t.jsx)(e.code,{children:"1e-6"})]})]})]})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"common-problems-by-pattern",children:"Common Problems by Pattern"}),"\n",(0,t.jsx)(e.h3,{id:"pattern-1---minimize-find-first-true",children:"Pattern 1 - Minimize (Find First True):"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Problem"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Description"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Link"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83c\udf4c Koko Eating Bananas"}),(0,t.jsx)(e.td,{children:"Min eating speed"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/koko-eating-bananas/",children:"LeetCode 875"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83d\udce6 Capacity to Ship Packages"}),(0,t.jsx)(e.td,{children:"Min ship capacity"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/",children:"LeetCode 1011"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83c\udf38 Minimum Days to Make Bouquets"}),(0,t.jsx)(e.td,{children:"Min days for bouquets"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/",children:"LeetCode 1482"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83d\udd22 Split Array Largest Sum"}),(0,t.jsx)(e.td,{children:"Min largest sum"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/split-array-largest-sum/",children:"LeetCode 410"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83e\ude99 Ugly Number III"}),(0,t.jsx)(e.td,{children:"Nth ugly number"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/ugly-number-iii/",children:"LeetCode 1201"})})]})]})]}),"\n",(0,t.jsx)(e.h3,{id:"pattern-2---maximize-find-last-true",children:"Pattern 2 - Maximize (Find Last True):"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Problem"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Description"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Link"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83d\udc04 Aggressive Cows"}),(0,t.jsx)(e.td,{children:"Max min distance between cows"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://www.geeksforgeeks.org/aggressive-cows-problem/",children:"GFG"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83e\uddf2 Magnetic Force Between Balls"}),(0,t.jsx)(e.td,{children:"Max min distance between balls"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/magnetic-force-between-two-balls/",children:"LeetCode 1552"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83c\udf6b Divide Chocolate"}),(0,t.jsx)(e.td,{children:"Max min sweetness"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/divide-chocolate/",children:"LeetCode 1231"})})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83d\udcf6 Maximum Average Subarray II"}),(0,t.jsx)(e.td,{children:"Max average with length \u2265 k"}),(0,t.jsx)(e.td,{children:(0,t.jsx)(e.a,{href:"https://leetcode.com/problems/maximum-average-subarray-ii/",children:"LeetCode 644"})})]})]})]}),"\n",(0,t.jsx)(e.h3,{id:"precision-based-problems",children:"Precision-Based Problems:"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Problem"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Description"})}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.strong,{children:"Link"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83d\udcca Square Root with Precision"}),(0,t.jsx)(e.td,{children:"Find \u221ax to given precision"}),(0,t.jsx)(e.td,{children:"Classic"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\ud83e\uddea Cube Root with Precision"}),(0,t.jsx)(e.td,{children:"Find \u221bx to given precision"}),(0,t.jsx)(e.td,{children:"Classic"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"\u26a1 Water Tank Filling"}),(0,t.jsx)(e.td,{children:"Min time to fill tank"}),(0,t.jsx)(e.td,{children:"Practice"})]})]})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"advanced-applications",children:"Advanced Applications"}),"\n",(0,t.jsx)(e.h3,{id:"1-find-duplicate-number",children:"1. Find Duplicate Number"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Floyd's Algorithm variant with Binary Search:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function findDuplicate(nums) {\n    let left = 1;\n    let right = nums.length - 1;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        // Count numbers <= mid\n        let count = 0;\n        for (const num of nums) {\n            if (num <= mid) count++;\n        }\n\n        if (count <= mid) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-h-index-ii",children:"2. H-Index II"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function hIndex(citations) {\n    const n = citations.length;\n    let left = 0;\n    let right = n - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (citations[mid] >= n - mid) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return n - left;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-russian-doll-envelopes-lis-with-binary-search",children:"3. Russian Doll Envelopes (LIS with Binary Search)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function maxEnvelopes(envelopes) {\n    // Sort by width ascending, height descending\n    envelopes.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n\n    const heights = envelopes.map(env => env[1]);\n\n    // Find LIS of heights using binary search\n    const tails = [];\n\n    for (const height of heights) {\n        let left = 0;\n        let right = tails.length;\n\n        while (left < right) {\n            const mid = Math.floor((left + right) / 2);\n\n            if (tails[mid] < height) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n\n        if (left === tails.length) {\n            tails.push(height);\n        } else {\n            tails[left] = height;\n        }\n    }\n\n    return tails.length;\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-median-of-two-sorted-arrays",children:"4. Median of Two Sorted Arrays"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function findMedianSortedArrays(nums1, nums2) {\n    if (nums1.length > nums2.length) {\n        [nums1, nums2] = [nums2, nums1];\n    }\n\n    const m = nums1.length;\n    const n = nums2.length;\n\n    let left = 0;\n    let right = m;\n\n    while (left <= right) {\n        const partitionX = Math.floor((left + right) / 2);\n        const partitionY = Math.floor((m + n + 1) / 2) - partitionX;\n\n        const maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\n        const minRightX = partitionX === m ? Infinity : nums1[partitionX];\n\n        const maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\n        const minRightY = partitionY === n ? Infinity : nums2[partitionY];\n\n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((m + n) % 2 === 0) {\n                return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n            } else {\n                return Math.max(maxLeftX, maxLeftY);\n            }\n        } else if (maxLeftX > minRightY) {\n            right = partitionX - 1;\n        } else {\n            left = partitionX + 1;\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"common-pitfalls-and-tips",children:"Common Pitfalls and Tips"}),"\n",(0,t.jsx)(e.h3,{id:"1-integer-overflow-prevention",children:"1. Integer Overflow Prevention"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// \u274c Wrong: May cause overflow\nconst mid = Math.floor((left + right) / 2);\n\n// \u2705 Correct: Prevents overflow\nconst mid = left + Math.floor((right - left) / 2);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-loop-termination-conditions",children:"2. Loop Termination Conditions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// Template choice affects termination\n// left <= right: Use when returning specific index\n// left < right: Use when finding boundaries or insertion points\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-mid-calculation-for-right-boundary",children:"3. Mid Calculation for Right Boundary"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// For right boundary search, use ceiling to avoid infinite loops\nconst mid = Math.ceil((left + right) / 2);\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-helper-functions-for-complex-problems",children:"4. Helper Functions for Complex Problems"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function binarySearchWithHelper(nums, target) {\n    const isValid = (mid) => {\n        // Custom validation logic\n        return /* some condition */;\n    };\n\n    let left = 0;\n    let right = nums.length - 1;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (isValid(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"time-complexity-summary",children:"Time Complexity Summary"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Operation"}),(0,t.jsx)(e.th,{children:"Time Complexity"}),(0,t.jsx)(e.th,{children:"Space Complexity"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Basic Binary Search"}),(0,t.jsx)(e.td,{children:"O(log n)"}),(0,t.jsx)(e.td,{children:"O(1)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Search in Rotated Array"}),(0,t.jsx)(e.td,{children:"O(log n)"}),(0,t.jsx)(e.td,{children:"O(1)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Find Boundaries"}),(0,t.jsx)(e.td,{children:"O(log n)"}),(0,t.jsx)(e.td,{children:"O(1)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Peak Finding"}),(0,t.jsx)(e.td,{children:"O(log n)"}),(0,t.jsx)(e.td,{children:"O(1)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"2D Matrix Search"}),(0,t.jsx)(e.td,{children:"O(log(m*n))"}),(0,t.jsx)(e.td,{children:"O(1)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Binary Search on Answer"}),(0,t.jsx)(e.td,{children:"O(log(range) * validation)"}),(0,t.jsx)(e.td,{children:"O(1)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Median of Two Arrays"}),(0,t.jsx)(e.td,{children:"O(log(min(m,n)))"}),(0,t.jsx)(e.td,{children:"O(1)"})]})]})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"pattern-recognition-guide",children:"Pattern Recognition Guide"}),"\n",(0,t.jsx)(e.h3,{id:"when-to-use-binary-search",children:"When to Use Binary Search:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Sorted Array"}),": Classic binary search scenarios"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Search Space with Order"}),": Even if not explicitly sorted, if you can determine direction"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Optimization Problems"}),": Find minimum/maximum with monotonic property"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Decision Problems"}),": Can you solve it? \u2192 Find optimal solution"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"key-questions-to-ask",children:"Key Questions to Ask:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Is the search space monotonic?"}),"\n",(0,t.jsx)(e.li,{children:"Can I eliminate half the search space at each step?"}),"\n",(0,t.jsx)(e.li,{children:"What's my invariant condition?"}),"\n",(0,t.jsx)(e.li,{children:"Do I need exact match or boundary?"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"template-selection",children:"Template Selection:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Template 1"}),": Direct target finding"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Template 2"}),": Left boundary, insertion point"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Template 3"}),": Right boundary, last occurrence"]}),"\n"]}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\ud83e\udde0 Remember:"})," Binary search isn't just for sorted arrays - it's for any problem where you can eliminate half the search space!"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"practice-problems-by-category",children:"Practice Problems by Category"}),"\n",(0,t.jsx)(e.h3,{id:"beginner",children:"Beginner:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Binary Search"}),"\n",(0,t.jsx)(e.li,{children:"Search Insert Position"}),"\n",(0,t.jsx)(e.li,{children:"First Bad Version"}),"\n",(0,t.jsx)(e.li,{children:"Valid Perfect Square"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"intermediate",children:"Intermediate:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Search in Rotated Array"}),"\n",(0,t.jsx)(e.li,{children:"Find Peak Element"}),"\n",(0,t.jsx)(e.li,{children:"Search Range"}),"\n",(0,t.jsx)(e.li,{children:"H-Index II"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"advanced",children:"Advanced:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Median of Two Sorted Arrays"}),"\n",(0,t.jsx)(e.li,{children:"Split Array Largest Sum"}),"\n",(0,t.jsx)(e.li,{children:"Capacity to Ship Packages"}),"\n",(0,t.jsx)(e.li,{children:"Russian Doll Envelopes"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"This comprehensive guide covers all essential binary search patterns and techniques for coding interviews and competitive programming!"})]})}function o(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}}}]);