"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[2794],{24195:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(74848),i=n(28453);const r={},s="Tracking the amount of time a user spends on a site",o={id:"WebDev/JavaScript/TrackTime",title:"Tracking the amount of time a user spends on a site",description:"",source:"@site/docs/WebDev/JavaScript/TrackTime.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/TrackTime",permalink:"/docs/WebDev/JavaScript/TrackTime",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/TrackTime.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Throttle & Debounce",permalink:"/docs/WebDev/JavaScript/ThrottleDebounce"},next:{title:"WeakMap, WeakSet, and Generators",permalink:"/docs/WebDev/JavaScript/WeakSetWeakMapGenerator"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"tracking-the-amount-of-time-a-user-spends-on-a-site",children:"Tracking the amount of time a user spends on a site"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-JavaScript",children:"// Record the time when the page loads\nlet startTime = new Date();\nlet totalActiveTime = 0; // Total active time spent on the page\nlet isPageActive = true; // Track if the page is currently active\n\n// Function to calculate time spent\nfunction calculateTimeSpent() {\n    let endTime = new Date();\n    let timeSpent = (endTime - startTime) / 1000; // Convert to seconds\n\n    if (isPageActive) {\n        totalActiveTime += timeSpent; // Add to total active time\n    }\n\n    console.log(`Total active time spent on page: ${totalActiveTime} seconds`);\n\n    // Send the data to your server or analytics tool\n    fetch('/track-time-spent', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ timeSpent: totalActiveTime }),\n    });\n\n    // Reset startTime for the next interval\n    startTime = new Date();\n}\n\n// Track when the user leaves the page\nwindow.addEventListener('beforeunload', calculateTimeSpent);\n\n// Track when the user switches tabs or minimizes the browser\ndocument.addEventListener('visibilitychange', function () {\n    if (document.hidden) {\n        // Page is hidden (user switched tabs or minimized the browser)\n        isPageActive = false;\n        calculateTimeSpent(); // Calculate time spent up to this point\n    } else {\n        // Page is visible again\n        isPageActive = true;\n        startTime = new Date(); // Reset the start time\n    }\n});\n\n// Optional: Track time spent periodically (e.g., every 10 seconds)\nsetInterval(calculateTimeSpent, 10000);\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(96540);const i={},r=a.createContext(i);function s(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);