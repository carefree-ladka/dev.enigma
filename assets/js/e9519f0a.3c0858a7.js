"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[1527],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},95447:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=r(74848),i=r(28453);const t={},l="Spring Boot Microservices Interview Questions & Answers",a={id:"Java Interview Guide/Spring Boot Microservices Interview Questions & Answers",title:"Spring Boot Microservices Interview Questions & Answers",description:"1. Service Communication & Discovery",source:"@site/docs/Java Interview Guide/Spring Boot Microservices Interview Questions & Answers.mdx",sourceDirName:"Java Interview Guide",slug:"/Java Interview Guide/Spring Boot Microservices Interview Questions & Answers",permalink:"/docs/Java Interview Guide/Spring Boot Microservices Interview Questions & Answers",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java Interview Guide/Spring Boot Microservices Interview Questions & Answers.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OOP and Java 8 Interview Questions",permalink:"/docs/Java Interview Guide/OOP and Java 8 Interview Questions"},next:{title:"Threads and Multitasking: OS vs Application Level",permalink:"/docs/Java Interview Guide/Threads and Multitasking: OS vs Application Level"}},o={},c=[{value:"1. Service Communication &amp; Discovery",id:"1-service-communication--discovery",level:3},{value:"2. Distributed Transactions",id:"2-distributed-transactions",level:3},{value:"3. Circuit Breaker &amp; Fault Tolerance",id:"3-circuit-breaker--fault-tolerance",level:3},{value:"4. API Gateway",id:"4-api-gateway",level:3},{value:"5. Configuration Management",id:"5-configuration-management",level:3},{value:"6. Service Discovery Issues",id:"6-service-discovery-issues",level:3},{value:"7. Database per Service",id:"7-database-per-service",level:3},{value:"8. Monitoring &amp; Observability",id:"8-monitoring--observability",level:3},{value:"9. Rate Limiting &amp; Throttling",id:"9-rate-limiting--throttling",level:3},{value:"10. Data Consistency",id:"10-data-consistency",level:3},{value:"11. Security Scenarios",id:"11-security-scenarios",level:3},{value:"12. Deployment &amp; Scaling",id:"12-deployment--scaling",level:3},{value:"13. Caching Strategy",id:"13-caching-strategy",level:3},{value:"14. Message Queue Failures",id:"14-message-queue-failures",level:3},{value:"15. API Versioning",id:"15-api-versioning",level:3},{value:"16. Testing Microservices",id:"16-testing-microservices",level:3},{value:"17. Handling Duplicate Requests",id:"17-handling-duplicate-requests",level:3},{value:"18. Database Connection Pool Exhaustion",id:"18-database-connection-pool-exhaustion",level:3},{value:"19. Service Mesh",id:"19-service-mesh",level:3},{value:"20. Graceful Shutdown",id:"20-graceful-shutdown",level:3},{value:"21. Async Communication Patterns",id:"21-async-communication-patterns",level:3},{value:"22. Backward Compatibility",id:"22-backward-compatibility",level:3},{value:"23. Health Checks &amp; Readiness",id:"23-health-checks--readiness",level:3},{value:"24. Service Dependency Management",id:"24-service-dependency-management",level:3},{value:"25. Data Migration in Microservices",id:"25-data-migration-in-microservices",level:3},{value:"26. Bulkhead Pattern",id:"26-bulkhead-pattern",level:3},{value:"27. API Composition vs Aggregation",id:"27-api-composition-vs-aggregation",level:3},{value:"28. Correlation ID for Debugging",id:"28-correlation-id-for-debugging",level:3},{value:"29. Handling File Uploads",id:"29-handling-file-uploads",level:3},{value:"30. Service-to-Service Authentication",id:"30-service-to-service-authentication",level:3},{value:"31. Timeout Management",id:"31-timeout-management",level:3},{value:"32. Multi-Tenancy",id:"32-multi-tenancy",level:3},{value:"33. Retry Logic with Exponential Backoff",id:"33-retry-logic-with-exponential-backoff",level:3},{value:"34. Canary Deployment",id:"34-canary-deployment",level:3},{value:"35. Database Migration in Production",id:"35-database-migration-in-production",level:3},{value:"36. Event Sourcing",id:"36-event-sourcing",level:3},{value:"37. Handling Third-Party Service Outages",id:"37-handling-third-party-service-outages",level:3},{value:"38. API Response Time SLA",id:"38-api-response-time-sla",level:3},{value:"39. Implementing CQRS",id:"39-implementing-cqrs",level:3},{value:"40. Dealing with Clock Skew",id:"40-dealing-with-clock-skew",level:3},{value:"41. Implementing Feature Flags",id:"41-implementing-feature-flags",level:3},{value:"42. Handling Large Payload",id:"42-handling-large-payload",level:3},{value:"43. Cross-Cutting Concerns",id:"43-cross-cutting-concerns",level:3},{value:"44. Handling Time Zones",id:"44-handling-time-zones",level:3},{value:"45. Implementing Search Functionality",id:"45-implementing-search-functionality",level:3},{value:"46. Handling Partial Failures",id:"46-handling-partial-failures",level:3},{value:"47. Implementing Saga Orchestration",id:"47-implementing-saga-orchestration",level:3},{value:"48. Implementing API Gateway Aggregation",id:"48-implementing-api-gateway-aggregation",level:3},{value:"49. Handling Webhook Retries",id:"49-handling-webhook-retries",level:3},{value:"50. Blue-Green Deployment",id:"50-blue-green-deployment",level:3},{value:"51. Implementing Request Deduplication",id:"51-implementing-request-deduplication",level:3},{value:"52. Handling Schema Evolution",id:"52-handling-schema-evolution",level:3},{value:"53. Implementing Circuit Breaker Dashboard",id:"53-implementing-circuit-breaker-dashboard",level:3},{value:"54. Implementing Distributed Locking",id:"54-implementing-distributed-locking",level:3},{value:"55. Implementing Rate Limiter",id:"55-implementing-rate-limiter",level:3},{value:"Quick Fire Concepts",id:"quick-fire-concepts",level:2},{value:"Event Sourcing",id:"event-sourcing",level:3},{value:"CQRS",id:"cqrs",level:3},{value:"Strangler Pattern",id:"strangler-pattern",level:3},{value:"Backend for Frontend (BFF)",id:"backend-for-frontend-bff",level:3},{value:"Bulkhead Pattern",id:"bulkhead-pattern",level:3},{value:"Sidecar Pattern",id:"sidecar-pattern",level:3},{value:"Ambassador Pattern",id:"ambassador-pattern",level:3},{value:"Anti-Corruption Layer",id:"anti-corruption-layer",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spring-boot-microservices-interview-questions--answers",children:"Spring Boot Microservices Interview Questions & Answers"})}),"\n",(0,s.jsx)(n.h3,{id:"1-service-communication--discovery",children:"1. Service Communication & Discovery"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Your Order Service needs to call Inventory Service. How would you implement this communication?"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A:"})," I'd use:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Synchronous"}),": RestTemplate/WebClient with Service Discovery (Eureka)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Asynchronous"}),": Message Queue (RabbitMQ/Kafka) for eventual consistency"]}),"\n",(0,s.jsx)(n.li,{children:"Register both services with Eureka, use service name instead of hardcoded URLs"}),"\n",(0,s.jsx)(n.li,{children:"Add circuit breaker (Resilience4j) for fault tolerance"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon - Order service checks inventory availability before confirming order."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Multiple instances of Payment Service are running. How does Order Service know which instance to call?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Spring Cloud LoadBalancer"})," (or Ribbon in older versions)"]}),"\n",(0,s.jsx)(n.li,{children:"Services register with Eureka with multiple instances"}),"\n",(0,s.jsx)(n.li,{children:"LoadBalancer automatically does client-side load balancing (Round Robin, Random, etc.)"}),"\n",(0,s.jsxs)(n.li,{children:["Example: ",(0,s.jsx)(n.code,{children:'restTemplate.getForObject("http://PAYMENT-SERVICE/api/pay", PaymentResponse.class)'})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Thousands of instances of streaming service, Eureka distributes load."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"2-distributed-transactions",children:"2. Distributed Transactions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: User places an order: Order Service \u2192 Payment Service \u2192 Inventory Service. If payment succeeds but inventory update fails, how do you handle it?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Saga Pattern"})," (choreography or orchestration)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choreography"}),": Each service publishes events, others listen and react","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Order Created \u2192 Payment Processes \u2192 Inventory Updates"}),"\n",(0,s.jsx)(n.li,{children:"If fails: Publish compensation events (refund payment)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Orchestration"}),": Central orchestrator manages the flow"]}),"\n",(0,s.jsx)(n.li,{children:"Use eventual consistency, avoid distributed 2PC"}),"\n",(0,s.jsx)(n.li,{children:"Implement compensating transactions for rollback"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Uber Eats - Order placed \u2192 Restaurant confirms \u2192 Delivery assigned. If restaurant cancels, refund payment automatically."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How would you implement Saga pattern with Spring Boot?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Choreography with Kafka\n@KafkaListener(topics = "order-created")\npublic void processPayment(OrderEvent event) {\n    try {\n        paymentService.processPayment(event);\n        kafkaTemplate.send("payment-success", event);\n    } catch (Exception e) {\n        kafkaTemplate.send("payment-failed", event);\n    }\n}\n\n// Compensation\n@KafkaListener(topics = "payment-failed")\npublic void cancelOrder(OrderEvent event) {\n    orderService.cancelOrder(event.getOrderId());\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Airbnb - Booking \u2192 Payment \u2192 Host notification \u2192 Calendar block. Any failure triggers compensating transactions."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"3-circuit-breaker--fault-tolerance",children:"3. Circuit Breaker & Fault Tolerance"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Your Order Service calls Payment Service, but Payment Service is down. How do you handle this?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"Circuit Breaker"})," using Resilience4j"]}),"\n",(0,s.jsx)(n.li,{children:"Three states: Closed \u2192 Open \u2192 Half-Open"}),"\n",(0,s.jsx)(n.li,{children:"After threshold failures, circuit opens (stops calling service)"}),"\n",(0,s.jsx)(n.li,{children:"Provide fallback response"}),"\n",(0,s.jsx)(n.li,{children:"Periodically retry (half-open state)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@CircuitBreaker(name = "paymentService", fallbackMethod = "paymentFallback")\npublic PaymentResponse processPayment(PaymentRequest request) {\n    return restTemplate.postForObject(url, request, PaymentResponse.class);\n}\n\npublic PaymentResponse paymentFallback(PaymentRequest request, Exception e) {\n    return new PaymentResponse("Payment service unavailable, order queued");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - If recommendation service fails, show default content instead of error page."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Circuit breaker keeps opening during peak hours. How do you debug?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Check Actuator metrics: ",(0,s.jsx)(n.code,{children:"/actuator/health"}),", ",(0,s.jsx)(n.code,{children:"/actuator/circuitbreakers"})]}),"\n",(0,s.jsx)(n.li,{children:"Review circuit breaker config (failure threshold, wait duration)"}),"\n",(0,s.jsx)(n.li,{children:"Check downstream service logs and health"}),"\n",(0,s.jsx)(n.li,{children:"Monitor using Micrometer + Prometheus/Grafana"}),"\n",(0,s.jsx)(n.li,{children:"Verify timeout settings aren't too aggressive"}),"\n",(0,s.jsx)(n.li,{children:"Scale downstream service if consistently overloaded"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Flipkart during Big Billion Days - Circuit breakers prevent cascade failures when services get overloaded."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"4-api-gateway",children:"4. API Gateway"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: You have 15 microservices. Frontend needs to call multiple services. How do you manage this?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"API Gateway"})," (Spring Cloud Gateway or Netflix Zuul)"]}),"\n",(0,s.jsx)(n.li,{children:"Single entry point for all clients"}),"\n",(0,s.jsx)(n.li,{children:"Routes requests to appropriate microservices"}),"\n",(0,s.jsxs)(n.li,{children:["Handles cross-cutting concerns:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Authentication/Authorization"}),"\n",(0,s.jsx)(n.li,{children:"Rate limiting"}),"\n",(0,s.jsx)(n.li,{children:"Request/Response transformation"}),"\n",(0,s.jsx)(n.li,{children:"Load balancing"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"spring:\n  cloud:\n    gateway:\n      routes:\n        - id: order-service\n          uri: lb://ORDER-SERVICE\n          predicates:\n            - Path=/api/orders/**\n          filters:\n            - name: CircuitBreaker\n              args:\n                name: orderService\n                fallbackUri: forward:/fallback/orders\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon AWS API Gateway - Single entry point for all AWS services."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you secure APIs in API Gateway?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Integrate with OAuth2/JWT authentication"}),"\n",(0,s.jsx)(n.li,{children:"Validate tokens at gateway level"}),"\n",(0,s.jsx)(n.li,{children:"Use Spring Security with resource server"}),"\n",(0,s.jsx)(n.li,{children:"Pass user context to downstream services via headers"}),"\n",(0,s.jsx)(n.li,{children:"Implement rate limiting per user/API key"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Stripe API - All requests go through gateway, authenticated via API keys."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"5-configuration-management",children:"5. Configuration Management"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: You need to change database URL across 10 microservices without redeployment. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Spring Cloud Config Server"})]}),"\n",(0,s.jsx)(n.li,{children:"Centralized configuration in Git repository"}),"\n",(0,s.jsx)(n.li,{children:"Services fetch config on startup"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"@RefreshScope"})," for runtime refresh"]}),"\n",(0,s.jsxs)(n.li,{children:["Trigger refresh via ",(0,s.jsx)(n.code,{children:"/actuator/refresh"})," endpoint or Spring Cloud Bus"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@RestController\n@RefreshScope\npublic class OrderController {\n    @Value("${database.url}")\n    private String dbUrl;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Spotify - Configuration changes pushed to thousands of microservices without restart."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you handle sensitive data like passwords in Config Server?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encrypt"})," properties using Spring Cloud Config encryption"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Vault"})," for secrets management"]}),"\n",(0,s.jsx)(n.li,{children:"Environment variables for cloud deployments"}),"\n",(0,s.jsx)(n.li,{children:"Never commit plain text secrets to Git"}),"\n",(0,s.jsxs)(n.li,{children:["Example: ",(0,s.jsx)(n.code,{children:"{cipher}AQA7h8fj3h4k5..."})," in properties file"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": PayPal - All secrets stored in HashiCorp Vault, never in code."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"6-service-discovery-issues",children:"6. Service Discovery Issues"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Service registered with Eureka but other services can't discover it. How do you troubleshoot?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Check Eureka dashboard: ",(0,s.jsx)(n.code,{children:"http://eureka-server:8761"})]}),"\n",(0,s.jsxs)(n.li,{children:["Verify service registration config:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"eureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n    register-with-eureka: true\n    fetch-registry: true\n"})}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Check network connectivity between services"}),"\n",(0,s.jsx)(n.li,{children:"Verify application name is correct"}),"\n",(0,s.jsx)(n.li,{children:"Check if instance is showing as UP in Eureka"}),"\n",(0,s.jsx)(n.li,{children:"Review heartbeat intervals and renewal thresholds"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Eureka was created to handle their massive service discovery needs."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"7-database-per-service",children:"7. Database per Service"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Order Service needs customer email from User Service for sending confirmation. How do you handle this?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Option 1"}),": API call to User Service (synchronous)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Option 2"}),": Event-driven - User Service publishes user events, Order Service maintains read replica"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Option 3"}),": API Composition in API Gateway"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Option 4"}),": CQRS pattern with shared read database"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For critical data: Synchronous call with caching\nFor non-critical: Event-driven eventual consistency"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Uber - Ride service maintains denormalized user data to avoid constant calls to user service."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you handle database joins across microservices?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoid joins across services"}),"\n",(0,s.jsx)(n.li,{children:"Use API composition in application layer"}),"\n",(0,s.jsx)(n.li,{children:"Implement CQRS with materialized views"}),"\n",(0,s.jsx)(n.li,{children:"Denormalize data where necessary"}),"\n",(0,s.jsx)(n.li,{children:"Use event sourcing to maintain consistency"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Twitter - Tweet service maintains denormalized user info to display tweets without calling user service every time."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"8-monitoring--observability",children:"8. Monitoring & Observability"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Production issue: API response time suddenly increased from 200ms to 5 seconds. How do you debug?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check APM tools"}),": Zipkin/Sleuth for distributed tracing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Review logs"}),": Aggregate logs (ELK stack)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics"}),": Prometheus/Grafana for CPU, memory, DB connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Trace ID"}),": Follow request across services"]}),"\n",(0,s.jsxs)(n.li,{children:["Check:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database query performance"}),"\n",(0,s.jsx)(n.li,{children:"External API latency"}),"\n",(0,s.jsx)(n.li,{children:"Network issues"}),"\n",(0,s.jsx)(n.li,{children:"Circuit breaker state"}),"\n",(0,s.jsx)(n.li,{children:"Resource exhaustion (threads, connections)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": LinkedIn - Uses distributed tracing to identify bottlenecks in their feed generation pipeline."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you implement distributed tracing?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Add dependencies\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-sleuth-zipkin</artifactId>\n</dependency>\n\n// Configuration\nspring:\n  zipkin:\n    base-url: http://localhost:9411\n  sleuth:\n    sampler:\n      probability: 1.0  # 100% sampling for dev\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Each request gets unique Trace ID"}),"\n",(0,s.jsx)(n.li,{children:"Span ID for each service hop"}),"\n",(0,s.jsx)(n.li,{children:"Visualize in Zipkin UI"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Google Dapper - Pioneered distributed tracing for their microservices."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"9-rate-limiting--throttling",children:"9. Rate Limiting & Throttling"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: External API allows only 100 requests/minute. Multiple instances of your service exist. How do you implement rate limiting?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"distributed rate limiter"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Redis-based rate limiting (Spring Cloud Gateway + Redis)"}),"\n",(0,s.jsx)(n.li,{children:"Bucket4j with distributed backend"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Store counter in Redis with TTL"}),"\n",(0,s.jsx)(n.li,{children:"Implement token bucket or sliding window algorithm"}),"\n",(0,s.jsx)(n.li,{children:"Return 429 Too Many Requests when limit exceeded"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Bean\npublic RouteLocator routes(RouteLocatorBuilder builder) {\n    return builder.routes()\n        .route("limited-route", r -> r.path("/api/**")\n            .filters(f -> f.requestRateLimiter(c -> c\n                .setRateLimiter(redisRateLimiter())\n                .setKeyResolver(userKeyResolver())))\n            .uri("lb://BACKEND-SERVICE"))\n        .build();\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Twitter API - Rate limits per user/app to prevent abuse."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you implement per-user rate limiting across multiple gateway instances?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Redis with user ID as key"}),"\n",(0,s.jsx)(n.li,{children:"Implement sliding window counter"}),"\n",(0,s.jsx)(n.li,{children:"Store request timestamps in Redis sorted set"}),"\n",(0,s.jsx)(n.li,{children:"Clean up old entries beyond time window"}),"\n",(0,s.jsx)(n.li,{children:"Atomic operations to prevent race conditions"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": GitHub API - Different rate limits for authenticated vs unauthenticated users."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"10-data-consistency",children:"10. Data Consistency"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: User updates profile in User Service. Order Service shows old data. How do you ensure consistency?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event-Driven Architecture"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'User Service publishes "UserUpdated" event to Kafka'}),"\n",(0,s.jsx)(n.li,{children:"Order Service subscribes and updates its cache/read replica"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache invalidation"}),": Invalidate cache on update"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TTL on cache"}),": Set expiration time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CQRS"}),": Separate read/write models"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eventual consistency"}),": Accept slight delay (usually acceptable)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Facebook - Profile updates eventually propagate to all services through event streams."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"11-security-scenarios",children:"11. Security Scenarios"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you secure inter-service communication?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"mTLS"})," (mutual TLS) for service-to-service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JWT tokens"})," passed via headers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service mesh"})," (Istio) for automatic encryption"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Gateway"})," validates external requests"]}),"\n",(0,s.jsx)(n.li,{children:"Internal services validate JWT and check roles"}),"\n",(0,s.jsx)(n.li,{children:"Use Spring Security OAuth2 Resource Server"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .oauth2ResourceServer()\n            .jwt()\n            .jwtAuthenticationConverter(jwtConverter());\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Google Cloud - All internal service communication encrypted with mTLS."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you implement SSO across microservices?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"OAuth2/OpenID Connect"})," with Keycloak/Okta"]}),"\n",(0,s.jsx)(n.li,{children:"API Gateway handles authentication"}),"\n",(0,s.jsx)(n.li,{children:"Issues JWT token after login"}),"\n",(0,s.jsx)(n.li,{children:"Token contains user info and roles"}),"\n",(0,s.jsx)(n.li,{children:"All services validate same token"}),"\n",(0,s.jsx)(n.li,{children:"Centralized user session management"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Microsoft 365 - Single sign-on across all Microsoft services (Teams, Outlook, OneDrive)."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: JWT token is compromised. How do you revoke it before expiration?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Maintain ",(0,s.jsx)(n.strong,{children:"token blacklist"})," in Redis with expiry"]}),"\n",(0,s.jsx)(n.li,{children:"Check blacklist on each request"}),"\n",(0,s.jsx)(n.li,{children:"Use short-lived access tokens (5-15 min)"}),"\n",(0,s.jsx)(n.li,{children:"Long-lived refresh tokens stored securely"}),"\n",(0,s.jsx)(n.li,{children:"Implement token versioning (increment version on password change)"}),"\n",(0,s.jsx)(n.li,{children:"Force re-authentication if needed"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": AWS - Uses temporary security tokens that expire after short duration."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"12-deployment--scaling",children:"12. Deployment & Scaling"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Order Service receives 10x traffic during sale. How do you auto-scale?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Kubernetes HPA"})," (Horizontal Pod Autoscaler):","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: order-service-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: order-service\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n"})}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Monitor CPU/Memory metrics"}),"\n",(0,s.jsx)(n.li,{children:"Scale based on custom metrics (queue depth, request rate)"}),"\n",(0,s.jsx)(n.li,{children:"Use caching (Redis) to reduce database load"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon Prime Day - Auto-scales services to handle massive traffic spikes."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Database becomes bottleneck during scaling. How do you handle?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read replicas"})," for read-heavy operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection pooling"})," optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching layer"})," (Redis/Memcached)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database sharding"})," for write scalability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CQRS"})," with separate read/write databases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Queue-based writes"})," for non-critical operations"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Instagram - Uses read replicas and aggressive caching to handle billions of requests."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"13-caching-strategy",children:"13. Caching Strategy"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Product catalog changes rarely but is queried frequently. How do you optimize?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-level caching"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"L1: In-memory cache (Caffeine) in each service instance"}),"\n",(0,s.jsx)(n.li,{children:"L2: Distributed cache (Redis) shared across instances"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache-aside pattern"}),": Check cache \u2192 if miss, query DB \u2192 update cache"]}),"\n",(0,s.jsx)(n.li,{children:"Set appropriate TTL based on data freshness requirement"}),"\n",(0,s.jsx)(n.li,{children:"Cache invalidation on product updates via events"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Cacheable(value = "products", key = "#productId")\npublic Product getProduct(Long productId) {\n    return productRepository.findById(productId);\n}\n\n@CacheEvict(value = "products", key = "#product.id")\npublic void updateProduct(Product product) {\n    productRepository.save(product);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Caches movie metadata to reduce database load."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Cache stampede occurs when popular cache expires. How do you prevent?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mutex/Lock"}),": First thread refreshes, others wait"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Probabilistic early expiration"}),": Refresh before actual expiry"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Background refresh"}),": Async refresh before expiry"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stale-while-revalidate"}),": Serve stale data while refreshing"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public Product getProduct(Long id) {\n    RLock lock = redisson.getLock("product:" + id);\n    if (lock.tryLock()) {\n        try {\n            return refreshCache(id);\n        } finally {\n            lock.unlock();\n        }\n    } else {\n        return getFromCache(id); // Wait and get from cache\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Reddit - Handles cache stampede during major events using distributed locks."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"14-message-queue-failures",children:"14. Message Queue Failures"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Message sent to Kafka but consumer fails to process. How do you handle?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retry mechanism"}),": Retry with exponential backoff"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dead Letter Queue (DLQ)"}),": Move failed messages after max retries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Idempotency"}),": Ensure consumers can handle duplicate messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manual intervention"}),": Monitor DLQ and fix issues"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@KafkaListener(topics = "orders", groupId = "order-processor")\npublic void processOrder(Order order) {\n    try {\n        orderService.process(order);\n    } catch (Exception e) {\n        log.error("Failed to process order: {}", order.getId(), e);\n        throw e; // Message goes to DLQ after max retries\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Uber - Uses Kafka with DLQ for ride matching failures."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Kafka consumer lags behind producer significantly. How do you handle?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Increase consumer instances"})," (scale out)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Increase partition count"})," for parallelism"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize consumer processing"})," (batch processing, async ops)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separate slow vs fast processing"})," paths"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor consumer lag"})," with Prometheus"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backpressure mechanism"})," to slow down producer if needed"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": LinkedIn - Monitors consumer lag closely for their feed generation pipeline."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"15-api-versioning",children:"15. API Versioning"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Breaking changes needed in User API. Existing clients can't update immediately. How do you handle?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"URI versioning"}),": ",(0,s.jsx)(n.code,{children:"/api/v1/users"})," vs ",(0,s.jsx)(n.code,{children:"/api/v2/users"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Header versioning"}),": ",(0,s.jsx)(n.code,{children:"Accept: application/vnd.api.v2+json"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Run both versions"})," simultaneously"]}),"\n",(0,s.jsx)(n.li,{children:"Gradual migration with deprecation notices"}),"\n",(0,s.jsx)(n.li,{children:"Use API Gateway to route based on version"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/v1/users")\npublic class UserControllerV1 {\n    // Old implementation\n}\n\n@RestController\n@RequestMapping("/api/v2/users")\npublic class UserControllerV2 {\n    // New implementation\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Stripe - Maintains multiple API versions with clear deprecation timeline."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"16-testing-microservices",children:"16. Testing Microservices"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you test integration between Order Service and Payment Service without actual Payment Service?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Contract Testing"}),": Use Pact or Spring Cloud Contract"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WireMock"}),": Mock HTTP responses for testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TestContainers"}),": Run actual service in Docker for integration tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component Tests"}),": Test with in-memory implementations"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@AutoConfigureWireMock(port = 8081)\nclass OrderServiceTest {\n\n    @Test\n    void testPaymentIntegration() {\n        stubFor(post(urlEqualTo("/api/payment"))\n            .willReturn(aResponse()\n                .withStatus(200)\n                .withHeader("Content-Type", "application/json")\n                .withBody("{\\"status\\":\\"SUCCESS\\"}")));\n\n        PaymentResponse response = orderService.processPayment(request);\n        assertEquals("SUCCESS", response.getStatus());\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Spotify - Uses contract testing to ensure service compatibility."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"17-handling-duplicate-requests",children:"17. Handling Duplicate Requests"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Network issue causes client to retry payment request. How do you prevent duplicate charges?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Idempotency Key"}),": Client sends unique ID with request"]}),"\n",(0,s.jsx)(n.li,{children:"Store processed request IDs in Redis/DB with TTL"}),"\n",(0,s.jsx)(n.li,{children:"Check if ID already processed before executing"}),"\n",(0,s.jsx)(n.li,{children:"Return cached response for duplicate requests"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@PostMapping("/api/payment")\npublic ResponseEntity<PaymentResponse> processPayment(\n    @RequestHeader("Idempotency-Key") String idempotencyKey,\n    @RequestBody PaymentRequest request) {\n\n    PaymentResponse cached = redisTemplate.opsForValue()\n        .get("payment:" + idempotencyKey);\n    if (cached != null) {\n        return ResponseEntity.ok(cached);\n    }\n\n    PaymentResponse response = paymentService.process(request);\n    redisTemplate.opsForValue()\n        .set("payment:" + idempotencyKey, response, 24, TimeUnit.HOURS);\n\n    return ResponseEntity.ok(response);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Stripe - All API requests support idempotency keys to prevent duplicate operations."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"18-database-connection-pool-exhaustion",children:"18. Database Connection Pool Exhaustion"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'Q: Service crashes with "Too many connections" error during peak load. How do you fix?'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tune connection pool"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"spring:\n  datasource:\n    hikari:\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 30000\n      idle-timeout: 600000\n      max-lifetime: 1800000\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor active connections"}),": Use Actuator metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fix connection leaks"}),": Ensure proper try-with-resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read replicas"}),": Separate read/write connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Reduce database queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async processing"}),": Move long operations to message queue"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Stack Overflow - Optimizes connection pools to handle traffic spikes efficiently."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"19-service-mesh",children:"19. Service Mesh"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Managing service-to-service communication is complex. How does service mesh help?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Istio/Linkerd"})," handles:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Traffic management (routing, load balancing)"}),"\n",(0,s.jsx)(n.li,{children:"Security (mTLS, authentication)"}),"\n",(0,s.jsx)(n.li,{children:"Observability (tracing, metrics)"}),"\n",(0,s.jsx)(n.li,{children:"Resilience (retries, timeouts, circuit breakers)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sidecar proxy"})," injected into each pod"]}),"\n",(0,s.jsx)(n.li,{children:"Configuration via YAML, no code changes"}),"\n",(0,s.jsx)(n.li,{children:"Centralized policy enforcement"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Lyft - Created Envoy proxy, foundation for Istio service mesh."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"20-graceful-shutdown",children:"20. Graceful Shutdown"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Kubernetes terminates pod while processing requests. How do you handle gracefully?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Deployment configuration\nspec:\n  template:\n    spec:\n      containers:\n      - name: order-service\n        lifecycle:\n          preStop:\n            exec:\n              command: ["/bin/sh", "-c", "sleep 15"]\n      terminationGracePeriodSeconds: 30\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class GracefulShutdown {\n    @PreDestroy\n    public void onShutdown() {\n        log.info("Shutting down gracefully...");\n        // Stop accepting new requests\n        // Wait for existing requests to complete\n        // Close database connections\n        // Flush caches\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Google - Drains traffic before pod termination to ensure zero downtime."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"21-async-communication-patterns",children:"21. Async Communication Patterns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Order placed needs to trigger email, SMS, push notification. How do you design this?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Publish-Subscribe pattern"})," with Kafka"]}),"\n",(0,s.jsx)(n.li,{children:'Order Service publishes "OrderPlaced" event'}),"\n",(0,s.jsx)(n.li,{children:"Multiple consumers: Email Service, SMS Service, Notification Service"}),"\n",(0,s.jsx)(n.li,{children:"Each consumes independently, no blocking"}),"\n",(0,s.jsx)(n.li,{children:"Failures don't affect order placement"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class OrderService {\n    public void placeOrder(Order order) {\n        orderRepository.save(order);\n        kafkaTemplate.send("order-placed", new OrderEvent(order));\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon - Order confirmation triggers multiple async notifications."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"22-backward-compatibility",children:"22. Backward Compatibility"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: You added a new mandatory field to User API. Old clients break. How to fix?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Never make fields mandatory"})," in breaking way"]}),"\n",(0,s.jsx)(n.li,{children:"Use optional fields with default values"}),"\n",(0,s.jsx)(n.li,{children:"Implement backward-compatible changes only"}),"\n",(0,s.jsx)(n.li,{children:"If mandatory: create new version endpoint"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"@JsonIgnoreProperties"})," to ignore unknown fields"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Google APIs - Maintain backward compatibility for years."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"23-health-checks--readiness",children:"23. Health Checks & Readiness"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Service starts but isn't ready to serve traffic. How do you handle in Kubernetes?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"livenessProbe:\n  httpGet:\n    path: /actuator/health/liveness\n    port: 8080\n  initialDelaySeconds: 30\n  periodSeconds: 10\n\nreadinessProbe:\n  httpGet:\n    path: /actuator/health/readiness\n    port: 8080\n  initialDelaySeconds: 10\n  periodSeconds: 5\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class DatabaseHealthIndicator implements HealthIndicator {\n    @Override\n    public Health health() {\n        try {\n            // Check DB connection\n            return Health.up().build();\n        } catch (Exception e) {\n            return Health.down(e).build();\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Uses sophisticated health checks to route traffic only to healthy instances."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"24-service-dependency-management",children:"24. Service Dependency Management"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Service A depends on B, C, D. If D is down, should A start?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fail-fast approach"}),": Don't start if critical dependencies down"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resilient approach"}),": Start with circuit breakers, fallbacks for non-critical deps"]}),"\n",(0,s.jsx)(n.li,{children:"Use health checks to verify dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Implement retry logic with exponential backoff"}),"\n",(0,s.jsx)(n.li,{children:"Distinguish critical vs non-critical dependencies"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Airbnb - Services start even if non-critical dependencies are down."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"25-data-migration-in-microservices",children:"25. Data Migration in Microservices"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Need to migrate 10 million users from monolith to User microservice. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Strangler pattern"}),": Gradually route traffic to new service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dual-write pattern"}),": Write to both old and new systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Background sync"}),": Async migration of existing data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature flags"}),": Toggle between old/new system"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verify data consistency"})," before full cutover"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rollback plan"})," if issues arise"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Migrated from monolith to microservices over several years using strangler pattern."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"26-bulkhead-pattern",children:"26. Bulkhead Pattern"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: One slow API endpoint is consuming all threads, affecting other endpoints. How to isolate?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bulkhead pattern"}),": Separate thread pools per operation"]}),"\n",(0,s.jsx)(n.li,{children:"Configure thread pools in Resilience4j"}),"\n",(0,s.jsx)(n.li,{children:"Prevent one operation from exhausting resources"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Bulkhead(name = "slowOperation", type = Bulkhead.Type.THREADPOOL)\npublic CompletableFuture<Report> generateReport() {\n    return CompletableFuture.supplyAsync(() -> reportService.generate());\n}\n\n// Configuration\nresilience4j.bulkhead:\n  configs:\n    default:\n      maxConcurrentCalls: 10\n  instances:\n    slowOperation:\n      maxConcurrentCalls: 5\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon - Isolates resources for different operations to prevent cascading failures."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"27-api-composition-vs-aggregation",children:"27. API Composition vs Aggregation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Frontend needs data from 5 microservices for dashboard. How do you optimize?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Gateway aggregation"}),": Gateway calls all services, combines response"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GraphQL"}),": Let client specify exactly what data needed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend for Frontend (BFF)"}),": Dedicated backend for each frontend type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel calls"})," with CompletableFuture"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"})," for frequently accessed data"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public DashboardResponse getDashboard(String userId) {\n    CompletableFuture<User> userFuture =\n        CompletableFuture.supplyAsync(() -> userService.getUser(userId));\n    CompletableFuture<List<Order>> ordersFuture =\n        CompletableFuture.supplyAsync(() -> orderService.getOrders(userId));\n    CompletableFuture<Wallet> walletFuture =\n        CompletableFuture.supplyAsync(() -> walletService.getWallet(userId));\n\n    CompletableFuture.allOf(userFuture, ordersFuture, walletFuture).join();\n\n    return new DashboardResponse(\n        userFuture.get(), ordersFuture.get(), walletFuture.get()\n    );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Uses GraphQL for efficient data fetching across services."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"28-correlation-id-for-debugging",children:"28. Correlation ID for Debugging"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Customer complains order failed, but you have logs from 50 microservices. How to debug?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Generate ",(0,s.jsx)(n.strong,{children:"correlation/trace ID"})," at API Gateway"]}),"\n",(0,s.jsx)(n.li,{children:"Pass via HTTP header to all downstream services"}),"\n",(0,s.jsx)(n.li,{children:"Log correlation ID in every log statement"}),"\n",(0,s.jsx)(n.li,{children:"Use ELK/Splunk to search by correlation ID"}),"\n",(0,s.jsx)(n.li,{children:"Trace entire request flow across services"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class CorrelationIdFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                   HttpServletResponse response,\n                                   FilterChain filterChain) {\n        String correlationId = request.getHeader("X-Correlation-ID");\n        if (correlationId == null) {\n            correlationId = UUID.randomUUID().toString();\n        }\n        MDC.put("correlationId", correlationId);\n        response.setHeader("X-Correlation-ID", correlationId);\n        filterChain.doFilter(request, response);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Uber - Traces every ride request across hundreds of microservices using correlation IDs."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"29-handling-file-uploads",children:"29. Handling File Uploads"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: User uploads product images. Where do you store and how do you handle large files in microservices?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Never store in database"})," (use blob storage)"]}),"\n",(0,s.jsxs)(n.li,{children:["Upload to ",(0,s.jsx)(n.strong,{children:"S3/Azure Blob/GCS"})," directly from client"]}),"\n",(0,s.jsxs)(n.li,{children:["Generate ",(0,s.jsx)(n.strong,{children:"pre-signed URLs"})," for secure upload"]}),"\n",(0,s.jsx)(n.li,{children:"Store only file metadata in database"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"CDN"})," for serving images"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"chunked uploads"})," for large files"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@PostMapping("/upload")\npublic ResponseEntity<String> generateUploadUrl(@RequestParam String fileName) {\n    String key = UUID.randomUUID() + "/" + fileName;\n    URL presignedUrl = s3Client.generatePresignedUrl(bucketName, key, expiration);\n\n    fileMetadataRepo.save(new FileMetadata(key, fileName, userId));\n    return ResponseEntity.ok(presignedUrl.toString());\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Instagram - Uploads photos directly to S3, serves via CloudFront CDN."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"30-service-to-service-authentication",children:"30. Service-to-Service Authentication"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: How do you ensure only Order Service can call Inventory Service, not any unauthorized service?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service accounts"})," with unique credentials"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"mTLS"})," with certificate verification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API keys"})," per service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JWT tokens"})," with service identity in claims"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service mesh"})," automatic authentication (Istio)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network policies"})," in Kubernetes"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class ServiceAuthConfig {\n    @Bean\n    public RestTemplate restTemplate() {\n        RestTemplate template = new RestTemplate();\n        template.getInterceptors().add((request, body, execution) -> {\n            request.getHeaders().add("X-Service-Key", serviceKey);\n            return execution.execute(request, body);\n        });\n        return template;\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Google Cloud - Uses service accounts for inter-service authentication."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"31-timeout-management",children:"31. Timeout Management"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Payment gateway takes 30 seconds sometimes. Your Order Service times out at 5 seconds. How to handle?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async processing"}),": Queue payment requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Webhook callback"}),": Payment gateway calls back when done"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Polling"}),": Check payment status periodically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circuit breaker"}),": Stop calling if consistently slow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Different timeouts"})," for different operations"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@HystrixCommand(\n    commandProperties = {\n        @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",\n                        value = "30000")\n    },\n    fallbackMethod = "paymentFallback"\n)\npublic PaymentResponse processPayment(PaymentRequest request) {\n    return paymentGateway.charge(request);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": PayPal - Uses webhooks for payment confirmation instead of synchronous responses."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"32-multi-tenancy",children:"32. Multi-Tenancy"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Same microservices serve multiple clients (tenants). How do you isolate data?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database per tenant"}),": Complete isolation (expensive)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schema per tenant"}),": Shared DB, separate schemas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared schema with tenant_id"}),": Row-level security"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"tenant context"})," in request headers"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"tenant resolver"})," interceptor"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class TenantInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request,\n                            HttpServletResponse response,\n                            Object handler) {\n        String tenantId = request.getHeader("X-Tenant-ID");\n        TenantContext.setCurrentTenant(tenantId);\n        return true;\n    }\n}\n\n@Aspect\npublic class TenantAspect {\n    @Before("@annotation(MultiTenant)")\n    public void setTenantFilter() {\n        String tenantId = TenantContext.getCurrentTenant();\n        // Set hibernate filter or query parameter\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Salesforce - Multi-tenant architecture serving thousands of organizations on shared infrastructure."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"33-retry-logic-with-exponential-backoff",children:"33. Retry Logic with Exponential Backoff"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: External API occasionally fails with 503. How do you implement smart retry?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Resilience4j Retry"})," with exponential backoff"]}),"\n",(0,s.jsxs)(n.li,{children:["Retry only on ",(0,s.jsx)(n.strong,{children:"retriable errors"})," (5xx, timeout)"]}),"\n",(0,s.jsxs)(n.li,{children:["Don't retry on ",(0,s.jsx)(n.strong,{children:"4xx errors"})," (client errors)"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"jitter"})," to avoid thundering herd"]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.strong,{children:"max retry attempts"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Retry(name = "externalApi", fallbackMethod = "apiFallback")\npublic ApiResponse callExternalApi() {\n    return restTemplate.getForObject(externalApiUrl, ApiResponse.class);\n}\n\n// Configuration\nresilience4j.retry:\n  instances:\n    externalApi:\n      maxAttempts: 3\n      waitDuration: 1000ms\n      exponentialBackoffMultiplier: 2\n      retryExceptions:\n        - org.springframework.web.client.HttpServerErrorException\n      ignoreExceptions:\n        - org.springframework.web.client.HttpClientErrorException\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": AWS SDK - Implements exponential backoff for API retries."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"34-canary-deployment",children:"34. Canary Deployment"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: New version of Payment Service deployed. How do you test with real traffic before full rollout?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Canary deployment"}),": Route small % of traffic to new version"]}),"\n",(0,s.jsx)(n.li,{children:"Monitor metrics (error rate, latency, success rate)"}),"\n",(0,s.jsx)(n.li,{children:"Gradually increase traffic if stable"}),"\n",(0,s.jsx)(n.li,{children:"Automatic rollback if metrics degrade"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"feature flags"})," for functionality toggle"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Istio virtual service for canary\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: payment-service\nspec:\n  hosts:\n    - payment-service\n  http:\n  - match:\n    - headers:\n        canary:\n          exact: "true"\n    route:\n    - destination:\n        host: payment-service\n        subset: v2\n  - route:\n    - destination:\n        host: payment-service\n        subset: v1\n      weight: 90\n    - destination:\n        host: payment-service\n        subset: v2\n      weight: 10\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Facebook - Uses canary deployments to test changes on small user percentage first."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"35-database-migration-in-production",children:"35. Database Migration in Production"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Need to add new column to Users table with 100 million rows. Zero downtime required. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backward compatible changes first"}),":","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Add column as nullable"}),"\n",(0,s.jsx)(n.li,{children:"Deploy code that writes to new column"}),"\n",(0,s.jsx)(n.li,{children:"Backfill existing data (batch processing)"}),"\n",(0,s.jsx)(n.li,{children:"Deploy code that reads from new column"}),"\n",(0,s.jsx)(n.li,{children:"Make column non-null if needed"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"database migration tools"})," (Flyway/Liquibase)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Blue-green deployment"})," for safety"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Flyway migration\n@Component\npublic class V2__Add_Email_Column implements JavaMigration {\n    @Override\n    public void migrate(Context context) throws Exception {\n        try (Statement statement = context.getConnection().createStatement()) {\n            statement.execute("ALTER TABLE users ADD COLUMN email VARCHAR(255)");\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": GitHub - Performs zero-downtime migrations on massive databases."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"36-event-sourcing",children:"36. Event Sourcing"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Need audit trail of all order changes. How do you implement?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event Sourcing"}),": Store all state changes as events"]}),"\n",(0,s.jsx)(n.li,{children:"Don't update records, append events"}),"\n",(0,s.jsx)(n.li,{children:"Rebuild current state by replaying events"}),"\n",(0,s.jsx)(n.li,{children:"Provides complete audit trail"}),"\n",(0,s.jsx)(n.li,{children:"Enables time-travel debugging"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class OrderEventStore {\n    public void saveEvent(OrderEvent event) {\n        eventRepository.save(event);\n        kafkaTemplate.send("order-events", event);\n    }\n\n    public Order rebuildOrder(String orderId) {\n        List<OrderEvent> events = eventRepository.findByOrderId(orderId);\n        Order order = new Order();\n        events.forEach(event -> order.apply(event));\n        return order;\n    }\n}\n\n// Events\npublic class OrderCreatedEvent { }\npublic class OrderPaidEvent { }\npublic class OrderShippedEvent { }\npublic class OrderCancelledEvent { }\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Banking systems - Maintain complete audit trail of all transactions using event sourcing."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"37-handling-third-party-service-outages",children:"37. Handling Third-Party Service Outages"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Payment gateway is down for 2 hours. How do you handle orders?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Queue orders"})," for later processing"]}),"\n",(0,s.jsx)(n.li,{children:'Show user "Payment pending" status'}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Background job"})," retries payment"]}),"\n",(0,s.jsx)(n.li,{children:"Send notification when payment succeeds"}),"\n",(0,s.jsx)(n.li,{children:"Circuit breaker prevents constant failures"}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"fallback payment gateways"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class ResilientPaymentService {\n    @CircuitBreaker(name = "primaryGateway", fallbackMethod = "useSecondaryGateway")\n    public PaymentResponse processPrimary(PaymentRequest request) {\n        return primaryGateway.process(request);\n    }\n\n    public PaymentResponse useSecondaryGateway(PaymentRequest request, Exception e) {\n        log.warn("Primary gateway failed, using secondary");\n        return secondaryGateway.process(request);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon - Uses multiple payment processors with automatic failover."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"38-api-response-time-sla",children:"38. API Response Time SLA"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Your API must respond within 500ms for 99.9% requests. How do you ensure this?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance monitoring"}),": Track P50, P95, P99 latencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database optimization"}),": Proper indexes, query optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Redis for frequently accessed data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection pooling"}),": Optimize DB connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async processing"}),": Move heavy operations to background"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CDN"}),": Static content from edge locations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate limiting"}),": Prevent abuse"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Timed(value = "api.latency", percentiles = {0.5, 0.95, 0.99})\n@GetMapping("/products/{id}")\npublic Product getProduct(@PathVariable Long id) {\n    return productService.findById(id);\n}\n\n// Alert configuration\n- alert: HighApiLatency\n  expr: histogram_quantile(0.99, api_latency_bucket) > 0.5\n  annotations:\n    summary: "P99 latency exceeded 500ms"\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Stripe - Maintains strict SLAs with comprehensive monitoring."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"39-implementing-cqrs",children:"39. Implementing CQRS"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Order read queries are slow affecting write performance. How to separate?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CQRS"}),": Separate Command (write) and Query (read) models"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Write model"}),": Normalized, optimized for consistency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read model"}),": Denormalized, optimized for queries"]}),"\n",(0,s.jsx)(n.li,{children:"Sync via events (Kafka)"}),"\n",(0,s.jsx)(n.li,{children:"Different databases for read/write"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Command side\n@Service\npublic class OrderCommandService {\n    public void createOrder(CreateOrderCommand cmd) {\n        Order order = new Order(cmd);\n        orderWriteRepo.save(order);\n        eventPublisher.publish(new OrderCreatedEvent(order));\n    }\n}\n\n// Query side\n@Service\npublic class OrderQueryService {\n    @EventListener\n    public void onOrderCreated(OrderCreatedEvent event) {\n        OrderReadModel readModel = new OrderReadModel(event);\n        orderReadRepo.save(readModel); // Optimized for queries\n    }\n\n    public List<OrderDTO> getOrders(String userId) {\n        return orderReadRepo.findByUserId(userId);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": LinkedIn - Uses CQRS for feed generation separating read/write workloads."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"40-dealing-with-clock-skew",children:"40. Dealing with Clock Skew"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Distributed services on different servers have time differences. How do you handle?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"NTP"})," (Network Time Protocol) to sync clocks"]}),"\n",(0,s.jsx)(n.li,{children:"Don't rely on local timestamps for ordering"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"vector clocks"})," or ",(0,s.jsx)(n.strong,{children:"logical clocks"})]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"Lamport timestamps"})]}),"\n",(0,s.jsx)(n.li,{children:"Use centralized time service (Google TrueTime)"}),"\n",(0,s.jsx)(n.li,{children:"Database timestamps instead of application timestamps"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Entity\npublic class Order {\n    @CreationTimestamp // Database timestamp, not application\n    private Instant createdAt;\n\n    private Long lamportClock; // Logical clock for ordering\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Google Spanner - Uses TrueTime API for globally consistent timestamps."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"41-implementing-feature-flags",children:"41. Implementing Feature Flags"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: New recommendation algorithm ready but want to test on 10% users first. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature flags/toggles"})," with LaunchDarkly/Unleash"]}),"\n",(0,s.jsx)(n.li,{children:"Control features without deployment"}),"\n",(0,s.jsx)(n.li,{children:"A/B testing capabilities"}),"\n",(0,s.jsx)(n.li,{children:"Gradual rollout"}),"\n",(0,s.jsx)(n.li,{children:"Quick rollback if issues"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class RecommendationService {\n\n    @Autowired\n    private FeatureFlagService featureFlagService;\n\n    public List<Product> getRecommendations(String userId) {\n        if (featureFlagService.isEnabled("new-algorithm", userId)) {\n            return newRecommendationEngine.recommend(userId);\n        } else {\n            return oldRecommendationEngine.recommend(userId);\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Uses feature flags extensively to test and deploy features incrementally."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"42-handling-large-payload",children:"42. Handling Large Payload"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: User uploads 100MB file to your API. How do you handle without memory issues?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Streaming upload"}),": Don't load entire file in memory"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Chunked transfer encoding"})}),"\n",(0,s.jsxs)(n.li,{children:["Direct upload to ",(0,s.jsx)(n.strong,{children:"S3 with presigned URLs"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async processing"})," with status callback"]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.strong,{children:"max request size limits"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@PostMapping(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\npublic ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {\n    String uploadId = UUID.randomUUID().toString();\n\n    // Stream directly to S3\n    s3Client.putObject(PutObjectRequest.builder()\n        .bucket(bucketName)\n        .key(uploadId)\n        .build(),\n        RequestBody.fromInputStream(file.getInputStream(), file.getSize()));\n\n    // Process async\n    kafkaTemplate.send("file-uploaded", new FileEvent(uploadId));\n\n    return ResponseEntity.accepted().body(uploadId);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Dropbox - Uploads large files in chunks with resume capability."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"43-cross-cutting-concerns",children:"43. Cross-Cutting Concerns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Need to log request/response, track metrics, validate auth for all endpoints. How to avoid duplication?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Spring AOP"})," (Aspect-Oriented Programming)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interceptors"})," for cross-cutting concerns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filters"})," for request/response modification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Gateway"})," for centralized concerns"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Aspect\n@Component\npublic class LoggingAspect {\n\n    @Around("@annotation(org.springframework.web.bind.annotation.RequestMapping)")\n    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        long start = System.currentTimeMillis();\n\n        log.info("Method: {} started", joinPoint.getSignature());\n        Object result = joinPoint.proceed();\n\n        long duration = System.currentTimeMillis() - start;\n        log.info("Method: {} completed in {}ms", joinPoint.getSignature(), duration);\n\n        return result;\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Uses Zuul filters for cross-cutting concerns across all services."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"44-handling-time-zones",children:"44. Handling Time Zones"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Users in different time zones book appointments. How do you handle datetime consistently?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always store in UTC"})," in database"]}),"\n",(0,s.jsx)(n.li,{children:"Convert to user timezone only in presentation layer"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"ISO 8601 format"})," for APIs"]}),"\n",(0,s.jsx)(n.li,{children:"Store user timezone preference"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"Instant"})," or ",(0,s.jsx)(n.code,{children:"ZonedDateTime"})," in Java"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Entity\npublic class Appointment {\n    private Instant appointmentTime; // Always UTC\n\n    public ZonedDateTime getLocalTime(String timezone) {\n        return appointmentTime.atZone(ZoneId.of(timezone));\n    }\n}\n\n// API response\npublic AppointmentDTO toDTO(Appointment apt, String userTimezone) {\n    return AppointmentDTO.builder()\n        .time(apt.getLocalTime(userTimezone))\n        .timezone(userTimezone)\n        .build();\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Booking.com - Handles hotel bookings across all time zones."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"45-implementing-search-functionality",children:"45. Implementing Search Functionality"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Need to search products by name, category, price range across millions of records. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"Elasticsearch"})," for full-text search"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sync data"})," from database to Elasticsearch"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"change data capture"})," (Debezium) for real-time sync"]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.strong,{children:"search analytics"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class ProductSearchService {\n\n    @Autowired\n    private ElasticsearchRestTemplate elasticsearchTemplate;\n\n    public List<Product> search(String query, PriceRange range, String category) {\n        NativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\n            .withQuery(multiMatchQuery(query, "name", "description"))\n            .withFilter(boolQuery()\n                .must(rangeQuery("price").gte(range.getMin()).lte(range.getMax()))\n                .must(termQuery("category", category)))\n            .build();\n\n        return elasticsearchTemplate.search(searchQuery, Product.class)\n            .stream()\n            .map(SearchHit::getContent)\n            .collect(Collectors.toList());\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon - Uses Elasticsearch for product search across millions of items."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"46-handling-partial-failures",children:"46. Handling Partial Failures"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Dashboard needs data from 5 services. 2 services are down. What do you show?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fail gracefully"}),": Show available data"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.strong,{children:"circuit breaker"})," with fallbacks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timeout quickly"})," for failing services"]}),"\n",(0,s.jsxs)(n.li,{children:["Show ",(0,s.jsx)(n.strong,{children:"partial UI"})," with error indicators"]}),"\n",(0,s.jsx)(n.li,{children:"Cache stale data as fallback"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public DashboardResponse getDashboard(String userId) {\n    DashboardResponse response = new DashboardResponse();\n\n    try {\n        response.setUser(userService.getUser(userId));\n    } catch (Exception e) {\n        log.error("User service failed", e);\n        response.setUser(getCachedUser(userId));\n        response.addError("user-service-unavailable");\n    }\n\n    try {\n        response.setOrders(orderService.getOrders(userId));\n    } catch (Exception e) {\n        log.error("Order service failed", e);\n        response.setOrders(Collections.emptyList());\n        response.addError("order-service-unavailable");\n    }\n\n    return response;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Facebook - Shows partial feed if some services fail."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"47-implementing-saga-orchestration",children:"47. Implementing Saga Orchestration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Complex workflow: Book hotel \u2192 Book flight \u2192 Book car. If flight fails, rollback hotel. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Saga Orchestration"}),": Central coordinator manages workflow"]}),"\n",(0,s.jsx)(n.li,{children:"Defines compensating transactions"}),"\n",(0,s.jsx)(n.li,{children:"State machine for workflow"}),"\n",(0,s.jsx)(n.li,{children:"Persists saga state for recovery"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Service\npublic class TravelBookingSaga {\n\n    public void bookTravel(TravelRequest request) {\n        String sagaId = UUID.randomUUID().toString();\n        SagaState state = new SagaState(sagaId);\n\n        try {\n            // Step 1: Book hotel\n            HotelBooking hotel = hotelService.book(request);\n            state.setHotelBookingId(hotel.getId());\n            sagaStateRepo.save(state);\n\n            // Step 2: Book flight\n            FlightBooking flight = flightService.book(request);\n            state.setFlightBookingId(flight.getId());\n            sagaStateRepo.save(state);\n\n            // Step 3: Book car\n            CarBooking car = carService.book(request);\n            state.setCarBookingId(car.getId());\n            state.setStatus(SagaStatus.COMPLETED);\n            sagaStateRepo.save(state);\n\n        } catch (Exception e) {\n            // Compensate\n            compensate(state);\n        }\n    }\n\n    private void compensate(SagaState state) {\n        if (state.getCarBookingId() != null) {\n            carService.cancel(state.getCarBookingId());\n        }\n        if (state.getFlightBookingId() != null) {\n            flightService.cancel(state.getFlightBookingId());\n        }\n        if (state.getHotelBookingId() != null) {\n            hotelService.cancel(state.getHotelBookingId());\n        }\n        state.setStatus(SagaStatus.FAILED);\n        sagaStateRepo.save(state);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Uber Eats - Orchestrates restaurant, delivery, and payment in single workflow."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"48-implementing-api-gateway-aggregation",children:"48. Implementing API Gateway Aggregation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Mobile app has limited bandwidth. How do you reduce API calls?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend for Frontend (BFF)"}),": API specifically for mobile"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GraphQL"}),": Let client request exact data needed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gateway aggregation"}),": Combine multiple calls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data compression"}),": GZIP responses"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/mobile")\npublic class MobileBFFController {\n\n    @GetMapping("/home")\n    public MobileHomeResponse getHome(@AuthenticationPrincipal User user) {\n        // Aggregate data from multiple services\n        CompletableFuture<UserProfile> profileFuture =\n            CompletableFuture.supplyAsync(() -> userService.getProfile(user.getId()));\n        CompletableFuture<List<Recommendation>> recsFuture =\n            CompletableFuture.supplyAsync(() -> recommendationService.get(user.getId()));\n        CompletableFuture<List<Notification>> notifsFuture =\n            CompletableFuture.supplyAsync(() -> notificationService.getUnread(user.getId()));\n\n        CompletableFuture.allOf(profileFuture, recsFuture, notifsFuture).join();\n\n        return MobileHomeResponse.builder()\n            .profile(profileFuture.get())\n            .recommendations(recsFuture.get())\n            .notifications(notifsFuture.get())\n            .build();\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Twitter - BFF pattern for mobile apps to reduce API calls."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"49-handling-webhook-retries",children:"49. Handling Webhook Retries"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: You send webhooks to customer systems. Their server is down. How do you retry?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exponential backoff"})," for retries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maximum retry attempts"})," (e.g., 10)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dead letter queue"})," for failed webhooks"]}),"\n",(0,s.jsxs)(n.li,{children:["Store webhook ",(0,s.jsx)(n.strong,{children:"delivery history"})]}),"\n",(0,s.jsxs)(n.li,{children:["Provide ",(0,s.jsx)(n.strong,{children:"manual retry"})," option in dashboard"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class WebhookService {\n\n    @Async\n    @Retryable(\n        value = {RestClientException.class},\n        maxAttempts = 10,\n        backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 3600000)\n    )\n    public void sendWebhook(WebhookEvent event) {\n        try {\n            HttpHeaders headers = new HttpHeaders();\n            headers.set("X-Webhook-Signature", generateSignature(event));\n\n            HttpEntity<WebhookEvent> request = new HttpEntity<>(event, headers);\n            ResponseEntity<String> response = restTemplate.postForEntity(\n                event.getCallbackUrl(), request, String.class);\n\n            webhookLogRepo.save(new WebhookLog(event.getId(), "SUCCESS", response.getStatusCode()));\n\n        } catch (Exception e) {\n            webhookLogRepo.save(new WebhookLog(event.getId(), "FAILED", e.getMessage()));\n            throw e;\n        }\n    }\n\n    @Recover\n    public void recover(RestClientException e, WebhookEvent event) {\n        log.error("Webhook delivery failed after all retries: {}", event.getId());\n        deadLetterQueueService.add(event);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Stripe - Sophisticated webhook retry system with exponential backoff."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"50-blue-green-deployment",children:"50. Blue-Green Deployment"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Zero-downtime deployment needed. How do you switch between versions?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Two identical environments"}),": Blue (current) and Green (new)"]}),"\n",(0,s.jsx)(n.li,{children:"Deploy to Green environment"}),"\n",(0,s.jsx)(n.li,{children:"Test thoroughly"}),"\n",(0,s.jsx)(n.li,{children:"Switch traffic from Blue to Green"}),"\n",(0,s.jsx)(n.li,{children:"Keep Blue for quick rollback"}),"\n",(0,s.jsx)(n.li,{children:"Use load balancer to switch traffic"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Kubernetes service switching\napiVersion: v1\nkind: Service\nmetadata:\n  name: payment-service\nspec:\n  selector:\n    app: payment-service\n    version: blue  # Change to 'green' to switch\n  ports:\n  - port: 8080\n---\n# Blue deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-service-blue\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: payment-service\n      version: blue\n---\n# Green deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: payment-service-green\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: payment-service\n      version: green\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Amazon - Uses blue-green deployments for zero-downtime updates."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"51-implementing-request-deduplication",children:"51. Implementing Request Deduplication"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'Q: User accidentally clicks "Submit Order" twice. How do you prevent duplicate orders?'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client-side"}),": Disable button after first click"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server-side"}),": Idempotency key or unique constraint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time window"}),": Check for duplicate within 5 minutes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis"}),": Store request hash with TTL"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class OrderDeduplicationService {\n\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n\n    public boolean isDuplicate(OrderRequest request, String userId) {\n        String key = "order:" + userId + ":" + generateHash(request);\n        Boolean isNew = redisTemplate.opsForValue()\n            .setIfAbsent(key, "processing", Duration.ofMinutes(5));\n        return !Boolean.TRUE.equals(isNew);\n    }\n\n    private String generateHash(OrderRequest request) {\n        return DigestUtils.sha256Hex(\n            request.getProductIds().toString() +\n            request.getTotalAmount());\n    }\n}\n\n@PostMapping("/orders")\npublic ResponseEntity<?> createOrder(@RequestBody OrderRequest request,\n                                    @AuthenticationPrincipal User user) {\n    if (orderDeduplicationService.isDuplicate(request, user.getId())) {\n        return ResponseEntity.status(HttpStatus.CONFLICT)\n            .body("Duplicate order detected");\n    }\n\n    Order order = orderService.create(request);\n    return ResponseEntity.ok(order);\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": PayPal - Prevents duplicate payments with sophisticated deduplication."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"52-handling-schema-evolution",children:"52. Handling Schema Evolution"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Need to change event schema in Kafka. Old consumers still running. How?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schema Registry"})," (Confluent/Apicurio)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backward compatibility"}),": New fields optional"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Forward compatibility"}),": Old producers work with new consumers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version field"})," in events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avro/Protobuf"})," for schema evolution"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Version 1\npublic class OrderEventV1 {\n    private String orderId;\n    private BigDecimal amount;\n}\n\n// Version 2 - backward compatible\npublic class OrderEventV2 {\n    private String orderId;\n    private BigDecimal amount;\n    private String currency = "USD"; // Default value\n    private List<String> tags = new ArrayList<>(); // Optional field\n}\n\n@KafkaListener(topics = "orders")\npublic void handleOrderEvent(String message) {\n    JsonNode event = objectMapper.readTree(message);\n    int version = event.get("version").asInt(1);\n\n    if (version == 1) {\n        OrderEventV1 orderV1 = objectMapper.readValue(message, OrderEventV1.class);\n        // Handle V1\n    } else if (version == 2) {\n        OrderEventV2 orderV2 = objectMapper.readValue(message, OrderEventV2.class);\n        // Handle V2\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": LinkedIn - Uses Avro with Schema Registry for event schema evolution."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"53-implementing-circuit-breaker-dashboard",children:"53. Implementing Circuit Breaker Dashboard"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Multiple services using circuit breakers. How do you monitor them centrally?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hystrix Dashboard"})," (deprecated) or ",(0,s.jsx)(n.strong,{children:"Resilience4j Dashboard"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spring Boot Admin"})," with Actuator"]}),"\n",(0,s.jsxs)(n.li,{children:["Export metrics to ",(0,s.jsx)(n.strong,{children:"Prometheus/Grafana"})]}),"\n",(0,s.jsxs)(n.li,{children:["Set up ",(0,s.jsx)(n.strong,{children:"alerts"})," for circuit breaker state changes"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Actuator endpoints\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,circuitbreakers,circuitbreakerevents\n  health:\n    circuitbreakers:\n      enabled: true\n\n# Prometheus metrics\nresilience4j.circuitbreaker:\n  instances:\n    paymentService:\n      registerHealthIndicator: true\n      ringBufferSizeInClosedState: 100\n      ringBufferSizeInHalfOpenState: 10\n      waitDurationInOpenState: 10000\n      failureRateThreshold: 50\n      eventConsumerBufferSize: 10\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Netflix - Hystrix Dashboard (now deprecated) showed real-time circuit breaker status."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"54-implementing-distributed-locking",children:"54. Implementing Distributed Locking"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: Two instances try to process same order simultaneously. How do you prevent?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis distributed lock"})," (Redisson)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Database pessimistic locking"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimistic locking"})," with version field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ZooKeeper"})," for coordination"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\npublic class OrderProcessingService {\n\n    @Autowired\n    private RedissonClient redissonClient;\n\n    public void processOrder(String orderId) {\n        RLock lock = redissonClient.getLock("order-lock:" + orderId);\n\n        try {\n            // Wait for lock, auto-release after 10 seconds\n            boolean acquired = lock.tryLock(100, 10000, TimeUnit.MILLISECONDS);\n\n            if (acquired) {\n                // Check if already processed\n                if (orderRepository.findById(orderId).getStatus() == PROCESSED) {\n                    return;\n                }\n\n                // Process order\n                processOrderInternal(orderId);\n            } else {\n                log.warn("Could not acquire lock for order: {}", orderId);\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            if (lock.isHeldByCurrentThread()) {\n                lock.unlock();\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": Airbnb - Uses distributed locking for concurrent booking prevention."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"55-implementing-rate-limiter",children:"55. Implementing Rate Limiter"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Q: API should allow max 100 requests per minute per user. How do you implement across multiple instances?"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Redis-based rate limiter"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Token bucket"})," or ",(0,s.jsx)(n.strong,{children:"sliding window"})," algorithm"]}),"\n",(0,s.jsx)(n.li,{children:"Store counters in Redis with TTL"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class RedisRateLimiter {\n\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n\n    public boolean isAllowed(String userId, int maxRequests, Duration window) {\n        String key = "rate_limit:" + userId;\n        long currentTime = System.currentTimeMillis();\n        long windowStart = currentTime - window.toMillis();\n\n        // Remove old entries\n        redisTemplate.opsForZSet().removeRangeByScore(key, 0, windowStart);\n\n        // Count requests in current window\n        Long count = redisTemplate.opsForZSet().count(key, windowStart, currentTime);\n\n        if (count != null && count < maxRequests) {\n            // Add current request\n            redisTemplate.opsForZSet().add(key, UUID.randomUUID().toString(), currentTime);\n            redisTemplate.expire(key, window);\n            return true;\n        }\n\n        return false;\n    }\n}\n\n@RestController\npublic class ApiController {\n\n    @GetMapping("/api/resource")\n    public ResponseEntity<?> getResource(@AuthenticationPrincipal User user) {\n        if (!rateLimiter.isAllowed(user.getId(), 100, Duration.ofMinutes(1))) {\n            return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS)\n                .body("Rate limit exceeded");\n        }\n\n        return ResponseEntity.ok(resourceService.get());\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Real Example"}),": GitHub API - Implements per-user rate limiting across global infrastructure."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"quick-fire-concepts",children:"Quick Fire Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"event-sourcing",children:"Event Sourcing"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Store all changes as events instead of current state. Rebuild state by replaying events. Provides audit trail, time travel debugging.\n",(0,s.jsx)(n.strong,{children:"Example"}),": Banking - Every transaction stored as event, account balance derived."]}),"\n",(0,s.jsx)(n.h3,{id:"cqrs",children:"CQRS"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Separate read and write models. Write to normalized DB, project to optimized read models. Improves scalability and performance.\n",(0,s.jsx)(n.strong,{children:"Example"}),": E-commerce - Write to transactional DB, read from Elasticsearch."]}),"\n",(0,s.jsx)(n.h3,{id:"strangler-pattern",children:"Strangler Pattern"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"}),' Gradually replace legacy system by "strangling" it. Route new features to microservices, old features to monolith.\n',(0,s.jsx)(n.strong,{children:"Example"}),": Migrating from monolith to microservices incrementally."]}),"\n",(0,s.jsx)(n.h3,{id:"backend-for-frontend-bff",children:"Backend for Frontend (BFF)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Separate backend for each frontend type (web, mobile, IoT). Optimized APIs for each client.\n",(0,s.jsx)(n.strong,{children:"Example"}),": Netflix - Different APIs for TV, mobile, web."]}),"\n",(0,s.jsx)(n.h3,{id:"bulkhead-pattern",children:"Bulkhead Pattern"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Isolate resources (thread pools, connections) per service/operation. One failing service doesn't exhaust all resources.\n",(0,s.jsx)(n.strong,{children:"Example"}),": Ship compartments - one leak doesn't sink entire ship."]}),"\n",(0,s.jsx)(n.h3,{id:"sidecar-pattern",children:"Sidecar Pattern"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Deploy helper container alongside main container. Handles logging, monitoring, proxying.\n",(0,s.jsx)(n.strong,{children:"Example"}),": Istio Envoy sidecar for service mesh."]}),"\n",(0,s.jsx)(n.h3,{id:"ambassador-pattern",children:"Ambassador Pattern"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Proxy that handles external service communication. Retry, circuit breaker, monitoring.\n",(0,s.jsx)(n.strong,{children:"Example"}),": Database connection pooling sidecar."]}),"\n",(0,s.jsx)(n.h3,{id:"anti-corruption-layer",children:"Anti-Corruption Layer"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Q: What is it?"}),"\n",(0,s.jsx)(n.strong,{children:"A:"})," Translation layer between new microservices and legacy system. Prevents legacy complexity from leaking.\n",(0,s.jsx)(n.strong,{children:"Example"}),": Adapter for legacy SOAP services in REST world."]}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);