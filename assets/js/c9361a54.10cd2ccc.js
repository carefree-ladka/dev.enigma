"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6821],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},39472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=n(74848),r=n(28453);const i={},a="Async Patterns",c={id:"WebDev/JavaScript/AsyncPatterns",title:"Async Patterns",description:"Rate Limiter",source:"@site/docs/WebDev/JavaScript/AsyncPatterns.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/AsyncPatterns",permalink:"/js.enigma/docs/WebDev/JavaScript/AsyncPatterns",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/AsyncPatterns.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Async Await",permalink:"/js.enigma/docs/WebDev/JavaScript/AsyncAwait"},next:{title:"Closures",permalink:"/js.enigma/docs/WebDev/JavaScript/Closure"}},o={},l=[{value:"Rate Limiter",id:"rate-limiter",level:2},{value:"Circuit Breaker",id:"circuit-breaker",level:2},{value:"Batch Processing",id:"batch-processing",level:2},{value:"With Concurrency Control",id:"with-concurrency-control",level:2},{value:"Retry Pattern",id:"retry-pattern",level:2},{value:"Sequential Batching",id:"sequential-batching",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"async-patterns",children:"Async Patterns"})}),"\n",(0,s.jsx)(t.h2,{id:"rate-limiter",children:"Rate Limiter"}),"\n",(0,s.jsx)(t.p,{children:"A rate limiter is a mechanism used to control the number of requests a client can make to a server within a specified time period. This is useful for preventing abuse, ensuring fair usage, and protecting against denial-of-service (DoS) attacks."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JavaScript",children:"class RateLimiter {\n  constructor(maxRequests, windowSizeInMs) {\n    this.maxRequests = maxRequests; // Maximum number of requests allowed in the window\n    this.windowSizeInMs = windowSizeInMs; // Time window size in milliseconds\n    this.requests = []; // Array to store timestamps of requests\n  }\n\n  // Method to check if a request is allowed\n  allowRequest() {\n    const now = Date.now();\n\n    // Remove requests that are outside the current window\n    this.requests = this.requests.filter(timestamp => now - timestamp < this.windowSizeInMs);\n\n    // Check if the number of requests is within the limit\n    if (this.requests.length < this.maxRequests) {\n      this.requests.push(now); // Add the current request timestamp\n      return true; // Request is allowed\n    } else {\n      return false; // Request is denied\n    }\n  }\n}\n\n// Example usage\nconst limiter = new RateLimiter(5, 10000); // Allow 5 requests per 10 seconds\n\nfor (let i = 0; i < 10; i++) {\n  setTimeout(() => {\n    if (limiter.allowRequest()) {\n      console.log(`Request ${i + 1}: Allowed`);\n    } else {\n      console.log(`Request ${i + 1}: Denied`);\n    }\n  }, i * 1000); // Simulate requests every second\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"circuit-breaker",children:"Circuit Breaker"}),"\n",(0,s.jsx)(t.p,{children:"A circuit breaker is a design pattern used to detect failures and prevent an application from repeatedly trying to execute an operation that's likely to fail. It\u2019s commonly used in distributed systems to handle faults gracefully and avoid cascading failures."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JavaScript",children:'class CircuitBreaker {\n    constructor(request, options = {}) {\n        this.request = request; // The function to be executed\n        this.state = "CLOSED"; // Initial state: CLOSED, OPEN, or HALF-OPEN\n        this.failureCount = 0; // Count of consecutive failures\n        this.successCount = 0; // Count of consecutive successes (for HALF-OPEN state)\n        this.nextAttempt = Date.now(); // Time for the next attempt in OPEN state\n        this.options = {\n            failureThreshold: 3, // Number of failures before opening the circuit\n            successThreshold: 2, // Number of successes before closing the circuit\n            timeout: 5000, // Time in ms to wait before attempting again in OPEN state\n            ...options,\n        };\n    }\n\n    async fire() {\n        if (this.state === "OPEN") {\n            if (this.nextAttempt <= Date.now()) {\n                this.state = "HALF-OPEN"; // Allow one request to test the service\n            } else {\n                throw new Error("Circuit is OPEN. Request blocked.");\n            }\n        }\n\n        try {\n            const response = await this.request();\n            this.success();\n            return response;\n        } catch (err) {\n            this.fail();\n            throw err;\n        }\n    }\n\n    success() {\n        this.failureCount = 0; // Reset failure count\n        if (this.state === "HALF-OPEN") {\n            this.successCount++;\n            if (this.successCount >= this.options.successThreshold) {\n                this.state = "CLOSED"; // Close the circuit after enough successes\n            }\n        }\n    }\n\n    fail() {\n        this.failureCount++;\n        if (this.failureCount >= this.options.failureThreshold) {\n            this.state = "OPEN"; // Open the circuit after too many failures\n            this.nextAttempt = Date.now() + this.options.timeout;\n        }\n    }\n}\n\n// Example usage\nconst unstableRequest = () => {\n    return new Promise((resolve, reject) => {\n        // Simulate a 50% chance of failure\n        if (Math.random() > 0.5) {\n            resolve("Success!");\n        } else {\n            reject("Failed!");\n        }\n    });\n};\n\nconst breaker = new CircuitBreaker(unstableRequest, {\n    failureThreshold: 2,\n    successThreshold: 1,\n    timeout: 1000,\n});\n\nconst testCircuitBreaker = async () => {\n    for (let i = 0; i < 10; i++) {\n        try {\n            const result = await breaker.fire();\n            console.log(`Request ${i + 1}: ${result}`);\n        } catch (err) {\n            console.log(`Request ${i + 1}: ${err}`);\n        }\n        await new Promise((resolve) => setTimeout(resolve, 500)); // Delay between requests\n    }\n};\n\ntestCircuitBreaker();\n'})}),"\n",(0,s.jsx)(t.h2,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,s.jsx)(t.p,{children:"Batching promises is a technique used to group multiple asynchronous operations (promises) into a single batch to improve efficiency, reduce overhead, and manage concurrency. This is particularly useful when dealing with APIs, databases, or other I/O-bound operations where making individual requests can be inefficient."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JavaScript",children:'class PromiseBatcher {\n    constructor(batchSize, processBatch) {\n        this.batchSize = batchSize; // Maximum number of promises in a batch\n        this.processBatch = processBatch; // Function to process the batch\n        this.queue = []; // Queue to hold pending items\n        this.processing = false; // Flag to check if a batch is being processed\n    }\n\n    // Add an item to the queue and trigger processing\n    add(item) {\n        this.queue.push(item);\n        this.process();\n    }\n\n    // Process the queue in batches\n    async process() {\n        if (this.processing || this.queue.length === 0) {\n            return; // Avoid overlapping processing\n        }\n\n        this.processing = true;\n\n        // Take up to `batchSize` items from the queue\n        const batch = this.queue.splice(0, this.batchSize);\n\n        try {\n            // Process the batch using the provided function\n            await this.processBatch(batch);\n        } catch (error) {\n            console.error("Error processing batch:", error);\n        } finally {\n            this.processing = false;\n            this.process(); // Process the next batch if there are remaining items\n        }\n    }\n}\n\n// Example usage\nconst batcher = new PromiseBatcher(3, async (batch) => {\n    console.log("Processing batch:", batch);\n    // Simulate an async operation (e.g., API call, database query)\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    console.log("Batch processed:", batch);\n});\n\n// Add items to the batcher\nfor (let i = 1; i <= 10; i++) {\n    batcher.add(i);\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"with-concurrency-control",children:"With Concurrency Control"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JavaScript",children:'class ConcurrentPromiseBatcher {\n    constructor(batchSize, concurrency, processBatch) {\n        this.batchSize = batchSize;\n        this.concurrency = concurrency;\n        this.processBatch = processBatch;\n        this.queue = [];\n        this.processing = 0;\n    }\n\n    add(item) {\n        this.queue.push(item);\n        this.process();\n    }\n\n    async process() {\n        while (this.queue.length > 0 && this.processing < this.concurrency) {\n            const batch = this.queue.splice(0, this.batchSize);\n            this.processing++;\n\n            this.processBatch(batch)\n                .catch((error) => console.error("Error processing batch:", error))\n                .finally(() => {\n                    this.processing--;\n                    this.process();\n                });\n        }\n    }\n}\n\n// Example usage\nconst concurrentBatcher = new ConcurrentPromiseBatcher(3, 2, async (batch) => {\n    console.log("Processing batch:", batch);\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    console.log("Batch processed:", batch);\n});\n\nfor (let i = 1; i <= 10; i++) {\n    concurrentBatcher.add(i);\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"retry-pattern",children:"Retry Pattern"}),"\n",(0,s.jsx)(t.p,{children:"The Retry Pattern is a design pattern used to handle transient failures in an application by retrying a failed operation a specified number of times before giving up. This is particularly useful for operations that involve external systems, such as API calls, database queries, or network requests, where temporary issues (e.g., network latency, timeouts) can cause failures."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JavaScript",children:'const retry = async (fn, retries = 3, delay = 1000) => {\n  try {\n    return await fn();\n  } catch (error) {\n    if (retries <= 0) {\n      throw error; // No retries left\n    }\n    console.log(`Retrying... (${retries} retries left)`);\n    await new Promise(resolve => setTimeout(resolve, delay));\n    return retry(fn, retries - 1, delay); // Retry with reduced count\n  }\n};\n\n// Example Usage:\nconst fetchData = async () => {\n  // Simulate a failing network request\n  if (Math.random() < 0.7) throw new Error("Network error");\n  return "Data fetched successfully!";\n};\n\nretry(fetchData)\n  .then(data => console.log(data))\n  .catch(err => console.error(err));\n'})}),"\n",(0,s.jsx)(t.h2,{id:"sequential-batching",children:"Sequential Batching"}),"\n",(0,s.jsxs)(t.p,{children:["If you have a large number of tasks (such as API requests or computations) and want to execute them in batches sequentially\u2014meaning that each batch runs after the previous one completes\u2014you can achieve this using ",(0,s.jsx)(t.code,{children:"async/await"})," and ",(0,s.jsx)(t.code,{children:"for...of"})," loops."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-JavaScript",children:"const sequentialBatch = async (tasks, batchSize = 5) => {\n  const results = [];\n  \n  for (let i = 0; i < tasks.length; i += batchSize) {\n    const batch = tasks.slice(i, i + batchSize);\n    const batchResults = await Promise.all(batch.map(task => task())); // Run batch concurrently\n    results.push(...batchResults);\n  }\n  \n  return results;\n};\n\n// Example Usage:\nconst tasks = Array.from({ length: 15 }, (_, index) => () =>\n  new Promise(resolve => setTimeout(() => resolve(`Task ${index + 1} done`), 500))\n);\n\nsequentialBatch(tasks, 5).then(results => console.log(results));\n\n/* \nIf you have 15 tasks and a batch size of 5, the execution would look like:\n\n1. First 5 tasks \u2192 Execute in parallel \u2192 Wait for them to finish.\n2. Next 5 tasks \u2192 Execute in parallel \u2192 Wait for them to finish.\n3. Last 5 tasks \u2192 Execute in parallel \u2192 Wait for them to finish.\n4. Return all results.\n*/\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);