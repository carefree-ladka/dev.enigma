"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6238],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},78810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=t(74848),i=t(28453);const a={},s="10. Regular Expression Matching",c={id:"DSA/DSA with JavaScript/RegexMatching",title:"10. Regular Expression Matching",description:"https://leetcode.com/problems/regular-expression-matching/description/",source:"@site/docs/DSA/DSA with JavaScript/RegexMatching.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/RegexMatching",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/RegexMatching",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/RegexMatching.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recursion Patterns Cheatsheet",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/Recursion"},next:{title:"Reservoir Sampling",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/ReservoirSampling"}},o={},p=[];function h(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"10-regular-expression-matching",children:"10. Regular Expression Matching"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/regular-expression-matching/description/",children:"https://leetcode.com/problems/regular-expression-matching/description/"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nfunction isMatch(s, p) {\n  const m = s.length;\n  const n = p.length;\n\n  // dp[i][j] represents if s[0...i-1] matches p[0...j-1]\n  const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(false));\n\n  // Empty pattern matches empty string\n  dp[0][0] = true;\n\n  // Handle patterns with *\n  for (let j = 1; j <= n; j++) {\n    if (p[j - 1] === '*') {\n      dp[0][j] = dp[0][j - 2];\n    }\n  }\n\n  // Fill the dp table\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (p[j - 1] === '*') {\n        // Two cases for '*':\n        // 1. Don't use the '*' and its preceding char (use zero times)\n        // 2. Use the '*' by matching the preceding char with current char in s\n        dp[i][j] = dp[i][j - 2] || // Case 1: Skip both * and its preceding char\n          (dp[i - 1][j] && // Case 2: Use * to match current char\n            (p[j - 2] === '.' || p[j - 2] === s[i - 1]));\n      } else {\n        // For non-'*' characters, check if current characters match\n        // and if previous characters matched\n        dp[i][j] = dp[i - 1][j - 1] &&\n          (p[j - 1] === '.' || p[j - 1] === s[i - 1]);\n      }\n    }\n  }\n\n  return dp[m][n];\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);