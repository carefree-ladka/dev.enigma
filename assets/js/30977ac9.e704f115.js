"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5070],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(96540);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},39174:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var i=r(74848),s=r(28453);const l={},t="Threads and Multitasking: OS vs Application Level",a={id:"Java Interview Guide/Threads and Multitasking: OS vs Application Level",title:"Threads and Multitasking: OS vs Application Level",description:"Overview",source:"@site/docs/Java Interview Guide/Threads and Multitasking: OS vs Application Level.mdx",sourceDirName:"Java Interview Guide",slug:"/Java Interview Guide/Threads and Multitasking: OS vs Application Level",permalink:"/docs/Java Interview Guide/Threads and Multitasking: OS vs Application Level",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java Interview Guide/Threads and Multitasking: OS vs Application Level.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Spring Boot Microservices Interview Questions & Answers",permalink:"/docs/Java Interview Guide/Spring Boot Microservices Interview Questions & Answers"},next:{title:"Top 50 Java Interview Questions",permalink:"/docs/Java Interview Guide/Top 50 Java Interview Questions"}},d={},o=[{value:"Overview",id:"overview",level:2},{value:"Types of Multitasking",id:"types-of-multitasking",level:2},{value:"1. <strong>Process-Based Multitasking</strong>",id:"1-process-based-multitasking",level:3},{value:"2. <strong>Thread-Based Multitasking</strong>",id:"2-thread-based-multitasking",level:3},{value:"Process vs Thread",id:"process-vs-thread",level:2},{value:"Key Differences",id:"key-differences",level:2},{value:"OS-Level Threading",id:"os-level-threading",level:2},{value:"How Operating System Manages Threads",id:"how-operating-system-manages-threads",level:3},{value:"OS Thread Types",id:"os-thread-types",level:3},{value:"<strong>1. Kernel-Level Threads (OS Threads)</strong>",id:"1-kernel-level-threads-os-threads",level:4},{value:"<strong>2. User-Level Threads (Green Threads)</strong>",id:"2-user-level-threads-green-threads",level:4},{value:"Application-Level Threading",id:"application-level-threading",level:2},{value:"Thread Lifecycle",id:"thread-lifecycle",level:3},{value:"Java Threading Model",id:"java-threading-model",level:3},{value:"Thread Scheduling Algorithms",id:"thread-scheduling-algorithms",level:2},{value:"1. <strong>Preemptive Scheduling</strong>",id:"1-preemptive-scheduling",level:3},{value:"2. <strong>Cooperative Scheduling</strong>",id:"2-cooperative-scheduling",level:3},{value:"3. <strong>Priority-Based Scheduling</strong>",id:"3-priority-based-scheduling",level:3},{value:"Multithreading in Practice",id:"multithreading-in-practice",level:2},{value:"Example: Web Server Handling Requests",id:"example-web-server-handling-requests",level:3},{value:"Thread Synchronization",id:"thread-synchronization",level:2},{value:"Common Synchronization Mechanisms",id:"common-synchronization-mechanisms",level:3},{value:"Thread Pool Pattern",id:"thread-pool-pattern",level:2},{value:"Benefits of Thread Pools",id:"benefits-of-thread-pools",level:3},{value:"OS-Level vs Application-Level Comparison",id:"os-level-vs-application-level-comparison",level:2},{value:"Context Switching",id:"context-switching",level:2},{value:"What Happens During Context Switch?",id:"what-happens-during-context-switch",level:3},{value:"Concurrency vs Parallelism",id:"concurrency-vs-parallelism",level:2},{value:"Real-World Threading Examples",id:"real-world-threading-examples",level:2},{value:"1. <strong>GUI Applications</strong>",id:"1-gui-applications",level:3},{value:"2. <strong>Database Server</strong>",id:"2-database-server",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Thread Overhead",id:"thread-overhead",level:3},{value:"Optimal Thread Count",id:"optimal-thread-count",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Summary",id:"summary",level:2},{value:"OS-Level Threading",id:"os-level-threading-1",level:3},{value:"Application-Level Threading",id:"application-level-threading-1",level:3},{value:"Modern Trend",id:"modern-trend",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"threads-and-multitasking-os-vs-application-level",children:"Threads and Multitasking: OS vs Application Level"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Multitasking allows computers to execute multiple tasks concurrently. Understanding the difference between OS-level and application-level threading is crucial for building efficient applications."}),"\n",(0,i.jsx)(n.h2,{id:"types-of-multitasking",children:"Types of Multitasking"}),"\n",(0,i.jsxs)(n.h3,{id:"1-process-based-multitasking",children:["1. ",(0,i.jsx)(n.strong,{children:"Process-Based Multitasking"})]}),"\n",(0,i.jsx)(n.p,{children:"Multiple independent programs run simultaneously (e.g., browser, music player, text editor)."}),"\n",(0,i.jsxs)(n.h3,{id:"2-thread-based-multitasking",children:["2. ",(0,i.jsx)(n.strong,{children:"Thread-Based Multitasking"})]}),"\n",(0,i.jsx)(n.p,{children:"Multiple threads within a single program execute concurrently (e.g., downloading while rendering UI)."}),"\n",(0,i.jsx)(n.h2,{id:"process-vs-thread",children:"Process vs Thread"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Operating System"\n        P1[Process 1<br/>Browser]\n        P2[Process 2<br/>Music Player]\n        P3[Process 3<br/>Text Editor]\n    end\n\n    subgraph "Process 1 - Browser"\n        T1[Thread 1<br/>UI Rendering]\n        T2[Thread 2<br/>Network Requests]\n        T3[Thread 3<br/>JavaScript Execution]\n        T4[Thread 4<br/>Image Decoding]\n    end\n\n    P1 -.-> T1\n    P1 -.-> T2\n    P1 -.-> T3\n    P1 -.-> T4\n\n    M1[Memory Space 1<br/>Independent]\n    M2[Memory Space 2<br/>Independent]\n    M3[Memory Space 3<br/>Independent]\n\n    P1 --\x3e M1\n    P2 --\x3e M2\n    P3 --\x3e M3\n\n    SM[Shared Memory<br/>within Process]\n    T1 --\x3e SM\n    T2 --\x3e SM\n    T3 --\x3e SM\n    T4 --\x3e SM\n\n    style P1 fill:#ff6b6b\n    style P2 fill:#4ecdc4\n    style P3 fill:#45b7d1\n    style T1 fill:#a8e6cf\n    style T2 fill:#a8e6cf\n    style T3 fill:#a8e6cf\n    style T4 fill:#a8e6cf\n    style SM fill:#ffd93d'}),"\n",(0,i.jsx)(n.h2,{id:"key-differences",children:"Key Differences"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Process"}),(0,i.jsx)(n.th,{children:"Thread"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory"})}),(0,i.jsx)(n.td,{children:"Separate memory space"}),(0,i.jsx)(n.td,{children:"Shared memory within process"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Communication"})}),(0,i.jsx)(n.td,{children:"Inter-process communication (IPC)"}),(0,i.jsx)(n.td,{children:"Direct memory access"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Creation Cost"})}),(0,i.jsx)(n.td,{children:"Expensive"}),(0,i.jsx)(n.td,{children:"Lightweight"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Context Switching"})}),(0,i.jsx)(n.td,{children:"Slower"}),(0,i.jsx)(n.td,{children:"Faster"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Independence"})}),(0,i.jsx)(n.td,{children:"Fully independent"}),(0,i.jsx)(n.td,{children:"Share process resources"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Crash Impact"})}),(0,i.jsx)(n.td,{children:"Isolated"}),(0,i.jsx)(n.td,{children:"Can crash entire process"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"os-level-threading",children:"OS-Level Threading"}),"\n",(0,i.jsx)(n.h3,{id:"how-operating-system-manages-threads",children:"How Operating System Manages Threads"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    A[CPU Cores] --\x3e B[OS Scheduler]\n    B --\x3e C{Thread<br/>Scheduling}\n\n    C --\x3e D[Running State]\n    C --\x3e E[Ready State]\n    C --\x3e F[Blocked/Waiting State]\n    C --\x3e G[Terminated State]\n\n    E --\x3e |Scheduler assigns CPU| D\n    D --\x3e |Time slice expired| E\n    D --\x3e |I/O request or wait| F\n    F --\x3e |I/O complete or notify| E\n    D --\x3e |Execution complete| G\n    E --\x3e |Kill signal| G\n\n    subgraph "CPU 1"\n        T1[Thread A]\n    end\n\n    subgraph "CPU 2"\n        T2[Thread B]\n    end\n\n    subgraph "CPU 3"\n        T3[Thread C]\n    end\n\n    subgraph "CPU 4"\n        T4[Thread D]\n    end\n\n    D -.-> T1\n    D -.-> T2\n    D -.-> T3\n    D -.-> T4\n\n    style D fill:#90EE90\n    style E fill:#FFD700\n    style F fill:#FF6347\n    style G fill:#A9A9A9'}),"\n",(0,i.jsx)(n.h3,{id:"os-thread-types",children:"OS Thread Types"}),"\n",(0,i.jsx)(n.h4,{id:"1-kernel-level-threads-os-threads",children:(0,i.jsx)(n.strong,{children:"1. Kernel-Level Threads (OS Threads)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Managed directly by the operating system kernel"}),"\n",(0,i.jsx)(n.li,{children:"OS scheduler handles thread scheduling"}),"\n",(0,i.jsx)(n.li,{children:"True parallel execution on multiple CPU cores"}),"\n",(0,i.jsx)(n.li,{children:"Higher overhead but better parallelism"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-user-level-threads-green-threads",children:(0,i.jsx)(n.strong,{children:"2. User-Level Threads (Green Threads)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Managed by application or runtime library"}),"\n",(0,i.jsx)(n.li,{children:"OS sees them as a single process"}),"\n",(0,i.jsx)(n.li,{children:"Faster context switching"}),"\n",(0,i.jsx)(n.li,{children:"Cannot utilize multiple CPU cores directly"}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Kernel-Level Threading"\n        A[Application] --\x3e B[Thread Library]\n        B --\x3e C[Kernel]\n        C --\x3e D[CPU Core 1]\n        C --\x3e E[CPU Core 2]\n        C --\x3e F[CPU Core 3]\n        C --\x3e G[CPU Core 4]\n    end\n\n    subgraph "User-Level Threading"\n        H[Application] --\x3e I[User Thread Library]\n        I --\x3e J[Single Kernel Thread]\n        J --\x3e K[CPU Core 1]\n    end\n\n    style C fill:#ff6b6b\n    style I fill:#4ecdc4'}),"\n",(0,i.jsx)(n.h2,{id:"application-level-threading",children:"Application-Level Threading"}),"\n",(0,i.jsx)(n.h3,{id:"thread-lifecycle",children:"Thread Lifecycle"}),"\n",(0,i.jsx)(n.mermaid,{value:"stateDiagram-v2\n    [*] --\x3e New: Create Thread\n    New --\x3e Runnable: start()\n    Runnable --\x3e Running: Scheduler assigns CPU\n    Running --\x3e Runnable: yield() or time slice end\n    Running --\x3e Waiting: wait(), sleep(), join()\n    Waiting --\x3e Runnable: notify(), time elapsed, thread completes\n    Running --\x3e Blocked: I/O operation, lock unavailable\n    Blocked --\x3e Runnable: I/O complete, lock acquired\n    Running --\x3e Terminated: Execution complete\n    Terminated --\x3e [*]\n\n    note right of New\n        Thread object created\n        but not started\n    end note\n\n    note right of Runnable\n        Ready to run\n        waiting for CPU time\n    end note\n\n    note right of Running\n        Currently executing\n        on CPU\n    end note\n\n    note right of Waiting\n        Waiting for specific\n        condition or time\n    end note\n\n    note right of Blocked\n        Waiting for resource\n        (I/O, lock)\n    end note"}),"\n",(0,i.jsx)(n.h3,{id:"java-threading-model",children:"Java Threading Model"}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    A[Java Application] --\x3e B[Java Threads]\n    B --\x3e C[JVM]\n\n    C --\x3e D{Thread Mapping}\n\n    D --\x3e E[Native OS Threads<br/>1:1 mapping]\n    D --\x3e F[Green Threads<br/>M:N mapping<br/>Historical]\n\n    E --\x3e G[OS Scheduler]\n    G --\x3e H[CPU Core 1]\n    G --\x3e I[CPU Core 2]\n    G --\x3e J[CPU Core 3]\n    G --\x3e K[CPU Core 4]\n\n    subgraph "Modern JVM"\n        E\n    end\n\n    subgraph "Legacy JVM"\n        F\n    end\n\n    style E fill:#90EE90\n    style F fill:#FFD700\n    style G fill:#FF6347'}),"\n",(0,i.jsx)(n.h2,{id:"thread-scheduling-algorithms",children:"Thread Scheduling Algorithms"}),"\n",(0,i.jsxs)(n.h3,{id:"1-preemptive-scheduling",children:["1. ",(0,i.jsx)(n.strong,{children:"Preemptive Scheduling"})]}),"\n",(0,i.jsx)(n.p,{children:"OS can interrupt a running thread to give CPU time to another thread."}),"\n",(0,i.jsxs)(n.h3,{id:"2-cooperative-scheduling",children:["2. ",(0,i.jsx)(n.strong,{children:"Cooperative Scheduling"})]}),"\n",(0,i.jsx)(n.p,{children:"Threads voluntarily yield control (used in user-level threading)."}),"\n",(0,i.jsxs)(n.h3,{id:"3-priority-based-scheduling",children:["3. ",(0,i.jsx)(n.strong,{children:"Priority-Based Scheduling"})]}),"\n",(0,i.jsx)(n.p,{children:"Higher priority threads get CPU time first."}),"\n",(0,i.jsx)(n.mermaid,{value:"gantt\n    title Thread Scheduling Timeline (Preemptive)\n    dateFormat X\n    axisFormat %L ms\n\n    section CPU Core 1\n    Thread A (High Priority)    :active, 0, 30\n    Thread B (Medium Priority)  :active, 30, 50\n    Thread A (High Priority)    :active, 50, 80\n    Thread C (Low Priority)     :active, 80, 90\n    Thread A (High Priority)    :active, 90, 120\n\n    section CPU Core 2\n    Thread D (High Priority)    :active, 0, 40\n    Thread E (Medium Priority)  :active, 40, 70\n    Thread D (High Priority)    :active, 70, 100\n    Thread F (Low Priority)     :active, 100, 120"}),"\n",(0,i.jsx)(n.h2,{id:"multithreading-in-practice",children:"Multithreading in Practice"}),"\n",(0,i.jsx)(n.h3,{id:"example-web-server-handling-requests",children:"Example: Web Server Handling Requests"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant C1 as Client 1\n    participant C2 as Client 2\n    participant C3 as Client 3\n    participant S as Web Server\n    participant T1 as Thread 1\n    participant T2 as Thread 2\n    participant T3 as Thread 3\n    participant DB as Database\n\n    C1->>S: HTTP Request\n    S->>T1: Assign to Thread 1\n\n    C2->>S: HTTP Request\n    S->>T2: Assign to Thread 2\n\n    C3->>S: HTTP Request\n    S->>T3: Assign to Thread 3\n\n    par Parallel Execution\n        T1->>DB: Query Database\n        T2->>DB: Query Database\n        T3->>DB: Query Database\n    end\n\n    DB--\x3e>T1: Results\n    DB--\x3e>T2: Results\n    DB--\x3e>T3: Results\n\n    T1--\x3e>C1: HTTP Response\n    T2--\x3e>C2: HTTP Response\n    T3--\x3e>C3: HTTP Response"}),"\n",(0,i.jsx)(n.h2,{id:"thread-synchronization",children:"Thread Synchronization"}),"\n",(0,i.jsx)(n.p,{children:"When multiple threads access shared resources, synchronization is needed."}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart TD\n    A[Thread 1] --\x3e B{Critical Section<br/>Lock Available?}\n    C[Thread 2] --\x3e B\n    D[Thread 3] --\x3e B\n\n    B --\x3e|Yes| E[Acquire Lock]\n    B --\x3e|No| F[Wait in Queue]\n\n    E --\x3e G[Execute Critical Section<br/>Access Shared Resource]\n    G --\x3e H[Release Lock]\n\n    H --\x3e I[Notify Waiting Threads]\n    I --\x3e F\n    F --\x3e B\n\n    style B fill:#FFD700\n    style E fill:#90EE90\n    style F fill:#FF6347\n    style G fill:#87CEEB"}),"\n",(0,i.jsx)(n.h3,{id:"common-synchronization-mechanisms",children:"Common Synchronization Mechanisms"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mutex (Mutual Exclusion)"}),": Only one thread can access resource"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semaphore"}),": Limited number of threads can access resource"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor"}),": High-level synchronization construct"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Read-Write Locks"}),": Multiple readers or single writer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic Operations"}),": Lock-free synchronization"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"thread-pool-pattern",children:"Thread Pool Pattern"}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n    A[Incoming Tasks] --\x3e B[Task Queue]\n\n    B --\x3e C{Thread Pool}\n\n    C --\x3e T1[Worker Thread 1]\n    C --\x3e T2[Worker Thread 2]\n    C --\x3e T3[Worker Thread 3]\n    C --\x3e T4[Worker Thread 4]\n    C --\x3e T5[Worker Thread 5]\n\n    T1 --\x3e D[Execute Task]\n    T2 --\x3e D\n    T3 --\x3e D\n    T4 --\x3e D\n    T5 --\x3e D\n\n    D --\x3e E[Return to Pool]\n    E --\x3e C\n\n    D --\x3e F[Task Complete]\n\n    style B fill:#FFD93D\n    style C fill:#6BCF7F\n    style D fill:#4ECDC4\n    style F fill:#95E1D3"}),"\n",(0,i.jsx)(n.h3,{id:"benefits-of-thread-pools",children:"Benefits of Thread Pools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reuse"}),": Threads are reused instead of created/destroyed repeatedly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Control"}),": Limit number of concurrent threads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Reduced overhead of thread creation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Management"}),": Prevent resource exhaustion"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"os-level-vs-application-level-comparison",children:"OS-Level vs Application-Level Comparison"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "OS-Level Threading"\n        OS[Operating System Kernel]\n        OS --\x3e OST1[OS Thread 1]\n        OS --\x3e OST2[OS Thread 2]\n        OS --\x3e OST3[OS Thread 3]\n\n        OST1 --\x3e CPU1[CPU Core 1]\n        OST2 --\x3e CPU2[CPU Core 2]\n        OST3 --\x3e CPU3[CPU Core 3]\n\n        Note1[\u2713 True parallelism<br/>\u2713 OS handles scheduling<br/>\u2717 Higher overhead<br/>\u2717 Context switch cost]\n    end\n\n    subgraph "Application-Level Threading"\n        APP[Application Runtime]\n        APP --\x3e AT1[App Thread 1]\n        APP --\x3e AT2[App Thread 2]\n        APP --\x3e AT3[App Thread 3]\n\n        AT1 --\x3e ROST[Single OS Thread]\n        AT2 --\x3e ROST\n        AT3 --\x3e ROST\n\n        ROST --\x3e CPUX[CPU Core]\n\n        Note2[\u2713 Fast context switch<br/>\u2713 Low overhead<br/>\u2717 No true parallelism<br/>\u2717 Blocking issues]\n    end\n\n    style OS fill:#ff6b6b\n    style APP fill:#4ecdc4'}),"\n",(0,i.jsx)(n.h2,{id:"context-switching",children:"Context Switching"}),"\n",(0,i.jsx)(n.h3,{id:"what-happens-during-context-switch",children:"What Happens During Context Switch?"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant CPU as CPU\n    participant T1 as Thread 1\n    participant OS as OS Scheduler\n    participant T2 as Thread 2\n\n    T1->>CPU: Executing\n    Note over T1,CPU: Time slice expires\n\n    CPU->>OS: Interrupt\n    OS->>OS: Save Thread 1 state<br/>(registers, PC, stack)\n    OS->>OS: Select Thread 2<br/>(scheduling decision)\n    OS->>OS: Load Thread 2 state<br/>(registers, PC, stack)\n    OS->>T2: Resume execution\n    T2->>CPU: Executing\n\n    Note over OS: Context Switch Overhead:<br/>- Save/restore registers<br/>- Update memory mappings<br/>- Cache invalidation<br/>- TLB flush"}),"\n",(0,i.jsx)(n.h2,{id:"concurrency-vs-parallelism",children:"Concurrency vs Parallelism"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Concurrency (Single Core)"\n        A[Task A] -.-> B[Task B]\n        B -.-> C[Task A]\n        C -.-> D[Task B]\n        D -.-> E[Task A]\n\n        Note1[Tasks take turns<br/>Interleaved execution<br/>Appears simultaneous]\n    end\n\n    subgraph "Parallelism (Multi-Core)"\n        F[Task A] --\x3e G[Core 1]\n        H[Task B] --\x3e I[Core 2]\n        J[Task C] --\x3e K[Core 3]\n\n        Note2[Tasks run truly<br/>simultaneously<br/>on different cores]\n    end\n\n    style A fill:#FFB6C1\n    style B fill:#87CEEB\n    style C fill:#FFB6C1\n    style D fill:#87CEEB\n    style E fill:#FFB6C1\n    style F fill:#FFB6C1\n    style H fill:#87CEEB\n    style J fill:#98FB98'}),"\n",(0,i.jsx)(n.h2,{id:"real-world-threading-examples",children:"Real-World Threading Examples"}),"\n",(0,i.jsxs)(n.h3,{id:"1-gui-applications",children:["1. ",(0,i.jsx)(n.strong,{children:"GUI Applications"})]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart LR\n    A[Main Thread<br/>UI Rendering] --\x3e B[Responsive UI]\n    C[Background Thread<br/>Heavy Computation] --\x3e D[Process Data]\n    E[Network Thread<br/>API Calls] --\x3e F[Fetch Data]\n\n    D -.Update.-> A\n    F -.Update.-> A\n\n    style A fill:#FF6B6B\n    style C fill:#4ECDC4\n    style E fill:#45B7D1"}),"\n",(0,i.jsxs)(n.h3,{id:"2-database-server",children:["2. ",(0,i.jsx)(n.strong,{children:"Database Server"})]}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart TD\n    A[Connection Pool Threads] --\x3e B[Handle Client Connections]\n    C[Query Executor Threads] --\x3e D[Execute SQL Queries]\n    E[Buffer Manager Thread] --\x3e F[Manage Memory Cache]\n    G[Checkpoint Thread] --\x3e H[Write to Disk]\n    I[Lock Manager Thread] --\x3e J[Handle Deadlocks]\n\n    style A fill:#a8e6cf\n    style C fill:#ffd3b6\n    style E fill:#ffaaa5\n    style G fill:#ff8b94\n    style I fill:#a8e6cf"}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"thread-overhead",children:"Thread Overhead"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Approximate Cost"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Thread creation"}),(0,i.jsx)(n.td,{children:"10-100 microseconds"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Context switch"}),(0,i.jsx)(n.td,{children:"1-10 microseconds"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Lock acquisition (uncontended)"}),(0,i.jsx)(n.td,{children:"~25 nanoseconds"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Lock acquisition (contended)"}),(0,i.jsx)(n.td,{children:"~500 nanoseconds"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"optimal-thread-count",children:"Optimal Thread Count"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Optimal Threads = Number of CPU Cores \xd7 (1 + Wait Time / Compute Time)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CPU-bound tasks"}),": Threads \u2248 CPU cores"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"I/O-bound tasks"}),": Threads > CPU cores"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mixed workload"}),": Balance based on wait/compute ratio"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Thread Pools"})," instead of creating threads manually"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize Shared State"})," to reduce synchronization needs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer Immutable Objects"})," for thread safety"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid Blocking Operations"})," in critical threads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Async/Await Patterns"})," for I/O operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Profile Before Optimizing"})," thread counts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle Thread Interruption"})," gracefully"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider Lock-Free Algorithms"})," for high contention"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.h3,{id:"os-level-threading-1",children:"OS-Level Threading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Managed by operating system kernel"}),"\n",(0,i.jsx)(n.li,{children:"True parallelism on multi-core systems"}),"\n",(0,i.jsx)(n.li,{children:"Higher overhead but better resource utilization"}),"\n",(0,i.jsx)(n.li,{children:"Modern approach for most applications"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"application-level-threading-1",children:"Application-Level Threading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Managed by runtime or library"}),"\n",(0,i.jsx)(n.li,{children:"Fast context switching"}),"\n",(0,i.jsx)(n.li,{children:"Limited to single core historically"}),"\n",(0,i.jsx)(n.li,{children:"Useful for specific scenarios (coroutines, fibers)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"modern-trend",children:"Modern Trend"}),"\n",(0,i.jsxs)(n.p,{children:["Most modern languages and runtimes use ",(0,i.jsx)(n.strong,{children:"hybrid approaches"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Map application threads to OS threads (Java, Python, C#)"}),"\n",(0,i.jsx)(n.li,{children:"Use async/await for I/O operations"}),"\n",(0,i.jsx)(n.li,{children:"Employ work-stealing thread pools for efficiency"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);