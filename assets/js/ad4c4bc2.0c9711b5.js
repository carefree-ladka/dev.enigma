"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[690],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var a=i(96540);const t={},l=a.createContext(t);function r(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(l.Provider,{value:n},e.children)}},66260:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=i(74848),t=i(28453);const l={},r="Java Primitive Data Types - Complete Cheatsheet",s={id:"Java/Java Primitive Data Types - Complete Cheatsheet",title:"Java Primitive Data Types - Complete Cheatsheet",description:"A comprehensive guide to Java's primitive data types with practical code snippets and their operations.",source:"@site/docs/Java/Java Primitive Data Types - Complete Cheatsheet.mdx",sourceDirName:"Java",slug:"/Java/Java Primitive Data Types - Complete Cheatsheet",permalink:"/js.enigma/docs/Java/Java Primitive Data Types - Complete Cheatsheet",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Java Primitive Data Types - Complete Cheatsheet.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Optional Class",permalink:"/js.enigma/docs/Java/Java Optional Class"},next:{title:"Java Wrapper Classes - Complete Cheatsheet",permalink:"/js.enigma/docs/Java/Java Wrapper Classes - Complete Cheatsheet"}},o={},c=[{value:"\ud83d\udccb Quick Navigation",id:"-quick-navigation",level:2},{value:"\ud83d\udd39 <code>int</code> (32-bit Integer)",id:"-int-32-bit-integer",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization",level:3},{value:"Range &amp; Limits",id:"range--limits",level:3},{value:"Common Operations",id:"common-operations",level:3},{value:"Bitwise Operations",id:"bitwise-operations",level:3},{value:"\ud83d\udd39 <code>long</code> (64-bit Integer)",id:"-long-64-bit-integer",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-1",level:3},{value:"Range &amp; Operations",id:"range--operations",level:3},{value:"Time &amp; Large Numbers",id:"time--large-numbers",level:3},{value:"\ud83d\udd39 <code>char</code> (16-bit Character)",id:"-char-16-bit-character",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-2",level:3},{value:"Unicode &amp; Escape Sequences",id:"unicode--escape-sequences",level:3},{value:"Character Operations",id:"character-operations",level:3},{value:"Range",id:"range",level:3},{value:"\ud83d\udd39 <code>boolean</code> (true or false)",id:"-boolean-true-or-false",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-3",level:3},{value:"Logical Operations",id:"logical-operations",level:3},{value:"Short-Circuit Evaluation",id:"short-circuit-evaluation",level:3},{value:"Conditional Usage",id:"conditional-usage",level:3},{value:"\ud83d\udd39 <code>double</code> (64-bit Floating Point)",id:"-double-64-bit-floating-point",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-4",level:3},{value:"Precision &amp; Range",id:"precision--range",level:3},{value:"Mathematical Operations",id:"mathematical-operations",level:3},{value:"Special Values",id:"special-values",level:3},{value:"\ud83d\udd39 <code>float</code> (32-bit Floating Point)",id:"-float-32-bit-floating-point",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-5",level:3},{value:"Range &amp; Precision",id:"range--precision",level:3},{value:"Operations",id:"operations",level:3},{value:"Comparison with double",id:"comparison-with-double",level:3},{value:"\ud83d\udd39 <code>byte</code> (8-bit Integer)",id:"-byte-8-bit-integer",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-6",level:3},{value:"Range &amp; Operations",id:"range--operations-1",level:3},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"\ud83d\udd39 <code>short</code> (16-bit Integer)",id:"-short-16-bit-integer",level:2},{value:"Declaration &amp; Initialization",id:"declaration--initialization-7",level:3},{value:"Range &amp; Operations",id:"range--operations-2",level:3},{value:"Practical Usage",id:"practical-usage",level:3},{value:"\ud83d\udd39 Type Casting &amp; Conversions",id:"-type-casting--conversions",level:2},{value:"Widening (Implicit) Conversions",id:"widening-implicit-conversions",level:3},{value:"Narrowing (Explicit) Conversions",id:"narrowing-explicit-conversions",level:3},{value:"Overflow Examples",id:"overflow-examples",level:3},{value:"String Conversions",id:"string-conversions",level:3},{value:"\ud83d\udd39 Operations &amp; Operators",id:"-operations--operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"Unary Operators",id:"unary-operators",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Assignment Operators",id:"assignment-operators",level:3},{value:"Bitwise Operators",id:"bitwise-operators",level:3},{value:"\ud83d\ude80 <strong>Quick Reference Summary</strong>",id:"-quick-reference-summary",level:2},{value:"\ud83c\udfaf <strong>Best Practices</strong>",id:"-best-practices",level:2},{value:"1. <strong>Choose Appropriate Types</strong>",id:"1-choose-appropriate-types",level:3},{value:"2. <strong>Handle Overflow Carefully</strong>",id:"2-handle-overflow-carefully",level:3},{value:"3. <strong>Floating Point Precision</strong>",id:"3-floating-point-precision",level:3},{value:"4. <strong>Efficient Operations</strong>",id:"4-efficient-operations",level:3},{value:"5. <strong>Initialization &amp; Default Values</strong>",id:"5-initialization--default-values",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"java-primitive-data-types---complete-cheatsheet",children:"Java Primitive Data Types - Complete Cheatsheet"})}),"\n",(0,a.jsx)(n.p,{children:"A comprehensive guide to Java's primitive data types with practical code snippets and their operations."}),"\n",(0,a.jsx)(n.h2,{id:"-quick-navigation",children:"\ud83d\udccb Quick Navigation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-int-32-bit-integer",children:"int"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-long-64-bit-integer",children:"long"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-char-16-bit-character",children:"char"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-boolean-true-or-false",children:"boolean"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-double-64-bit-floating-point",children:"double"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-float-32-bit-floating-point",children:"float"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-byte-8-bit-integer",children:"byte"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-short-16-bit-integer",children:"short"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-type-casting--conversions",children:"Type Casting & Conversions"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-operations--operators",children:"Operations & Operators"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-quick-reference-summary",children:"Quick Reference Summary"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#-best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-int-32-bit-integer",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"int"})," (32-bit Integer)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int num = 42;                      // Basic declaration\nint hex = 0x1A;                    // Hexadecimal: 26\nint binary = 0b1010;               // Binary: 10\nint octal = 017;                   // Octal: 15\nint negative = -100;               // Negative number\nint[] array = {1, 2, 3, 4, 5};    // Array declaration\n"})}),"\n",(0,a.jsx)(n.h3,{id:"range--limits",children:"Range & Limits"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int maxValue = 2147483647;         // Maximum value (2^31 - 1)\nint minValue = -2147483648;        // Minimum value (-2^31)\nint overflow = Integer.MAX_VALUE + 1; // Results in: -2147483648 (overflow)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"common-operations",children:"Common Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10, b = 3;\nint sum = a + b;                   // 13\nint difference = a - b;            // 7\nint product = a * b;               // 30\nint quotient = a / b;              // 3 (integer division)\nint remainder = a % b;             // 1 (modulo)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bitwise-operations",children:"Bitwise Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int x = 12, y = 10;                // 12 = 1100, 10 = 1010\nint and = x & y;                   // 8 (1000)\nint or = x | y;                    // 14 (1110)\nint xor = x ^ y;                   // 6 (0110)\nint not = ~x;                      // -13 (bitwise complement)\nint leftShift = x << 2;            // 48 (multiply by 4)\nint rightShift = x >> 2;           // 3 (divide by 4)\nint unsignedRight = x >>> 2;       // 3 (unsigned right shift)\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-long-64-bit-integer",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"long"})," (64-bit Integer)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-1",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"long bigNum = 123456789L;          // L suffix required for literals\nlong hex = 0x1FFFFFFFFL;           // Hexadecimal long\nlong binary = 0b101010101L;        // Binary long\nlong fromInt = 42;                 // Automatic widening from int\nlong maxLong = 9223372036854775807L; // Maximum value\n"})}),"\n",(0,a.jsx)(n.h3,{id:"range--operations",children:"Range & Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"long a = 1000000000L;              // 1 billion\nlong b = 2000000000L;              // 2 billion\nlong sum = a + b;                  // 3000000000L\nlong product = a * b;              // 2000000000000000000L\n\n// Overflow example\nlong overflow = Long.MAX_VALUE + 1; // Results in: -9223372036854775808L\n"})}),"\n",(0,a.jsx)(n.h3,{id:"time--large-numbers",children:"Time & Large Numbers"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"long currentTime = System.currentTimeMillis(); // Current timestamp\nlong nanoTime = System.nanoTime();             // High precision time\nlong fileSize = 1024L * 1024L * 1024L;        // 1 GB in bytes\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-char-16-bit-character",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"char"})," (16-bit Character)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-2",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"char letter = 'A';                 // Single character\nchar digit = '9';                  // Digit character\nchar unicode = '\\u0041';           // Unicode: 'A'\nchar escape = '\\n';                // Escape sequence: newline\nchar fromInt = 65;                 // ASCII value: 'A'\nchar[] charArray = {'H', 'e', 'l', 'l', 'o'};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"unicode--escape-sequences",children:"Unicode & Escape Sequences"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"char tab = '\\t';                   // Tab character\nchar backslash = '\\\\';             // Backslash\nchar quote = '\\'';                 // Single quote\nchar euro = '\u20ac';                   // Euro symbol\nchar emoji = '\ud83d\ude00';                 // Emoji (if supported)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"character-operations",children:"Character Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"char ch = 'A';\nint asciiValue = (int) ch;         // 65\nchar nextChar = (char) (ch + 1);   // 'B'\nboolean isDigit = ch >= '0' && ch <= '9';      // false\nboolean isUppercase = ch >= 'A' && ch <= 'Z'; // true\nboolean isLowercase = ch >= 'a' && ch <= 'z'; // false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"range",children:"Range"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"char minChar = '\\u0000';           // Minimum: null character (0)\nchar maxChar = '\\uFFFF';           // Maximum: 65535\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-boolean-true-or-false",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"boolean"})," (true or false)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-3",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"boolean isTrue = true;             // True value\nboolean isFalse = false;           // False value\nboolean result = (5 > 3);          // true (from comparison)\nboolean[] flags = {true, false, true};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"logical-operations",children:"Logical Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"boolean a = true, b = false;\nboolean and = a && b;              // false (logical AND)\nboolean or = a || b;               // true (logical OR)\nboolean not = !a;                  // false (logical NOT)\nboolean xor = a ^ b;               // true (logical XOR)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"short-circuit-evaluation",children:"Short-Circuit Evaluation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"boolean result1 = false && (5/0 > 0);  // false, no division by zero\nboolean result2 = true || (5/0 > 0);   // true, no division by zero\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conditional-usage",children:"Conditional Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'boolean canVote = age >= 18;\nboolean isEligible = hasLicense && canVote && !isBanned;\n\nif (isEligible) {\n    System.out.println("Eligible to vote");\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-double-64-bit-floating-point",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"double"})," (64-bit Floating Point)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-4",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"double pi = 3.14159;               // Decimal number\ndouble scientific = 1.23e-4;       // Scientific notation: 0.000123\ndouble negative = -45.67;          // Negative double\ndouble fromInt = 42;               // Automatic conversion from int\ndouble infinity = 1.0 / 0.0;       // Positive infinity\ndouble nan = 0.0 / 0.0;            // Not a Number (NaN)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"precision--range",children:"Precision & Range"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"double maxValue = 1.7976931348623157E308;     // Maximum value\ndouble minValue = 4.9E-324;                  // Minimum positive value\ndouble precision = 0.1 + 0.2;               // 0.30000000000000004 (precision issue)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mathematical-operations",children:"Mathematical Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"double a = 10.5, b = 3.2;\ndouble sum = a + b;                // 13.7\ndouble product = a * b;            // 33.6\ndouble power = Math.pow(a, 2);     // 110.25\ndouble sqrt = Math.sqrt(25.0);     // 5.0\ndouble sin = Math.sin(Math.PI / 2); // 1.0\n"})}),"\n",(0,a.jsx)(n.h3,{id:"special-values",children:"Special Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"double positiveInf = Double.POSITIVE_INFINITY;\ndouble negativeInf = Double.NEGATIVE_INFINITY;\ndouble notANumber = Double.NaN;\n\nboolean isInfinite = Double.isInfinite(1.0/0.0);    // true\nboolean isNaN = Double.isNaN(0.0/0.0);              // true\nboolean isFinite = Double.isFinite(3.14);           // true\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-float-32-bit-floating-point",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"float"})," (32-bit Floating Point)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-5",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"float num = 3.14f;                 // f suffix required\nfloat scientific = 1.23e-4f;       // Scientific notation\nfloat fromDouble = (float) 3.14159; // Explicit casting required\nfloat negative = -45.67f;          // Negative float\nfloat[] floatArray = {1.1f, 2.2f, 3.3f};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"range--precision",children:"Range & Precision"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"float maxValue = 3.4028235E38f;    // Maximum value\nfloat minValue = 1.4E-45f;         // Minimum positive value\nfloat precision = 0.1f + 0.2f;     // 0.3 (better than double for this case)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"operations",children:"Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"float a = 10.5f, b = 3.2f;\nfloat sum = a + b;                 // 13.7f\nfloat product = a * b;             // 33.6f\nfloat division = a / b;            // 3.28125f\n"})}),"\n",(0,a.jsx)(n.h3,{id:"comparison-with-double",children:"Comparison with double"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"float f = 3.14f;\ndouble d = 3.14;\nboolean equal = (f == d);          // true (automatic promotion)\nboolean precise = (f == 3.14f);    // true\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-byte-8-bit-integer",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"byte"})," (8-bit Integer)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-6",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"byte small = 127;                  // Maximum value\nbyte negative = -128;              // Minimum value\nbyte fromInt = (byte) 200;         // Explicit casting (overflow: -56)\nbyte[] byteArray = {1, 2, 3, 4, 5};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"range--operations-1",children:"Range & Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"byte min = -128;                   // Minimum value (-2^7)\nbyte max = 127;                    // Maximum value (2^7 - 1)\nbyte a = 10, b = 20;\nint sum = a + b;                   // Promoted to int: 30\nbyte result = (byte) (a + b);      // Explicit cast back to byte: 30\n"})}),"\n",(0,a.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// File I/O\nbyte[] fileData = new byte[1024];\n// Network communication\nbyte[] packet = {0x48, 0x65, 0x6C, 0x6C, 0x6F}; // "Hello"\n// Bit manipulation\nbyte flags = 0b10101010;           // Binary representation\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-short-16-bit-integer",children:["\ud83d\udd39 ",(0,a.jsx)(n.code,{children:"short"})," (16-bit Integer)"]}),"\n",(0,a.jsx)(n.h3,{id:"declaration--initialization-7",children:"Declaration & Initialization"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"short medium = 32767;              // Maximum value\nshort negative = -32768;           // Minimum value\nshort fromInt = (short) 50000;     // Explicit casting (overflow: -15536)\nshort[] shortArray = {100, 200, 300};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"range--operations-2",children:"Range & Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"short min = -32768;                // Minimum value (-2^15)\nshort max = 32767;                 // Maximum value (2^15 - 1)\nshort a = 1000, b = 2000;\nint sum = a + b;                   // Promoted to int: 3000\nshort result = (short) (a + b);    // Explicit cast: 3000\n"})}),"\n",(0,a.jsx)(n.h3,{id:"practical-usage",children:"Practical Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Audio samples (16-bit audio)\nshort[] audioData = new short[44100]; // 1 second at 44.1kHz\n// Memory-efficient arrays\nshort[] coordinates = {100, 200, 150, 300};\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-type-casting--conversions",children:"\ud83d\udd39 Type Casting & Conversions"}),"\n",(0,a.jsx)(n.h3,{id:"widening-implicit-conversions",children:"Widening (Implicit) Conversions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"byte b = 10;\nshort s = b;                       // byte \u2192 short\nint i = s;                         // short \u2192 int\nlong l = i;                        // int \u2192 long\nfloat f = l;                       // long \u2192 float\ndouble d = f;                      // float \u2192 double\n\n// Direct chain\ndouble result = 42;                // int \u2192 double (automatic)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"narrowing-explicit-conversions",children:"Narrowing (Explicit) Conversions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"double d = 123.45;\nfloat f = (float) d;               // 123.45f\nlong l = (long) f;                 // 123L\nint i = (int) l;                   // 123\nshort s = (short) i;               // 123\nbyte b = (byte) s;                 // 123\n"})}),"\n",(0,a.jsx)(n.h3,{id:"overflow-examples",children:"Overflow Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int bigInt = 130;\nbyte smallByte = (byte) bigInt;    // -126 (overflow)\n\nlong bigLong = 3000000000L;\nint overflowInt = (int) bigLong;   // -1294967296 (overflow)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"string-conversions",children:"String Conversions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Primitive to String\nint num = 42;\nString str1 = String.valueOf(num); // "42"\nString str2 = num + "";            // "42" (concatenation)\n\n// String to Primitive\nString numStr = "123";\nint parsed = Integer.parseInt(numStr);        // 123\ndouble parseDouble = Double.parseDouble("3.14"); // 3.14\nboolean parseBool = Boolean.parseBoolean("true"); // true\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"-operations--operators",children:"\ud83d\udd39 Operations & Operators"}),"\n",(0,a.jsx)(n.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10, b = 3;\nint addition = a + b;              // 13\nint subtraction = a - b;           // 7\nint multiplication = a * b;        // 30\nint division = a / b;              // 3 (integer division)\nint modulo = a % b;                // 1 (remainder)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"unary-operators",children:"Unary Operators"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int x = 5;\nint positive = +x;                 // 5 (unary plus)\nint negative = -x;                 // -5 (unary minus)\nint preIncrement = ++x;            // 6 (x becomes 6, returns 6)\nint postIncrement = x++;           // 6 (returns 6, x becomes 7)\nint preDecrement = --x;            // 6 (x becomes 6, returns 6)\nint postDecrement = x--;           // 6 (returns 6, x becomes 5)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 5, b = 10;\nboolean equal = (a == b);          // false\nboolean notEqual = (a != b);       // true\nboolean less = (a < b);            // true\nboolean greater = (a > b);         // false\nboolean lessOrEqual = (a <= b);    // true\nboolean greaterOrEqual = (a >= b); // false\n"})}),"\n",(0,a.jsx)(n.h3,{id:"assignment-operators",children:"Assignment Operators"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int x = 10;\nx += 5;                            // x = 15 (x = x + 5)\nx -= 3;                            // x = 12 (x = x - 3)\nx *= 2;                            // x = 24 (x = x * 2)\nx /= 4;                            // x = 6 (x = x / 4)\nx %= 4;                            // x = 2 (x = x % 4)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bitwise-operators",children:"Bitwise Operators"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 12, b = 10;                // 12 = 1100, 10 = 1010\nint bitwiseAnd = a & b;            // 8 (1000)\nint bitwiseOr = a | b;             // 14 (1110)\nint bitwiseXor = a ^ b;            // 6 (0110)\nint bitwiseNot = ~a;               // -13 (complement)\nint leftShift = a << 2;            // 48 (multiply by 2^2)\nint rightShift = a >> 2;           // 3 (divide by 2^2)\nint unsignedRightShift = a >>> 2;  // 3 (unsigned right shift)\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-quick-reference-summary",children:["\ud83d\ude80 ",(0,a.jsx)(n.strong,{children:"Quick Reference Summary"})]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Type"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Size"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Range"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Default"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Suffix"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Example"})})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"byte"})}),(0,a.jsx)(n.td,{children:"8-bit"}),(0,a.jsx)(n.td,{children:"-128 to 127"}),(0,a.jsx)(n.td,{children:"0"}),(0,a.jsx)(n.td,{children:"none"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"byte b = 100;"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"short"})}),(0,a.jsx)(n.td,{children:"16-bit"}),(0,a.jsx)(n.td,{children:"-32,768 to 32,767"}),(0,a.jsx)(n.td,{children:"0"}),(0,a.jsx)(n.td,{children:"none"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"short s = 1000;"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"int"})}),(0,a.jsx)(n.td,{children:"32-bit"}),(0,a.jsx)(n.td,{children:"-2.1B to 2.1B"}),(0,a.jsx)(n.td,{children:"0"}),(0,a.jsx)(n.td,{children:"none"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"int i = 42;"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"long"})}),(0,a.jsx)(n.td,{children:"64-bit"}),(0,a.jsx)(n.td,{children:"-9.2E18 to 9.2E18"}),(0,a.jsx)(n.td,{children:"0L"}),(0,a.jsx)(n.td,{children:"L"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"long l = 123L;"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"float"})}),(0,a.jsx)(n.td,{children:"32-bit"}),(0,a.jsx)(n.td,{children:"\xb13.4E38 (7 digits)"}),(0,a.jsx)(n.td,{children:"0.0f"}),(0,a.jsx)(n.td,{children:"f"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"float f = 3.14f;"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"double"})}),(0,a.jsx)(n.td,{children:"64-bit"}),(0,a.jsx)(n.td,{children:"\xb11.8E308 (15 digits)"}),(0,a.jsx)(n.td,{children:"0.0d"}),(0,a.jsx)(n.td,{children:"d"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"double d = 3.14;"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"char"})}),(0,a.jsx)(n.td,{children:"16-bit"}),(0,a.jsx)(n.td,{children:"0 to 65,535"}),(0,a.jsx)(n.td,{children:"'\\u0000'"}),(0,a.jsx)(n.td,{children:"none"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"char c = 'A';"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"boolean"})}),(0,a.jsx)(n.td,{children:"1-bit"}),(0,a.jsx)(n.td,{children:"true or false"}),(0,a.jsx)(n.td,{children:"false"}),(0,a.jsx)(n.td,{children:"none"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"boolean b = true;"})})]})]})]}),"\n",(0,a.jsxs)(n.h2,{id:"-best-practices",children:["\ud83c\udfaf ",(0,a.jsx)(n.strong,{children:"Best Practices"})]}),"\n",(0,a.jsxs)(n.h3,{id:"1-choose-appropriate-types",children:["1. ",(0,a.jsx)(n.strong,{children:"Choose Appropriate Types"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Good - appropriate size\nbyte age = 25;              // Age fits in byte range\nint population = 1000000;   // Population needs int\nlong worldPopulation = 7800000000L; // World population needs long\n\n// Avoid - wasteful\nlong age = 25L;             // Overkill for age\ndouble simpleCounter = 1.0; // int would be better\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"2-handle-overflow-carefully",children:["2. ",(0,a.jsx)(n.strong,{children:"Handle Overflow Carefully"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Dangerous - can overflow\nint result = Integer.MAX_VALUE + 1; // Overflows to negative\n\n// Safe - check before operation\nif (a <= Integer.MAX_VALUE - b) {\n    int result = a + b;\n} else {\n    // Handle overflow case\n    long result = (long) a + b;\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"3-floating-point-precision",children:["3. ",(0,a.jsx)(n.strong,{children:"Floating Point Precision"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Problematic - precision issues\ndouble result = 0.1 + 0.2;  // 0.30000000000000004\n\n// Better - use BigDecimal for exact decimal arithmetic\nBigDecimal bd1 = new BigDecimal("0.1");\nBigDecimal bd2 = new BigDecimal("0.2");\nBigDecimal result = bd1.add(bd2); // Exactly 0.3\n\n// For comparisons\ndouble a = 0.1 + 0.2;\ndouble b = 0.3;\nboolean equal = Math.abs(a - b) < 0.0001; // Use epsilon comparison\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"4-efficient-operations",children:["4. ",(0,a.jsx)(n.strong,{children:"Efficient Operations"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Multiplication/Division by powers of 2\nint multiplyBy8 = x << 3;   // Faster than x * 8\nint divideBy4 = x >> 2;     // Faster than x / 4\n\n// Use appropriate literals\nlong big = 1000000000L;     // Use L suffix\nfloat precise = 3.14f;      // Use f suffix to avoid double conversion\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"5-initialization--default-values",children:["5. ",(0,a.jsx)(n.strong,{children:"Initialization & Default Values"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Primitives have default values in class fields\nclass Example {\n    int number;             // Defaults to 0\n    boolean flag;           // Defaults to false\n    double price;           // Defaults to 0.0\n}\n\n// Local variables must be initialized\nvoid method() {\n    int x;                  // Compilation error if used without initialization\n    int y = 0;              // Must initialize before use\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);