"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[500],{5841:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=t(4848),o=t(8453);const s={},a="Redux Toolkit Complete Cheatsheet",i={id:"WebDev/React/ReduxToolkit",title:"Redux Toolkit Complete Cheatsheet",description:"Core Concepts",source:"@site/docs/WebDev/React/ReduxToolkit.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReduxToolkit",permalink:"/js.enigma/docs/WebDev/React/ReduxToolkit",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReduxToolkit.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React TypeScript Context",permalink:"/js.enigma/docs/WebDev/React/ReactTypeScriptContext"},next:{title:"Redux vs Context API",permalink:"/js.enigma/docs/WebDev/React/ReduxVSContext"}},d={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Store",id:"store",level:3},{value:"Slice",id:"slice",level:3},{value:"State Management",id:"state-management",level:2},{value:"Creating a Slice with Initial State",id:"creating-a-slice-with-initial-state",level:3},{value:"Combining Reducers",id:"combining-reducers",level:3},{value:"Async Operations",id:"async-operations",level:2},{value:"Creating Thunks",id:"creating-thunks",level:3},{value:"RTK Query Setup",id:"rtk-query-setup",level:3},{value:"Selectors",id:"selectors",level:2},{value:"Creating and Using Selectors",id:"creating-and-using-selectors",level:3},{value:"Middleware",id:"middleware",level:2},{value:"Custom Middleware",id:"custom-middleware",level:3},{value:"React Integration",id:"react-integration",level:2},{value:"Provider Setup",id:"provider-setup",level:3},{value:"Hooks Usage",id:"hooks-usage",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Type Safety",id:"type-safety",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Testing Reducers",id:"unit-testing-reducers",level:3},{value:"Testing Async Thunks",id:"testing-async-thunks",level:3}];function l(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"redux-toolkit-complete-cheatsheet",children:"Redux Toolkit Complete Cheatsheet"})}),"\n",(0,n.jsx)(r.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,n.jsx)(r.h3,{id:"store",children:"Store"}),"\n",(0,n.jsx)(r.p,{children:"The central state container that holds the complete state tree of your application."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => \r\n    getDefaultMiddleware().concat(customMiddleware),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  preloadedState: initialState,\r\n  enhancers: [customEnhancer],\r\n});\r\n\r\nexport default store;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"slice",children:"Slice"}),"\n",(0,n.jsx)(r.p,{children:"A collection of Redux reducer logic and actions for a single feature."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst todoSlice = createSlice({\r\n  name: 'todos',\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n    toggleTodo: (state, action) => {\r\n      const todo = state.find(todo => todo.id === action.payload);\r\n      if (todo) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchTodos.fulfilled, (state, action) => {\r\n        return action.payload;\r\n      })\r\n      .addCase(fetchTodos.rejected, (state, action) => {\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\n"})}),"\n",(0,n.jsx)(r.h2,{id:"state-management",children:"State Management"}),"\n",(0,n.jsx)(r.h3,{id:"creating-a-slice-with-initial-state",children:"Creating a Slice with Initial State"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface UserState {\r\n  name: string;\r\n  email: string;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst initialState: UserState = {\r\n  name: '',\r\n  email: '',\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    setUser: (state, action: PayloadAction<UserState>) => {\r\n      return { ...state, ...action.payload };\r\n    },\r\n    clearUser: (state) => {\r\n      return initialState;\r\n    },\r\n    updateUserField: (\r\n      state,\r\n      action: PayloadAction<{ field: keyof UserState; value: any }>\r\n    ) => {\r\n      const { field, value } = action.payload;\r\n      state[field] = value;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUser, clearUser, updateUserField } = userSlice.actions;\r\nexport default userSlice.reducer;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"combining-reducers",children:"Combining Reducers"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { combineReducers } from '@reduxjs/toolkit';\r\nimport userReducer from './userSlice';\r\nimport todoReducer from './todoSlice';\r\nimport authReducer from './authSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  todos: todoReducer,\r\n  auth: authReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\n"})}),"\n",(0,n.jsx)(r.h2,{id:"async-operations",children:"Async Operations"}),"\n",(0,n.jsx)(r.h3,{id:"creating-thunks",children:"Creating Thunks"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const fetchUserById = createAsyncThunk(\r\n  'users/fetchByIdStatus',\r\n  async (userId: string, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch(`/api/users/${userId}`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// Usage in slice\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUserById.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchUserById.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.data = action.payload;\r\n      })\r\n      .addCase(fetchUserById.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload as string;\r\n      });\r\n  },\r\n});\n"})}),"\n",(0,n.jsx)(r.h3,{id:"rtk-query-setup",children:"RTK Query Setup"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const api = createApi({\r\n  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\r\n  endpoints: (builder) => ({\r\n    getUsers: builder.query({\r\n      query: () => 'users',\r\n      providesTags: ['Users'],\r\n    }),\r\n    getUserById: builder.query({\r\n      query: (id) => `users/${id}`,\r\n      providesTags: (_result, _err, id) => [{ type: 'Users', id }],\r\n    }),\r\n    updateUser: builder.mutation({\r\n      query: ({ id, ...patch }) => ({\r\n        url: `users/${id}`,\r\n        method: 'PATCH',\r\n        body: patch,\r\n      }),\r\n      invalidatesTags: (_result, _err, { id }) => [\r\n        { type: 'Users', id },\r\n        'Users',\r\n      ],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetUsersQuery,\r\n  useGetUserByIdQuery,\r\n  useUpdateUserMutation,\r\n} = api;\n"})}),"\n",(0,n.jsx)(r.h2,{id:"selectors",children:"Selectors"}),"\n",(0,n.jsx)(r.h3,{id:"creating-and-using-selectors",children:"Creating and Using Selectors"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { createSelector } from '@reduxjs/toolkit';\r\n\r\n// Basic selector\r\nconst selectTodos = (state: RootState) => state.todos;\r\n\r\n// Complex selector\r\nexport const selectCompletedTodos = createSelector(\r\n  [selectTodos],\r\n  (todos) => todos.filter(todo => todo.completed)\r\n);\r\n\r\n// Multiple input selectors\r\nexport const selectTodosByUser = createSelector(\r\n  [selectTodos, (state, userId) => userId],\r\n  (todos, userId) => todos.filter(todo => todo.userId === userId)\r\n);\r\n\r\n// Using with hooks\r\nconst CompletedTodosList = () => {\r\n  const completedTodos = useSelector(selectCompletedTodos);\r\n  return (\r\n    <ul>\r\n      {completedTodos.map(todo => (\r\n        <li key={todo.id}>{todo.text}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\n"})}),"\n",(0,n.jsx)(r.h2,{id:"middleware",children:"Middleware"}),"\n",(0,n.jsx)(r.h3,{id:"custom-middleware",children:"Custom Middleware"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { createListenerMiddleware } from '@reduxjs/toolkit';\r\n\r\nexport const listenerMiddleware = createListenerMiddleware();\r\n\r\nlistenerMiddleware.startListening({\r\n  actionCreator: userSlice.actions.setUser,\r\n  effect: async (action, listenerApi) => {\r\n    // Do something when setUser action is dispatched\r\n    localStorage.setItem('user', JSON.stringify(action.payload));\r\n  },\r\n});\r\n\r\n// Add to store\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefault) =>\r\n    getDefault().concat(listenerMiddleware.middleware),\r\n});\n"})}),"\n",(0,n.jsx)(r.h2,{id:"react-integration",children:"React Integration"}),"\n",(0,n.jsx)(r.h3,{id:"provider-setup",children:"Provider Setup"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <YourApp />\r\n    </Provider>\r\n  );\r\n};\n"})}),"\n",(0,n.jsx)(r.h3,{id:"hooks-usage",children:"Hooks Usage"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from './store';\r\nimport { addTodo, toggleTodo } from './todoSlice';\r\n\r\nconst TodoComponent = () => {\r\n  const dispatch = useDispatch();\r\n  const todos = useSelector((state: RootState) => state.todos);\r\n  const status = useSelector((state: RootState) => state.todos.status);\r\n\r\n  const handleAddTodo = (text: string) => {\r\n    dispatch(addTodo({ id: Date.now(), text, completed: false }));\r\n  };\r\n\r\n  const handleToggle = (id: number) => {\r\n    dispatch(toggleTodo(id));\r\n  };\r\n\r\n  if (status === 'loading') return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div>\r\n      {/* Your JSX */}\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,n.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,n.jsx)(r.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"// Define types for state\r\ninterface Todo {\r\n  id: number;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\ninterface TodoState {\r\n  items: Todo[];\r\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\r\n  error: string | null;\r\n}\r\n\r\n// Use in slice\r\nconst todoSlice = createSlice({\r\n  name: 'todos',\r\n  initialState: {\r\n    items: [],\r\n    status: 'idle',\r\n    error: null,\r\n  } as TodoState,\r\n  reducers: {\r\n    addTodo: (state, action: PayloadAction<Todo>) => {\r\n      state.items.push(action.payload);\r\n    },\r\n  },\r\n});\n"})}),"\n",(0,n.jsx)(r.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"// Memoized Selectors\r\nconst selectFilteredTodos = createSelector(\r\n  [\r\n    (state: RootState) => state.todos.items,\r\n    (state: RootState) => state.filters.status,\r\n  ],\r\n  (todos, status) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return todos.filter(todo => todo.completed);\r\n      case 'active':\r\n        return todos.filter(todo => !todo.completed);\r\n      default:\r\n        return todos;\r\n    }\r\n  }\r\n);\r\n\r\n// Component optimization\r\nconst TodoItem = memo(({ todo, onToggle }: TodoItemProps) => {\r\n  return (\r\n    <li onClick={() => onToggle(todo.id)}>\r\n      {todo.text}\r\n    </li>\r\n  );\r\n});\n"})}),"\n",(0,n.jsx)(r.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"const fetchTodos = createAsyncThunk(\r\n  'todos/fetchTodos',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch('/api/todos');\r\n      if (!response.ok) {\r\n        throw new Error('Server Error');\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\n// Handle in slice\r\nextraReducers: (builder) => {\r\n  builder\r\n    .addCase(fetchTodos.rejected, (state, action) => {\r\n      state.status = 'failed';\r\n      state.error = action.payload as string;\r\n      // Log error or show notification\r\n    });\r\n};\n"})}),"\n",(0,n.jsx)(r.h2,{id:"testing",children:"Testing"}),"\n",(0,n.jsx)(r.h3,{id:"unit-testing-reducers",children:"Unit Testing Reducers"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import todoReducer, { addTodo, toggleTodo } from './todoSlice';\r\n\r\ndescribe('todo reducer', () => {\r\n  const initialState = {\r\n    items: [],\r\n    status: 'idle',\r\n    error: null,\r\n  };\r\n\r\n  test('should handle initial state', () => {\r\n    expect(todoReducer(undefined, { type: 'unknown' })).toEqual(initialState);\r\n  });\r\n\r\n  test('should handle addTodo', () => {\r\n    const actual = todoReducer(initialState, addTodo({\r\n      id: 1,\r\n      text: 'Test Todo',\r\n      completed: false,\r\n    }));\r\n    expect(actual.items.length).toEqual(1);\r\n    expect(actual.items[0].text).toEqual('Test Todo');\r\n  });\r\n});\n"})}),"\n",(0,n.jsx)(r.h3,{id:"testing-async-thunks",children:"Testing Async Thunks"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"import { fetchTodos } from './todoSlice';\r\nimport { store } from './store';\r\n\r\ndescribe('todo async actions', () => {\r\n  beforeEach(() => {\r\n    fetch.resetMocks();\r\n  });\r\n\r\n  test('fetches todos successfully', async () => {\r\n    const todos = [{ id: 1, text: 'Test', completed: false }];\r\n    fetch.mockResponseOnce(JSON.stringify(todos));\r\n\r\n    const result = await store.dispatch(fetchTodos());\r\n    \r\n    expect(result.payload).toEqual(todos);\r\n    expect(store.getState().todos.items).toEqual(todos);\r\n  });\r\n\r\n  test('handles fetch error', async () => {\r\n    fetch.mockRejectOnce(new Error('API Error'));\r\n\r\n    const result = await store.dispatch(fetchTodos());\r\n    \r\n    expect(result.payload).toEqual('API Error');\r\n    expect(store.getState().todos.error).toEqual('API Error');\r\n  });\r\n});\n"})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var n=t(6540);const o={},s=n.createContext(o);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);