"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9519],{4405:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>a});var r=i(4848),t=i(8453);const s={title:"Cyclic Sort Algorithm"},l=void 0,o={id:"DSA/CyclicSort",title:"Cyclic Sort Algorithm",description:"Cyclic Sort is an efficient algorithm for solving problems involving numbers that are in a range from 1 to n or 0 to n. The key idea is to place each number at its correct index.",source:"@site/docs/DSA/CyclicSort.mdx",sourceDirName:"DSA",slug:"/DSA/CyclicSort",permalink:"/js.enigma/docs/DSA/CyclicSort",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/CyclicSort.mdx",tags:[],version:"current",frontMatter:{title:"Cyclic Sort Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Cycle Detection in Graphs",permalink:"/js.enigma/docs/DSA/CycleDetectionGraph"},next:{title:"DFS & BFS on Graphs",permalink:"/js.enigma/docs/DSA/DFSBFSGraph"}},c={},a=[{value:"Algorithm Steps:",id:"algorithm-steps",level:3},{value:"Example: Finding the Missing Number",id:"example-finding-the-missing-number",level:2},{value:"Problem:",id:"problem",level:3},{value:"Problems to Practice",id:"problems-to-practice",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Cyclic Sort is an efficient algorithm for solving problems involving numbers that are in a range from ",(0,r.jsx)(n.code,{children:"1 to n"})," or ",(0,r.jsx)(n.code,{children:"0 to n"}),". The key idea is to place each number at its correct index."]}),"\n",(0,r.jsx)(n.h3,{id:"algorithm-steps",children:"Algorithm Steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Traverse the array and place each number at its correct index."}),"\n",(0,r.jsx)(n.li,{children:"Continue until all elements are at their correct positions."}),"\n",(0,r.jsx)(n.li,{children:"Use a constant space complexity of O(1) and a time complexity of O(n)."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-finding-the-missing-number",children:"Example: Finding the Missing Number"}),"\n",(0,r.jsxs)(n.p,{children:["We can apply Cyclic Sort to solve the ",(0,r.jsx)(n.strong,{children:"Missing Number"})," problem."]}),"\n",(0,r.jsx)(n.h3,{id:"problem",children:"Problem:"}),"\n",(0,r.jsxs)(n.p,{children:["Given an array of ",(0,r.jsx)(n.code,{children:"n"})," numbers ranging from ",(0,r.jsx)(n.code,{children:"0 to n"}),", find the missing number."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"function findMissingNumber(arr) {\n\n  const cyclicSort = (nums) => {\n    let i = 0;\n    while (i < nums.length) {\n      const correctIndex = nums[i];\n      if (nums[i] < nums.length && nums[i] !== nums[correctIndex]) {\n        [nums[i], nums[correctIndex]] = [nums[correctIndex], nums[i]]; // Swap\n      } else {\n        i++;\n      }\n    }\n  };\n\n  cyclicSort(arr); // Sort the array using cyclic sort\n  \n  for (let j = 0; j < arr.length; j++) {\n    if (arr[j] !== j) {\n      return j; // Return the missing number\n    }\n  }\n  \n  return arr.length; // If no number is missing, the missing number is n\n}\n\n// Example usage:\nconst nums = [4, 0, 3, 1];\nconsole.log(findMissingNumber(nums)); // Output: 2\n"})}),"\n",(0,r.jsx)(n.h3,{id:"problems-to-practice",children:"Problems to Practice"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/missing-number/",children:"Find the Missing Number - LeetCode"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/",children:"Find All Numbers Disappeared in an Array - LeetCode"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-duplicate-number/",children:"Find the Duplicate Number - LeetCode"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/find-all-duplicates-in-an-array/",children:"Find All Duplicates in an Array - LeetCode"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/set-mismatch/",children:"Find the Corrupt Pair - LeetCode"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/first-missing-positive/",children:"First Missing Positive - LeetCode"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);