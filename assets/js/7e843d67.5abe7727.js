"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[1747],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}},75879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var i=t(74848),r=t(28453);const l={title:"Quick Select Algorithm"},s=void 0,a={id:"DSA/DSA with JavaScript/QuickSelect",title:"Quick Select Algorithm",description:"Quick Select Algorithm",source:"@site/docs/DSA/DSA with JavaScript/QuickSelect.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/QuickSelect",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/QuickSelect",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/QuickSelect.mdx",tags:[],version:"current",frontMatter:{title:"Quick Select Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Queue",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/Queue"},next:{title:"Quick Sort",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/QuickSort"}},o={},c=[{value:"Quick Select Algorithm",id:"quick-select-algorithm",level:2},{value:"Basic Version (Extra Space)",id:"basic-version-extra-space",level:3},{value:"Efficient Version (No Extra Space) : Works for number &amp; string",id:"efficient-version-no-extra-space--works-for-number--string",level:3},{value:"Another QuickSelect Version",id:"another-quickselect-version",level:3},{value:"Here is ES6 for QuickSelect with kthLargest and kthSmallest",id:"here-is-es6-for-quickselect-with-kthlargest-and-kthsmallest",level:3},{value:"Problems to get your hands dirty :)",id:"problems-to-get-your-hands-dirty-",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"quick-select-algorithm",children:"Quick Select Algorithm"}),"\n",(0,i.jsx)(n.p,{children:"The Quick Select algorithm is an efficient selection algorithm to find the k-th smallest element in an unordered list. It's based on the Quick Sort algorithm and has an average time complexity of O(n)."}),"\n",(0,i.jsx)(n.h3,{id:"basic-version-extra-space",children:"Basic Version (Extra Space)"}),"\n",(0,i.jsx)(n.p,{children:"The following is a basic implementation of Quick Select in JavaScript. This version uses additional space for partitioning the array into smaller and larger elements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Javascript",children:"function quickSelect(A, k) {\n  // Base case: if the array has only one element, return it\n  if (A.length === 1) return A[0];\n\n  // Choose a pivot uniformly at random\n  const r = Math.floor(Math.random() * A.length);\n  const pivot = A[r];\n\n  // Initialize arrays for smaller and larger elements\n  const A1 = A.filter(x => x < pivot);\n  const A2 = A.filter(x => x > pivot);\n\n  const diff = A.length - A2.length;\n\n  // Determine the position of the k-th smallest element\n  if (k <= A1.length) {\n    // It's in the pile of small elements\n    return quickSelect(A1, k);\n  } else if (k > diff) {\n    // It's in the pile of big elements\n    return quickSelect(A2, k - diff);\n  } else {\n    // It's equal to the pivot\n    return pivot;\n  }\n}\n\nfunction findKthLargest(nums, k) {\n  return quickSelect(nums, nums.length - k + 1);\n}\n\nfunction findKthSmallest(nums, k) {\n  return quickSelect(nums, k);\n}\n\n// Example usage:\nconst nums = [3, 2, 1, 5, 6, 4];\nconst k = 1;\n\nconsole.log(findKthLargest(nums, k)); // Output: 6\nconsole.log(findKthSmallest(nums, k)); // Output: 1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"efficient-version-no-extra-space--works-for-number--string",children:"Efficient Version (No Extra Space) : Works for number & string"}),"\n",(0,i.jsx)(n.p,{children:"The following is an efficient implementation of Quick Select in JavaScript. This version uses Hoare partition for partitioning the array into smaller and larger elements:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"function partition(arr, lo, hi, compare) {\n    // Choose a random pivot and move it to the start\n    const randomIndex = Math.floor(Math.random() * (hi - lo + 1)) + lo;\n    swap(arr, lo, randomIndex);\n    const pivot = arr[lo];\n\n    let i = lo + 1; // Start just after the pivot\n    let j = hi;\n\n    while (i <= j) {\n        // Find the first element greater than or equal to the pivot\n        while (i <= hi && compare(arr[i], pivot) < 0) i++;\n\n        // Find the first element less than or equal to the pivot\n        while (j >= lo && compare(arr[j], pivot) > 0) j--;\n\n        if (i >= j) break;\n\n        swap(arr, i, j);\n        i++;\n        j--;\n    }\n\n    // Place the pivot in its correct position\n    swap(arr, lo, j);\n    return j; // Return the index of the pivot\n}\n\nconst swap = (arr, i, j) => [arr[i], arr[j]] = [arr[j], arr[i]];\n\nfunction quickSelect(arr, k, compare) {\n    let lo = 0;\n    let hi = arr.length - 1;\n\n    while (lo <= hi) {\n        const j = partition(arr, lo, hi, compare);\n        if (j === k) {\n            return arr[k];\n        } else if (j < k) {\n            lo = j + 1;\n        } else {\n            hi = j - 1;\n        }\n    }\n    return null; // In case k is out of bounds\n}\n\nconst compare = (a, b) => BigInt(a) - BigInt(b);\n\nfunction findKthLargest(arr, k) {\n    return quickSelect(arr, arr.length - k, compare);\n}\n\nfunction kthSmallest(arr, k) {\n    return quickSelect(arr, k - 1, compare);\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"another-quickselect-version",children:"Another QuickSelect Version"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"// Function to swap elements in an array\nfunction swap(arr, i, j) {\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Function to partition the array\nfunction partition(nums, left, right) {\n    const pivot = nums[left];\n    let low = left + 1;\n    let high = right;\n\n    while (low <= high) {\n        if (nums[low] > pivot && nums[high] < pivot) {\n            swap(nums, low, high);\n        }\n        if (nums[low] <= pivot) low++;\n        if (nums[high] >= pivot) high--;\n    }\n\n    swap(nums, left, high);\n    return high;\n}\n\n// Function to find the k-th smallest element\nfunction findKthLargest(nums, k) {\n    let left = 0;\n    let right = nums.length - 1;\n\n    // k-th smallest element has index k-1\n    const targetIndex = nums.length-k\n\n    while (left <= right) {\n        const pivotIndex = partition(nums, left, right);\n        if (pivotIndex === targetIndex) {\n            return nums[pivotIndex];\n        } else if (pivotIndex < targetIndex) {\n            left = pivotIndex + 1;\n        } else {\n            right = pivotIndex - 1;\n        }\n    }\n\n    return -1; // This line is just a fallback; the function assumes input is valid.\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"here-is-es6-for-quickselect-with-kthlargest-and-kthsmallest",children:"Here is ES6 for QuickSelect with kthLargest and kthSmallest"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-JavaScript",children:"class QuickSelect {\n\n  #swap = (A, i, j) => {\n    [A[i], A[j]] = [A[j], A[i]]\n  }\n\n  #parition = (A, left, right) => {\n    const P = A[left]\n    let i = left + 1\n    let j = right\n\n    while (i <= j) {\n      if (A[i] > P && A[j] < P) this.#swap(A, i, j)\n\n      if (A[i] <= P) i++\n      if (A[j] >= P) j--\n    }\n    this.#swap(A, left, j)\n    return j\n  }\n\n  #quickSelect = (A, K) => {\n    let left = 0\n    let right = A.length - 1\n\n    while (left <= right) {\n      const j = this.#parition(A, left, right)\n\n      if (j === K) return A[j]\n      else if (j < K) left = j + 1\n      else right = j - 1\n    }\n    return -1\n  }\n\n  kthLargest = (A, K) => {\n    return this.#quickSelect(A, A.length - K)\n  }\n\n  kthSmallest = (A, K) => {\n    return this.#quickSelect(A, K - 1)\n  }\n\n}\n\nconst nums = [3, 2, 1, 5, 6, 4];\nconst k = 1;\n\n\nconst qs = new QuickSelect()\nconsole.log(qs.kthLargest(nums, k)); // Output: 6\nconsole.log(qs.kthSmallest(nums, k)); // Output: 1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"problems-to-get-your-hands-dirty-",children:"Problems to get your hands dirty :)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/kth-largest-element-in-an-array/description/",children:"Kth Largest Element in an Array"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array",children:"Find the Kth Largest Integer in the Array"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/k-closest-points-to-origin/description/",children:"K Closest Points to Origin"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.geeksforgeeks.org/problems/kth-smallest-element5635/1",children:"Kth Smallest Element"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);