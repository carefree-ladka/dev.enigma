"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[177],{1651:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var r=n(4848),i=n(8453);const a={title:"Path Sum (Binary Tree)"},s=void 0,l={id:"DSA/DSA with JavaScript/PathSumBinaryTree",title:"Path Sum (Binary Tree)",description:"Path Sum (Binary Tree)",source:"@site/docs/DSA/DSA with JavaScript/PathSumBinaryTree.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/PathSumBinaryTree",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/PathSumBinaryTree",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/PathSumBinaryTree.mdx",tags:[],version:"current",frontMatter:{title:"Path Sum (Binary Tree)"},sidebar:"tutorialSidebar",previous:{title:"Parenthesis Pattern",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/Parentheses"},next:{title:"Prefix Sum",permalink:"/js.enigma/docs/DSA/DSA with JavaScript/PrefixSum"}},o={},h=[{value:"Path Sum (Binary Tree)",id:"path-sum-binary-tree",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Definition",id:"definition",level:3},{value:"Example",id:"example",level:3},{value:"Algorithm",id:"algorithm",level:3},{value:"Code Example",id:"code-example",level:3}];function c(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"path-sum-binary-tree",children:"Path Sum (Binary Tree)"}),"\n",(0,r.jsx)(t.p,{children:'The "Path Sum" problem involves checking if there exists a path from the root node to any leaf node in a binary tree where the sum of the values along the path equals a given target sum.'}),"\n",(0,r.jsx)(t.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,r.jsx)(t.p,{children:"Given a binary tree and a target sum, determine if there is a path from the root to a leaf such that the sum of the node values along the path equals the target sum."}),"\n",(0,r.jsx)(t.h3,{id:"definition",children:"Definition"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Binary Tree"}),": A tree structure where each node has at most two children (left and right)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Path"}),": A sequence of nodes starting from the root to a leaf node."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Leaf Node"}),": A node with no children."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example 1:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"       5\n      / \\\n     4   8\n    /   / \\\n   11  13  4\n  /  \\      \\\n 7    2      1\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Target Sum"}),": 22"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Path"}),": [5, 4, 11, 2]"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Output"}),": ",(0,r.jsx)(t.code,{children:"true"})," (The path sum 5 + 4 + 11 + 2 = 22)"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Example 2:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-JavaScript",children:"\n   1\n  / \\\n 2   3\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Target Sum"}),": 5"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Path"}),": No path adds up to 5."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Output"}),": ",(0,r.jsx)(t.code,{children:"false"})]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"algorithm",children:"Algorithm"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Base Case"}),": If the current node is ",(0,r.jsx)(t.code,{children:"null"}),", return ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Leaf Node Check"}),": If the current node is a leaf node, check if its value equals the remaining target sum."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Recursive Case"}),": Recursively check the left and right subtrees, subtracting the current node's value from the target sum."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"code-example",children:"Code Example"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"JavaScript Implementation"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"/**\n * Check if there is a path from root to leaf with the given sum.\n * @param {TreeNode} root - The root node of the binary tree.\n * @param {number} targetSum - The target sum to check for.\n * @return {boolean} - True if such a path exists, false otherwise.\n */\nconst hasPathSum = (root, targetSum) => {\n  if (!root) return false;\n\n  // If it's a leaf node, check if the target sum matches the node's value\n  if (!root.left && !root.right) {\n    return root.val === targetSum;\n  }\n\n  // Recursively check the left and right subtrees with the reduced target sum\n  const newTargetSum = targetSum - root.val;\n  return hasPathSum(root.left, newTargetSum) || hasPathSum(root.right, newTargetSum);\n};\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);