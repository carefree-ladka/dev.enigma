"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6645],{5351:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=r(4848),t=r(8453);const s={},a="SOLID Principles in JavaScript and React",l={id:"WebDev/JavaScript/SOLIDPrinciples",title:"SOLID Principles in JavaScript and React",description:"1. Single Responsibility Principle (SRP)",source:"@site/docs/WebDev/JavaScript/SOLIDPrinciples.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/SOLIDPrinciples",permalink:"/js.enigma/docs/WebDev/JavaScript/SOLIDPrinciples",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/SOLIDPrinciples.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Regular Expressions Cheatsheet",permalink:"/js.enigma/docs/WebDev/JavaScript/Regex"},next:{title:"JavaScript Symbols",permalink:"/js.enigma/docs/WebDev/JavaScript/Symbol"}},o={},c=[{value:"1. Single Responsibility Principle (SRP)",id:"1-single-responsibility-principle-srp",level:2},{value:"\u274c Bad Example",id:"-bad-example",level:3},{value:"\u2705 Good Example",id:"-good-example",level:3},{value:"2. Open/Closed Principle (OCP)",id:"2-openclosed-principle-ocp",level:2},{value:"\u274c Bad Example",id:"-bad-example-1",level:3},{value:"\u2705 Good Example",id:"-good-example-1",level:3},{value:"3. Liskov Substitution Principle (LSP)",id:"3-liskov-substitution-principle-lsp",level:2},{value:"\u274c Bad Example",id:"-bad-example-2",level:3},{value:"\u2705 Good Example",id:"-good-example-2",level:3},{value:"4. Interface Segregation Principle (ISP)",id:"4-interface-segregation-principle-isp",level:2},{value:"\u274c Bad Example",id:"-bad-example-3",level:3},{value:"\u2705 Good Example",id:"-good-example-3",level:3},{value:"5. Dependency Inversion Principle (DIP)",id:"5-dependency-inversion-principle-dip",level:2},{value:"\u274c Bad Example",id:"-bad-example-4",level:3},{value:"\u2705 Good Example",id:"-good-example-4",level:3},{value:"Practical React Example Combining All Principles",id:"practical-react-example-combining-all-principles",level:2},{value:"Benefits of Following SOLID Principles",id:"benefits-of-following-solid-principles",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"solid-principles-in-javascript-and-react",children:"SOLID Principles in JavaScript and React"})}),"\n",(0,i.jsx)(n.h2,{id:"1-single-responsibility-principle-srp",children:"1. Single Responsibility Principle (SRP)"}),"\n",(0,i.jsx)(n.p,{children:"A class/component should have only one reason to change."}),"\n",(0,i.jsx)(n.h3,{id:"-bad-example",children:"\u274c Bad Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class UserProfile {\r\n  constructor(user) {\r\n    this.user = user;\r\n  }\r\n\r\n  saveToDatabase() {\r\n    // Database logic here\r\n  }\r\n\r\n  formatUserData() {\r\n    // Data formatting logic\r\n  }\r\n\r\n  renderUserProfile() {\r\n    // UI rendering logic\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-good-example",children:"\u2705 Good Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Data Service\r\nclass UserService {\r\n  saveUser(user) {\r\n    // Database logic here\r\n  }\r\n}\r\n\r\n// Data Formatter\r\nclass UserFormatter {\r\n  format(user) {\r\n    // Data formatting logic\r\n  }\r\n}\r\n\r\n// React Component\r\nconst UserProfile = ({ user }) => {\r\n  const userService = new UserService();\r\n  const userFormatter = new UserFormatter();\r\n\r\n  const handleSave = () => {\r\n    const formattedData = userFormatter.format(user);\r\n    userService.saveUser(formattedData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>{user.name}</h1>\r\n      <button onClick={handleSave}>Save</button>\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-openclosed-principle-ocp",children:"2. Open/Closed Principle (OCP)"}),"\n",(0,i.jsx)(n.p,{children:"Software entities should be open for extension but closed for modification."}),"\n",(0,i.jsx)(n.h3,{id:"-bad-example-1",children:"\u274c Bad Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class Button {\r\n  constructor(type) {\r\n    this.type = type;\r\n  }\r\n\r\n  render() {\r\n    if (this.type === 'primary') {\r\n      return '<button class=\"primary\">Click</button>';\r\n    } else if (this.type === 'secondary') {\r\n      return '<button class=\"secondary\">Click</button>';\r\n    }\r\n    // Adding new button types requires modifying existing code\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-good-example-1",children:"\u2705 Good Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Abstract base class\r\nclass ButtonBase {\r\n  getStyles() {\r\n    throw new Error('Must implement getStyles');\r\n  }\r\n\r\n  render() {\r\n    return <button className={this.getStyles()}>{this.props.children}</button>;\r\n  }\r\n}\r\n\r\n// Extended button types\r\nclass PrimaryButton extends ButtonBase {\r\n  getStyles() {\r\n    return 'bg-blue-500 text-white';\r\n  }\r\n}\r\n\r\nclass SecondaryButton extends ButtonBase {\r\n  getStyles() {\r\n    return 'bg-gray-500 text-white';\r\n  }\r\n}\r\n\r\n// New button types can be added without modifying existing code\r\nclass DangerButton extends ButtonBase {\r\n  getStyles() {\r\n    return 'bg-red-500 text-white';\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"3-liskov-substitution-principle-lsp",children:"3. Liskov Substitution Principle (LSP)"}),"\n",(0,i.jsx)(n.p,{children:"Derived classes must be substitutable for their base classes."}),"\n",(0,i.jsx)(n.h3,{id:"-bad-example-2",children:"\u274c Bad Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class Bird {\r\n  fly() {\r\n    return "I can fly!";\r\n  }\r\n}\r\n\r\nclass Penguin extends Bird {\r\n  fly() {\r\n    throw new Error("I can\'t fly!"); // Violates LSP\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"-good-example-2",children:"\u2705 Good Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class Bird {\r\n  move() {\r\n    throw new Error(\'Must implement move\');\r\n  }\r\n}\r\n\r\nclass FlyingBird extends Bird {\r\n  move() {\r\n    return "I can fly!";\r\n  }\r\n}\r\n\r\nclass SwimmingBird extends Bird {\r\n  move() {\r\n    return "I can swim!";\r\n  }\r\n}\r\n\r\n// React Example\r\nconst BirdComponent = ({ bird }) => {\r\n  return <div>{bird.move()}</div>;\r\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4-interface-segregation-principle-isp",children:"4. Interface Segregation Principle (ISP)"}),"\n",(0,i.jsx)(n.p,{children:"A client should not be forced to depend on interfaces it doesn't use."}),"\n",(0,i.jsx)(n.h3,{id:"-bad-example-3",children:"\u274c Bad Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class UserActions {\r\n  login(user) { /* ... */ }\r\n  logout() { /* ... */ }\r\n  updateProfile(data) { /* ... */ }\r\n  deleteAccount() { /* ... */ }\r\n}\r\n\r\n// Component forced to implement all methods\r\nclass UserProfile extends React.Component {\r\n  userActions = new UserActions();\r\n  // Must include all methods even if not needed\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-good-example-3",children:"\u2705 Good Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Separate interfaces\r\nclass AuthService {\r\n  login(user) { /* ... */ }\r\n  logout() { /* ... */ }\r\n}\r\n\r\nclass ProfileService {\r\n  updateProfile(data) { /* ... */ }\r\n}\r\n\r\nclass AccountService {\r\n  deleteAccount() { /* ... */ }\r\n}\r\n\r\n// Components can use only what they need\r\nconst LoginComponent = () => {\r\n  const authService = new AuthService();\r\n  \r\n  return <button onClick={() => authService.login()}>Login</button>;\r\n};\r\n\r\nconst ProfileEditor = () => {\r\n  const profileService = new ProfileService();\r\n  \r\n  return <button onClick={() => profileService.updateProfile()}>Update</button>;\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-dependency-inversion-principle-dip",children:"5. Dependency Inversion Principle (DIP)"}),"\n",(0,i.jsx)(n.p,{children:"High-level modules should not depend on low-level modules. Both should depend on abstractions."}),"\n",(0,i.jsx)(n.h3,{id:"-bad-example-4",children:"\u274c Bad Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class NotificationService {\r\n  constructor() {\r\n    this.emailSender = new EmailSender(); // Direct dependency\r\n  }\r\n\r\n  sendNotification(message) {\r\n    this.emailSender.send(message);\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-good-example-4",children:"\u2705 Good Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Abstract interface\r\nclass NotificationSender {\r\n  send(message) {\r\n    throw new Error('Must implement send');\r\n  }\r\n}\r\n\r\n// Concrete implementations\r\nclass EmailSender extends NotificationSender {\r\n  send(message) {\r\n    // Send email\r\n  }\r\n}\r\n\r\nclass SMSSender extends NotificationSender {\r\n  send(message) {\r\n    // Send SMS\r\n  }\r\n}\r\n\r\n// React Component using dependency injection\r\nconst NotificationComponent = ({ notificationSender }) => {\r\n  const sendNotification = (message) => {\r\n    notificationSender.send(message);\r\n  };\r\n\r\n  return (\r\n    <button onClick={() => sendNotification('Hello!')}>\r\n      Send Notification\r\n    </button>\r\n  );\r\n};\r\n\r\n// Usage\r\nconst App = () => {\r\n  const emailSender = new EmailSender();\r\n  const smsSender = new SMSSender();\r\n\r\n  return (\r\n    <>\r\n      <NotificationComponent notificationSender={emailSender} />\r\n      <NotificationComponent notificationSender={smsSender} />\r\n    </>\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"practical-react-example-combining-all-principles",children:"Practical React Example Combining All Principles"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// 1. Single Responsibility Principle\r\nconst useUserData = () => {\r\n  // Data management hook\r\n};\r\n\r\nconst useUserValidation = () => {\r\n  // Validation logic hook\r\n};\r\n\r\n// 2. Open/Closed Principle\r\nconst FormField = ({ validator, renderer, ...props }) => {\r\n  // Extensible form field component\r\n};\r\n\r\n// 3. Liskov Substitution Principle\r\nconst Input = ({ type = \'text\', ...props }) => {\r\n  // Base input component\r\n};\r\n\r\nconst EmailInput = (props) => <Input type="email" {...props} />;\r\nconst PasswordInput = (props) => <Input type="password" {...props} />;\r\n\r\n// 4. Interface Segregation Principle\r\nconst useAuth = () => {\r\n  // Authentication hook\r\n};\r\n\r\nconst useProfile = () => {\r\n  // Profile management hook\r\n};\r\n\r\n// 5. Dependency Inversion Principle\r\nconst UserForm = ({ onSubmit, validation, transformation }) => {\r\n  const handleSubmit = async (data) => {\r\n    const isValid = await validation(data);\r\n    if (isValid) {\r\n      const transformed = transformation(data);\r\n      onSubmit(transformed);\r\n    }\r\n  };\r\n\r\n  return <form onSubmit={handleSubmit}>{/* Form fields */}</form>;\r\n};\r\n\r\n// Complete Example\r\nconst UserProfile = () => {\r\n  const { user, updateUser } = useUserData();\r\n  const { validateUser } = useUserValidation();\r\n  const { transformUserData } = useUserTransformation();\r\n\r\n  return (\r\n    <UserForm\r\n      onSubmit={updateUser}\r\n      validation={validateUser}\r\n      transformation={transformUserData}\r\n    >\r\n      <EmailInput name="email" />\r\n      <PasswordInput name="password" />\r\n    </UserForm>\r\n  );\r\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"benefits-of-following-solid-principles",children:"Benefits of Following SOLID Principles"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Maintainability"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Easier to understand and modify code"}),"\n",(0,i.jsx)(n.li,{children:"Reduced technical debt"}),"\n",(0,i.jsx)(n.li,{children:"Better organization of components"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testability"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Isolated components are easier to test"}),"\n",(0,i.jsx)(n.li,{children:"Clear dependencies make mocking simpler"}),"\n",(0,i.jsx)(n.li,{children:"Better unit test coverage"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flexibility"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Easier to extend functionality"}),"\n",(0,i.jsx)(n.li,{children:"Better adaptation to changing requirements"}),"\n",(0,i.jsx)(n.li,{children:"Improved reusability of components"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scalability"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Better handling of growing complexity"}),"\n",(0,i.jsx)(n.li,{children:"Easier team collaboration"}),"\n",(0,i.jsx)(n.li,{children:"More sustainable codebase"}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);