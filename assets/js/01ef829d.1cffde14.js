"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2098],{28453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>r});var t=n(96540);const i={},o=t.createContext(i);function l(e){const a=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:a},e.children)}},83532:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var t=n(74848),i=n(28453);const o={},l="Java Date Time APIs - Complete Guide",r={id:"Java/Java Date Time APIs - Complete Guide",title:"Java Date Time APIs - Complete Guide",description:"Legacy Date Time APIs (Pre-Java 8)",source:"@site/docs/Java/Java Date Time APIs - Complete Guide.mdx",sourceDirName:"Java",slug:"/Java/Java Date Time APIs - Complete Guide",permalink:"/js.enigma/docs/Java/Java Date Time APIs - Complete Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Java Date Time APIs - Complete Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Backend Interview Roadmap \ud83d\ude80",permalink:"/js.enigma/docs/Java/Java Backend Interview Roadmap"},next:{title:"Java Functional Interfaces",permalink:"/js.enigma/docs/Java/Java Functional Interfaces"}},s={},d=[{value:"Legacy Date Time APIs (Pre-Java 8)",id:"legacy-date-time-apis-pre-java-8",level:2},{value:"java.util.Date",id:"javautildate",level:3},{value:"java.util.Calendar",id:"javautilcalendar",level:3},{value:"Modern Date Time API (Java 8+)",id:"modern-date-time-api-java-8",level:2},{value:"Core Principles",id:"core-principles",level:3},{value:"Key Classes Overview",id:"key-classes-overview",level:3},{value:"LocalDate - Date Only",id:"localdate---date-only",level:2},{value:"Creation",id:"creation",level:3},{value:"Common Operations",id:"common-operations",level:3},{value:"LocalTime - Time Only",id:"localtime---time-only",level:2},{value:"Creation &amp; Operations",id:"creation--operations",level:3},{value:"LocalDateTime - Date + Time",id:"localdatetime---date--time",level:2},{value:"Creation &amp; Operations",id:"creation--operations-1",level:3},{value:"ZonedDateTime - With Timezone",id:"zoneddatetime---with-timezone",level:2},{value:"Creation",id:"creation-1",level:3},{value:"Timezone Operations",id:"timezone-operations",level:3},{value:"Instant - UTC Timestamps",id:"instant---utc-timestamps",level:2},{value:"Usage",id:"usage",level:3},{value:"Period &amp; Duration",id:"period--duration",level:2},{value:"Period (Date-based)",id:"period-date-based",level:3},{value:"Duration (Time-based)",id:"duration-time-based",level:3},{value:"Formatting &amp; Parsing",id:"formatting--parsing",level:2},{value:"DateTimeFormatter",id:"datetimeformatter",level:3},{value:"Common Patterns",id:"common-patterns",level:3},{value:"Java 9+ Enhancements",id:"java-9-enhancements",level:2},{value:"New Methods (Java 9)",id:"new-methods-java-9",level:3},{value:"Java 14+ Features",id:"java-14-features",level:2},{value:"New Locale-Specific Formatting (Java 14)",id:"new-locale-specific-formatting-java-14",level:3},{value:"Java 17+ Features",id:"java-17-features",level:2},{value:"Pattern Matching Preparation",id:"pattern-matching-preparation",level:3},{value:"Java 20+ Enhancements",id:"java-20-enhancements",level:2},{value:"Record Patterns with DateTime",id:"record-patterns-with-datetime",level:3},{value:"Java 24-25 Latest Features",id:"java-24-25-latest-features",level:2},{value:"Enhanced Temporal Operations (Java 24)",id:"enhanced-temporal-operations-java-24",level:3},{value:"Performance Improvements (Java 25)",id:"performance-improvements-java-25",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Choose the Right Type",id:"1-choose-the-right-type",level:3},{value:"2. Handle Timezones Properly",id:"2-handle-timezones-properly",level:3},{value:"3. Immutability Benefits",id:"3-immutability-benefits",level:3},{value:"4. Null Safety",id:"4-null-safety",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"1. Timezone Confusion",id:"1-timezone-confusion",level:3},{value:"2. Mixing Date Types",id:"2-mixing-date-types",level:3},{value:"3. Legacy Interop",id:"3-legacy-interop",level:3},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Common Patterns",id:"common-patterns-1",level:3},{value:"Method Chaining",id:"method-chaining",level:3}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"java-date-time-apis---complete-guide",children:"Java Date Time APIs - Complete Guide"})}),"\n",(0,t.jsx)(a.h2,{id:"legacy-date-time-apis-pre-java-8",children:"Legacy Date Time APIs (Pre-Java 8)"}),"\n",(0,t.jsx)(a.h3,{id:"javautildate",children:"java.util.Date"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"Date date = new Date(); // Current time\nDate specificDate = new Date(System.currentTimeMillis());\nlong timestamp = date.getTime();\n"})}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Issues:"})}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Mutable (not thread-safe)"}),"\n",(0,t.jsx)(a.li,{children:"Poor API design"}),"\n",(0,t.jsx)(a.li,{children:"Months are 0-indexed"}),"\n",(0,t.jsx)(a.li,{children:"No timezone support"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"javautilcalendar",children:"java.util.Calendar"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"Calendar cal = Calendar.getInstance();\ncal.set(2024, Calendar.JANUARY, 15); // Month is 0-indexed\ncal.add(Calendar.DAY_OF_MONTH, 5);\nDate date = cal.getTime();\n"})}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.strong,{children:"Issues:"})}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Complex API"}),"\n",(0,t.jsx)(a.li,{children:"Still mutable"}),"\n",(0,t.jsx)(a.li,{children:"Error-prone"}),"\n"]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"modern-date-time-api-java-8",children:"Modern Date Time API (Java 8+)"}),"\n",(0,t.jsx)(a.h3,{id:"core-principles",children:"Core Principles"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Immutable"})," - Thread-safe by design"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Fluent API"})," - Method chaining"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Type Safety"})," - Distinct types for different concepts"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"ISO-8601"})," - Standard format support"]}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"key-classes-overview",children:"Key Classes Overview"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{children:"Class"}),(0,t.jsx)(a.th,{children:"Purpose"}),(0,t.jsx)(a.th,{children:"Example"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"LocalDate"})}),(0,t.jsx)(a.td,{children:"Date without time"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"2024-01-15"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"LocalTime"})}),(0,t.jsx)(a.td,{children:"Time without date"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"14:30:25"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"LocalDateTime"})}),(0,t.jsx)(a.td,{children:"Date + time, no timezone"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"2024-01-15T14:30:25"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"ZonedDateTime"})}),(0,t.jsx)(a.td,{children:"Date + time + timezone"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"2024-01-15T14:30:25+05:30[Asia/Kolkata]"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"OffsetDateTime"})}),(0,t.jsx)(a.td,{children:"Date + time + UTC offset"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"2024-01-15T14:30:25+05:30"})})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"Instant"})}),(0,t.jsx)(a.td,{children:"UTC timestamp"}),(0,t.jsx)(a.td,{children:(0,t.jsx)(a.code,{children:"2024-01-15T09:00:25Z"})})]})]})]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"localdate---date-only",children:"LocalDate - Date Only"}),"\n",(0,t.jsx)(a.h3,{id:"creation",children:"Creation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'LocalDate today = LocalDate.now();\nLocalDate specific = LocalDate.of(2024, 1, 15);\nLocalDate parsed = LocalDate.parse("2024-01-15");\nLocalDate fromEpoch = LocalDate.ofEpochDay(19000);\n'})}),"\n",(0,t.jsx)(a.h3,{id:"common-operations",children:"Common Operations"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"LocalDate date = LocalDate.now();\n\n// Arithmetic\nLocalDate tomorrow = date.plusDays(1);\nLocalDate nextWeek = date.plusWeeks(1);\nLocalDate nextMonth = date.plusMonths(1);\nLocalDate lastYear = date.minusYears(1);\n\n// Queries\nint year = date.getYear();\nMonth month = date.getMonth();\nint dayOfMonth = date.getDayOfMonth();\nDayOfWeek dayOfWeek = date.getDayOfWeek();\n\n// Comparisons\nboolean isAfter = date.isAfter(LocalDate.of(2020, 1, 1));\nboolean isBefore = date.isBefore(LocalDate.of(2030, 12, 31));\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"localtime---time-only",children:"LocalTime - Time Only"}),"\n",(0,t.jsx)(a.h3,{id:"creation--operations",children:"Creation & Operations"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'LocalTime now = LocalTime.now();\nLocalTime specific = LocalTime.of(14, 30, 25);\nLocalTime parsed = LocalTime.parse("14:30:25");\n\n// Arithmetic\nLocalTime later = now.plusHours(2).plusMinutes(30);\nLocalTime earlier = now.minusMinutes(45);\n\n// Queries\nint hour = now.getHour();\nint minute = now.getMinute();\nint second = now.getSecond();\n'})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"localdatetime---date--time",children:"LocalDateTime - Date + Time"}),"\n",(0,t.jsx)(a.h3,{id:"creation--operations-1",children:"Creation & Operations"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'LocalDateTime now = LocalDateTime.now();\nLocalDateTime specific = LocalDateTime.of(2024, 1, 15, 14, 30, 25);\nLocalDateTime combined = LocalDate.now().atTime(LocalTime.now());\nLocalDateTime parsed = LocalDateTime.parse("2024-01-15T14:30:25");\n\n// Conversions\nLocalDate date = now.toLocalDate();\nLocalTime time = now.toLocalTime();\n'})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"zoneddatetime---with-timezone",children:"ZonedDateTime - With Timezone"}),"\n",(0,t.jsx)(a.h3,{id:"creation-1",children:"Creation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ZonedDateTime now = ZonedDateTime.now();\nZonedDateTime specific = ZonedDateTime.of(\n    LocalDateTime.of(2024, 1, 15, 14, 30),\n    ZoneId.of("Asia/Kolkata")\n);\nZonedDateTime utc = ZonedDateTime.now(ZoneId.of("UTC"));\n'})}),"\n",(0,t.jsx)(a.h3,{id:"timezone-operations",children:"Timezone Operations"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'ZonedDateTime kolkata = ZonedDateTime.now(ZoneId.of("Asia/Kolkata"));\nZonedDateTime tokyo = kolkata.withZoneSameInstant(ZoneId.of("Asia/Tokyo"));\nZonedDateTime sameLocal = kolkata.withZoneSameLocal(ZoneId.of("UTC"));\n\n// Get timezone info\nZoneId zone = kolkata.getZone();\nZoneOffset offset = kolkata.getOffset();\n'})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"instant---utc-timestamps",children:"Instant - UTC Timestamps"}),"\n",(0,t.jsx)(a.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"Instant now = Instant.now();\nInstant fromEpoch = Instant.ofEpochSecond(1642248625);\nInstant fromMilli = Instant.ofEpochMilli(System.currentTimeMillis());\n\n// Conversions\nZonedDateTime zoned = now.atZone(ZoneId.systemDefault());\nOffsetDateTime offset = now.atOffset(ZoneOffset.UTC);\nlong epochSecond = now.getEpochSecond();\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"period--duration",children:"Period & Duration"}),"\n",(0,t.jsx)(a.h3,{id:"period-date-based",children:"Period (Date-based)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"Period period = Period.of(1, 2, 3); // 1 year, 2 months, 3 days\nPeriod between = Period.between(\n    LocalDate.of(2020, 1, 1),\n    LocalDate.of(2024, 1, 1)\n);\n\nLocalDate future = LocalDate.now().plus(period);\n"})}),"\n",(0,t.jsx)(a.h3,{id:"duration-time-based",children:"Duration (Time-based)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"Duration duration = Duration.ofHours(5).plusMinutes(30);\nDuration between = Duration.between(\n    LocalTime.of(9, 0),\n    LocalTime.of(17, 30)\n);\n\nLocalDateTime later = LocalDateTime.now().plus(duration);\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"formatting--parsing",children:"Formatting & Parsing"}),"\n",(0,t.jsx)(a.h3,{id:"datetimeformatter",children:"DateTimeFormatter"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");\nString formatted = LocalDate.now().format(formatter);\nLocalDate parsed = LocalDate.parse("15-01-2024", formatter);\n\n// Predefined formatters\nString iso = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);\nString custom = ZonedDateTime.now().format(\n    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z")\n);\n'})}),"\n",(0,t.jsx)(a.h3,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Custom formats\n"dd-MM-yyyy"           // 15-01-2024\n"yyyy-MM-dd HH:mm:ss"  // 2024-01-15 14:30:25\n"MMM dd, yyyy"         // Jan 15, 2024\n"EEEE, MMMM dd"        // Monday, January 15\n"HH:mm:ss.SSS"         // 14:30:25.123\n'})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"java-9-enhancements",children:"Java 9+ Enhancements"}),"\n",(0,t.jsx)(a.h3,{id:"new-methods-java-9",children:"New Methods (Java 9)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// LocalDate\nLocalDate date = LocalDate.now();\nStream<LocalDate> dates = date.datesUntil(date.plusWeeks(2));\nStream<LocalDate> weekly = date.datesUntil(date.plusMonths(1), Period.ofWeeks(1));\n\n// Duration\nDuration duration = Duration.ofDays(1);\nlong days = duration.toDays();\nint nano = duration.toNanosPart(); // Nano part only\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"java-14-features",children:"Java 14+ Features"}),"\n",(0,t.jsx)(a.h3,{id:"new-locale-specific-formatting-java-14",children:"New Locale-Specific Formatting (Java 14)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)\n    .withLocale(Locale.GERMAN);\nString german = ZonedDateTime.now().format(formatter);\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"java-17-features",children:"Java 17+ Features"}),"\n",(0,t.jsx)(a.h3,{id:"pattern-matching-preparation",children:"Pattern Matching Preparation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Enhanced switch expressions with temporal types\nString describe(TemporalAccessor temporal) {\n    return switch (temporal) {\n        case LocalDate ld -> "Date: " + ld;\n        case LocalTime lt -> "Time: " + lt;\n        case ZonedDateTime zdt -> "Zoned: " + zdt;\n        default -> "Unknown temporal type";\n    };\n}\n'})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"java-20-enhancements",children:"Java 20+ Enhancements"}),"\n",(0,t.jsx)(a.h3,{id:"record-patterns-with-datetime",children:"Record Patterns with DateTime"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"public record TimeRange(LocalDateTime start, LocalDateTime end) {\n    public Duration duration() {\n        return Duration.between(start, end);\n    }\n}\n\n// Usage\nTimeRange range = new TimeRange(\n    LocalDateTime.now(),\n    LocalDateTime.now().plusHours(8)\n);\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"java-24-25-latest-features",children:"Java 24-25 Latest Features"}),"\n",(0,t.jsx)(a.h3,{id:"enhanced-temporal-operations-java-24",children:"Enhanced Temporal Operations (Java 24)"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Improved temporal adjusters\nLocalDate nextBusinessDay = LocalDate.now()\n    .with(TemporalAdjusters.nextBusinessDay()); // Hypothetical\n\n// Better timezone handling\nZonedDateTime smartConversion = ZonedDateTime.now()\n    .withZoneRetainFields(ZoneId.of("America/New_York")); // Hypothetical\n'})}),"\n",(0,t.jsx)(a.h3,{id:"performance-improvements-java-25",children:"Performance Improvements (Java 25)"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Optimized parsing for common date formats"}),"\n",(0,t.jsx)(a.li,{children:"Reduced memory allocation in temporal calculations"}),"\n",(0,t.jsx)(a.li,{children:"Enhanced caching for timezone data"}),"\n"]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(a.h3,{id:"1-choose-the-right-type",children:"1. Choose the Right Type"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// For dates only\nLocalDate birthDate;\n\n// For timestamps\nInstant eventTime;\n\n// For user-displayed times\nZonedDateTime userTime;\n\n// For scheduling\nOffsetDateTime scheduledTime;\n"})}),"\n",(0,t.jsx)(a.h3,{id:"2-handle-timezones-properly",children:"2. Handle Timezones Properly"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// Store in UTC\nInstant stored = Instant.now();\n\n// Display in user timezone\nZonedDateTime userDisplay = stored.atZone(userTimeZone);\n\n// API responses\nOffsetDateTime apiResponse = OffsetDateTime.now();\n"})}),"\n",(0,t.jsx)(a.h3,{id:"3-immutability-benefits",children:"3. Immutability Benefits"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// This creates a new object\nLocalDate tomorrow = today.plusDays(1);\n\n// Original remains unchanged\nassert today.equals(LocalDate.now());\n"})}),"\n",(0,t.jsx)(a.h3,{id:"4-null-safety",children:"4. Null Safety"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"Optional<LocalDate> parseDate(String dateStr) {\n    try {\n        return Optional.of(LocalDate.parse(dateStr));\n    } catch (DateTimeParseException e) {\n        return Optional.empty();\n    }\n}\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,t.jsx)(a.h3,{id:"1-timezone-confusion",children:"1. Timezone Confusion"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// Wrong - loses timezone info\nLocalDateTime local = zonedDateTime.toLocalDateTime();\n\n// Right - preserves instant\nInstant instant = zonedDateTime.toInstant();\n"})}),"\n",(0,t.jsx)(a.h3,{id:"2-mixing-date-types",children:"2. Mixing Date Types"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// Wrong - comparing different types\n// localDateTime.isAfter(zonedDateTime); // Compilation error\n\n// Right - convert first\nlocalDateTime.isAfter(zonedDateTime.toLocalDateTime());\n"})}),"\n",(0,t.jsx)(a.h3,{id:"3-legacy-interop",children:"3. Legacy Interop"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// Convert legacy Date to modern\nDate legacyDate = new Date();\nInstant instant = legacyDate.toInstant();\nLocalDateTime modern = instant.atZone(ZoneId.systemDefault()).toLocalDateTime();\n\n// Convert back if needed\nDate backToLegacy = Date.from(instant);\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,t.jsx)(a.h3,{id:"common-patterns-1",children:"Common Patterns"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Current time in different formats\nInstant.now()                    // UTC timestamp\nLocalDate.now()                  // Today\'s date\nLocalTime.now()                  // Current time\nLocalDateTime.now()              // Now (no timezone)\nZonedDateTime.now()              // Now with system timezone\n\n// Parsing common formats\nLocalDate.parse("2024-01-15")\nLocalTime.parse("14:30:25")\nLocalDateTime.parse("2024-01-15T14:30:25")\nZonedDateTime.parse("2024-01-15T14:30:25+05:30[Asia/Kolkata]")\n\n// Formatting\n.format(DateTimeFormatter.ISO_LOCAL_DATE)      // 2024-01-15\n.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) // 15/01/2024\n'})}),"\n",(0,t.jsx)(a.h3,{id:"method-chaining",children:"Method Chaining"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'String result = LocalDateTime.now()\n    .plusDays(1)\n    .minusHours(2)\n    .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));\n'})})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);