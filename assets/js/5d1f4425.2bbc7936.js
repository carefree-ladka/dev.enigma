"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8502],{1481:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"JSEnigma | Learn & Practice","href":"/js.enigma/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"College Revision","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Object-Oriented Programming (OOP)","href":"/js.enigma/docs/College Revision/OOPS","docId":"College Revision/OOPS","unlisted":false},{"type":"link","label":"Operating Systems","href":"/js.enigma/docs/College Revision/OperatingSystems","docId":"College Revision/OperatingSystems","unlisted":false}],"href":"/js.enigma/docs/category/college-revision"},{"type":"category","label":"Web Development","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Interview Questions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CSS3 Interview Questions","href":"/js.enigma/docs/WebDev/Core JavaScript/CSS","docId":"WebDev/Core JavaScript/CSS","unlisted":false},{"type":"link","label":"HTML5 Interview Questions","href":"/js.enigma/docs/WebDev/Core JavaScript/HTML","docId":"WebDev/Core JavaScript/HTML","unlisted":false},{"type":"link","label":"JavaScript Interview Questions","href":"/js.enigma/docs/WebDev/Core JavaScript/JS","docId":"WebDev/Core JavaScript/JS","unlisted":false},{"type":"link","label":"React Interview Questions","href":"/js.enigma/docs/WebDev/Core JavaScript/React","docId":"WebDev/Core JavaScript/React","unlisted":false}],"href":"/js.enigma/docs/category/interview-questions"},{"type":"category","label":"CSS3","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CSS3 Animation Cheatsheet","href":"/js.enigma/docs/WebDev/CSS3/CSS3Animation","docId":"WebDev/CSS3/CSS3Animation","unlisted":false},{"type":"link","label":"Performance & BEM Convention","href":"/js.enigma/docs/WebDev/CSS3/CSS3Performance","docId":"WebDev/CSS3/CSS3Performance","unlisted":false},{"type":"link","label":"CSS DOM Selectors","href":"/js.enigma/docs/WebDev/CSS3/CSS3Selectors","docId":"WebDev/CSS3/CSS3Selectors","unlisted":false},{"type":"link","label":"CSS Box-Sizing","href":"/js.enigma/docs/WebDev/CSS3/CSSBox-Sizing","docId":"WebDev/CSS3/CSSBox-Sizing","unlisted":false},{"type":"link","label":"CSS Grid and Flexbox Cheatsheet","href":"/js.enigma/docs/WebDev/CSS3/GRIDFLEX","docId":"WebDev/CSS3/GRIDFLEX","unlisted":false},{"type":"link","label":"Tailwind CSS Cheatsheet","href":"/js.enigma/docs/WebDev/CSS3/TailwindCSS","docId":"WebDev/CSS3/TailwindCSS","unlisted":false}]},{"type":"category","label":"HTML5","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DFS & BFS on HTML","href":"/js.enigma/docs/WebDev/HTML5/BFSDFS","docId":"WebDev/HTML5/BFSDFS","unlisted":false},{"type":"link","label":"Critical Rendering Path","href":"/js.enigma/docs/WebDev/HTML5/CriticalRenderingPath","docId":"WebDev/HTML5/CriticalRenderingPath","unlisted":false},{"type":"link","label":"Comprehensive HTML Cheatsheet","href":"/js.enigma/docs/WebDev/HTML5/HTML5Cheatsheet","docId":"WebDev/HTML5/HTML5Cheatsheet","unlisted":false},{"type":"link","label":"Rendering / Render Tree","href":"/js.enigma/docs/WebDev/HTML5/RenderingTree","docId":"WebDev/HTML5/RenderingTree","unlisted":false},{"type":"link","label":"Resource Loading & Performance Optimization","href":"/js.enigma/docs/WebDev/HTML5/ResourceLoading","docId":"WebDev/HTML5/ResourceLoading","unlisted":false},{"type":"link","label":"Shadow DOM","href":"/js.enigma/docs/WebDev/HTML5/ShadowDOM","docId":"WebDev/HTML5/ShadowDOM","unlisted":false}]},{"type":"category","label":"HTMLDOM","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DOM Methods & Selectors Cheatsheet","href":"/js.enigma/docs/WebDev/HTMLDOM/DOMCheatSheet","docId":"WebDev/HTMLDOM/DOMCheatSheet","unlisted":false}]},{"type":"category","label":"JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Async Await","href":"/js.enigma/docs/WebDev/JavaScript/AsyncAwait","docId":"WebDev/JavaScript/AsyncAwait","unlisted":false},{"type":"link","label":"Closures","href":"/js.enigma/docs/WebDev/JavaScript/Closure","docId":"WebDev/JavaScript/Closure","unlisted":false},{"type":"link","label":"Currying Variations","href":"/js.enigma/docs/WebDev/JavaScript/Currying","docId":"WebDev/JavaScript/Currying","unlisted":false},{"type":"link","label":"Design Patterns","href":"/js.enigma/docs/WebDev/JavaScript/DesignPatterns","docId":"WebDev/JavaScript/DesignPatterns","unlisted":false},{"type":"link","label":"Event Emitter","href":"/js.enigma/docs/WebDev/JavaScript/EventEmitter","docId":"WebDev/JavaScript/EventEmitter","unlisted":false},{"type":"link","label":"Event Loop","href":"/js.enigma/docs/WebDev/JavaScript/EventLoop","docId":"WebDev/JavaScript/EventLoop","unlisted":false},{"type":"link","label":"Function Methods Polyfill","href":"/js.enigma/docs/WebDev/JavaScript/FunctionsPolyfill","docId":"WebDev/JavaScript/FunctionsPolyfill","unlisted":false},{"type":"link","label":"HTTP Headers and Caching","href":"/js.enigma/docs/WebDev/JavaScript/HTTPHeaders","docId":"WebDev/JavaScript/HTTPHeaders","unlisted":false},{"type":"link","label":"Understanding JavaScript Hoisting","href":"/js.enigma/docs/WebDev/JavaScript/Hoisting","docId":"WebDev/JavaScript/Hoisting","unlisted":false},{"type":"link","label":"Canceling an API Call","href":"/js.enigma/docs/WebDev/JavaScript/HowToCancelAPICalls","docId":"WebDev/JavaScript/HowToCancelAPICalls","unlisted":false},{"type":"link","label":"JavaScript Execution in Browser","href":"/js.enigma/docs/WebDev/JavaScript/JSExecution","docId":"WebDev/JavaScript/JSExecution","unlisted":false},{"type":"link","label":"Memoization","href":"/js.enigma/docs/WebDev/JavaScript/Memoization","docId":"WebDev/JavaScript/Memoization","unlisted":false},{"type":"link","label":"Miscellaneous","href":"/js.enigma/docs/WebDev/JavaScript/Misx","docId":"WebDev/JavaScript/Misx","unlisted":false},{"type":"link","label":"Object Related Problems","href":"/js.enigma/docs/WebDev/JavaScript/Objects","docId":"WebDev/JavaScript/Objects","unlisted":false},{"type":"link","label":"Array Methods Polyfills","href":"/js.enigma/docs/WebDev/JavaScript/Polyfills","docId":"WebDev/JavaScript/Polyfills","unlisted":false},{"type":"link","label":"Promise Based Outputs","href":"/js.enigma/docs/WebDev/JavaScript/PromiseBased","docId":"WebDev/JavaScript/PromiseBased","unlisted":false},{"type":"link","label":"Promise Polyfills","href":"/js.enigma/docs/WebDev/JavaScript/PromisePolyfills","docId":"WebDev/JavaScript/PromisePolyfills","unlisted":false},{"type":"link","label":"__proto__ vs prototype","href":"/js.enigma/docs/WebDev/JavaScript/ProtoVSPrototype","docId":"WebDev/JavaScript/ProtoVSPrototype","unlisted":false},{"type":"link","label":"Prototypal Inheritance","href":"/js.enigma/docs/WebDev/JavaScript/PrototypalInheritance","docId":"WebDev/JavaScript/PrototypalInheritance","unlisted":false},{"type":"link","label":"Regular Expressions Cheatsheet","href":"/js.enigma/docs/WebDev/JavaScript/Regex","docId":"WebDev/JavaScript/Regex","unlisted":false},{"type":"link","label":"Task Queue","href":"/js.enigma/docs/WebDev/JavaScript/TaskQueue","docId":"WebDev/JavaScript/TaskQueue","unlisted":false},{"type":"link","label":"Webpack 5","href":"/js.enigma/docs/WebDev/JavaScript/Webpack","docId":"WebDev/JavaScript/Webpack","unlisted":false}]},{"type":"category","label":"Machine Coding Round","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Web Accessibility Patterns Cheatsheet","href":"/js.enigma/docs/WebDev/Machine Coding Round/Accessibility","docId":"WebDev/Machine Coding Round/Accessibility","unlisted":false},{"type":"link","label":"Machine Coding Round","href":"/js.enigma/docs/WebDev/Machine Coding Round/MachineCodingRounds","docId":"WebDev/Machine Coding Round/MachineCodingRounds","unlisted":false}]},{"type":"category","label":"React","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Error Boundary","href":"/js.enigma/docs/WebDev/React/ErrorBoundary","docId":"WebDev/React/ErrorBoundary","unlisted":false},{"type":"link","label":"React Hooks Polyfills","href":"/js.enigma/docs/WebDev/React/HooksPolyfills","docId":"WebDev/React/HooksPolyfills","unlisted":false},{"type":"link","label":"React Lifecycle Methods","href":"/js.enigma/docs/WebDev/React/LifeCycleMethods","docId":"WebDev/React/LifeCycleMethods","unlisted":false},{"type":"link","label":"Jest & React Testing Library Cheatsheet","href":"/js.enigma/docs/WebDev/React/ReactJestRTL","docId":"WebDev/React/ReactJestRTL","unlisted":false},{"type":"link","label":"React TypeScript Cheatsheet","href":"/js.enigma/docs/WebDev/React/ReactTypeScript","docId":"WebDev/React/ReactTypeScript","unlisted":false},{"type":"link","label":"React TypeScript Context","href":"/js.enigma/docs/WebDev/React/ReactTypeScriptContext","docId":"WebDev/React/ReactTypeScriptContext","unlisted":false},{"type":"link","label":"Redux Saga Testing","href":"/js.enigma/docs/WebDev/React/ReduxSagaTesting","docId":"WebDev/React/ReduxSagaTesting","unlisted":false},{"type":"link","label":"Redux Toolkit","href":"/js.enigma/docs/WebDev/React/ReduxToolkit","docId":"WebDev/React/ReduxToolkit","unlisted":false},{"type":"link","label":"Redux Toolkit Testing","href":"/js.enigma/docs/WebDev/React/ReduxToolkitTesting","docId":"WebDev/React/ReduxToolkitTesting","unlisted":false},{"type":"link","label":"Redux vs Context API","href":"/js.enigma/docs/WebDev/React/ReduxVSContext","docId":"WebDev/React/ReduxVSContext","unlisted":false},{"type":"link","label":"Redux vs Redux-Saga","href":"/js.enigma/docs/WebDev/React/ReduxVSRedux-Saga","docId":"WebDev/React/ReduxVSRedux-Saga","unlisted":false},{"type":"link","label":"Rendering Strategies Types","href":"/js.enigma/docs/WebDev/React/RenderingTypes","docId":"WebDev/React/RenderingTypes","unlisted":false}]},{"type":"category","label":"Web Parts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Authentication & Authorization Security","href":"/js.enigma/docs/WebDev/Web Parts/AuthAndAuthorization","docId":"WebDev/Web Parts/AuthAndAuthorization","unlisted":false},{"type":"link","label":"Web Accessibility","href":"/js.enigma/docs/WebDev/Web Parts/WebAccessibility","docId":"WebDev/Web Parts/WebAccessibility","unlisted":false},{"type":"link","label":"Web Performance","href":"/js.enigma/docs/WebDev/Web Parts/WebPerformance","docId":"WebDev/Web Parts/WebPerformance","unlisted":false},{"type":"link","label":"Web Security","href":"/js.enigma/docs/WebDev/Web Parts/WebSecurity","docId":"WebDev/Web Parts/WebSecurity","unlisted":false},{"type":"link","label":"Web Vitals & React Performance Debugging Guide","href":"/js.enigma/docs/WebDev/Web Parts/WebVitals","docId":"WebDev/Web Parts/WebVitals","unlisted":false}]}],"href":"/js.enigma/docs/category/web-development"},{"type":"category","label":"Data Structures & Algorithms Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"0-1 BFS Algorithm","href":"/js.enigma/docs/DSA/01BFS","docId":"DSA/01BFS","unlisted":false},{"type":"link","label":"2D Matrix Graph Algorithms","href":"/js.enigma/docs/DSA/2DGraphAlgorithms","docId":"DSA/2DGraphAlgorithms","unlisted":false},{"type":"link","label":"AVL Tree","href":"/js.enigma/docs/DSA/AVLTree","docId":"DSA/AVLTree","unlisted":false},{"type":"link","label":"Advanced Algorithm Techniques","href":"/js.enigma/docs/DSA/AdvancedTechniques","docId":"DSA/AdvancedTechniques","unlisted":false},{"type":"link","label":"Breadth-First Search (BFS) for Trees","href":"/js.enigma/docs/DSA/BFSTree","docId":"DSA/BFSTree","unlisted":false},{"type":"link","label":"Backtracking Algorithm","href":"/js.enigma/docs/DSA/Backtracking","docId":"DSA/Backtracking","unlisted":false},{"type":"link","label":"Binary Heap","href":"/js.enigma/docs/DSA/BinaryHeap","docId":"DSA/BinaryHeap","unlisted":false},{"type":"link","label":"Binary Lifting","href":"/js.enigma/docs/DSA/BinaryLifting","docId":"DSA/BinaryLifting","unlisted":false},{"type":"link","label":"Binary Search and Its Variants","href":"/js.enigma/docs/DSA/BinarySearch","docId":"DSA/BinarySearch","unlisted":false},{"type":"link","label":"Binary Search Tree","href":"/js.enigma/docs/DSA/BinarySearchTree","docId":"DSA/BinarySearchTree","unlisted":false},{"type":"link","label":"Binary Search Tree (BST)","href":"/js.enigma/docs/DSA/BinaryTree","docId":"DSA/BinaryTree","unlisted":false},{"type":"link","label":"Bit Manipulation Basics","href":"/js.enigma/docs/DSA/BitManipulation","docId":"DSA/BitManipulation","unlisted":false},{"type":"link","label":"Boyer\u2013Moore Majority Vote Algorithm","href":"/js.enigma/docs/DSA/BoyerMoore","docId":"DSA/BoyerMoore","unlisted":false},{"type":"link","label":"Bucket Sort","href":"/js.enigma/docs/DSA/BucketSort","docId":"DSA/BucketSort","unlisted":false},{"type":"link","label":"Cantor\'s Diagonalization and Knuth\'s Algorithms Guide","href":"/js.enigma/docs/DSA/Cantor","docId":"DSA/Cantor","unlisted":false},{"type":"link","label":"Circular Buffer","href":"/js.enigma/docs/DSA/CircularBuffer","docId":"DSA/CircularBuffer","unlisted":false},{"type":"link","label":"Counting Sort","href":"/js.enigma/docs/DSA/CountingSort","docId":"DSA/CountingSort","unlisted":false},{"type":"link","label":"Cycle Detection in Graphs","href":"/js.enigma/docs/DSA/CycleDetectionGraph","docId":"DSA/CycleDetectionGraph","unlisted":false},{"type":"link","label":"Cyclic Sort Algorithm","href":"/js.enigma/docs/DSA/CyclicSort","docId":"DSA/CyclicSort","unlisted":false},{"type":"link","label":"DFS & BFS on Graphs","href":"/js.enigma/docs/DSA/DFSBFSGraph","docId":"DSA/DFSBFSGraph","unlisted":false},{"type":"link","label":"Depth-First Search (DFS) for Trees","href":"/js.enigma/docs/DSA/DFSTree","docId":"DSA/DFSTree","unlisted":false},{"type":"link","label":"Dequeue","href":"/js.enigma/docs/DSA/Dequeue","docId":"DSA/Dequeue","unlisted":false},{"type":"link","label":"Difference Array Technique","href":"/js.enigma/docs/DSA/DifferenceArray","docId":"DSA/DifferenceArray","unlisted":false},{"type":"link","label":"Dijkstra\'s Algorithm","href":"/js.enigma/docs/DSA/Dijkstra","docId":"DSA/Dijkstra","unlisted":false},{"type":"link","label":"Euclidean and Manhattan Distance","href":"/js.enigma/docs/DSA/DistancesFormula","docId":"DSA/DistancesFormula","unlisted":false},{"type":"link","label":"Divide and Conquer Technique","href":"/js.enigma/docs/DSA/DivideAndConquer","docId":"DSA/DivideAndConquer","unlisted":false},{"type":"link","label":"Dutch National Flag Algorithm","href":"/js.enigma/docs/DSA/DutchNationalFlag","docId":"DSA/DutchNationalFlag","unlisted":false},{"type":"link","label":"Dynamic Programming","href":"/js.enigma/docs/DSA/DynamicProgramming","docId":"DSA/DynamicProgramming","unlisted":false},{"type":"link","label":"Euclid\'s Algorithm for Greatest Common Divisor (GCD)","href":"/js.enigma/docs/DSA/Euclid","docId":"DSA/Euclid","unlisted":false},{"type":"link","label":"Euler Path, Hamilton Cycle, and Hierholzer\'s Algorithm","href":"/js.enigma/docs/DSA/EularPath","docId":"DSA/EularPath","unlisted":false},{"type":"link","label":"Fenwick Tree Tutorial","href":"/js.enigma/docs/DSA/Fenwick","docId":"DSA/Fenwick","unlisted":false},{"type":"link","label":"Fisher-Yates Shuffle Algorithm","href":"/js.enigma/docs/DSA/FisherYates","docId":"DSA/FisherYates","unlisted":false},{"type":"link","label":"Flood Fill Algorithm","href":"/js.enigma/docs/DSA/FloodFill","docId":"DSA/FloodFill","unlisted":false},{"type":"link","label":"Floyd-Warshall Algorithm","href":"/js.enigma/docs/DSA/Floyd-Warshall","docId":"DSA/Floyd-Warshall","unlisted":false},{"type":"link","label":"Floyd\'s Cycle Detection Algorithm","href":"/js.enigma/docs/DSA/FlyodsCycleDetection","docId":"DSA/FlyodsCycleDetection","unlisted":false},{"type":"link","label":"Frequency Counter Technique","href":"/js.enigma/docs/DSA/FrequencyCounter","docId":"DSA/FrequencyCounter","unlisted":false},{"type":"link","label":"Gaussian Elimination","href":"/js.enigma/docs/DSA/GaussianElimination","docId":"DSA/GaussianElimination","unlisted":false},{"type":"link","label":"Bipartite Graphs","href":"/js.enigma/docs/DSA/GraphBipartile","docId":"DSA/GraphBipartile","unlisted":false},{"type":"link","label":"Heap\u2019s Algorithm","href":"/js.enigma/docs/DSA/HeapAlgorithm","docId":"DSA/HeapAlgorithm","unlisted":false},{"type":"link","label":"Interval Problems","href":"/js.enigma/docs/DSA/Intervals","docId":"DSA/Intervals","unlisted":false},{"type":"link","label":"K-Way Merge Pattern","href":"/js.enigma/docs/DSA/KWayMerge","docId":"DSA/KWayMerge","unlisted":false},{"type":"link","label":"Kadane\'s Algorithm Tutorial","href":"/js.enigma/docs/DSA/Kadane","docId":"DSA/Kadane","unlisted":false},{"type":"link","label":"Kruskal\'s Algorithm","href":"/js.enigma/docs/DSA/Kruskal\'sAlgorithm","docId":"DSA/Kruskal\'sAlgorithm","unlisted":false},{"type":"link","label":"LRU Cache Design","href":"/js.enigma/docs/DSA/LRUcache","docId":"DSA/LRUcache","unlisted":false},{"type":"link","label":"Line Sweep Algorithm","href":"/js.enigma/docs/DSA/LineSweep","docId":"DSA/LineSweep","unlisted":false},{"type":"link","label":"Linked List","href":"/js.enigma/docs/DSA/LinkedList","docId":"DSA/LinkedList","unlisted":false},{"type":"link","label":"Median of Two Sorted Arrays","href":"/js.enigma/docs/DSA/MedianOfTwoSortedArrays","docId":"DSA/MedianOfTwoSortedArrays","unlisted":false},{"type":"link","label":"Merge Sort","href":"/js.enigma/docs/DSA/MergeSort","docId":"DSA/MergeSort","unlisted":false},{"type":"link","label":"Morris Traversal for Binary Trees","href":"/js.enigma/docs/DSA/MorrisTraversal","docId":"DSA/MorrisTraversal","unlisted":false},{"type":"link","label":"Multiset in JavaScript","href":"/js.enigma/docs/DSA/MultiSet","docId":"DSA/MultiSet","unlisted":false},{"type":"link","label":"Multi-source BFS Algorithm","href":"/js.enigma/docs/DSA/MultiSourceBFS","docId":"DSA/MultiSourceBFS","unlisted":false},{"type":"link","label":"N-ary Tree","href":"/js.enigma/docs/DSA/NryTree","docId":"DSA/NryTree","unlisted":false},{"type":"link","label":"Number of Islands Pattern","href":"/js.enigma/docs/DSA/NumberOfIsland","docId":"DSA/NumberOfIsland","unlisted":false},{"type":"link","label":"Parenthesis Pattern","href":"/js.enigma/docs/DSA/Parentheses","docId":"DSA/Parentheses","unlisted":false},{"type":"link","label":"Path Sum (Binary Tree)","href":"/js.enigma/docs/DSA/PathSumBinaryTree","docId":"DSA/PathSumBinaryTree","unlisted":false},{"type":"link","label":"Prefix Sum","href":"/js.enigma/docs/DSA/PrefixSum","docId":"DSA/PrefixSum","unlisted":false},{"type":"link","label":"Prim\'s Algorithm","href":"/js.enigma/docs/DSA/Prim\'sAlgorithm","docId":"DSA/Prim\'sAlgorithm","unlisted":false},{"type":"link","label":"Queue","href":"/js.enigma/docs/DSA/Queue","docId":"DSA/Queue","unlisted":false},{"type":"link","label":"Quick Select Algorithm","href":"/js.enigma/docs/DSA/QuickSelect","docId":"DSA/QuickSelect","unlisted":false},{"type":"link","label":"Quick Sort","href":"/js.enigma/docs/DSA/QuickSort","docId":"DSA/QuickSort","unlisted":false},{"type":"link","label":"10. Regular Expression Matching","href":"/js.enigma/docs/DSA/RegexMatching","docId":"DSA/RegexMatching","unlisted":false},{"type":"link","label":"Reservoir Sampling","href":"/js.enigma/docs/DSA/ReservoirSampling","docId":"DSA/ReservoirSampling","unlisted":false},{"type":"link","label":"In-Place Reversal of a Linked List","href":"/js.enigma/docs/DSA/ReverseLinkedList","docId":"DSA/ReverseLinkedList","unlisted":false},{"type":"link","label":"Segment Tree Tutorial","href":"/js.enigma/docs/DSA/SegmentTree","docId":"DSA/SegmentTree","unlisted":false},{"type":"link","label":"Sieve of Eratosthenes","href":"/js.enigma/docs/DSA/SieveOfEratosthenes","docId":"DSA/SieveOfEratosthenes","unlisted":false},{"type":"link","label":"Sliding Window Technique","href":"/js.enigma/docs/DSA/SlidingWindow","docId":"DSA/SlidingWindow","unlisted":false},{"type":"link","label":"Fast and Slow Pointers Technique","href":"/js.enigma/docs/DSA/SlowFastPointer","docId":"DSA/SlowFastPointer","unlisted":false},{"type":"link","label":"SortedList","href":"/js.enigma/docs/DSA/SortedList","docId":"DSA/SortedList","unlisted":false},{"type":"link","label":"Stack","href":"/js.enigma/docs/DSA/Stack","docId":"DSA/Stack","unlisted":false},{"type":"link","label":"String Matching","href":"/js.enigma/docs/DSA/StringMatching","docId":"DSA/StringMatching","unlisted":false},{"type":"link","label":"Suffix Automaton","href":"/js.enigma/docs/DSA/SuffixAutomata","docId":"DSA/SuffixAutomata","unlisted":false},{"type":"link","label":"Topological Sort Tutorial","href":"/js.enigma/docs/DSA/TopologicalSort","docId":"DSA/TopologicalSort","unlisted":false},{"type":"link","label":"TreeMap","href":"/js.enigma/docs/DSA/TreeMap","docId":"DSA/TreeMap","unlisted":false},{"type":"link","label":"TreeSet","href":"/js.enigma/docs/DSA/TreeSet","docId":"DSA/TreeSet","unlisted":false},{"type":"link","label":"Trie Data Structure","href":"/js.enigma/docs/DSA/Trie","docId":"DSA/Trie","unlisted":false},{"type":"link","label":"Two Pointers Technique","href":"/js.enigma/docs/DSA/TwoPointers","docId":"DSA/TwoPointers","unlisted":false},{"type":"link","label":"Union-Find (Disjoint Set Union) Tutorial","href":"/js.enigma/docs/DSA/UnionFind","docId":"DSA/UnionFind","unlisted":false}],"href":"/js.enigma/docs/category/data-structures--algorithms-patterns"},{"type":"category","label":"Frontend System Design","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Frontend System Design Template","href":"/js.enigma/docs/Frontend System Design/BasicTemplate","docId":"Frontend System Design/BasicTemplate","unlisted":false},{"type":"link","label":"Frontend System Design","href":"/js.enigma/docs/Frontend System Design/FrontendSystemDesign","docId":"Frontend System Design/FrontendSystemDesign","unlisted":false},{"type":"link","label":"Functional and Non-Functional Areas","href":"/js.enigma/docs/Frontend System Design/GenericRequirements","docId":"Frontend System Design/GenericRequirements","unlisted":false},{"type":"link","label":"RADIO Framework Cheatsheet","href":"/js.enigma/docs/Frontend System Design/RADIO","docId":"Frontend System Design/RADIO","unlisted":false}],"href":"/js.enigma/docs/category/frontend-system-design"},{"type":"category","label":"Company Specific","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Amazon Leadership Principles Guide","href":"/js.enigma/docs/Company Specific/AmazonLeadership","docId":"Company Specific/AmazonLeadership","unlisted":false},{"type":"link","label":"Behavioral Interview Cheatsheet","href":"/js.enigma/docs/Company Specific/BehavioralInterview","docId":"Company Specific/BehavioralInterview","unlisted":false}],"href":"/js.enigma/docs/category/company-specific"},{"type":"category","label":"Tips & Tricks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Interview CheatSheet","href":"/js.enigma/docs/Tips & Tricks/InterviwCheatSheet","docId":"Tips & Tricks/InterviwCheatSheet","unlisted":false},{"type":"link","label":"DSA Tips & Tricks","href":"/js.enigma/docs/Tips & Tricks/TipsAndTricks","docId":"Tips & Tricks/TipsAndTricks","unlisted":false}],"href":"/js.enigma/docs/category/tips--tricks"},{"type":"category","label":"Node & Express.js","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Express.js & Node.js","href":"/js.enigma/docs/Node.js/Node","docId":"Node.js/Node","unlisted":false}],"href":"/js.enigma/docs/category/node--expressjs"}]},"docs":{"College Revision/OOPS":{"id":"College Revision/OOPS","title":"Object-Oriented Programming (OOP)","description":"The four pillars of OOP are fundamental concepts, and here\'s a recap of each:","sidebar":"tutorialSidebar"},"College Revision/OperatingSystems":{"id":"College Revision/OperatingSystems","title":"Operating Systems","description":"1. Deadlock","sidebar":"tutorialSidebar"},"Company Specific/AmazonLeadership":{"id":"Company Specific/AmazonLeadership","title":"Amazon Leadership Principles Guide","description":"Customer Obsession","sidebar":"tutorialSidebar"},"Company Specific/BehavioralInterview":{"id":"Company Specific/BehavioralInterview","title":"Behavioral Interview Cheatsheet","description":"STAR Method Framework","sidebar":"tutorialSidebar"},"DSA/01BFS":{"id":"DSA/01BFS","title":"0-1 BFS Algorithm","description":"0-1 BFS Algorithm","sidebar":"tutorialSidebar"},"DSA/2DGraphAlgorithms":{"id":"DSA/2DGraphAlgorithms","title":"2D Matrix Graph Algorithms","description":"A comprehensive guide to 2D DFS, 2D BFS, and 2D Dijkstra algorithms with code examples in JavaScript.","sidebar":"tutorialSidebar"},"DSA/AdvancedTechniques":{"id":"DSA/AdvancedTechniques","title":"Advanced Algorithm Techniques","description":"Euler Tour Technique (ETT)","sidebar":"tutorialSidebar"},"DSA/AVLTree":{"id":"DSA/AVLTree","title":"AVL Tree","description":"The implementation maintains the AVL tree properties:","sidebar":"tutorialSidebar"},"DSA/Backtracking":{"id":"DSA/Backtracking","title":"Backtracking Algorithm","description":"Backtracking Algorithm","sidebar":"tutorialSidebar"},"DSA/BFSTree":{"id":"DSA/BFSTree","title":"Breadth-First Search (BFS) for Trees","description":"Breadth-First Search (BFS) for Trees","sidebar":"tutorialSidebar"},"DSA/BinaryHeap":{"id":"DSA/BinaryHeap","title":"Binary Heap","description":"A Binary Heap is a complete binary tree that satisfies the heap property. It is a data structure commonly used to implement priority queues. There are two main types of binary heaps: the min-heap and the max-heap.","sidebar":"tutorialSidebar"},"DSA/BinaryLifting":{"id":"DSA/BinaryLifting","title":"Binary Lifting","description":"Binary lifting (also known as binary jumping or jump pointers) is an advanced algorithmic technique primarily used to solve problems involving tree traversal and finding ancestors in a tree data structure. It\'s particularly efficient for queries like \\"find the kth ancestor of a node\\" or \\"find the lowest common ancestor (LCA) of two nodes.","sidebar":"tutorialSidebar"},"DSA/BinarySearch":{"id":"DSA/BinarySearch","title":"Binary Search and Its Variants","description":"Binary Search","sidebar":"tutorialSidebar"},"DSA/BinarySearchTree":{"id":"DSA/BinarySearchTree","title":"Binary Search Tree","description":"Binary Search Tree (BST)","sidebar":"tutorialSidebar"},"DSA/BinaryTree":{"id":"DSA/BinaryTree","title":"Binary Search Tree (BST)","description":"Basic Structure","sidebar":"tutorialSidebar"},"DSA/BitManipulation":{"id":"DSA/BitManipulation","title":"Bit Manipulation Basics","description":"Bit Manipulation Basics","sidebar":"tutorialSidebar"},"DSA/BoyerMoore":{"id":"DSA/BoyerMoore","title":"Boyer\u2013Moore Majority Vote Algorithm","description":"Boyer\u2013Moore Majority Vote Algorithm","sidebar":"tutorialSidebar"},"DSA/BucketSort":{"id":"DSA/BucketSort","title":"Bucket Sort","description":"A detailed guide to understanding and implementing Bucket Sort.","sidebar":"tutorialSidebar"},"DSA/Cantor":{"id":"DSA/Cantor","title":"Cantor\'s Diagonalization and Knuth\'s Algorithms Guide","description":"Cantor\'s Diagonalization","sidebar":"tutorialSidebar"},"DSA/CircularBuffer":{"id":"DSA/CircularBuffer","title":"Circular Buffer","description":"A circular buffer, also known as a ring buffer, is a fixed-size data structure that operates in a circular manner, meaning that once the buffer reaches the end, it wraps around to the beginning. It is commonly used in situations where data is produced and consumed at different rates, such as in streaming data or buffering in IO operations.","sidebar":"tutorialSidebar"},"DSA/CountingSort":{"id":"DSA/CountingSort","title":"Counting Sort","description":"A detailed guide to understanding and implementing Counting Sort.","sidebar":"tutorialSidebar"},"DSA/CycleDetectionGraph":{"id":"DSA/CycleDetectionGraph","title":"Cycle Detection in Graphs","description":"Cycle detection is an essential aspect of graph theory, used to identify whether a graph contains cycles. This document outlines methods for detecting cycles in both directed and undirected graphs.","sidebar":"tutorialSidebar"},"DSA/CyclicSort":{"id":"DSA/CyclicSort","title":"Cyclic Sort Algorithm","description":"Cyclic Sort is an efficient algorithm for solving problems involving numbers that are in a range from 1 to n or 0 to n. The key idea is to place each number at its correct index.","sidebar":"tutorialSidebar"},"DSA/Dequeue":{"id":"DSA/Dequeue","title":"Dequeue","description":"A Deque (Double-Ended Queue) is a data structure that allows insertion and deletion of elements from both ends.","sidebar":"tutorialSidebar"},"DSA/DFSBFSGraph":{"id":"DSA/DFSBFSGraph","title":"DFS & BFS on Graphs","description":"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs.","sidebar":"tutorialSidebar"},"DSA/DFSTree":{"id":"DSA/DFSTree","title":"Depth-First Search (DFS) for Trees","description":"Depth-First Search (DFS) for Trees","sidebar":"tutorialSidebar"},"DSA/DifferenceArray":{"id":"DSA/DifferenceArray","title":"Difference Array Technique","description":"The difference array technique (also called prefix sum of differences) is an efficient method for handling multiple range updates on arrays.","sidebar":"tutorialSidebar"},"DSA/Dijkstra":{"id":"DSA/Dijkstra","title":"Dijkstra\'s Algorithm","description":"Dijkstra\'s Algorithm","sidebar":"tutorialSidebar"},"DSA/DistancesFormula":{"id":"DSA/DistancesFormula","title":"Euclidean and Manhattan Distance","description":"Euclidean Distance","sidebar":"tutorialSidebar"},"DSA/DivideAndConquer":{"id":"DSA/DivideAndConquer","title":"Divide and Conquer Technique","description":"Overview","sidebar":"tutorialSidebar"},"DSA/DutchNationalFlag":{"id":"DSA/DutchNationalFlag","title":"Dutch National Flag Algorithm","description":"Dutch National Flag Algorithm","sidebar":"tutorialSidebar"},"DSA/DynamicProgramming":{"id":"DSA/DynamicProgramming","title":"Dynamic Programming","description":"Dynamic Programming (DP) is a technique used for solving complex problems by breaking them down into simpler overlapping subproblems. It involves storing the results of these subproblems to avoid redundant computations. There are two main approaches to implementing DP: Top-Down and Bottom-Up.","sidebar":"tutorialSidebar"},"DSA/Euclid":{"id":"DSA/Euclid","title":"Euclid\'s Algorithm for Greatest Common Divisor (GCD)","description":"Euclid\'s Algorithm for Greatest Common Divisor (GCD)","sidebar":"tutorialSidebar"},"DSA/EularPath":{"id":"DSA/EularPath","title":"Euler Path, Hamilton Cycle, and Hierholzer\'s Algorithm","description":"Table of Contents","sidebar":"tutorialSidebar"},"DSA/Fenwick":{"id":"DSA/Fenwick","title":"Fenwick Tree Tutorial","description":"A comprehensive guide to Fenwick Trees with code examples in JavaScript.","sidebar":"tutorialSidebar"},"DSA/FisherYates":{"id":"DSA/FisherYates","title":"Fisher-Yates Shuffle Algorithm","description":"The Fisher-Yates Shuffle algorithm is an efficient method for randomly shuffling a finite sequence of items. It ensures that each permutation of the sequence is equally likely.","sidebar":"tutorialSidebar"},"DSA/FloodFill":{"id":"DSA/FloodFill","title":"Flood Fill Algorithm","description":"Flood Fill Algorithm","sidebar":"tutorialSidebar"},"DSA/Floyd-Warshall":{"id":"DSA/Floyd-Warshall","title":"Floyd-Warshall Algorithm","description":"Floyd-Warshall algorithm is a classic algorithm for finding the shortest paths in a weighted graph with positive or negative edge weights (but no negative cycles). It can be used to find the shortest paths between all pairs of vertices in a graph.","sidebar":"tutorialSidebar"},"DSA/FlyodsCycleDetection":{"id":"DSA/FlyodsCycleDetection","title":"Floyd\'s Cycle Detection Algorithm","description":"Normal Way of Detecting a cycle","sidebar":"tutorialSidebar"},"DSA/FrequencyCounter":{"id":"DSA/FrequencyCounter","title":"Frequency Counter Technique","description":"Frequency Counter Technique","sidebar":"tutorialSidebar"},"DSA/GaussianElimination":{"id":"DSA/GaussianElimination","title":"Gaussian Elimination","description":"Introduction","sidebar":"tutorialSidebar"},"DSA/GraphBipartile":{"id":"DSA/GraphBipartile","title":"Bipartite Graphs","description":"A bipartite graph is a graph where the vertices can be divided into two sets such that no two vertices in the same set are adjacent.","sidebar":"tutorialSidebar"},"DSA/HeapAlgorithm":{"id":"DSA/HeapAlgorithm","title":"Heap\u2019s Algorithm","description":"Heap\u2019s Algorithm is a classic algorithm used to generate all possible permutations of a finite sequence. It is particularly efficient for generating permutations and is widely used in combinatorial algorithms.","sidebar":"tutorialSidebar"},"DSA/Intervals":{"id":"DSA/Intervals","title":"Interval Problems","description":"Interval Problems","sidebar":"tutorialSidebar"},"DSA/Kadane":{"id":"DSA/Kadane","title":"Kadane\'s Algorithm Tutorial","description":"A comprehensive guide to Kadane\'s Algorithm with code examples in JavaScript.","sidebar":"tutorialSidebar"},"DSA/Kruskal\'sAlgorithm":{"id":"DSA/Kruskal\'sAlgorithm","title":"Kruskal\'s Algorithm","description":"Kruskal\'s algorithm is a popular algorithm in graph theory for finding the Minimum Spanning Tree (MST) of a connected, weighted, undirected graph. The MST connects all vertices with the minimum total edge weight and without any cycles.","sidebar":"tutorialSidebar"},"DSA/KWayMerge":{"id":"DSA/KWayMerge","title":"K-Way Merge Pattern","description":"The k-way merge pattern is a technique used to merge k sorted arrays (or linked lists) into a single sorted array. It\'s commonly used in problems like merging multiple sorted arrays, finding the smallest range covering elements from k lists, and more.","sidebar":"tutorialSidebar"},"DSA/LineSweep":{"id":"DSA/LineSweep","title":"Line Sweep Algorithm","description":"The Line Sweep algorithm is a computational geometry technique used to solve various problems involving intervals or segments. The basic idea is to \\"sweep\\" a line across the plane and process events as the line intersects with points of interest (typically the endpoints of segments).","sidebar":"tutorialSidebar"},"DSA/LinkedList":{"id":"DSA/LinkedList","title":"Linked List","description":"Basic Structure","sidebar":"tutorialSidebar"},"DSA/LRUcache":{"id":"DSA/LRUcache","title":"LRU Cache Design","description":"An LRU (Least Recently Used) Cache is a data structure that stores a limited number of items and automatically removes the least recently used item when the cache reaches its capacity. It\'s commonly used in scenarios where you need to manage memory by caching results of expensive operations.","sidebar":"tutorialSidebar"},"DSA/MedianOfTwoSortedArrays":{"id":"DSA/MedianOfTwoSortedArrays","title":"Median of Two Sorted Arrays","description":"Core Concepts","sidebar":"tutorialSidebar"},"DSA/MergeSort":{"id":"DSA/MergeSort","title":"Merge Sort","description":"A comprehensive guide to understanding and implementing Merge Sort.","sidebar":"tutorialSidebar"},"DSA/MorrisTraversal":{"id":"DSA/MorrisTraversal","title":"Morris Traversal for Binary Trees","description":"Morris Traversal","sidebar":"tutorialSidebar"},"DSA/MultiSet":{"id":"DSA/MultiSet","title":"Multiset in JavaScript","description":"A Multiset (also known as a bag) is a data structure similar to a set, but it allows duplicate elements. In a multiset, each element can appear multiple times, and you can efficiently track the number of occurrences of each element.","sidebar":"tutorialSidebar"},"DSA/MultiSourceBFS":{"id":"DSA/MultiSourceBFS","title":"Multi-source BFS Algorithm","description":"Multi-source BFS Algorithm","sidebar":"tutorialSidebar"},"DSA/NryTree":{"id":"DSA/NryTree","title":"N-ary Tree","description":"An N-ary Tree is a tree data structure where each node can have up to N children. This is a generalization of a binary tree where each node can have more than two children. N-ary trees are useful in scenarios where a hierarchical structure is required, but nodes can have more than two children.","sidebar":"tutorialSidebar"},"DSA/NumberOfIsland":{"id":"DSA/NumberOfIsland","title":"Number of Islands Pattern","description":"The Number of Islands problem is a classic grid-based problem that involves finding the number of distinct islands in a 2D grid. An island is formed by connected groups of 1s (land), and they are surrounded by 0s (water). The land cells can be connected either vertically or horizontally, but not diagonally.","sidebar":"tutorialSidebar"},"DSA/Parentheses":{"id":"DSA/Parentheses","title":"Parenthesis Pattern","description":"Below is a list of common parenthesis-related problems.","sidebar":"tutorialSidebar"},"DSA/PathSumBinaryTree":{"id":"DSA/PathSumBinaryTree","title":"Path Sum (Binary Tree)","description":"Path Sum (Binary Tree)","sidebar":"tutorialSidebar"},"DSA/PrefixSum":{"id":"DSA/PrefixSum","title":"Prefix Sum","description":"A comprehensive guide to understanding and implementing Prefix Sum.","sidebar":"tutorialSidebar"},"DSA/Prim\'sAlgorithm":{"id":"DSA/Prim\'sAlgorithm","title":"Prim\'s Algorithm","description":"Prim\'s algorithm is a greedy algorithm that finds a Minimum Spanning Tree (MST) for a connected, weighted, undirected graph. Unlike Kruskal\'s algorithm, which considers edges, Prim\'s algorithm grows the MST by adding vertices.","sidebar":"tutorialSidebar"},"DSA/Queue":{"id":"DSA/Queue","title":"Queue","description":"A queue is a data structure that follows the First-In-First-Out (FIFO) principle. Elements are added at the rear and removed from the front. Queues are commonly used in scenarios where processing order needs to be maintained.","sidebar":"tutorialSidebar"},"DSA/QuickSelect":{"id":"DSA/QuickSelect","title":"Quick Select Algorithm","description":"Quick Select Algorithm","sidebar":"tutorialSidebar"},"DSA/QuickSort":{"id":"DSA/QuickSort","title":"Quick Sort","description":"A comprehensive guide to understanding and implementing Quick Sort.","sidebar":"tutorialSidebar"},"DSA/RegexMatching":{"id":"DSA/RegexMatching","title":"10. Regular Expression Matching","description":"https://leetcode.com/problems/regular-expression-matching/description/","sidebar":"tutorialSidebar"},"DSA/ReservoirSampling":{"id":"DSA/ReservoirSampling","title":"Reservoir Sampling","description":"Reservoir Sampling is an algorithm used for randomly selecting a fixed number of items from a stream or a large dataset when the total number of items is not known in advance. It ensures that each item in the stream has an equal probability of being included in the sample.","sidebar":"tutorialSidebar"},"DSA/ReverseLinkedList":{"id":"DSA/ReverseLinkedList","title":"In-Place Reversal of a Linked List","description":"In-Place Reversal of a Linked List","sidebar":"tutorialSidebar"},"DSA/SegmentTree":{"id":"DSA/SegmentTree","title":"Segment Tree Tutorial","description":"A comprehensive guide to Segment Trees with code examples in JavaScript.","sidebar":"tutorialSidebar"},"DSA/SieveOfEratosthenes":{"id":"DSA/SieveOfEratosthenes","title":"Sieve of Eratosthenes","description":"The Sieve of Eratosthenes is an ancient algorithm used to find all prime numbers up to a given limit. It works by iteratively marking the multiples of each prime number starting from 2.","sidebar":"tutorialSidebar"},"DSA/SlidingWindow":{"id":"DSA/SlidingWindow","title":"Sliding Window Technique","description":"Sliding Window Technique","sidebar":"tutorialSidebar"},"DSA/SlowFastPointer":{"id":"DSA/SlowFastPointer","title":"Fast and Slow Pointers Technique","description":"The Fast and Slow Pointers technique, also known as the Tortoise and Hare algorithm, is a powerful method for solving problems involving linked lists and cyclic structures. It uses two pointers that move at different speeds to detect cycles, find the middle of a list, and solve other related problems efficiently.","sidebar":"tutorialSidebar"},"DSA/SortedList":{"id":"DSA/SortedList","title":"SortedList","description":"An array-based implementation that maintains elements in sorted order.","sidebar":"tutorialSidebar"},"DSA/Stack":{"id":"DSA/Stack","title":"Stack","description":"Introduction","sidebar":"tutorialSidebar"},"DSA/StringMatching":{"id":"DSA/StringMatching","title":"String Matching","description":"Brute-Force String Matching","sidebar":"tutorialSidebar"},"DSA/SuffixAutomata":{"id":"DSA/SuffixAutomata","title":"Suffix Automaton","description":"A Suffix Automaton is a state machine that represents all substrings of a given string efficiently. It\'s used primarily in string processing problems, such as substring matching, pattern matching, and finding repeated substrings, among others. It builds a minimal deterministic finite automaton (DFA) to recognize all the suffixes of a string.","sidebar":"tutorialSidebar"},"DSA/TopologicalSort":{"id":"DSA/TopologicalSort","title":"Topological Sort Tutorial","description":"A comprehensive guide to Topological Sort with code examples in JavaScript.","sidebar":"tutorialSidebar"},"DSA/TreeMap":{"id":"DSA/TreeMap","title":"TreeMap","description":"A self-balancing binary search tree implementation that stores key-value pairs in sorted order by keys.","sidebar":"tutorialSidebar"},"DSA/TreeSet":{"id":"DSA/TreeSet","title":"TreeSet","description":"A self-balancing binary search tree implementation that stores unique values in sorted order.","sidebar":"tutorialSidebar"},"DSA/Trie":{"id":"DSA/Trie","title":"Trie Data Structure","description":"Trie Data Structure","sidebar":"tutorialSidebar"},"DSA/TwoPointers":{"id":"DSA/TwoPointers","title":"Two Pointers Technique","description":"The Two Pointers technique is a popular algorithmic approach used to solve problems involving arrays or lists. It involves using two pointers to traverse the data structure and solve problems efficiently.","sidebar":"tutorialSidebar"},"DSA/UnionFind":{"id":"DSA/UnionFind","title":"Union-Find (Disjoint Set Union) Tutorial","description":"A comprehensive guide to Union-Find data structure with code examples in JavaScript.","sidebar":"tutorialSidebar"},"Frontend System Design/BasicTemplate":{"id":"Frontend System Design/BasicTemplate","title":"Frontend System Design Template","description":"1. Requirements Gathering","sidebar":"tutorialSidebar"},"Frontend System Design/FrontendSystemDesign":{"id":"Frontend System Design/FrontendSystemDesign","title":"Frontend System Design","description":"1. Requirements Exploration","sidebar":"tutorialSidebar"},"Frontend System Design/GenericRequirements":{"id":"Frontend System Design/GenericRequirements","title":"Functional and Non-Functional Areas","description":"Functional Areas (What the System Does)","sidebar":"tutorialSidebar"},"Frontend System Design/RADIO":{"id":"Frontend System Design/RADIO","title":"RADIO Framework Cheatsheet","description":"Overview","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"JSEnigma | Learn & Practice","description":"The purpose of this application is to help you revise coding patterns and problems efficiently for last-minute preparation.","sidebar":"tutorialSidebar"},"Node.js/Node":{"id":"Node.js/Node","title":"Express.js & Node.js","description":"Directory Structure","sidebar":"tutorialSidebar"},"Tips & Tricks/InterviwCheatSheet":{"id":"Tips & Tricks/InterviwCheatSheet","title":"Interview CheatSheet","description":"Here\u2019s a cheatsheet for technical interview preparation with code snippets in JavaScript:","sidebar":"tutorialSidebar"},"Tips & Tricks/TipsAndTricks":{"id":"Tips & Tricks/TipsAndTricks","title":"DSA Tips & Tricks","description":"Swap Function","sidebar":"tutorialSidebar"},"WebDev/Core JavaScript/CSS":{"id":"WebDev/Core JavaScript/CSS","title":"CSS3 Interview Questions","description":"1. Box sizing","sidebar":"tutorialSidebar"},"WebDev/Core JavaScript/HTML":{"id":"WebDev/Core JavaScript/HTML","title":"HTML5 Interview Questions","description":"1. What is the use of DOCTYPE. What if we do not use it in our app?","sidebar":"tutorialSidebar"},"WebDev/Core JavaScript/JS":{"id":"WebDev/Core JavaScript/JS","title":"JavaScript Interview Questions","description":"1. Definition","sidebar":"tutorialSidebar"},"WebDev/Core JavaScript/React":{"id":"WebDev/Core JavaScript/React","title":"React Interview Questions","description":"1. What is React and how it is different from Angular and Vue?","sidebar":"tutorialSidebar"},"WebDev/CSS3/CSS3Animation":{"id":"WebDev/CSS3/CSS3Animation","title":"CSS3 Animation Cheatsheet","description":"CSS3 provides powerful features to create animations, including transition, transform, and animation.","sidebar":"tutorialSidebar"},"WebDev/CSS3/CSS3Performance":{"id":"WebDev/CSS3/CSS3Performance","title":"Performance & BEM Convention","description":"BEM Naming Convention","sidebar":"tutorialSidebar"},"WebDev/CSS3/CSS3Selectors":{"id":"WebDev/CSS3/CSS3Selectors","title":"CSS DOM Selectors","description":"Basic Selectors","sidebar":"tutorialSidebar"},"WebDev/CSS3/CSSBox-Sizing":{"id":"WebDev/CSS3/CSSBox-Sizing","title":"CSS Box-Sizing","description":"CSS box-sizing defines how the total width and height of an element are calculated. It determines whether padding and border are included in the element\'s size.","sidebar":"tutorialSidebar"},"WebDev/CSS3/GRIDFLEX":{"id":"WebDev/CSS3/GRIDFLEX","title":"CSS Grid and Flexbox Cheatsheet","description":"CSS Grid","sidebar":"tutorialSidebar"},"WebDev/CSS3/TailwindCSS":{"id":"WebDev/CSS3/TailwindCSS","title":"Tailwind CSS Cheatsheet","description":"Layout Fundamentals","sidebar":"tutorialSidebar"},"WebDev/HTML5/BFSDFS":{"id":"WebDev/HTML5/BFSDFS","title":"DFS & BFS on HTML","description":"Find all descendants of a given element (DFS)","sidebar":"tutorialSidebar"},"WebDev/HTML5/CriticalRenderingPath":{"id":"WebDev/HTML5/CriticalRenderingPath","title":"Critical Rendering Path","description":"The Critical Rendering Path (CRP) is the sequence of steps the browser takes to convert HTML, CSS, and JavaScript into pixels on the screen. It represents the flow of the rendering process and impacts how quickly content is displayed to the user. Optimizing the CRP is key to improving website performance and reducing the time it takes to render the first visible part of the page.","sidebar":"tutorialSidebar"},"WebDev/HTML5/HTML5Cheatsheet":{"id":"WebDev/HTML5/HTML5Cheatsheet","title":"Comprehensive HTML Cheatsheet","description":"Document Structure","sidebar":"tutorialSidebar"},"WebDev/HTML5/RenderingTree":{"id":"WebDev/HTML5/RenderingTree","title":"Rendering / Render Tree","description":"The Rendering Tree (or Render Tree) in web development refers to the internal structure that browsers build to render a webpage on the screen. It is a key part of how the browser\'s rendering engine works. The render tree is created after the browser processes the DOM and CSSOM (CSS Object Model), combining them to produce the visual content of a webpage.","sidebar":"tutorialSidebar"},"WebDev/HTML5/ResourceLoading":{"id":"WebDev/HTML5/ResourceLoading","title":"Resource Loading & Performance Optimization","description":"Resource Hints","sidebar":"tutorialSidebar"},"WebDev/HTML5/ShadowDOM":{"id":"WebDev/HTML5/ShadowDOM","title":"Shadow DOM","description":"Understanding Shadow DOM","sidebar":"tutorialSidebar"},"WebDev/HTMLDOM/DOMCheatSheet":{"id":"WebDev/HTMLDOM/DOMCheatSheet","title":"DOM Methods & Selectors Cheatsheet","description":"Element Selectors","sidebar":"tutorialSidebar"},"WebDev/JavaScript/AsyncAwait":{"id":"WebDev/JavaScript/AsyncAwait","title":"Async Await","description":"Print Numbers after num Seconds","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Closure":{"id":"WebDev/JavaScript/Closure","title":"Closures","description":"Closures allow functions to retain access to variables from their containing (or outer) function even after that function has finished executing.","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Currying":{"id":"WebDev/JavaScript/Currying","title":"Currying Variations","description":"Type 1","sidebar":"tutorialSidebar"},"WebDev/JavaScript/DesignPatterns":{"id":"WebDev/JavaScript/DesignPatterns","title":"Design Patterns","description":"Singleton Pattern","sidebar":"tutorialSidebar"},"WebDev/JavaScript/EventEmitter":{"id":"WebDev/JavaScript/EventEmitter","title":"Event Emitter","description":"","sidebar":"tutorialSidebar"},"WebDev/JavaScript/EventLoop":{"id":"WebDev/JavaScript/EventLoop","title":"Event Loop","description":"The JavaScript Event Loop is a fundamental concept in understanding how JavaScript handles asynchronous operations. It enables JavaScript to perform non-blocking I/O operations, making it possible to run other code while waiting for operations to complete.","sidebar":"tutorialSidebar"},"WebDev/JavaScript/FunctionsPolyfill":{"id":"WebDev/JavaScript/FunctionsPolyfill","title":"Function Methods Polyfill","description":"Call Polyfill","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Hoisting":{"id":"WebDev/JavaScript/Hoisting","title":"Understanding JavaScript Hoisting","description":"A comprehensive guide to hoisting in JavaScript, including variables, functions, and classes","sidebar":"tutorialSidebar"},"WebDev/JavaScript/HowToCancelAPICalls":{"id":"WebDev/JavaScript/HowToCancelAPICalls","title":"Canceling an API Call","description":"In JavaScript, you can cancel API calls made with `fetch and axios using AbortController for fetch and CancelToken (or AbortController in modern versions) for axios`.","sidebar":"tutorialSidebar"},"WebDev/JavaScript/HTTPHeaders":{"id":"WebDev/JavaScript/HTTPHeaders","title":"HTTP Headers and Caching","description":"What Are HTTP Headers?","sidebar":"tutorialSidebar"},"WebDev/JavaScript/JSExecution":{"id":"WebDev/JavaScript/JSExecution","title":"JavaScript Execution in Browser","description":"1. Loading Phase","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Memoization":{"id":"WebDev/JavaScript/Memoization","title":"Memoization","description":"Memoization in JavaScript is a technique used to optimize the performance of functions by storing the results of expensive function calls and returning the cached result when the same inputs occur again. It is particularly useful in scenarios where the same computations are repeated multiple times, like recursive algorithms (e.g., Fibonacci sequence, factorials, dynamic programming problems).","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Misx":{"id":"WebDev/JavaScript/Misx","title":"Miscellaneous","description":"","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Objects":{"id":"WebDev/JavaScript/Objects","title":"Object Related Problems","description":"Flatten an Object","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Polyfills":{"id":"WebDev/JavaScript/Polyfills","title":"Array Methods Polyfills","description":"forEach Polyfill","sidebar":"tutorialSidebar"},"WebDev/JavaScript/PromiseBased":{"id":"WebDev/JavaScript/PromiseBased","title":"Promise Based Outputs","description":"In JavaScript, the concepts of Micro Queue and Macro Queue (also known as the Task Queue) refer to different types of queues that manage the execution of asynchronous tasks. Understanding these queues helps clarify how the event loop processes different types of operations.","sidebar":"tutorialSidebar"},"WebDev/JavaScript/PromisePolyfills":{"id":"WebDev/JavaScript/PromisePolyfills","title":"Promise Polyfills","description":"Promise","sidebar":"tutorialSidebar"},"WebDev/JavaScript/PrototypalInheritance":{"id":"WebDev/JavaScript/PrototypalInheritance","title":"Prototypal Inheritance","description":"Object Literal Based","sidebar":"tutorialSidebar"},"WebDev/JavaScript/ProtoVSPrototype":{"id":"WebDev/JavaScript/ProtoVSPrototype","title":"__proto__ vs prototype","description":"Quick Reference","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Regex":{"id":"WebDev/JavaScript/Regex","title":"Regular Expressions Cheatsheet","description":"Basic Patterns","sidebar":"tutorialSidebar"},"WebDev/JavaScript/TaskQueue":{"id":"WebDev/JavaScript/TaskQueue","title":"Task Queue","description":"Design an API that processes objects sequentially (where each object must wait for the previous one to finish before executing), we can create a task queue. This queue will hold objects (representing tasks) and execute each one only after the previous task has completed.","sidebar":"tutorialSidebar"},"WebDev/JavaScript/Webpack":{"id":"WebDev/JavaScript/Webpack","title":"Webpack 5","description":"Core Concepts","sidebar":"tutorialSidebar"},"WebDev/Machine Coding Round/Accessibility":{"id":"WebDev/Machine Coding Round/Accessibility","title":"Web Accessibility Patterns Cheatsheet","description":"Alert/Notification Pattern","sidebar":"tutorialSidebar"},"WebDev/Machine Coding Round/MachineCodingRounds":{"id":"WebDev/Machine Coding Round/MachineCodingRounds","title":"Machine Coding Round","description":"1. UI Components & Widgets","sidebar":"tutorialSidebar"},"WebDev/React/ErrorBoundary":{"id":"WebDev/React/ErrorBoundary","title":"Error Boundary","description":"In React, an ErrorBoundary is a component that catches JavaScript errors anywhere in its child component tree, logs those errors, and displays a fallback UI instead of crashing the entire app. Error boundaries are typically used to handle errors that occur during rendering, in lifecycle methods, or in constructors of the whole component tree.","sidebar":"tutorialSidebar"},"WebDev/React/HooksPolyfills":{"id":"WebDev/React/HooksPolyfills","title":"React Hooks Polyfills","description":"useState","sidebar":"tutorialSidebar"},"WebDev/React/LifeCycleMethods":{"id":"WebDev/React/LifeCycleMethods","title":"React Lifecycle Methods","description":"In React, lifecycle methods are hooks available in class components that allow you to run code at specific points in a component\'s lifecycle. These methods provide hooks for managing side effects, initializing data, and cleaning up resources. Here\u2019s a summary of the key lifecycle methods:","sidebar":"tutorialSidebar"},"WebDev/React/ReactJestRTL":{"id":"WebDev/React/ReactJestRTL","title":"Jest & React Testing Library Cheatsheet","description":"Jest Core","sidebar":"tutorialSidebar"},"WebDev/React/ReactTypeScript":{"id":"WebDev/React/ReactTypeScript","title":"React TypeScript Cheatsheet","description":"Basic Component Types","sidebar":"tutorialSidebar"},"WebDev/React/ReactTypeScriptContext":{"id":"WebDev/React/ReactTypeScriptContext","title":"React TypeScript Context","description":"","sidebar":"tutorialSidebar"},"WebDev/React/ReduxSagaTesting":{"id":"WebDev/React/ReduxSagaTesting","title":"Redux Saga Testing","description":"","sidebar":"tutorialSidebar"},"WebDev/React/ReduxToolkit":{"id":"WebDev/React/ReduxToolkit","title":"Redux Toolkit","description":"Core Concepts","sidebar":"tutorialSidebar"},"WebDev/React/ReduxToolkitTesting":{"id":"WebDev/React/ReduxToolkitTesting","title":"Redux Toolkit Testing","description":"","sidebar":"tutorialSidebar"},"WebDev/React/ReduxVSContext":{"id":"WebDev/React/ReduxVSContext","title":"Redux vs Context API","description":"In this document, we compare Redux and React\'s Context API to help you understand their differences and when to use each.","sidebar":"tutorialSidebar"},"WebDev/React/ReduxVSRedux-Saga":{"id":"WebDev/React/ReduxVSRedux-Saga","title":"Redux vs Redux-Saga","description":"This document compares Redux Thunk and Redux-Saga, two popular middleware libraries for handling asynchronous actions in Redux applications.","sidebar":"tutorialSidebar"},"WebDev/React/RenderingTypes":{"id":"WebDev/React/RenderingTypes","title":"Rendering Strategies Types","description":"Rendering strategies in web development determine how and when components are rendered in a user interface. Here are the main types of rendering strategies:","sidebar":"tutorialSidebar"},"WebDev/Web Parts/AuthAndAuthorization":{"id":"WebDev/Web Parts/AuthAndAuthorization","title":"Authentication & Authorization Security","description":"Core Concepts","sidebar":"tutorialSidebar"},"WebDev/Web Parts/WebAccessibility":{"id":"WebDev/Web Parts/WebAccessibility","title":"Web Accessibility","description":"Web accessibility is about making web content usable for everyone, including individuals with disabilities. Ensuring that your website is accessible helps provide an inclusive experience, complies with legal requirements, and improves overall user experience. This guide covers the principles of accessibility, common practices, and best practices for creating accessible web content.","sidebar":"tutorialSidebar"},"WebDev/Web Parts/WebPerformance":{"id":"WebDev/Web Parts/WebPerformance","title":"Web Performance","description":"Web performance refers to how quickly and efficiently a web page or application loads and operates. Good web performance is crucial for providing a positive user experience, improving SEO rankings, and reducing bounce rates. This guide covers key concepts, metrics, and best practices for optimizing web performance.","sidebar":"tutorialSidebar"},"WebDev/Web Parts/WebSecurity":{"id":"WebDev/Web Parts/WebSecurity","title":"Web Security","description":"Web security involves protecting websites and web applications from various threats and vulnerabilities. Ensuring robust security helps prevent unauthorized access, data breaches, and malicious attacks. This guide covers key concepts, common threats, and best practices for maintaining web security.","sidebar":"tutorialSidebar"},"WebDev/Web Parts/WebVitals":{"id":"WebDev/Web Parts/WebVitals","title":"Web Vitals & React Performance Debugging Guide","description":"Core Web Vitals Overview","sidebar":"tutorialSidebar"}}}}')}}]);