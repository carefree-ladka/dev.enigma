"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9775],{23137:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(74848),t=r(28453);const o={},a="Express.js & Node.js",i={id:"Node.js/Node",title:"Express.js & Node.js",description:"Directory Structure",source:"@site/docs/Node.js/Node.mdx",sourceDirName:"Node.js",slug:"/Node.js/Node",permalink:"/js.enigma/docs/Node.js/Node",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Node.js/Node.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Node & Express.js",permalink:"/js.enigma/docs/category/node--expressjs"},next:{title:"Database",permalink:"/js.enigma/docs/category/database"}},c={},l=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Basic Server Setup",id:"basic-server-setup",level:2},{value:"Environment Configuration",id:"environment-configuration",level:2},{value:"Controllers",id:"controllers",level:2},{value:"Routes",id:"routes",level:2},{value:"Middleware",id:"middleware",level:2},{value:"Services",id:"services",level:2},{value:"Database Configuration (MongoDB with Mongoose)",id:"database-configuration-mongodb-with-mongoose",level:2},{value:"Models (Mongoose Example)",id:"models-mongoose-example",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Request Validation",id:"request-validation",level:2},{value:"Logger Configuration",id:"logger-configuration",level:2},{value:"Testing Setup (Jest)",id:"testing-setup-jest",level:2},{value:"Common NPM Scripts",id:"common-npm-scripts",level:2},{value:"Security Best Practices",id:"security-best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"expressjs--nodejs",children:"Express.js & Node.js"})}),"\n",(0,s.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"project-root/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 database.js\n\u2502   \u2502   \u251c\u2500\u2500 constants.js\n\u2502   \u2502   \u2514\u2500\u2500 env.js\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u251c\u2500\u2500 userController.js\n\u2502   \u2502   \u2514\u2500\u2500 authController.js\n\u2502   \u251c\u2500\u2500 middlewares/\n\u2502   \u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u2502   \u251c\u2500\u2500 error.js\n\u2502   \u2502   \u2514\u2500\u2500 validate.js\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 User.js\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2502   \u2514\u2500\u2500 userRoutes.js\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2502   \u2514\u2500\u2500 userService.js\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 logger.js\n\u2502   \u2502   \u2514\u2500\u2500 helpers.js\n\u2502   \u2514\u2500\u2500 app.js\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 package.json\n"})}),"\n",(0,s.jsx)(n.h2,{id:"basic-server-setup",children:"Basic Server Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// app.js\nconst express = require('express');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst helmet = require('helmet');\n\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(helmet());\napp.use(morgan('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.use('/api/users', require('./routes/userRoutes'));\n\n// Error handling\napp.use((err, req, res, next) => {\n    res.status(err.status || 500).json({\n        error: {\n            message: err.message\n        }\n    });\n});\n\nmodule.exports = app;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// config/env.js\nrequire('dotenv').config();\n\nmodule.exports = {\n    NODE_ENV: process.env.NODE_ENV || 'development',\n    PORT: process.env.PORT || 3000,\n    DATABASE_URL: process.env.DATABASE_URL,\n    JWT_SECRET: process.env.JWT_SECRET,\n    JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN || '1d'\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"controllers",children:"Controllers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// controllers/userController.js\nclass UserController {\n    constructor(userService) {\n        this.userService = userService;\n    }\n\n    // Wrap controller methods in try-catch\n    async getUsers(req, res, next) {\n        try {\n            const users = await this.userService.getAllUsers();\n            res.json({ data: users });\n        } catch (error) {\n            next(error);\n        }\n    }\n\n    async getUserById(req, res, next) {\n        try {\n            const { id } = req.params;\n            const user = await this.userService.getUserById(id);\n            \n            if (!user) {\n                return res.status(404).json({ \n                    error: 'User not found' \n                });\n            }\n            \n            res.json({ data: user });\n        } catch (error) {\n            next(error);\n        }\n    }\n\n    async createUser(req, res, next) {\n        try {\n            const userData = req.body;\n            const user = await this.userService.createUser(userData);\n            res.status(201).json({ data: user });\n        } catch (error) {\n            next(error);\n        }\n    }\n}\n\nmodule.exports = UserController;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"routes",children:"Routes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// routes/userRoutes.js\nconst express = require('express');\nconst router = express.Router();\nconst UserController = require('../controllers/userController');\nconst UserService = require('../services/userService');\nconst auth = require('../middlewares/auth');\nconst validate = require('../middlewares/validate');\nconst userValidation = require('../validations/userValidation');\n\nconst userController = new UserController(new UserService());\n\nrouter\n    .route('/')\n    .get(auth, userController.getUsers.bind(userController))\n    .post(\n        auth, \n        validate(userValidation.createUser), \n        userController.createUser.bind(userController)\n    );\n\nrouter\n    .route('/:id')\n    .get(auth, userController.getUserById.bind(userController))\n    .put(\n        auth, \n        validate(userValidation.updateUser), \n        userController.updateUser.bind(userController)\n    )\n    .delete(auth, userController.deleteUser.bind(userController));\n\nmodule.exports = router;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"middleware",children:"Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// middlewares/auth.js\nconst jwt = require('jsonwebtoken');\nconst { JWT_SECRET } = require('../config/env');\n\nmodule.exports = async (req, res, next) => {\n    try {\n        const token = req.headers.authorization?.split(' ')[1];\n        \n        if (!token) {\n            return res.status(401).json({\n                error: 'Authorization token required'\n            });\n        }\n\n        const decoded = jwt.verify(token, JWT_SECRET);\n        req.user = decoded;\n        next();\n    } catch (error) {\n        res.status(401).json({\n            error: 'Invalid token'\n        });\n    }\n};\n\n// middlewares/validate.js\nconst Joi = require('joi');\n\nmodule.exports = (schema) => (req, res, next) => {\n    const { error } = schema.validate(req.body);\n    \n    if (error) {\n        return res.status(400).json({\n            error: error.details[0].message\n        });\n    }\n    \n    next();\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/userService.js\nclass UserService {\n    constructor(userModel) {\n        this.userModel = userModel;\n    }\n\n    async getAllUsers() {\n        return this.userModel.find();\n    }\n\n    async getUserById(id) {\n        return this.userModel.findById(id);\n    }\n\n    async createUser(userData) {\n        return this.userModel.create(userData);\n    }\n\n    async updateUser(id, userData) {\n        return this.userModel.findByIdAndUpdate(\n            id, \n            userData,\n            { new: true }\n        );\n    }\n\n    async deleteUser(id) {\n        return this.userModel.findByIdAndDelete(id);\n    }\n}\n\nmodule.exports = UserService;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"database-configuration-mongodb-with-mongoose",children:"Database Configuration (MongoDB with Mongoose)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// config/database.js\nconst mongoose = require('mongoose');\nconst { DATABASE_URL } = require('./env');\n\nmodule.exports = {\n    connect: async () => {\n        try {\n            await mongoose.connect(DATABASE_URL, {\n                useNewUrlParser: true,\n                useUnifiedTopology: true\n            });\n            console.log('Database connected successfully');\n        } catch (error) {\n            console.error('Database connection error:', error);\n            process.exit(1);\n        }\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"models-mongoose-example",children:"Models (Mongoose Example)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// models/User.js\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n        lowercase: true\n    },\n    password: {\n        type: String,\n        required: true,\n        minlength: 6,\n        select: false\n    },\n    name: {\n        type: String,\n        required: true\n    },\n    role: {\n        type: String,\n        enum: ['user', 'admin'],\n        default: 'user'\n    }\n}, {\n    timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n    if (!this.isModified('password')) return next();\n    \n    this.password = await bcrypt.hash(this.password, 12);\n    next();\n});\n\n// Method to check password\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n    return bcrypt.compare(candidatePassword, this.password);\n};\n\nmodule.exports = mongoose.model('User', userSchema);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// utils/AppError.js\nclass AppError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.statusCode = statusCode;\n        this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n        this.isOperational = true;\n\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n\n// middlewares/error.js\nconst AppError = require('../utils/AppError');\n\nmodule.exports = (err, req, res, next) => {\n    err.statusCode = err.statusCode || 500;\n    err.status = err.status || 'error';\n\n    if (process.env.NODE_ENV === 'development') {\n        res.status(err.statusCode).json({\n            status: err.status,\n            error: err,\n            message: err.message,\n            stack: err.stack\n        });\n    } else {\n        // Production\n        if (err.isOperational) {\n            res.status(err.statusCode).json({\n                status: err.status,\n                message: err.message\n            });\n        } else {\n            console.error('ERROR \ud83d\udca5', err);\n            res.status(500).json({\n                status: 'error',\n                message: 'Something went wrong!'\n            });\n        }\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"request-validation",children:"Request Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// validations/userValidation.js\nconst Joi = require('joi');\n\nmodule.exports = {\n    createUser: Joi.object({\n        email: Joi.string().email().required(),\n        password: Joi.string().min(6).required(),\n        name: Joi.string().required(),\n        role: Joi.string().valid('user', 'admin')\n    }),\n\n    updateUser: Joi.object({\n        email: Joi.string().email(),\n        name: Joi.string(),\n        role: Joi.string().valid('user', 'admin')\n    })\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"logger-configuration",children:"Logger Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// utils/logger.js\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n    level: 'info',\n    format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.json()\n    ),\n    transports: [\n        new winston.transports.File({ \n            filename: 'logs/error.log', \n            level: 'error' \n        }),\n        new winston.transports.File({ \n            filename: 'logs/combined.log' \n        })\n    ]\n});\n\nif (process.env.NODE_ENV !== 'production') {\n    logger.add(new winston.transports.Console({\n        format: winston.format.simple()\n    }));\n}\n\nmodule.exports = logger;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-setup-jest",children:"Testing Setup (Jest)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// tests/user.test.js\nconst request = require('supertest');\nconst app = require('../src/app');\nconst User = require('../src/models/User');\n\ndescribe('User API', () => {\n    beforeEach(async () => {\n        await User.deleteMany();\n    });\n\n    describe('POST /api/users', () => {\n        it('should create a new user', async () => {\n            const res = await request(app)\n                .post('/api/users')\n                .send({\n                    email: 'test@example.com',\n                    password: 'password123',\n                    name: 'Test User'\n                });\n\n            expect(res.statusCode).toBe(201);\n            expect(res.body.data).toHaveProperty('email', 'test@example.com');\n        });\n    });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-npm-scripts",children:"Common NPM Scripts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "start": "node src/server.js",\n    "dev": "nodemon src/server.js",\n    "test": "jest --watchAll",\n    "test:coverage": "jest --coverage",\n    "lint": "eslint .",\n    "lint:fix": "eslint . --fix"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Use security middleware:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const helmet = require('helmet');\nconst rateLimit = require('express-rate-limit');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\n\napp.use(helmet());\napp.use(mongoSanitize());\napp.use(xss());\n\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100 // limit each IP to 100 requests per windowMs\n});\n\napp.use('/api', limiter);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Configure CORS:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const cors = require('cors');\n\napp.use(cors({\n    origin: process.env.ALLOWED_ORIGINS.split(','),\n    methods: ['GET', 'POST', 'PUT', 'DELETE'],\n    allowedHeaders: ['Content-Type', 'Authorization']\n}));\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var s=r(96540);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);