"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3604],{9866:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>o});var t=r(4848),i=r(8453);const s={},a="TypeScript Generics",c={id:"WebDev/TypeScript/TypeScriptGenerics",title:"TypeScript Generics",description:"Basic Generic Functions",source:"@site/docs/WebDev/TypeScript/TypeScriptGenerics.mdx",sourceDirName:"WebDev/TypeScript",slug:"/WebDev/TypeScript/TypeScriptGenerics",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptGenerics",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/TypeScript/TypeScriptGenerics.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SOLID Principles in React",permalink:"/js.enigma/docs/WebDev/React/SOLIDPrinciples"},next:{title:"TypeScript Cheatsheet",permalink:"/js.enigma/docs/WebDev/TypeScript/TypeScriptIntroduction"}},l={},o=[{value:"Basic Generic Functions",id:"basic-generic-functions",level:2},{value:"Generic Interfaces",id:"generic-interfaces",level:2},{value:"Generic Classes",id:"generic-classes",level:2},{value:"Generic Constraints",id:"generic-constraints",level:2},{value:"Generic Type Aliases",id:"generic-type-aliases",level:2},{value:"Advanced Generic Patterns",id:"advanced-generic-patterns",level:2},{value:"Practical Examples",id:"practical-examples",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"typescript-generics",children:"TypeScript Generics"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-generic-functions",children:"Basic Generic Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Regular function with generic\r\nfunction identity<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\n// Arrow function with generic\r\nconst identityArrow = <T>(arg: T): T => {\r\n  return arg;\r\n}\r\n\r\n// Multiple type parameters\r\nfunction pair<T, U>(first: T, second: U): [T, U] {\r\n  return [first, second];\r\n}\r\n\r\n// Generic function with constraints\r\nfunction getLength<T extends { length: number }>(arg: T): number {\r\n  return arg.length;\r\n}\r\n\r\n// Default type parameters\r\nfunction createArray<T = string>(length: number, value: T): T[] {\r\n  return new Array(length).fill(value);\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generic-interfaces",children:"Generic Interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Basic generic interface\r\ninterface Box<T> {\r\n  value: T;\r\n}\r\n\r\n// Interface with multiple type parameters\r\ninterface Dictionary<K extends string | number, V> {\r\n  get(key: K): V | undefined;\r\n  set(key: K, value: V): void;\r\n}\r\n\r\n// Generic interface extending another generic interface\r\ninterface ReadOnlyBox<T> extends Box<T> {\r\n  readonly value: T;\r\n}\r\n\r\n// Generic interface with methods\r\ninterface Collection<T> {\r\n  add(item: T): void;\r\n  remove(item: T): void;\r\n  getItems(): T[];\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generic-classes",children:"Generic Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Basic generic class\r\nclass Stack<T> {\r\n  private items: T[] = [];\r\n\r\n  push(item: T): void {\r\n    this.items.push(item);\r\n  }\r\n\r\n  pop(): T | undefined {\r\n    return this.items.pop();\r\n  }\r\n}\r\n\r\n// Generic class implementing generic interface\r\nclass ArrayCollection<T> implements Collection<T> {\r\n  private items: T[] = [];\r\n\r\n  add(item: T): void {\r\n    this.items.push(item);\r\n  }\r\n\r\n  remove(item: T): void {\r\n    const index = this.items.indexOf(item);\r\n    if (index > -1) {\r\n      this.items.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  getItems(): T[] {\r\n    return [...this.items];\r\n  }\r\n}\r\n\r\n// Generic class with multiple type parameters\r\nclass KeyValuePair<K, V> {\r\n  constructor(public key: K, public value: V) {}\r\n\r\n  toString(): string {\r\n    return `${String(this.key)}: ${String(this.value)}`;\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generic-constraints",children:"Generic Constraints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Constraint to object type\r\nfunction getProperty<T extends object, K extends keyof T>(obj: T, key: K): T[K] {\r\n  return obj[key];\r\n}\r\n\r\n// Constraint with interface\r\ninterface Lengthwise {\r\n  length: number;\r\n}\r\n\r\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\r\n  console.log(arg.length);\r\n  return arg;\r\n}\r\n\r\n// Constraint to class type\r\nclass Animal {\r\n  name: string;\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n}\r\n\r\nfunction createInstance<T extends Animal>(c: new () => T): T {\r\n  return new c();\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"generic-type-aliases",children:"Generic Type Aliases"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Simple generic type alias\r\ntype Container<T> = { value: T };\r\n\r\n// Generic mapped type\r\ntype Readonly<T> = {\r\n  readonly [P in keyof T]: T[P];\r\n};\r\n\r\n// Conditional generic type\r\ntype NonNullable<T> = T extends null | undefined ? never : T;\r\n\r\n// Generic utility type\r\ntype ReturnType<T extends (...args: any) => any> = \r\n  T extends (...args: any) => infer R ? R : any;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-generic-patterns",children:"Advanced Generic Patterns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Generic factory function\r\nfunction create<T>(Factory: { new (): T }): T {\r\n  return new Factory();\r\n}\r\n\r\n// Generic method overloads\r\nclass DataContainer {\r\n  getData<T extends string>(id: number): string;\r\n  getData<T extends number>(id: string): number;\r\n  getData<T>(id: string | number): T {\r\n    // Implementation\r\n    return {} as T;\r\n  }\r\n}\r\n\r\n// Generic type guards\r\nfunction isOfType<T>(value: any, property: keyof T): value is T {\r\n  return property in value;\r\n}\r\n\r\n// Generic parameter defaults with constraints\r\nclass Api<T extends object = {}> {\r\n  constructor(private baseUrl: string) {}\r\n  \r\n  async get<U extends keyof T>(endpoint: U): Promise<T[U]> {\r\n    // Implementation\r\n    return {} as T[U];\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Generic React component\r\ninterface Props<T> {\r\n  items: T[];\r\n  renderItem: (item: T) => React.ReactNode;\r\n}\r\n\r\nfunction List<T>({ items, renderItem }: Props<T>) {\r\n  return (\r\n    <ul>\r\n      {items.map((item, index) => (\r\n        <li key={index}>{renderItem(item)}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// Generic state management\r\nclass Store<State extends object> {\r\n  private state: State;\r\n\r\n  constructor(initialState: State) {\r\n    this.state = initialState;\r\n  }\r\n\r\n  getState(): Readonly<State> {\r\n    return Object.freeze({ ...this.state });\r\n  }\r\n\r\n  setState(partial: Partial<State>): void {\r\n    this.state = { ...this.state, ...partial };\r\n  }\r\n}\r\n\r\n// Generic event system\r\ntype Listener<T> = (event: T) => void;\r\n\r\nclass EventEmitter<T extends string> {\r\n  private listeners: Map<T, Listener<T>[]> = new Map();\r\n\r\n  on(event: T, listener: Listener<T>): void {\r\n    const listeners = this.listeners.get(event) || [];\r\n    this.listeners.set(event, [...listeners, listener]);\r\n  }\r\n\r\n  emit(event: T): void {\r\n    const listeners = this.listeners.get(event) || [];\r\n    listeners.forEach(listener => listener(event));\r\n  }\r\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);