"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[8379],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var t=r(96540);const a={},s=t.createContext(a);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},92958:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var t=r(74848),a=r(28453);const s={title:"Currying Variations"},c=void 0,o={id:"WebDev/JavaScript/Currying",title:"Currying Variations",description:"Type 1",source:"@site/docs/WebDev/JavaScript/Currying.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Currying",permalink:"/dev.enigma/docs/WebDev/JavaScript/Currying",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Currying.mdx",tags:[],version:"current",frontMatter:{title:"Currying Variations"},sidebar:"tutorialSidebar",previous:{title:"Closures",permalink:"/dev.enigma/docs/WebDev/JavaScript/Closure"},next:{title:"Design Patterns",permalink:"/dev.enigma/docs/WebDev/JavaScript/DesignPatterns"}},i={},u=[{value:"Type 1",id:"type-1",level:3},{value:"Type 2",id:"type-2",level:3},{value:"Type 3",id:"type-3",level:3}];function l(e){const n={code:"code",h3:"h3",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"type-1",children:"Type 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const sum = (a) => (b) => b ? sum2(a + b) : a\nconsole.log(sum(1)(2)(3)());  //6\n"})}),"\n",(0,t.jsx)(n.h3,{id:"type-2",children:"Type 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const sum = (a, b, c) => a + b + c\n\nconst curry = (fn) => {\n  return function curried(...args) {\n    return args.length >= fn.length\n      ? fn(...args)\n      : (...newArgs) => curried(...args, ...newArgs)\n  }\n}\n\nconst curriedSum = curry(sum);\nconsole.log(curriedSum(1)(2)(3)); // 6\n"})}),"\n",(0,t.jsx)(n.h3,{id:"type-3",children:"Type 3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const add = (...args) => args.reduce((acc, curr) => acc + curr, 0);\n\nconst sum = (...args) => {\n  // Initialize total sum with the provided arguments\n  let total = add(...args);\n\n  // Helper function to accumulate sums\n  const helper = (...newArgs) => {\n    if (newArgs.length === 0) {\n      // If no new arguments are provided, return the total sum\n      return total;\n    }\n    // Update the total with new arguments and return the helper function for further chaining\n    total += add(...newArgs);\n    return helper;\n  };\n\n  return args.length === 0 ? 0 : helper;\n};\n\n// Example usage\nconsole.log(sum(1)(2)(3)()); // 6\nconsole.log(sum(1, 2)(3)()); // 6\nconsole.log(sum(1)(2, 3)()); // 6\nconsole.log(sum(1, 2, 3, 4)()); // 10\nconsole.log(sum(1)(2, 3, 4)()); // 10\nconsole.log(sum()); // 0\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);