"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2207],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(96540);const i={},d=t.createContext(i);function a(e){const n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(d.Provider,{value:n},e.children)}},68719:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>l});var t=r(74848),i=r(28453);const d={},a="Binary Search Tree (BST)",s={id:"DSA/DSA with JavaScript/BinaryTree",title:"Binary Search Tree (BST)",description:"Basic Structure",source:"@site/docs/DSA/DSA with JavaScript/BinaryTree.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/BinaryTree",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/BinaryTree",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/BinaryTree.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Binary Search Tree",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/BinarySearchTree"},next:{title:"Bit Manipulation Basics",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/BitManipulation"}},o={},l=[{value:"Basic Structure",id:"basic-structure",level:2},{value:"BST Core Operations",id:"bst-core-operations",level:2},{value:"1. Insert Node",id:"1-insert-node",level:3},{value:"2. Search Node",id:"2-search-node",level:3},{value:"3. Delete Node",id:"3-delete-node",level:3},{value:"Tree Traversal Methods",id:"tree-traversal-methods",level:2},{value:"1. Inorder Traversal (Left-Root-Right)",id:"1-inorder-traversal-left-root-right",level:3},{value:"2. Preorder Traversal (Root-Left-Right)",id:"2-preorder-traversal-root-left-right",level:3},{value:"3. Postorder Traversal (Left-Right-Root)",id:"3-postorder-traversal-left-right-root",level:3},{value:"4. Level Order Traversal (BFS)",id:"4-level-order-traversal-bfs",level:3},{value:"Common Tree Operations",id:"common-tree-operations",level:2},{value:"1. Find Height",id:"1-find-height",level:3},{value:"2. Check if BST is Valid",id:"2-check-if-bst-is-valid",level:3},{value:"3. Find Lowest Common Ancestor",id:"3-find-lowest-common-ancestor",level:3},{value:"4. Check if Tree is Balanced",id:"4-check-if-tree-is-balanced",level:3},{value:"Common Interview Questions",id:"common-interview-questions",level:2},{value:"1. Serialize and Deserialize Binary Tree",id:"1-serialize-and-deserialize-binary-tree",level:3},{value:"Time Complexity Summary",id:"time-complexity-summary",level:2},{value:"Usage Example",id:"usage-example",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"binary-search-tree-bst",children:"Binary Search Tree (BST)"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass BinarySearchTree {\n    constructor() {\n        this.root = null;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"bst-core-operations",children:"BST Core Operations"}),"\n",(0,t.jsx)(n.h3,{id:"1-insert-node",children:"1. Insert Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"insert(data) {\n    const newNode = new Node(data);\n    \n    if (!this.root) {\n        this.root = newNode;\n        return;\n    }\n    \n    function insertNode(node, newNode) {\n        if (newNode.data < node.data) {\n            if (!node.left) {\n                node.left = newNode;\n            } else {\n                insertNode(node.left, newNode);\n            }\n        } else {\n            if (!node.right) {\n                node.right = newNode;\n            } else {\n                insertNode(node.right, newNode);\n            }\n        }\n    }\n    \n    insertNode(this.root, newNode);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Time Complexity: O(log n) average, O(n) worst case"}),"\n",(0,t.jsx)(n.h3,{id:"2-search-node",children:"2. Search Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"search(data) {\n    function searchNode(node, data) {\n        if (!node || node.data === data) {\n            return node;\n        }\n        \n        if (data < node.data) {\n            return searchNode(node.left, data);\n        }\n        return searchNode(node.right, data);\n    }\n    \n    return searchNode(this.root, data);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Time Complexity: O(log n) average, O(n) worst case"}),"\n",(0,t.jsx)(n.h3,{id:"3-delete-node",children:"3. Delete Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"delete(data) {\n    function findMin(node) {\n        while (node.left) {\n            node = node.left;\n        }\n        return node;\n    }\n    \n    function deleteNode(node, data) {\n        if (!node) return null;\n        \n        if (data < node.data) {\n            node.left = deleteNode(node.left, data);\n        } else if (data > node.data) {\n            node.right = deleteNode(node.right, data);\n        } else {\n            // Node with only one child or no child\n            if (!node.left) return node.right;\n            if (!node.right) return node.left;\n            \n            // Node with two children\n            const temp = findMin(node.right);\n            node.data = temp.data;\n            node.right = deleteNode(node.right, temp.data);\n        }\n        return node;\n    }\n    \n    this.root = deleteNode(this.root, data);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Time Complexity: O(log n) average, O(n) worst case"}),"\n",(0,t.jsx)(n.h2,{id:"tree-traversal-methods",children:"Tree Traversal Methods"}),"\n",(0,t.jsx)(n.h3,{id:"1-inorder-traversal-left-root-right",children:"1. Inorder Traversal (Left-Root-Right)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"inorderTraversal() {\n    const result = [];\n    \n    function inorder(node) {\n        if (node) {\n            inorder(node.left);\n            result.push(node.data);\n            inorder(node.right);\n        }\n    }\n    \n    inorder(this.root);\n    return result;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-preorder-traversal-root-left-right",children:"2. Preorder Traversal (Root-Left-Right)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"preorderTraversal() {\n    const result = [];\n    \n    function preorder(node) {\n        if (node) {\n            result.push(node.data);\n            preorder(node.left);\n            preorder(node.right);\n        }\n    }\n    \n    preorder(this.root);\n    return result;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-postorder-traversal-left-right-root",children:"3. Postorder Traversal (Left-Right-Root)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"postorderTraversal() {\n    const result = [];\n    \n    function postorder(node) {\n        if (node) {\n            postorder(node.left);\n            postorder(node.right);\n            result.push(node.data);\n        }\n    }\n    \n    postorder(this.root);\n    return result;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-level-order-traversal-bfs",children:"4. Level Order Traversal (BFS)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"levelOrderTraversal() {\n    if (!this.root) return [];\n    \n    const result = [];\n    const queue = [this.root];\n    \n    while (queue.length) {\n        const level = [];\n        const levelSize = queue.length;\n        \n        for (let i = 0; i < levelSize; i++) {\n            const node = queue.shift();\n            level.push(node.data);\n            \n            if (node.left) queue.push(node.left);\n            if (node.right) queue.push(node.right);\n        }\n        \n        result.push(level);\n    }\n    \n    return result;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-tree-operations",children:"Common Tree Operations"}),"\n",(0,t.jsx)(n.h3,{id:"1-find-height",children:"1. Find Height"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"getHeight() {\n    function height(node) {\n        if (!node) return 0;\n        return 1 + Math.max(height(node.left), height(node.right));\n    }\n    \n    return height(this.root);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-check-if-bst-is-valid",children:"2. Check if BST is Valid"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"isValidBST() {\n    function validate(node, min, max) {\n        if (!node) return true;\n        \n        if (node.data <= min || node.data >= max) {\n            return false;\n        }\n        \n        return validate(node.left, min, node.data) && \n               validate(node.right, node.data, max);\n    }\n    \n    return validate(this.root, -Infinity, Infinity);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-find-lowest-common-ancestor",children:"3. Find Lowest Common Ancestor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"findLCA(n1, n2) {\n    function findLCANode(node, n1, n2) {\n        if (!node) return null;\n        \n        if (node.data > n1 && node.data > n2) {\n            return findLCANode(node.left, n1, n2);\n        }\n        \n        if (node.data < n1 && node.data < n2) {\n            return findLCANode(node.right, n1, n2);\n        }\n        \n        return node;\n    }\n    \n    return findLCANode(this.root, n1, n2);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-check-if-tree-is-balanced",children:"4. Check if Tree is Balanced"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"isBalanced() {\n    function checkBalance(node) {\n        if (!node) return 0;\n        \n        const leftHeight = checkBalance(node.left);\n        if (leftHeight === -1) return -1;\n        \n        const rightHeight = checkBalance(node.right);\n        if (rightHeight === -1) return -1;\n        \n        if (Math.abs(leftHeight - rightHeight) > 1) return -1;\n        \n        return 1 + Math.max(leftHeight, rightHeight);\n    }\n    \n    return checkBalance(this.root) !== -1;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-interview-questions",children:"Common Interview Questions"}),"\n",(0,t.jsx)(n.h3,{id:"1-serialize-and-deserialize-binary-tree",children:"1. Serialize and Deserialize Binary Tree"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Serialize\nserialize() {\n    if (!this.root) return '[]';\n    \n    const result = [];\n    const queue = [this.root];\n    \n    while (queue.length) {\n        const node = queue.shift();\n        if (node) {\n            result.push(node.data);\n            queue.push(node.left);\n            queue.push(node.right);\n        } else {\n            result.push(null);\n        }\n    }\n    \n    while (result[result.length - 1] === null) {\n        result.pop();\n    }\n    \n    return JSON.stringify(result);\n}\n\n// Deserialize\nstatic deserialize(data) {\n    const values = JSON.parse(data);\n    if (!values.length) return null;\n    \n    const tree = new BinarySearchTree();\n    tree.root = new Node(values[0]);\n    const queue = [tree.root];\n    let i = 1;\n    \n    while (queue.length && i < values.length) {\n        const node = queue.shift();\n        \n        if (i < values.length && values[i] !== null) {\n            node.left = new Node(values[i]);\n            queue.push(node.left);\n        }\n        i++;\n        \n        if (i < values.length && values[i] !== null) {\n            node.right = new Node(values[i]);\n            queue.push(node.right);\n        }\n        i++;\n    }\n    \n    return tree;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity-summary",children:"Time Complexity Summary"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Average"}),(0,t.jsx)(n.th,{children:"Worst Case"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Insert"}),(0,t.jsx)(n.td,{children:"O(log n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Delete"}),(0,t.jsx)(n.td,{children:"O(log n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Search"}),(0,t.jsx)(n.td,{children:"O(log n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Traversal (any)"}),(0,t.jsx)(n.td,{children:"O(n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Height"}),(0,t.jsx)(n.td,{children:"O(n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Validate BST"}),(0,t.jsx)(n.td,{children:"O(n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Find LCA"}),(0,t.jsx)(n.td,{children:"O(log n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Check Balance"}),(0,t.jsx)(n.td,{children:"O(n)"}),(0,t.jsx)(n.td,{children:"O(n)"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const bst = new BinarySearchTree();\n\n// Insert nodes\nbst.insert(8);\nbst.insert(3);\nbst.insert(10);\nbst.insert(1);\nbst.insert(6);\n\n// Traverse\nconsole.log(bst.inorderTraversal());    // [1, 3, 6, 8, 10]\nconsole.log(bst.preorderTraversal());   // [8, 3, 1, 6, 10]\nconsole.log(bst.postorderTraversal());  // [1, 6, 3, 10, 8]\n\n// Search\nconsole.log(bst.search(6));  // Node { data: 6, left: null, right: null }\n\n// Check if valid BST\nconsole.log(bst.isValidBST());  // true\n\n// Get height\nconsole.log(bst.getHeight());  // 3\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);