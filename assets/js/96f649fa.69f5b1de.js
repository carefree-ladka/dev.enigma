"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[500],{25841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(74848),s=n(28453);const r={},a="Redux Toolkit",i={id:"WebDev/React/ReduxToolkit",title:"Redux Toolkit",description:"Core Concepts",source:"@site/docs/WebDev/React/ReduxToolkit.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReduxToolkit",permalink:"/js.enigma/docs/WebDev/React/ReduxToolkit",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReduxToolkit.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Redux Saga Testing",permalink:"/js.enigma/docs/WebDev/React/ReduxSagaTesting"},next:{title:"Redux Toolkit Testing",permalink:"/js.enigma/docs/WebDev/React/ReduxToolkitTesting"}},d={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Store",id:"store",level:3},{value:"Slice",id:"slice",level:3},{value:"State Management",id:"state-management",level:2},{value:"Creating a Slice with Initial State",id:"creating-a-slice-with-initial-state",level:3},{value:"Combining Reducers",id:"combining-reducers",level:3},{value:"Async Operations",id:"async-operations",level:2},{value:"Creating Thunks",id:"creating-thunks",level:3},{value:"RTK Query Setup",id:"rtk-query-setup",level:3},{value:"Selectors",id:"selectors",level:2},{value:"Creating and Using Selectors",id:"creating-and-using-selectors",level:3},{value:"Middleware",id:"middleware",level:2},{value:"Custom Middleware",id:"custom-middleware",level:3},{value:"React Integration",id:"react-integration",level:2},{value:"Provider Setup",id:"provider-setup",level:3},{value:"Hooks Usage",id:"hooks-usage",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Type Safety",id:"type-safety",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Testing Reducers",id:"unit-testing-reducers",level:3},{value:"Testing Async Thunks",id:"testing-async-thunks",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"redux-toolkit",children:"Redux Toolkit"})}),"\n",(0,o.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,o.jsx)(t.h3,{id:"store",children:"Store"}),"\n",(0,o.jsx)(t.p,{children:"The central state container that holds the complete state tree of your application."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => \n    getDefaultMiddleware().concat(customMiddleware),\n  devTools: process.env.NODE_ENV !== 'production',\n  preloadedState: initialState,\n  enhancers: [customEnhancer],\n});\n\nexport default store;\n"})}),"\n",(0,o.jsx)(t.h3,{id:"slice",children:"Slice"}),"\n",(0,o.jsx)(t.p,{children:"A collection of Redux reducer logic and actions for a single feature."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { createSlice } from '@reduxjs/toolkit';\n\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      state.push(action.payload);\n    },\n    toggleTodo: (state, action) => {\n      const todo = state.find(todo => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        return action.payload;\n      })\n      .addCase(fetchTodos.rejected, (state, action) => {\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { addTodo, toggleTodo } = todoSlice.actions;\nexport default todoSlice.reducer;\n"})}),"\n",(0,o.jsx)(t.h2,{id:"state-management",children:"State Management"}),"\n",(0,o.jsx)(t.h3,{id:"creating-a-slice-with-initial-state",children:"Creating a Slice with Initial State"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface UserState {\n  name: string;\n  email: string;\n  isAuthenticated: boolean;\n}\n\nconst initialState: UserState = {\n  name: '',\n  email: '',\n  isAuthenticated: false,\n};\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction<UserState>) => {\n      return { ...state, ...action.payload };\n    },\n    clearUser: (state) => {\n      return initialState;\n    },\n    updateUserField: (\n      state,\n      action: PayloadAction<{ field: keyof UserState; value: any }>\n    ) => {\n      const { field, value } = action.payload;\n      state[field] = value;\n    },\n  },\n});\n\nexport const { setUser, clearUser, updateUserField } = userSlice.actions;\nexport default userSlice.reducer;\n"})}),"\n",(0,o.jsx)(t.h3,{id:"combining-reducers",children:"Combining Reducers"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { combineReducers } from '@reduxjs/toolkit';\nimport userReducer from './userSlice';\nimport todoReducer from './todoSlice';\nimport authReducer from './authSlice';\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  todos: todoReducer,\n  auth: authReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n"})}),"\n",(0,o.jsx)(t.h2,{id:"async-operations",children:"Async Operations"}),"\n",(0,o.jsx)(t.h3,{id:"creating-thunks",children:"Creating Thunks"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId: string, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/api/users/${userId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// Usage in slice\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUserById.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchUserById.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload;\n      })\n      .addCase(fetchUserById.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload as string;\n      });\n  },\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"rtk-query-setup",children:"RTK Query Setup"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\n  endpoints: (builder) => ({\n    getUsers: builder.query({\n      query: () => 'users',\n      providesTags: ['Users'],\n    }),\n    getUserById: builder.query({\n      query: (id) => `users/${id}`,\n      providesTags: (_result, _err, id) => [{ type: 'Users', id }],\n    }),\n    updateUser: builder.mutation({\n      query: ({ id, ...patch }) => ({\n        url: `users/${id}`,\n        method: 'PATCH',\n        body: patch,\n      }),\n      invalidatesTags: (_result, _err, { id }) => [\n        { type: 'Users', id },\n        'Users',\n      ],\n    }),\n  }),\n});\n\nexport const {\n  useGetUsersQuery,\n  useGetUserByIdQuery,\n  useUpdateUserMutation,\n} = api;\n"})}),"\n",(0,o.jsx)(t.h2,{id:"selectors",children:"Selectors"}),"\n",(0,o.jsx)(t.h3,{id:"creating-and-using-selectors",children:"Creating and Using Selectors"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { createSelector } from '@reduxjs/toolkit';\n\n// Basic selector\nconst selectTodos = (state: RootState) => state.todos;\n\n// Complex selector\nexport const selectCompletedTodos = createSelector(\n  [selectTodos],\n  (todos) => todos.filter(todo => todo.completed)\n);\n\n// Multiple input selectors\nexport const selectTodosByUser = createSelector(\n  [selectTodos, (state, userId) => userId],\n  (todos, userId) => todos.filter(todo => todo.userId === userId)\n);\n\n// Using with hooks\nconst CompletedTodosList = () => {\n  const completedTodos = useSelector(selectCompletedTodos);\n  return (\n    <ul>\n      {completedTodos.map(todo => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n};\n"})}),"\n",(0,o.jsx)(t.h2,{id:"middleware",children:"Middleware"}),"\n",(0,o.jsx)(t.h3,{id:"custom-middleware",children:"Custom Middleware"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { createListenerMiddleware } from '@reduxjs/toolkit';\n\nexport const listenerMiddleware = createListenerMiddleware();\n\nlistenerMiddleware.startListening({\n  actionCreator: userSlice.actions.setUser,\n  effect: async (action, listenerApi) => {\n    // Do something when setUser action is dispatched\n    localStorage.setItem('user', JSON.stringify(action.payload));\n  },\n});\n\n// Add to store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefault) =>\n    getDefault().concat(listenerMiddleware.middleware),\n});\n"})}),"\n",(0,o.jsx)(t.h2,{id:"react-integration",children:"React Integration"}),"\n",(0,o.jsx)(t.h3,{id:"provider-setup",children:"Provider Setup"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { Provider } from 'react-redux';\nimport { store } from './store';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <YourApp />\n    </Provider>\n  );\n};\n"})}),"\n",(0,o.jsx)(t.h3,{id:"hooks-usage",children:"Hooks Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from './store';\nimport { addTodo, toggleTodo } from './todoSlice';\n\nconst TodoComponent = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todos);\n  const status = useSelector((state: RootState) => state.todos.status);\n\n  const handleAddTodo = (text: string) => {\n    dispatch(addTodo({ id: Date.now(), text, completed: false }));\n  };\n\n  const handleToggle = (id: number) => {\n    dispatch(toggleTodo(id));\n  };\n\n  if (status === 'loading') return <div>Loading...</div>;\n\n  return (\n    <div>\n      {/* Your JSX */}\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(t.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"// Define types for state\ninterface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\ninterface TodoState {\n  items: Todo[];\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\n  error: string | null;\n}\n\n// Use in slice\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null,\n  } as TodoState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<Todo>) => {\n      state.items.push(action.payload);\n    },\n  },\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"// Memoized Selectors\nconst selectFilteredTodos = createSelector(\n  [\n    (state: RootState) => state.todos.items,\n    (state: RootState) => state.filters.status,\n  ],\n  (todos, status) => {\n    switch (status) {\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      default:\n        return todos;\n    }\n  }\n);\n\n// Component optimization\nconst TodoItem = memo(({ todo, onToggle }: TodoItemProps) => {\n  return (\n    <li onClick={() => onToggle(todo.id)}>\n      {todo.text}\n    </li>\n  );\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const fetchTodos = createAsyncThunk(\n  'todos/fetchTodos',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/api/todos');\n      if (!response.ok) {\n        throw new Error('Server Error');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// Handle in slice\nextraReducers: (builder) => {\n  builder\n    .addCase(fetchTodos.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload as string;\n      // Log error or show notification\n    });\n};\n"})}),"\n",(0,o.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsx)(t.h3,{id:"unit-testing-reducers",children:"Unit Testing Reducers"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import todoReducer, { addTodo, toggleTodo } from './todoSlice';\n\ndescribe('todo reducer', () => {\n  const initialState = {\n    items: [],\n    status: 'idle',\n    error: null,\n  };\n\n  test('should handle initial state', () => {\n    expect(todoReducer(undefined, { type: 'unknown' })).toEqual(initialState);\n  });\n\n  test('should handle addTodo', () => {\n    const actual = todoReducer(initialState, addTodo({\n      id: 1,\n      text: 'Test Todo',\n      completed: false,\n    }));\n    expect(actual.items.length).toEqual(1);\n    expect(actual.items[0].text).toEqual('Test Todo');\n  });\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"testing-async-thunks",children:"Testing Async Thunks"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"import { fetchTodos } from './todoSlice';\nimport { store } from './store';\n\ndescribe('todo async actions', () => {\n  beforeEach(() => {\n    fetch.resetMocks();\n  });\n\n  test('fetches todos successfully', async () => {\n    const todos = [{ id: 1, text: 'Test', completed: false }];\n    fetch.mockResponseOnce(JSON.stringify(todos));\n\n    const result = await store.dispatch(fetchTodos());\n    \n    expect(result.payload).toEqual(todos);\n    expect(store.getState().todos.items).toEqual(todos);\n  });\n\n  test('handles fetch error', async () => {\n    fetch.mockRejectOnce(new Error('API Error'));\n\n    const result = await store.dispatch(fetchTodos());\n    \n    expect(result.payload).toEqual('API Error');\n    expect(store.getState().todos.error).toEqual('API Error');\n  });\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(96540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);