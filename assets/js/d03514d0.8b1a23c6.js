"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[4680],{16739:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=t(74848),r=t(28453);const s={},c="Redux Saga Testing",i={id:"WebDev/React/ReduxSagaTesting",title:"Redux Saga Testing",description:"",source:"@site/docs/WebDev/React/ReduxSagaTesting.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReduxSagaTesting",permalink:"/dev.enigma/docs/WebDev/React/ReduxSagaTesting",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReduxSagaTesting.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React TypeScript Context",permalink:"/dev.enigma/docs/WebDev/React/ReactTypeScriptContext"},next:{title:"Redux Toolkit",permalink:"/dev.enigma/docs/WebDev/React/ReduxToolkit"}},o={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"redux-saga-testing",children:"Redux Saga Testing"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-JavaScript",children:"// Redux Saga Testing Cheatsheet\n\n// 1. Basic Test Setup\nimport { runSaga } from 'redux-saga';\nimport { call, put, select } from 'redux-saga/effects';\nimport { expectSaga } from 'redux-saga-test-plan';\nimport * as matchers from 'redux-saga-test-plan/matchers';\nimport { throwError } from 'redux-saga-test-plan/providers';\n\n// 2. Simple Saga Example\nfunction* fetchUserSaga(action) {\n  try {\n    const user = yield call(api.fetchUser, action.payload.id);\n    yield put({ type: 'FETCH_USER_SUCCESS', payload: user });\n  } catch (error) {\n    yield put({ type: 'FETCH_USER_ERROR', error });\n  }\n}\n\n// 3. Testing with redux-saga-test-plan\ndescribe('fetchUserSaga', () => {\n  const userId = 1;\n  const user = { id: 1, name: 'John' };\n\n  // Basic happy path test\n  test('should fetch user successfully', () => {\n    return expectSaga(fetchUserSaga, { payload: { id: userId } })\n      .provide([\n        [matchers.call.fn(api.fetchUser), user]\n      ])\n      .put({ type: 'FETCH_USER_SUCCESS', payload: user })\n      .run();\n  });\n\n  // Error path test\n  test('should handle errors', () => {\n    const error = new Error('User not found');\n\n    return expectSaga(fetchUserSaga, { payload: { id: userId } })\n      .provide([\n        [matchers.call.fn(api.fetchUser), throwError(error)]\n      ])\n      .put({ type: 'FETCH_USER_ERROR', error })\n      .run();\n  });\n});\n\n// 4. Testing Complex Flows\nfunction* complexSaga() {\n  const user = yield select(state => state.user);\n  yield call(api.trackUserAction, user.id);\n  const data = yield call(api.fetchData);\n  yield put({ type: 'DATA_LOADED', payload: data });\n}\n\ntest('complex saga flow', () => {\n  const fakeUser = { id: 1 };\n  const fakeData = { items: [] };\n\n  return expectSaga(complexSaga)\n    .withState({\n      user: fakeUser\n    })\n    .provide([\n      [matchers.call.fn(api.trackUserAction), null],\n      [matchers.call.fn(api.fetchData), fakeData]\n    ])\n    .call(api.trackUserAction, fakeUser.id)\n    .put({ type: 'DATA_LOADED', payload: fakeData })\n    .run();\n});\n\n// 5. Testing Saga Forks and Parallel Tasks\nfunction* parentSaga() {\n  yield fork(childSaga1);\n  yield fork(childSaga2);\n}\n\ntest('forked sagas', () => {\n  return expectSaga(parentSaga)\n    .provide([\n      // Provide mocked values for child sagas\n    ])\n    .fork(childSaga1)\n    .fork(childSaga2)\n    .run();\n});\n\n// 6. Testing Race Conditions\nfunction* raceSaga() {\n  const { response, timeout } = yield race({\n    response: call(api.fetchData),\n    timeout: delay(1000)\n  });\n}\n\ntest('race condition', () => {\n  const response = { data: 'success' };\n\n  return expectSaga(raceSaga)\n    .provide([\n      [matchers.race({\n        response: matchers.call.fn(api.fetchData),\n        timeout: matchers.call.fn(delay)\n      }), { response }]\n    ])\n    .run();\n});\n\n// 7. Testing Take Effects\nfunction* watchUserSaga() {\n  while (true) {\n    const action = yield take('USER_REQUEST');\n    yield call(handleUserRequest, action);\n  }\n}\n\ntest('watch saga', () => {\n  const action = { type: 'USER_REQUEST', payload: 1 };\n\n  return expectSaga(watchUserSaga)\n    .take('USER_REQUEST')\n    .dispatch(action)\n    .call(handleUserRequest, action)\n    .silentRun();\n});\n\n// 8. Common Patterns and Best Practices\n\n// Pattern 1: Dynamic Providers\ntest('dynamic providers', () => {\n  return expectSaga(mySaga)\n    .provide({\n      call: (effect, next) => {\n        if (effect.fn === api.fetchUser) {\n          return { id: 1, name: 'John' };\n        }\n        return next();\n      }\n    })\n    .run();\n});\n\n// Pattern 2: Testing Saga Cancellation\ntest('saga cancellation', () => {\n  return expectSaga(mySaga)\n    .provide([\n      [matchers.fork.fn(backgroundTask), true]\n    ])\n    .fork(backgroundTask)\n    .cancel.like({ pattern: backgroundTask })\n    .run();\n});\n\n// Pattern 3: Testing with Partial State\ntest('partial state matching', () => {\n  return expectSaga(mySaga)\n    .withState({\n      user: { id: 1 },\n      // Other state properties can be omitted\n    })\n    .run();\n});\n\n// 9. Helper Functions for Testing\nconst createSagaTestHelper = (initialState = {}) => {\n  const dispatched = [];\n\n  return {\n    dispatch: (action) => dispatched.push(action),\n    getState: () => initialState,\n    getDispatched: () => dispatched\n  };\n};\n\n// 10. Manual Testing without redux-saga-test-plan\ntest('manual saga testing', async () => {\n  const dispatched = [];\n  const fakeStore = {\n    dispatch: (action) => dispatched.push(action),\n    getState: () => ({ user: { id: 1 } })\n  };\n\n  await runSaga(\n    fakeStore,\n    mySaga,\n    { type: 'START_SAGA' }\n  ).toPromise();\n\n  expect(dispatched).toEqual([\n    // Expected actions\n  ]);\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var a=t(96540);const r={},s=a.createContext(r);function c(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);