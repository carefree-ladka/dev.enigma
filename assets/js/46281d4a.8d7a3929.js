"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[661],{28453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>s});var i=t(96540);const r={},a=i.createContext(r);function l(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),i.createElement(a.Provider,{value:e},n.children)}},91281:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>a,metadata:()=>s,toc:()=>h});var i=t(74848),r=t(28453);const a={},l="Binary Search",s={id:"DSA/DSA with Java/Binary Search Patterns",title:"Binary Search",description:"Table of Contents",source:"@site/docs/DSA/DSA with Java/Binary Search Patterns.mdx",sourceDirName:"DSA/DSA with Java",slug:"/DSA/DSA with Java/Binary Search Patterns",permalink:"/dev.enigma/docs/DSA/DSA with Java/Binary Search Patterns",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with Java/Binary Search Patterns.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Binary Heap",permalink:"/dev.enigma/docs/DSA/DSA with Java/Binary Heap Patterns"},next:{title:"Binary Tree & BST",permalink:"/dev.enigma/docs/DSA/DSA with Java/Binary Tree Patterns"}},d={},h=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Pattern 1: Basic Binary Search",id:"pattern-1-basic-binary-search",level:2},{value:"1.1 Classic Binary Search",id:"11-classic-binary-search",level:3},{value:"1.2 Binary Search with Duplicates",id:"12-binary-search-with-duplicates",level:3},{value:"1.3 Find Element in Infinite Array",id:"13-find-element-in-infinite-array",level:3},{value:"Pattern 2: Find Bounds (Lower/Upper)",id:"pattern-2-find-bounds-lowerupper",level:2},{value:"2.1 Lower Bound (Leftmost Position)",id:"21-lower-bound-leftmost-position",level:3},{value:"2.2 Upper Bound (Rightmost Position)",id:"22-upper-bound-rightmost-position",level:3},{value:"2.3 Count Occurrences",id:"23-count-occurrences",level:3},{value:"Pattern 3: Search Insert Position",id:"pattern-3-search-insert-position",level:2},{value:"3.1 Search Insert Position",id:"31-search-insert-position",level:3},{value:"3.2 Find Closest Elements",id:"32-find-closest-elements",level:3},{value:"3.3 Find K Closest Elements",id:"33-find-k-closest-elements",level:3},{value:"Pattern 4: First &amp; Last Occurrence",id:"pattern-4-first--last-occurrence",level:2},{value:"4.1 Find First and Last Position",id:"41-find-first-and-last-position",level:3},{value:"4.2 First Bad Version",id:"42-first-bad-version",level:3},{value:"4.3 Find First Greater Element",id:"43-find-first-greater-element",level:3},{value:"Pattern 5: Peak Element",id:"pattern-5-peak-element",level:2},{value:"5.1 Find Peak Element",id:"51-find-peak-element",level:3},{value:"5.2 Peak Index in Mountain Array",id:"52-peak-index-in-mountain-array",level:3},{value:"5.3 Find Peak Element II (2D)",id:"53-find-peak-element-ii-2d",level:3},{value:"Pattern 6: Rotated Array Search",id:"pattern-6-rotated-array-search",level:2},{value:"6.1 Search in Rotated Sorted Array",id:"61-search-in-rotated-sorted-array",level:3},{value:"6.2 Search in Rotated Sorted Array II (with duplicates)",id:"62-search-in-rotated-sorted-array-ii-with-duplicates",level:3},{value:"6.3 Find Rotation Count",id:"63-find-rotation-count",level:3},{value:"Pattern 7: Search in 2D Matrix",id:"pattern-7-search-in-2d-matrix",level:2},{value:"7.1 Search a 2D Matrix",id:"71-search-a-2d-matrix",level:3},{value:"7.2 Search a 2D Matrix II",id:"72-search-a-2d-matrix-ii",level:3},{value:"7.3 Find Median in Row-wise Sorted Matrix",id:"73-find-median-in-row-wise-sorted-matrix",level:3},{value:"Pattern 8: Minimum in Rotated Array",id:"pattern-8-minimum-in-rotated-array",level:2},{value:"8.1 Find Minimum in Rotated Sorted Array",id:"81-find-minimum-in-rotated-sorted-array",level:3},{value:"8.2 Find Minimum in Rotated Sorted Array II",id:"82-find-minimum-in-rotated-sorted-array-ii",level:3},{value:"8.3 Find Maximum in Rotated Array",id:"83-find-maximum-in-rotated-array",level:3},{value:"Pattern 9: Search Range Problems",id:"pattern-9-search-range-problems",level:2},{value:"9.1 Find Range of Target",id:"91-find-range-of-target",level:3},{value:"9.2 Search for Range with Condition",id:"92-search-for-range-with-condition",level:3},{value:"Pattern 10: Answer Search (Binary Search on Answer)",id:"pattern-10-answer-search-binary-search-on-answer",level:2},{value:"10.1 Square Root",id:"101-square-root",level:3},{value:"10.2 Nth Root",id:"102-nth-root",level:3},{value:"10.3 Koko Eating Bananas",id:"103-koko-eating-bananas",level:3},{value:"10.4 Capacity to Ship Packages",id:"104-capacity-to-ship-packages",level:3},{value:"10.5 Split Array Largest Sum",id:"105-split-array-largest-sum",level:3},{value:"10.6 Minimize Maximum Distance to Gas Station",id:"106-minimize-maximum-distance-to-gas-station",level:3},{value:"Pattern 11: Kth Element",id:"pattern-11-kth-element",level:2},{value:"11.1 Kth Smallest Element in Sorted Matrix",id:"111-kth-smallest-element-in-sorted-matrix",level:3},{value:"11.2 Kth Element of Two Sorted Arrays",id:"112-kth-element-of-two-sorted-arrays",level:3},{value:"11.3 Find Kth Positive Missing Number",id:"113-find-kth-positive-missing-number",level:3},{value:"Pattern 12: Median Problems",id:"pattern-12-median-problems",level:2},{value:"12.1 Median of Two Sorted Arrays",id:"121-median-of-two-sorted-arrays",level:3},{value:"12.2 Median of Row Wise Sorted Matrix",id:"122-median-of-row-wise-sorted-matrix",level:3},{value:"Pattern 13: Advanced Binary Search",id:"pattern-13-advanced-binary-search",level:2},{value:"13.1 Aggressive Cows",id:"131-aggressive-cows",level:3},{value:"13.2 Book Allocation Problem",id:"132-book-allocation-problem",level:3},{value:"13.3 Painters Partition Problem",id:"133-painters-partition-problem",level:3},{value:"13.4 Median of Sliding Window (Using Binary Search)",id:"134-median-of-sliding-window-using-binary-search",level:3},{value:"13.5 Find Duplicate Number",id:"135-find-duplicate-number",level:3},{value:"13.6 Find Missing Element in Sorted Array",id:"136-find-missing-element-in-sorted-array",level:3},{value:"Time Complexity Cheat Sheet",id:"time-complexity-cheat-sheet",level:2},{value:"Binary Search Templates",id:"binary-search-templates",level:2},{value:"Template 1: Standard Binary Search",id:"template-1-standard-binary-search",level:3},{value:"Template 2: Find Leftmost/Rightmost",id:"template-2-find-leftmostrightmost",level:3},{value:"Template 3: Binary Search on Answer",id:"template-3-binary-search-on-answer",level:3},{value:"Common Tricks &amp; Tips",id:"common-tricks--tips",level:2}];function m(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"binary-search",children:"Binary Search"})}),"\n",(0,i.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-1-basic-binary-search",children:"Pattern 1: Basic Binary Search"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-2-find-bounds-lowerupper",children:"Pattern 2: Find Bounds (Lower/Upper)"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-3-search-insert-position",children:"Pattern 3: Search Insert Position"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-4-first--last-occurrence",children:"Pattern 4: First & Last Occurrence"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-5-peak-element",children:"Pattern 5: Peak Element"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-6-rotated-array-search",children:"Pattern 6: Rotated Array Search"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-7-search-in-2d-matrix",children:"Pattern 7: Search in 2D Matrix"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-8-minimum-in-rotated-array",children:"Pattern 8: Minimum in Rotated Array"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-9-search-range-problems",children:"Pattern 9: Search Range Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-10-answer-search-binary-search-on-answer",children:"Pattern 10: Answer Search (Binary Search on Answer)"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-11-kth-element",children:"Pattern 11: Kth Element"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-12-median-problems",children:"Pattern 12: Median Problems"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#pattern-13-advanced-binary-search",children:"Pattern 13: Advanced Binary Search"})}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-1-basic-binary-search",children:"Pattern 1: Basic Binary Search"}),"\n",(0,i.jsx)(e.h3,{id:"11-classic-binary-search",children:"1.1 Classic Binary Search"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int binarySearch(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}\n\n// Recursive version\nint binarySearchRecursive(int[] nums, int target, int left, int right) {\n    if (left > right) return -1;\n\n    int mid = left + (right - left) / 2;\n\n    if (nums[mid] == target) {\n        return mid;\n    } else if (nums[mid] < target) {\n        return binarySearchRecursive(nums, target, mid + 1, right);\n    } else {\n        return binarySearchRecursive(nums, target, left, mid - 1);\n    }\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"12-binary-search-with-duplicates",children:"1.2 Binary Search with Duplicates"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"boolean search(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return true;\n        }\n\n        // Handle duplicates\n        if (nums[left] == nums[mid] && nums[mid] == nums[right]) {\n            left++;\n            right--;\n        } else if (nums[left] <= nums[mid]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"13-find-element-in-infinite-array",children:"1.3 Find Element in Infinite Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int searchInInfinite(int[] nums, int target) {\n    // Find bounds first\n    int left = 0, right = 1;\n\n    while (nums[right] < target) {\n        left = right;\n        right *= 2;\n    }\n\n    // Standard binary search\n    return binarySearch(nums, target, left, right);\n}\n\nint binarySearch(int[] nums, int target, int left, int right) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-2-find-bounds-lowerupper",children:"Pattern 2: Find Bounds (Lower/Upper)"}),"\n",(0,i.jsx)(e.h3,{id:"21-lower-bound-leftmost-position",children:"2.1 Lower Bound (Leftmost Position)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int lowerBound(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n\n// Alternative implementation\nint lowerBoundAlt(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int result = nums.length;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] >= target) {\n            result = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"22-upper-bound-rightmost-position",children:"2.2 Upper Bound (Rightmost Position)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int upperBound(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] <= target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n\n// Alternative implementation\nint upperBoundAlt(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int result = nums.length;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > target) {\n            result = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"23-count-occurrences",children:"2.3 Count Occurrences"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int countOccurrences(int[] nums, int target) {\n    int lower = lowerBound(nums, target);\n    int upper = upperBound(nums, target);\n\n    if (lower == nums.length || nums[lower] != target) {\n        return 0;\n    }\n\n    return upper - lower;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-3-search-insert-position",children:"Pattern 3: Search Insert Position"}),"\n",(0,i.jsx)(e.h3,{id:"31-search-insert-position",children:"3.1 Search Insert Position"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int searchInsert(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return left;\n}\n\n// Using lower bound\nint searchInsertLB(int[] nums, int target) {\n    return lowerBound(nums, target);\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"32-find-closest-elements",children:"3.2 Find Closest Elements"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findClosestElement(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (Math.abs(nums[mid] - target) <= Math.abs(nums[mid + 1] - target)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return nums[left];\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"33-find-k-closest-elements",children:"3.3 Find K Closest Elements"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"List<Integer> findClosestElements(int[] arr, int k, int x) {\n    int left = 0;\n    int right = arr.length - k;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (x - arr[mid] > arr[mid + k] - x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    List<Integer> result = new ArrayList<>();\n    for (int i = left; i < left + k; i++) {\n        result.add(arr[i]);\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-4-first--last-occurrence",children:"Pattern 4: First & Last Occurrence"}),"\n",(0,i.jsx)(e.h3,{id:"41-find-first-and-last-position",children:"4.1 Find First and Last Position"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int[] searchRange(int[] nums, int target) {\n    int[] result = {-1, -1};\n\n    result[^1_0] = findFirst(nums, target);\n    result[^1_1] = findLast(nums, target);\n\n    return result;\n}\n\nint findFirst(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int first = -1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            first = mid;\n            right = mid - 1; // Continue searching left\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return first;\n}\n\nint findLast(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int last = -1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            last = mid;\n            left = mid + 1; // Continue searching right\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return last;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"42-first-bad-version",children:"4.2 First Bad Version"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int firstBadVersion(int n) {\n    int left = 1;\n    int right = n;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (isBadVersion(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"43-find-first-greater-element",children:"4.3 Find First Greater Element"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findFirstGreater(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n    int result = -1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > target) {\n            result = mid;\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-5-peak-element",children:"Pattern 5: Peak Element"}),"\n",(0,i.jsx)(e.h3,{id:"51-find-peak-element",children:"5.1 Find Peak Element"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findPeakElement(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > nums[mid + 1]) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"52-peak-index-in-mountain-array",children:"5.2 Peak Index in Mountain Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int peakIndexInMountainArray(int[] arr) {\n    int left = 0;\n    int right = arr.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (arr[mid] < arr[mid + 1]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"53-find-peak-element-ii-2d",children:"5.3 Find Peak Element II (2D)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int[] findPeakGrid(int[][] mat) {\n    int left = 0;\n    int right = mat[^1_0].length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        int maxRowIndex = 0;\n\n        // Find max element in column mid\n        for (int i = 0; i < mat.length; i++) {\n            if (mat[i][mid] > mat[maxRowIndex][mid]) {\n                maxRowIndex = i;\n            }\n        }\n\n        int leftVal = (mid == 0) ? -1 : mat[maxRowIndex][mid - 1];\n        int rightVal = (mid == mat[^1_0].length - 1) ? -1 : mat[maxRowIndex][mid + 1];\n\n        if (mat[maxRowIndex][mid] > leftVal && mat[maxRowIndex][mid] > rightVal) {\n            return new int[]{maxRowIndex, mid};\n        } else if (mat[maxRowIndex][mid] < leftVal) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return new int[]{-1, -1};\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-6-rotated-array-search",children:"Pattern 6: Rotated Array Search"}),"\n",(0,i.jsx)(e.h3,{id:"61-search-in-rotated-sorted-array",children:"6.1 Search in Rotated Sorted Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int search(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return mid;\n        }\n\n        // Left half is sorted\n        if (nums[left] <= nums[mid]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        // Right half is sorted\n        else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"62-search-in-rotated-sorted-array-ii-with-duplicates",children:"6.2 Search in Rotated Sorted Array II (with duplicates)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"boolean search(int[] nums, int target) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            return true;\n        }\n\n        // Handle duplicates\n        if (nums[left] == nums[mid] && nums[mid] == nums[right]) {\n            left++;\n            right--;\n        }\n        // Left half is sorted\n        else if (nums[left] <= nums[mid]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        // Right half is sorted\n        else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"63-find-rotation-count",children:"6.3 Find Rotation Count"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findRotationCount(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > nums[right]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-7-search-in-2d-matrix",children:"Pattern 7: Search in 2D Matrix"}),"\n",(0,i.jsx)(e.h3,{id:"71-search-a-2d-matrix",children:"7.1 Search a 2D Matrix"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"boolean searchMatrix(int[][] matrix, int target) {\n    int rows = matrix.length;\n    int cols = matrix[^1_0].length;\n    int left = 0;\n    int right = rows * cols - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        int midVal = matrix[mid / cols][mid % cols];\n\n        if (midVal == target) {\n            return true;\n        } else if (midVal < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"72-search-a-2d-matrix-ii",children:"7.2 Search a 2D Matrix II"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"boolean searchMatrix(int[][] matrix, int target) {\n    int row = 0;\n    int col = matrix[^1_0].length - 1;\n\n    while (row < matrix.length && col >= 0) {\n        if (matrix[row][col] == target) {\n            return true;\n        } else if (matrix[row][col] > target) {\n            col--;\n        } else {\n            row++;\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"73-find-median-in-row-wise-sorted-matrix",children:"7.3 Find Median in Row-wise Sorted Matrix"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int median(int[][] matrix) {\n    int rows = matrix.length;\n    int cols = matrix[^1_0].length;\n\n    int min = matrix[^1_0][^1_0];\n    int max = matrix[^1_0][cols - 1];\n\n    // Find min and max elements\n    for (int i = 0; i < rows; i++) {\n        min = Math.min(min, matrix[i][^1_0]);\n        max = Math.max(max, matrix[i][cols - 1]);\n    }\n\n    int desired = (rows * cols + 1) / 2;\n\n    while (min < max) {\n        int mid = min + (max - min) / 2;\n        int count = 0;\n\n        // Count elements <= mid\n        for (int i = 0; i < rows; i++) {\n            count += upperBound(matrix[i], mid);\n        }\n\n        if (count < desired) {\n            min = mid + 1;\n        } else {\n            max = mid;\n        }\n    }\n\n    return min;\n}\n\nint upperBound(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (arr[mid] <= target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-8-minimum-in-rotated-array",children:"Pattern 8: Minimum in Rotated Array"}),"\n",(0,i.jsx)(e.h3,{id:"81-find-minimum-in-rotated-sorted-array",children:"8.1 Find Minimum in Rotated Sorted Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findMin(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > nums[right]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return nums[left];\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"82-find-minimum-in-rotated-sorted-array-ii",children:"8.2 Find Minimum in Rotated Sorted Array II"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findMin(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > nums[right]) {\n            left = mid + 1;\n        } else if (nums[mid] < nums[right]) {\n            right = mid;\n        } else {\n            right--; // Handle duplicates\n        }\n    }\n\n    return nums[left];\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"83-find-maximum-in-rotated-array",children:"8.3 Find Maximum in Rotated Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findMax(int[] nums) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] > nums[right]) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    // The minimum is at index left, so maximum is at left - 1\n    return nums[(left - 1 + nums.length) % nums.length];\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-9-search-range-problems",children:"Pattern 9: Search Range Problems"}),"\n",(0,i.jsx)(e.h3,{id:"91-find-range-of-target",children:"9.1 Find Range of Target"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int[] findRange(int[] nums, int target) {\n    int[] result = {-1, -1};\n\n    // Find first occurrence\n    result[0] = findBound(nums, target, true);\n\n    // Find last occurrence\n    result[1] = findBound(nums, target, false);\n\n    return result;\n}\n\nint findBound(int[] nums, int target, boolean findFirst) {\n    int left = 0;\n    int right = nums.length - 1;\n    int bound = -1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (nums[mid] == target) {\n            bound = mid;\n            if (findFirst) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return bound;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"92-search-for-range-with-condition",children:"9.2 Search for Range with Condition"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int[] searchRange(int[] nums, int minVal, int maxVal) {\n    int left = lowerBound(nums, minVal);\n    int right = upperBound(nums, maxVal) - 1;\n\n    if (left <= right && left < nums.length && nums[left] >= minVal) {\n        return new int[]{left, right};\n    }\n\n    return new int[]{-1, -1};\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-10-answer-search-binary-search-on-answer",children:"Pattern 10: Answer Search (Binary Search on Answer)"}),"\n",(0,i.jsx)(e.h3,{id:"101-square-root",children:"10.1 Square Root"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int mySqrt(int x) {\n    if (x < 2) return x;\n\n    long left = 1;\n    long right = x / 2;\n    long result = 0;\n\n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        long square = mid * mid;\n\n        if (square == x) {\n            return (int) mid;\n        } else if (square < x) {\n            result = mid;\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return (int) result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"102-nth-root",children:"10.2 Nth Root"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int nthRoot(int n, int m) {\n    int left = 1;\n    int right = m;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        long power = power(mid, n, m);\n\n        if (power == m) {\n            return mid;\n        } else if (power < m) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1;\n}\n\nlong power(int base, int exp, int limit) {\n    long result = 1;\n    for (int i = 0; i < exp; i++) {\n        result *= base;\n        if (result > limit) return result;\n    }\n    return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"103-koko-eating-bananas",children:"10.3 Koko Eating Bananas"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int minEatingSpeed(int[] piles, int h) {\n    int left = 1;\n    int right = Arrays.stream(piles).max().getAsInt();\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (canFinish(piles, mid, h)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n\nboolean canFinish(int[] piles, int speed, int h) {\n    int hours = 0;\n    for (int pile : piles) {\n        hours += (pile + speed - 1) / speed; // Ceiling division\n    }\n    return hours <= h;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"104-capacity-to-ship-packages",children:"10.4 Capacity to Ship Packages"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int shipWithinDays(int[] weights, int days) {\n    int left = Arrays.stream(weights).max().getAsInt();\n    int right = Arrays.stream(weights).sum();\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (canShip(weights, mid, days)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n\nboolean canShip(int[] weights, int capacity, int days) {\n    int daysNeeded = 1;\n    int currentWeight = 0;\n\n    for (int weight : weights) {\n        if (currentWeight + weight > capacity) {\n            daysNeeded++;\n            currentWeight = weight;\n        } else {\n            currentWeight += weight;\n        }\n    }\n\n    return daysNeeded <= days;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"105-split-array-largest-sum",children:"10.5 Split Array Largest Sum"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int splitArray(int[] nums, int m) {\n    int left = Arrays.stream(nums).max().getAsInt();\n    int right = Arrays.stream(nums).sum();\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (canSplit(nums, mid, m)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n\nboolean canSplit(int[] nums, int maxSum, int m) {\n    int subarrays = 1;\n    int currentSum = 0;\n\n    for (int num : nums) {\n        if (currentSum + num > maxSum) {\n            subarrays++;\n            currentSum = num;\n        } else {\n            currentSum += num;\n        }\n    }\n\n    return subarrays <= m;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"106-minimize-maximum-distance-to-gas-station",children:"10.6 Minimize Maximum Distance to Gas Station"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"double minmaxGasDist(int[] stations, int k) {\n    double left = 0;\n    double right = 0;\n\n    for (int i = 1; i < stations.length; i++) {\n        right = Math.max(right, stations[i] - stations[i - 1]);\n    }\n\n    double epsilon = 1e-6;\n\n    while (right - left > epsilon) {\n        double mid = left + (right - left) / 2;\n\n        if (canPlace(stations, k, mid)) {\n            right = mid;\n        } else {\n            left = mid;\n        }\n    }\n\n    return left;\n}\n\nboolean canPlace(int[] stations, int k, double distance) {\n    int count = 0;\n\n    for (int i = 1; i < stations.length; i++) {\n        double gap = stations[i] - stations[i - 1];\n        count += (int) (gap / distance);\n    }\n\n    return count <= k;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-11-kth-element",children:"Pattern 11: Kth Element"}),"\n",(0,i.jsx)(e.h3,{id:"111-kth-smallest-element-in-sorted-matrix",children:"11.1 Kth Smallest Element in Sorted Matrix"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int kthSmallest(int[][] matrix, int k) {\n    int n = matrix.length;\n    int left = matrix[^1_0][^1_0];\n    int right = matrix[n - 1][n - 1];\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        int count = countLessEqual(matrix, mid);\n\n        if (count < k) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n\nint countLessEqual(int[][] matrix, int target) {\n    int count = 0;\n    int row = matrix.length - 1;\n    int col = 0;\n\n    while (row >= 0 && col < matrix[^1_0].length) {\n        if (matrix[row][col] <= target) {\n            count += row + 1;\n            col++;\n        } else {\n            row--;\n        }\n    }\n\n    return count;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"112-kth-element-of-two-sorted-arrays",children:"11.2 Kth Element of Two Sorted Arrays"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int kthElement(int[] arr1, int[] arr2, int k) {\n    if (arr1.length > arr2.length) {\n        return kthElement(arr2, arr1, k);\n    }\n\n    int n1 = arr1.length;\n    int n2 = arr2.length;\n\n    int left = Math.max(0, k - n2);\n    int right = Math.min(k, n1);\n\n    while (left <= right) {\n        int cut1 = (left + right) / 2;\n        int cut2 = k - cut1;\n\n        int left1 = (cut1 == 0) ? Integer.MIN_VALUE : arr1[cut1 - 1];\n        int left2 = (cut2 == 0) ? Integer.MIN_VALUE : arr2[cut2 - 1];\n\n        int right1 = (cut1 == n1) ? Integer.MAX_VALUE : arr1[cut1];\n        int right2 = (cut2 == n2) ? Integer.MAX_VALUE : arr2[cut2];\n\n        if (left1 <= right2 && left2 <= right1) {\n            return Math.max(left1, left2);\n        } else if (left1 > right2) {\n            right = cut1 - 1;\n        } else {\n            left = cut1 + 1;\n        }\n    }\n\n    return -1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"113-find-kth-positive-missing-number",children:"11.3 Find Kth Positive Missing Number"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findKthPositive(int[] arr, int k) {\n    int left = 0;\n    int right = arr.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        int missing = arr[mid] - (mid + 1);\n\n        if (missing < k) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return left + k;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-12-median-problems",children:"Pattern 12: Median Problems"}),"\n",(0,i.jsx)(e.h3,{id:"121-median-of-two-sorted-arrays",children:"12.1 Median of Two Sorted Arrays"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    if (nums1.length > nums2.length) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n\n    int n1 = nums1.length;\n    int n2 = nums2.length;\n    int left = 0;\n    int right = n1;\n\n    while (left <= right) {\n        int cut1 = (left + right) / 2;\n        int cut2 = (n1 + n2 + 1) / 2 - cut1;\n\n        int left1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];\n        int left2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];\n\n        int right1 = (cut1 == n1) ? Integer.MAX_VALUE : nums1[cut1];\n        int right2 = (cut2 == n2) ? Integer.MAX_VALUE : nums2[cut2];\n\n        if (left1 <= right2 && left2 <= right1) {\n            if ((n1 + n2) % 2 == 0) {\n                return (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;\n            } else {\n                return Math.max(left1, left2);\n            }\n        } else if (left1 > right2) {\n            right = cut1 - 1;\n        } else {\n            left = cut1 + 1;\n        }\n    }\n\n    return 1.0;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"122-median-of-row-wise-sorted-matrix",children:"12.2 Median of Row Wise Sorted Matrix"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int median(int[][] matrix) {\n    int rows = matrix.length;\n    int cols = matrix[^1_0].length;\n\n    int min = matrix[^1_0][^1_0];\n    int max = matrix[^1_0][cols - 1];\n\n    for (int i = 0; i < rows; i++) {\n        min = Math.min(min, matrix[i][^1_0]);\n        max = Math.max(max, matrix[i][cols - 1]);\n    }\n\n    int desired = (rows * cols + 1) / 2;\n\n    while (min < max) {\n        int mid = min + (max - min) / 2;\n        int count = 0;\n\n        for (int i = 0; i < rows; i++) {\n            count += upperBound(matrix[i], mid);\n        }\n\n        if (count < desired) {\n            min = mid + 1;\n        } else {\n            max = mid;\n        }\n    }\n\n    return min;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"pattern-13-advanced-binary-search",children:"Pattern 13: Advanced Binary Search"}),"\n",(0,i.jsx)(e.h3,{id:"131-aggressive-cows",children:"13.1 Aggressive Cows"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int aggressiveCows(int[] stalls, int cows) {\n    Arrays.sort(stalls);\n\n    int left = 1;\n    int right = stalls[stalls.length - 1] - stalls[^1_0];\n    int result = 0;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n\n        if (canPlaceCows(stalls, cows, mid)) {\n            result = mid;\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return result;\n}\n\nboolean canPlaceCows(int[] stalls, int cows, int minDistance) {\n    int count = 1;\n    int lastPosition = stalls[^1_0];\n\n    for (int i = 1; i < stalls.length; i++) {\n        if (stalls[i] - lastPosition >= minDistance) {\n            count++;\n            lastPosition = stalls[i];\n            if (count >= cows) return true;\n        }\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"132-book-allocation-problem",children:"13.2 Book Allocation Problem"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int allocateBooks(int[] books, int students) {\n    if (students > books.length) return -1;\n\n    int left = Arrays.stream(books).max().getAsInt();\n    int right = Arrays.stream(books).sum();\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (canAllocate(books, students, mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n\nboolean canAllocate(int[] books, int students, int maxPages) {\n    int studentsUsed = 1;\n    int currentPages = 0;\n\n    for (int pages : books) {\n        if (currentPages + pages > maxPages) {\n            studentsUsed++;\n            currentPages = pages;\n            if (studentsUsed > students) return false;\n        } else {\n            currentPages += pages;\n        }\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"133-painters-partition-problem",children:"13.3 Painters Partition Problem"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int paintersPartition(int[] boards, int painters) {\n    int left = Arrays.stream(boards).max().getAsInt();\n    int right = Arrays.stream(boards).sum();\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n\n        if (canPaint(boards, painters, mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n\nboolean canPaint(int[] boards, int painters, int maxTime) {\n    int paintersUsed = 1;\n    int currentTime = 0;\n\n    for (int board : boards) {\n        if (currentTime + board > maxTime) {\n            paintersUsed++;\n            currentTime = board;\n            if (paintersUsed > painters) return false;\n        } else {\n            currentTime += board;\n        }\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"134-median-of-sliding-window-using-binary-search",children:"13.4 Median of Sliding Window (Using Binary Search)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"double[] medianSlidingWindow(int[] nums, int k) {\n    double[] result = new double[nums.length - k + 1];\n    List<Integer> window = new ArrayList<>();\n\n    for (int i = 0; i < nums.length; i++) {\n        // Add current element\n        insertInSortedOrder(window, nums[i]);\n\n        // Remove element going out of window\n        if (i >= k) {\n            window.remove(Integer.valueOf(nums[i - k]));\n        }\n\n        // Calculate median when window is of size k\n        if (i >= k - 1) {\n            result[i - k + 1] = getMedian(window);\n        }\n    }\n\n    return result;\n}\n\nvoid insertInSortedOrder(List<Integer> list, int val) {\n    int left = 0;\n    int right = list.size();\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (list.get(mid) < val) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    list.add(left, val);\n}\n\ndouble getMedian(List<Integer> list) {\n    int n = list.size();\n    if (n % 2 == 1) {\n        return list.get(n / 2);\n    } else {\n        return ((long) list.get(n / 2 - 1) + (long) list.get(n / 2)) / 2.0;\n    }\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"135-find-duplicate-number",children:"13.5 Find Duplicate Number"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int findDuplicate(int[] nums) {\n    int left = 1;\n    int right = nums.length - 1;\n\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        int count = 0;\n\n        // Count how many numbers <= mid\n        for (int num : nums) {\n            if (num <= mid) {\n                count++;\n            }\n        }\n\n        // If count > mid, duplicate is in [left, mid]\n        if (count > mid) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"136-find-missing-element-in-sorted-array",children:"13.6 Find Missing Element in Sorted Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"int missingElement(int[] nums, int k) {\n    int left = 0;\n    int right = nums.length - 1;\n\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        int missing = nums[mid] - nums[^1_0] - mid;\n\n        if (missing < k) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return nums[^1_0] + right + k;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"time-complexity-cheat-sheet",children:"Time Complexity Cheat Sheet"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{style:{textAlign:"left"},children:"Pattern"}),(0,i.jsx)(e.th,{style:{textAlign:"left"},children:"Time Complexity"}),(0,i.jsx)(e.th,{style:{textAlign:"left"},children:"Space Complexity"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Basic Binary Search"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log n)"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Find Bounds"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log n)"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Search in Rotated Array"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log n)"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Search in 2D Matrix"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log(m*n))"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Binary Search on Answer"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log(max-min) * f(n))"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Median of Two Arrays"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log(min(m,n)))"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"Kth Element"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(log(min(m,n)))"}),(0,i.jsx)(e.td,{style:{textAlign:"left"},children:"O(1)"})]})]})]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"binary-search-templates",children:"Binary Search Templates"}),"\n",(0,i.jsx)(e.h3,{id:"template-1-standard-binary-search",children:"Template 1: Standard Binary Search"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"while (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (nums[mid] == target) return mid;\n    else if (nums[mid] < target) left = mid + 1;\n    else right = mid - 1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"template-2-find-leftmostrightmost",children:"Template 2: Find Leftmost/Rightmost"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"// Leftmost\nwhile (left < right) {\n    int mid = left + (right - left) / 2;\n    if (condition) right = mid;\n    else left = mid + 1;\n}\n\n// Rightmost\nwhile (left < right) {\n    int mid = left + (right - left + 1) / 2;\n    if (condition) left = mid;\n    else right = mid - 1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"template-3-binary-search-on-answer",children:"Template 3: Binary Search on Answer"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"while (left < right) {\n    int mid = left + (right - left) / 2;\n    if (isPossible(mid)) right = mid;\n    else left = mid + 1;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"common-tricks--tips",children:"Common Tricks & Tips"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Overflow Prevention"}),": Use ",(0,i.jsx)(e.code,{children:"left + (right - left) / 2"})," instead of ",(0,i.jsx)(e.code,{children:"(left + right) / 2"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Template Selection"}),": Choose the right template based on the problem requirement"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Boundary Conditions"}),": Handle edge cases like empty arrays, single elements"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Monotonic Property"}),": Ensure the search space has monotonic property"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Answer Search"}),": When searching for a value in a range, binary search on the answer"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"2D Matrix"}),": Convert 2D coordinates to 1D index: ",(0,i.jsx)(e.code,{children:"row = mid / cols"}),", ",(0,i.jsx)(e.code,{children:"col = mid % cols"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Duplicates"}),": Handle duplicates by adjusting the search strategy"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Floating Point"}),": Use epsilon for floating-point comparisons"]}),"\n"]})]})}function o(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}}}]);