"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[32249],{19773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=t(74848),i=t(28453);const s={},a="Spring & Spring Boot Detailed Cheatsheet",o={id:"Spring Boot/Spring & Spring Boot Detailed Cheatsheet",title:"Spring & Spring Boot Detailed Cheatsheet",description:"Table of Contents",source:"@site/docs/Spring Boot/Spring & Spring Boot Detailed Cheatsheet.mdx",sourceDirName:"Spring Boot",slug:"/Spring Boot/Spring & Spring Boot Detailed Cheatsheet",permalink:"/docs/Spring Boot/Spring & Spring Boot Detailed Cheatsheet",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Spring Boot/Spring & Spring Boot Detailed Cheatsheet.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ResponseEntity in Spring Boot",permalink:"/docs/Spring Boot/ResponseEntity in Spring Boot"},next:{title:"Spring Boot Annotations - Complete Developer Guide",permalink:"/docs/Spring Boot/Spring Boot Annotations"}},l={},c=[{value:"<strong>Table of Contents</strong>",id:"table-of-contents",level:2},{value:"<strong>Spring Core Concepts</strong>",id:"spring-core-concepts",level:2},{value:"<strong>What is Spring Framework?</strong>",id:"what-is-spring-framework",level:3},{value:"<strong>Spring Modules:</strong>",id:"spring-modules",level:3},{value:"<strong>ApplicationContext vs BeanFactory:</strong>",id:"applicationcontext-vs-beanfactory",level:3},{value:"<strong>Dependency Injection &amp; IoC</strong>",id:"dependency-injection--ioc",level:2},{value:"<strong>Types of Dependency Injection:</strong>",id:"types-of-dependency-injection",level:3},{value:"<strong>1. Constructor Injection (Recommended)</strong>",id:"1-constructor-injection-recommended",level:4},{value:"<strong>2. Setter Injection</strong>",id:"2-setter-injection",level:4},{value:"<strong>3. Field Injection (Not Recommended)</strong>",id:"3-field-injection-not-recommended",level:4},{value:"<strong>Bean Scopes:</strong>",id:"bean-scopes",level:3},{value:"<strong>Spring Annotations</strong>",id:"spring-annotations",level:2},{value:"<strong>Core Annotations:</strong>",id:"core-annotations",level:3},{value:"<strong>Lifecycle Annotations:</strong>",id:"lifecycle-annotations",level:3},{value:"<strong>Conditional Annotations:</strong>",id:"conditional-annotations",level:3},{value:"<strong>Spring Boot Fundamentals</strong>",id:"spring-boot-fundamentals",level:2},{value:"<strong>What is Spring Boot?</strong>",id:"what-is-spring-boot",level:3},{value:"<strong>Spring Boot Application Structure:</strong>",id:"spring-boot-application-structure",level:3},{value:"<strong>Main Application Class:</strong>",id:"main-application-class",level:3},{value:"<strong>Custom Configuration:</strong>",id:"custom-configuration",level:3},{value:"<strong>Spring Boot Annotations</strong>",id:"spring-boot-annotations",level:2},{value:"<strong>Essential Spring Boot Annotations:</strong>",id:"essential-spring-boot-annotations",level:3},{value:"<strong>Configuration Properties Example:</strong>",id:"configuration-properties-example",level:3},{value:"<strong>Configuration &amp; Properties</strong>",id:"configuration--properties",level:2},{value:"<strong>Application Properties:</strong>",id:"application-properties",level:3},{value:"<strong>YAML Configuration:</strong>",id:"yaml-configuration",level:3},{value:"<strong>Profile-Specific Configuration:</strong>",id:"profile-specific-configuration",level:3},{value:"<strong>Spring MVC &amp; REST APIs</strong>",id:"spring-mvc--rest-apis",level:2},{value:"<strong>REST Controller Example:</strong>",id:"rest-controller-example",level:3},{value:"<strong>Request/Response DTOs:</strong>",id:"requestresponse-dtos",level:3},{value:"<strong>Exception Handling:</strong>",id:"exception-handling",level:3},{value:"<strong>Data Access (JPA/Hibernate)</strong>",id:"data-access-jpahibernate",level:2},{value:"<strong>Entity Definition:</strong>",id:"entity-definition",level:3},{value:"<strong>Repository Interface:</strong>",id:"repository-interface",level:3},{value:"<strong>Service Layer:</strong>",id:"service-layer",level:3},{value:"<strong>Security</strong>",id:"security",level:2},{value:"<strong>Basic Security Configuration:</strong>",id:"basic-security-configuration",level:3},{value:"<strong>JWT Implementation:</strong>",id:"jwt-implementation",level:3},{value:"<strong>Method-Level Security:</strong>",id:"method-level-security",level:3},{value:"<strong>Testing</strong>",id:"testing",level:2},{value:"<strong>Unit Testing:</strong>",id:"unit-testing",level:3},{value:"<strong>Integration Testing:</strong>",id:"integration-testing",level:3},{value:"<strong>Web Layer Testing:</strong>",id:"web-layer-testing",level:3},{value:"<strong>Actuator &amp; Monitoring</strong>",id:"actuator--monitoring",level:2},{value:"<strong>Actuator Configuration:</strong>",id:"actuator-configuration",level:3},{value:"<strong>Custom Health Indicator:</strong>",id:"custom-health-indicator",level:3},{value:"<strong>Custom Metrics:</strong>",id:"custom-metrics",level:3},{value:"<strong>Best Practices</strong>",id:"best-practices",level:2},{value:"<strong>1. Project Structure:</strong>",id:"1-project-structure",level:3},{value:"<strong>2. Configuration Management:</strong>",id:"2-configuration-management",level:3},{value:"<strong>3. Exception Handling:</strong>",id:"3-exception-handling",level:3},{value:"<strong>4. Validation:</strong>",id:"4-validation",level:3},{value:"<strong>5. Logging:</strong>",id:"5-logging",level:3},{value:"<strong>6. Performance Tips:</strong>",id:"6-performance-tips",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"spring--spring-boot-detailed-cheatsheet",children:"Spring & Spring Boot Detailed Cheatsheet"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:(0,r.jsx)(n.strong,{children:"Table of Contents"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#spring-core-concepts",children:"Spring Core Concepts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#dependency-injection--ioc",children:"Dependency Injection & IoC"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#spring-annotations",children:"Spring Annotations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#spring-boot-fundamentals",children:"Spring Boot Fundamentals"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#spring-boot-annotations",children:"Spring Boot Annotations"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#configuration--properties",children:"Configuration & Properties"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#spring-mvc--rest-apis",children:"Spring MVC & REST APIs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#data-access-jpahibernate",children:"Data Access (JPA/Hibernate)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security",children:"Security"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#testing",children:"Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#actuator--monitoring",children:"Actuator & Monitoring"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"spring-core-concepts",children:(0,r.jsx)(n.strong,{children:"Spring Core Concepts"})}),"\n",(0,r.jsx)(n.h3,{id:"what-is-spring-framework",children:(0,r.jsx)(n.strong,{children:"What is Spring Framework?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lightweight"})," Java framework for enterprise applications"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inversion of Control (IoC)"})," and ",(0,r.jsx)(n.strong,{children:"Dependency Injection (DI)"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Aspect-Oriented Programming (AOP)"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modular architecture"})," with various modules"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"spring-modules",children:(0,r.jsx)(n.strong,{children:"Spring Modules:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Core"}),": IoC Container, Beans, Context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring MVC"}),": Web framework for building REST APIs and web apps"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Data"}),": Data access abstraction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Security"}),": Authentication and authorization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Boot"}),": Auto-configuration and convention over configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"applicationcontext-vs-beanfactory",children:(0,r.jsx)(n.strong,{children:"ApplicationContext vs BeanFactory:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// BeanFactory - Lazy initialization\nBeanFactory factory = new XmlBeanFactory(new FileSystemResource("beans.xml"));\n\n// ApplicationContext - Eager initialization (recommended)\nApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");\nApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dependency-injection--ioc",children:(0,r.jsx)(n.strong,{children:"Dependency Injection & IoC"})}),"\n",(0,r.jsx)(n.h3,{id:"types-of-dependency-injection",children:(0,r.jsx)(n.strong,{children:"Types of Dependency Injection:"})}),"\n",(0,r.jsx)(n.h4,{id:"1-constructor-injection-recommended",children:(0,r.jsx)(n.strong,{children:"1. Constructor Injection (Recommended)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class OrderService {\n    private final PaymentService paymentService;\n    private final EmailService emailService;\n\n    // Constructor injection - ensures immutability\n    public OrderService(PaymentService paymentService, EmailService emailService) {\n        this.paymentService = paymentService;\n        this.emailService = emailService;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"2-setter-injection",children:(0,r.jsx)(n.strong,{children:"2. Setter Injection"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class OrderService {\n    private PaymentService paymentService;\n\n    @Autowired\n    public void setPaymentService(PaymentService paymentService) {\n        this.paymentService = paymentService;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-field-injection-not-recommended",children:(0,r.jsx)(n.strong,{children:"3. Field Injection (Not Recommended)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class OrderService {\n    @Autowired\n    private PaymentService paymentService; // Avoid this approach\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bean-scopes",children:(0,r.jsx)(n.strong,{children:"Bean Scopes:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\n@Scope("singleton") // Default - single instance per container\npublic class SingletonBean { }\n\n@Component\n@Scope("prototype") // New instance every time\npublic class PrototypeBean { }\n\n@Component\n@Scope("request") // Web - new instance per HTTP request\npublic class RequestBean { }\n\n@Component\n@Scope("session") // Web - new instance per HTTP session\npublic class SessionBean { }\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"spring-annotations",children:(0,r.jsx)(n.strong,{children:"Spring Annotations"})}),"\n",(0,r.jsx)(n.h3,{id:"core-annotations",children:(0,r.jsx)(n.strong,{children:"Core Annotations:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Component scanning\n@Component          // Generic stereotype\n@Service            // Business logic layer\n@Repository         // Data access layer\n@Controller         // Presentation layer (Spring MVC)\n@RestController     // @Controller + @ResponseBody\n\n// Dependency Injection\n@Autowired          // Automatic dependency injection\n@Qualifier("name")  // Specify bean name when multiple candidates\n@Primary            // Preferred bean when multiple candidates\n@Value("${prop}")   // Inject property values\n\n// Configuration\n@Configuration      // Indicates configuration class\n@Bean              // Method produces a bean\n@ComponentScan     // Enable component scanning\n@Import            // Import other configuration classes\n'})}),"\n",(0,r.jsx)(n.h3,{id:"lifecycle-annotations",children:(0,r.jsx)(n.strong,{children:"Lifecycle Annotations:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class DatabaseConnection {\n\n    @PostConstruct  // Called after dependency injection\n    public void init() {\n        // Initialize resources\n    }\n\n    @PreDestroy    // Called before bean destruction\n    public void cleanup() {\n        // Clean up resources\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-annotations",children:(0,r.jsx)(n.strong,{children:"Conditional Annotations:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ConditionalOnProperty(name = "app.feature.enabled", havingValue = "true")\n@ConditionalOnClass(DataSource.class)\n@ConditionalOnMissingBean(DataSource.class)\n@ConditionalOnProfile("production")\n@Configuration\npublic class FeatureConfiguration { }\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"spring-boot-fundamentals",children:(0,r.jsx)(n.strong,{children:"Spring Boot Fundamentals"})}),"\n",(0,r.jsx)(n.h3,{id:"what-is-spring-boot",children:(0,r.jsx)(n.strong,{children:"What is Spring Boot?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Opinionated"})," framework built on top of Spring"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Auto-configuration"})," based on classpath dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Embedded servers"})," (Tomcat, Jetty, Undertow)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production-ready"})," features out of the box"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Convention over configuration"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"spring-boot-application-structure",children:(0,r.jsx)(n.strong,{children:"Spring Boot Application Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 main/\n\u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2514\u2500\u2500 com/example/myapp/\n\u2502   \u2502       \u251c\u2500\u2500 MyApplication.java          # Main class\n\u2502   \u2502       \u251c\u2500\u2500 controller/                 # REST controllers\n\u2502   \u2502       \u251c\u2500\u2500 service/                    # Business logic\n\u2502   \u2502       \u251c\u2500\u2500 repository/                 # Data access\n\u2502   \u2502       \u251c\u2500\u2500 model/                      # Entities/DTOs\n\u2502   \u2502       \u2514\u2500\u2500 config/                     # Configuration classes\n\u2502   \u2514\u2500\u2500 resources/\n\u2502       \u251c\u2500\u2500 application.properties          # Configuration\n\u2502       \u251c\u2500\u2500 application.yml                 # YAML configuration\n\u2502       \u2514\u2500\u2500 static/                         # Static resources\n\u2514\u2500\u2500 test/                                   # Test classes\n"})}),"\n",(0,r.jsx)(n.h3,{id:"main-application-class",children:(0,r.jsx)(n.strong,{children:"Main Application Class:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication  // Equivalent to @Configuration + @EnableAutoConfiguration + @ComponentScan\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-configuration",children:(0,r.jsx)(n.strong,{children:"Custom Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication app = new SpringApplication(MyApplication.class);\n        app.setBannerMode(Banner.Mode.OFF);  // Disable banner\n        app.setDefaultProperties(Collections.singletonMap("server.port", "8081"));\n        app.run(args);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"spring-boot-annotations",children:(0,r.jsx)(n.strong,{children:"Spring Boot Annotations"})}),"\n",(0,r.jsx)(n.h3,{id:"essential-spring-boot-annotations",children:(0,r.jsx)(n.strong,{children:"Essential Spring Boot Annotations:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Application\n@SpringBootApplication\n@EnableAutoConfiguration\n@SpringBootConfiguration\n\n// Configuration\n@ConfigurationProperties(prefix = "app")\n@EnableConfigurationProperties(MyProperties.class)\n\n// Web\n@RestController\n@RequestMapping("/api/v1")\n@GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping\n\n// Validation\n@Valid\n@NotNull, @NotEmpty, @NotBlank\n@Size(min = 1, max = 100)\n@Email, @Pattern\n\n// Testing\n@SpringBootTest\n@WebMvcTest\n@DataJpaTest\n@MockBean\n@TestPropertySource\n'})}),"\n",(0,r.jsx)(n.h3,{id:"configuration-properties-example",children:(0,r.jsx)(n.strong,{children:"Configuration Properties Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "app")\n@Component\npublic class AppProperties {\n    private String name;\n    private String version;\n    private Database database = new Database();\n\n    // getters and setters\n\n    public static class Database {\n        private String url;\n        private String username;\n        // getters and setters\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuration--properties",children:(0,r.jsx)(n.strong,{children:"Configuration & Properties"})}),"\n",(0,r.jsx)(n.h3,{id:"application-properties",children:(0,r.jsx)(n.strong,{children:"Application Properties:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# application.properties\n\n# Server Configuration\nserver.port=8080\nserver.servlet.context-path=/api\n\n# Database Configuration\nspring.datasource.url=jdbc:mysql://localhost:3306/mydb\nspring.datasource.username=root\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\n# JPA/Hibernate\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\n\n# Logging\nlogging.level.com.example=DEBUG\nlogging.level.org.springframework.web=DEBUG\nlogging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n\n\n# Actuator\nmanagement.endpoints.web.exposure.include=health,info,metrics\nmanagement.endpoint.health.show-details=always\n"})}),"\n",(0,r.jsx)(n.h3,{id:"yaml-configuration",children:(0,r.jsx)(n.strong,{children:"YAML Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nserver:\n  port: 8080\n  servlet:\n    context-path: /api\n\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/mydb\n    username: root\n    password: password\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n\napp:\n  name: My Application\n  version: 1.0.0\n  database:\n    url: ${spring.datasource.url}\n    username: ${spring.datasource.username}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"profile-specific-configuration",children:(0,r.jsx)(n.strong,{children:"Profile-Specific Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nspring:\n  profiles:\n    active: development\n\n---\nspring:\n  profiles: development\n  datasource:\n    url: jdbc:h2:mem:devdb\n---\nspring:\n  profiles: production\n  datasource:\n    url: jdbc:mysql://prod-server:3306/proddb\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"spring-mvc--rest-apis",children:(0,r.jsx)(n.strong,{children:"Spring MVC & REST APIs"})}),"\n",(0,r.jsx)(n.h3,{id:"rest-controller-example",children:(0,r.jsx)(n.strong,{children:"REST Controller Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/v1/users")\n@Validated\npublic class UserController {\n\n    private final UserService userService;\n\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<UserDto>> getAllUsers(\n            @RequestParam(defaultValue = "0") int page,\n            @RequestParam(defaultValue = "10") int size) {\n        List<UserDto> users = userService.getAllUsers(page, size);\n        return ResponseEntity.ok(users);\n    }\n\n    @GetMapping("/{id}")\n    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {\n        UserDto user = userService.getUserById(id);\n        return ResponseEntity.ok(user);\n    }\n\n    @PostMapping\n    public ResponseEntity<UserDto> createUser(@Valid @RequestBody CreateUserRequest request) {\n        UserDto user = userService.createUser(request);\n        return ResponseEntity.status(HttpStatus.CREATED).body(user);\n    }\n\n    @PutMapping("/{id}")\n    public ResponseEntity<UserDto> updateUser(\n            @PathVariable Long id,\n            @Valid @RequestBody UpdateUserRequest request) {\n        UserDto user = userService.updateUser(id, request);\n        return ResponseEntity.ok(user);\n    }\n\n    @DeleteMapping("/{id}")\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {\n        userService.deleteUser(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"requestresponse-dtos",children:(0,r.jsx)(n.strong,{children:"Request/Response DTOs:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Request DTO\npublic class CreateUserRequest {\n    @NotBlank(message = "Name is required")\n    @Size(min = 2, max = 50, message = "Name must be between 2 and 50 characters")\n    private String name;\n\n    @Email(message = "Email should be valid")\n    @NotBlank(message = "Email is required")\n    private String email;\n\n    // getters and setters\n}\n\n// Response DTO\npublic class UserDto {\n    private Long id;\n    private String name;\n    private String email;\n    private LocalDateTime createdAt;\n\n    // getters and setters\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"exception-handling",children:(0,r.jsx)(n.strong,{children:"Exception Handling:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(UserNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {\n        ErrorResponse error = new ErrorResponse("USER_NOT_FOUND", ex.getMessage());\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<ErrorResponse> handleValidationErrors(MethodArgumentNotValidException ex) {\n        Map<String, String> errors = new HashMap<>();\n        ex.getBindingResult().getFieldErrors().forEach(error ->\n            errors.put(error.getField(), error.getDefaultMessage()));\n\n        ErrorResponse error = new ErrorResponse("VALIDATION_ERROR", "Invalid input", errors);\n        return ResponseEntity.badRequest().body(error);\n    }\n}\n\npublic class ErrorResponse {\n    private String code;\n    private String message;\n    private Map<String, String> details;\n\n    // constructors, getters, and setters\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"data-access-jpahibernate",children:(0,r.jsx)(n.strong,{children:"Data Access (JPA/Hibernate)"})}),"\n",(0,r.jsx)(n.h3,{id:"entity-definition",children:(0,r.jsx)(n.strong,{children:"Entity Definition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "users")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = "name", nullable = false, length = 100)\n    private String name;\n\n    @Column(name = "email", unique = true, nullable = false)\n    private String email;\n\n    @CreationTimestamp\n    @Column(name = "created_at")\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    @Column(name = "updated_at")\n    private LocalDateTime updatedAt;\n\n    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List<Order> orders = new ArrayList<>();\n\n    // constructors, getters, and setters\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"repository-interface",children:(0,r.jsx)(n.strong,{children:"Repository Interface:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n    // Query methods by naming convention\n    Optional<User> findByEmail(String email);\n    List<User> findByNameContaining(String name);\n    List<User> findByCreatedAtBetween(LocalDateTime start, LocalDateTime end);\n\n    // Custom queries\n    @Query("SELECT u FROM User u WHERE u.email = ?1")\n    Optional<User> findUserByEmail(String email);\n\n    @Query(value = "SELECT * FROM users WHERE name LIKE %?1%", nativeQuery = true)\n    List<User> findUsersByNameNative(String name);\n\n    @Modifying\n    @Query("UPDATE User u SET u.name = ?2 WHERE u.id = ?1")\n    int updateUserName(Long id, String name);\n\n    // Pagination and sorting\n    Page<User> findByNameContaining(String name, Pageable pageable);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"service-layer",children:(0,r.jsx)(n.strong,{children:"Service Layer:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\n@Transactional\npublic class UserService {\n\n    private final UserRepository userRepository;\n    private final ModelMapper modelMapper;\n\n    public UserService(UserRepository userRepository, ModelMapper modelMapper) {\n        this.userRepository = userRepository;\n        this.modelMapper = modelMapper;\n    }\n\n    @Transactional(readOnly = true)\n    public List<UserDto> getAllUsers(int page, int size) {\n        Pageable pageable = PageRequest.of(page, size, Sort.by("name"));\n        Page<User> userPage = userRepository.findAll(pageable);\n\n        return userPage.getContent()\n                .stream()\n                .map(user -> modelMapper.map(user, UserDto.class))\n                .collect(Collectors.toList());\n    }\n\n    @Transactional(readOnly = true)\n    public UserDto getUserById(Long id) {\n        User user = userRepository.findById(id)\n                .orElseThrow(() -> new UserNotFoundException("User not found with id: " + id));\n\n        return modelMapper.map(user, UserDto.class);\n    }\n\n    public UserDto createUser(CreateUserRequest request) {\n        User user = modelMapper.map(request, User.class);\n        User savedUser = userRepository.save(user);\n        return modelMapper.map(savedUser, UserDto.class);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"security",children:(0,r.jsx)(n.strong,{children:"Security"})}),"\n",(0,r.jsx)(n.h3,{id:"basic-security-configuration",children:(0,r.jsx)(n.strong,{children:"Basic Security Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig {\n\n    private final UserDetailsService userDetailsService;\n    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;\n    private final JwtRequestFilter jwtRequestFilter;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(\n            AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http.csrf().disable()\n                .authorizeHttpRequests(authz -> authz\n                        .requestMatchers("/api/auth/**").permitAll()\n                        .requestMatchers(HttpMethod.GET, "/api/public/**").permitAll()\n                        .requestMatchers("/api/admin/**").hasRole("ADMIN")\n                        .anyRequest().authenticated()\n                )\n                .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)\n                .and()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n\n        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"jwt-implementation",children:(0,r.jsx)(n.strong,{children:"JWT Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class JwtUtil {\n\n    private final String jwtSecret = "mySecretKey";\n    private final int jwtExpiration = 86400; // 24 hours\n\n    public String generateToken(UserDetails userDetails) {\n        Map<String, Object> claims = new HashMap<>();\n        return createToken(claims, userDetails.getUsername());\n    }\n\n    private String createToken(Map<String, Object> claims, String subject) {\n        return Jwts.builder()\n                .setClaims(claims)\n                .setSubject(subject)\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + jwtExpiration * 1000))\n                .signWith(SignatureAlgorithm.HS512, jwtSecret)\n                .compact();\n    }\n\n    public Boolean validateToken(String token, UserDetails userDetails) {\n        final String username = getUsernameFromToken(token);\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"method-level-security",children:(0,r.jsx)(n.strong,{children:"Method-Level Security:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\npublic class UserService {\n\n    @PreAuthorize(\"hasRole('ADMIN') or #id == authentication.principal.id\")\n    public UserDto getUserById(Long id) {\n        // Implementation\n    }\n\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public void deleteUser(Long id) {\n        // Implementation\n    }\n\n    @PostAuthorize(\"hasRole('ADMIN') or returnObject.username == authentication.name\")\n    public UserDto updateUser(Long id, UpdateUserRequest request) {\n        // Implementation\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:(0,r.jsx)(n.strong,{children:"Testing"})}),"\n",(0,r.jsx)(n.h3,{id:"unit-testing",children:(0,r.jsx)(n.strong,{children:"Unit Testing:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private ModelMapper modelMapper;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void shouldReturnUserWhenValidId() {\n        // Given\n        Long userId = 1L;\n        User user = new User();\n        user.setId(userId);\n        user.setName("John Doe");\n\n        UserDto expectedDto = new UserDto();\n        expectedDto.setId(userId);\n        expectedDto.setName("John Doe");\n\n        when(userRepository.findById(userId)).thenReturn(Optional.of(user));\n        when(modelMapper.map(user, UserDto.class)).thenReturn(expectedDto);\n\n        // When\n        UserDto result = userService.getUserById(userId);\n\n        // Then\n        assertThat(result).isNotNull();\n        assertThat(result.getId()).isEqualTo(userId);\n        assertThat(result.getName()).isEqualTo("John Doe");\n\n        verify(userRepository).findById(userId);\n        verify(modelMapper).map(user, UserDto.class);\n    }\n\n    @Test\n    void shouldThrowExceptionWhenUserNotFound() {\n        // Given\n        Long userId = 1L;\n        when(userRepository.findById(userId)).thenReturn(Optional.empty());\n\n        // When & Then\n        assertThatThrownBy(() -> userService.getUserById(userId))\n                .isInstanceOf(UserNotFoundException.class)\n                .hasMessage("User not found with id: " + userId);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"integration-testing",children:(0,r.jsx)(n.strong,{children:"Integration Testing:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@Testcontainers\nclass UserControllerIntegrationTest {\n\n    @Container\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:13")\n            .withDatabaseName("testdb")\n            .withUsername("test")\n            .withPassword("test");\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldCreateUserSuccessfully() {\n        // Given\n        CreateUserRequest request = new CreateUserRequest();\n        request.setName("John Doe");\n        request.setEmail("john@example.com");\n\n        // When\n        ResponseEntity<UserDto> response = restTemplate.postForEntity(\n                "/api/v1/users",\n                request,\n                UserDto.class\n        );\n\n        // Then\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n        assertThat(response.getBody()).isNotNull();\n        assertThat(response.getBody().getName()).isEqualTo("John Doe");\n        assertThat(response.getBody().getEmail()).isEqualTo("john@example.com");\n\n        // Verify in database\n        Optional<User> savedUser = userRepository.findByEmail("john@example.com");\n        assertThat(savedUser).isPresent();\n        assertThat(savedUser.get().getName()).isEqualTo("John Doe");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"web-layer-testing",children:(0,r.jsx)(n.strong,{children:"Web Layer Testing:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\nclass UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Test\n    void shouldReturnUserWhenValidId() throws Exception {\n        // Given\n        Long userId = 1L;\n        UserDto userDto = new UserDto();\n        userDto.setId(userId);\n        userDto.setName("John Doe");\n        userDto.setEmail("john@example.com");\n\n        when(userService.getUserById(userId)).thenReturn(userDto);\n\n        // When & Then\n        mockMvc.perform(get("/api/v1/users/{id}", userId))\n                .andExpect(status().isOk())\n                .andExpect(jsonPath("$.id").value(userId))\n                .andExpect(jsonPath("$.name").value("John Doe"))\n                .andExpect(jsonPath("$.email").value("john@example.com"));\n\n        verify(userService).getUserById(userId);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"actuator--monitoring",children:(0,r.jsx)(n.strong,{children:"Actuator & Monitoring"})}),"\n",(0,r.jsx)(n.h3,{id:"actuator-configuration",children:(0,r.jsx)(n.strong,{children:"Actuator Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Enable actuator endpoints\nmanagement.endpoints.web.exposure.include=health,info,metrics,prometheus,loggers\nmanagement.endpoint.health.show-details=always\nmanagement.endpoint.health.show-components=always\n\n# Custom info\ninfo.app.name=My Spring Boot App\ninfo.app.version=1.0.0\ninfo.app.description=Sample Spring Boot Application\n\n# Metrics\nmanagement.metrics.export.prometheus.enabled=true\nmanagement.metrics.distribution.percentiles-histogram.http.server.requests=true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-health-indicator",children:(0,r.jsx)(n.strong,{children:"Custom Health Indicator:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class CustomHealthIndicator implements HealthIndicator {\n\n    @Override\n    public Health health() {\n        // Custom health check logic\n        boolean databaseUp = checkDatabaseConnection();\n        boolean externalServiceUp = checkExternalService();\n\n        if (databaseUp && externalServiceUp) {\n            return Health.up()\n                    .withDetail("database", "Available")\n                    .withDetail("externalService", "Available")\n                    .build();\n        } else {\n            return Health.down()\n                    .withDetail("database", databaseUp ? "Available" : "Unavailable")\n                    .withDetail("externalService", externalServiceUp ? "Available" : "Unavailable")\n                    .build();\n        }\n    }\n\n    private boolean checkDatabaseConnection() {\n        // Database connectivity check\n        return true;\n    }\n\n    private boolean checkExternalService() {\n        // External service check\n        return true;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-metrics",children:(0,r.jsx)(n.strong,{children:"Custom Metrics:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class UserService {\n\n    private final Counter userCreationCounter;\n    private final Timer userRetrievalTimer;\n\n    public UserService(MeterRegistry meterRegistry) {\n        this.userCreationCounter = Counter.builder("users.created")\n                .description("Number of users created")\n                .register(meterRegistry);\n\n        this.userRetrievalTimer = Timer.builder("users.retrieval.time")\n                .description("Time taken to retrieve user")\n                .register(meterRegistry);\n    }\n\n    public UserDto createUser(CreateUserRequest request) {\n        userCreationCounter.increment();\n        // User creation logic\n    }\n\n    public UserDto getUserById(Long id) {\n        return userRetrievalTimer.recordCallable(() -> {\n            // User retrieval logic\n            return userDto;\n        });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:(0,r.jsx)(n.strong,{children:"Best Practices"})}),"\n",(0,r.jsx)(n.h3,{id:"1-project-structure",children:(0,r.jsx)(n.strong,{children:"1. Project Structure:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"com.example.myapp/\n\u251c\u2500\u2500 MyApplication.java              # Main application class\n\u251c\u2500\u2500 config/                         # Configuration classes\n\u251c\u2500\u2500 controller/                     # REST controllers\n\u251c\u2500\u2500 service/                        # Business logic\n\u251c\u2500\u2500 repository/                     # Data access\n\u251c\u2500\u2500 model/\n\u2502   \u251c\u2500\u2500 entity/                     # JPA entities\n\u2502   \u251c\u2500\u2500 dto/                        # Data transfer objects\n\u2502   \u2514\u2500\u2500 request/                    # Request objects\n\u251c\u2500\u2500 exception/                      # Custom exceptions\n\u251c\u2500\u2500 security/                       # Security components\n\u2514\u2500\u2500 util/                          # Utility classes\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-configuration-management",children:(0,r.jsx)(n.strong,{children:"2. Configuration Management:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use @ConfigurationProperties instead of @Value for grouped properties\n@ConfigurationProperties(prefix = "app.database")\n@Component\npublic class DatabaseProperties {\n    private String url;\n    private String username;\n    private String password;\n    private int maxConnections = 20;\n\n    // getters and setters\n}\n\n// Use profiles for environment-specific configuration\n@Profile("production")\n@Configuration\npublic class ProductionConfig {\n    // Production-specific beans\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-exception-handling",children:(0,r.jsx)(n.strong,{children:"3. Exception Handling:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Create custom exceptions\npublic class UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n        super(message);\n    }\n}\n\n// Use @ControllerAdvice for global exception handling\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    // Exception handlers\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-validation",children:(0,r.jsx)(n.strong,{children:"4. Validation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use Bean Validation annotations\npublic class CreateUserRequest {\n    @NotBlank(message = "Name is required")\n    @Size(min = 2, max = 50)\n    private String name;\n\n    @Email(message = "Invalid email format")\n    @NotBlank(message = "Email is required")\n    private String email;\n}\n\n// Custom validation\n@Target({ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = UniqueEmailValidator.class)\npublic @interface UniqueEmail {\n    String message() default "Email already exists";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"5-logging",children:(0,r.jsx)(n.strong,{children:"5. Logging:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class UserService {\n    private static final Logger logger = LoggerFactory.getLogger(UserService.class);\n\n    public UserDto createUser(CreateUserRequest request) {\n        logger.info("Creating user with email: {}", request.getEmail());\n\n        try {\n            // User creation logic\n            logger.info("User created successfully with id: {}", user.getId());\n            return userDto;\n        } catch (Exception ex) {\n            logger.error("Failed to create user with email: {}", request.getEmail(), ex);\n            throw ex;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6-performance-tips",children:(0,r.jsx)(n.strong,{children:"6. Performance Tips:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use @Transactional appropriately\n@Service\n@Transactional\npublic class UserService {\n\n    @Transactional(readOnly = true)  // For read operations\n    public UserDto getUserById(Long id) {\n        // Read operation\n    }\n\n    @Transactional(propagation = Propagation.REQUIRES_NEW)  // For independent transactions\n    public void auditUserAction(String action) {\n        // Audit operation\n    }\n}\n\n// Use caching\n@Service\npublic class UserService {\n\n    @Cacheable("users")\n    public UserDto getUserById(Long id) {\n        // This method result will be cached\n    }\n\n    @CacheEvict("users")\n    public void deleteUser(Long id) {\n        // This will evict the cache\n    }\n}\n\n// Enable caching in main class\n@SpringBootApplication\n@EnableCaching\npublic class MyApplication {\n    // Main method\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);