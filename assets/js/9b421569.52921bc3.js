"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[6221],{8297:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=r(74848),t=r(28453);const i={},l="Full-Text Search & Inverted Index",c={id:"Database/Full-Text Search & Inverted Index",title:"Full-Text Search & Inverted Index",description:"What is Full-Text Search?",source:"@site/docs/Database/Full-Text Search & Inverted Index.mdx",sourceDirName:"Database",slug:"/Database/Full-Text Search & Inverted Index",permalink:"/docs/Database/Full-Text Search & Inverted Index",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Database/Full-Text Search & Inverted Index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL Query Optimization Guide",permalink:"/docs/Database/DB Query Optimization"},next:{title:"Liquibase with Spring Boot",permalink:"/docs/Database/Liquibase with Spring Boot"}},a={},d=[{value:"What is Full-Text Search?",id:"what-is-full-text-search",level:2},{value:"The Inverted Index",id:"the-inverted-index",level:2},{value:"Concept",id:"concept",level:3},{value:"How It Works Underneath",id:"how-it-works-underneath",level:3},{value:"Storage Structure",id:"storage-structure",level:3},{value:"MySQL Full-Text Search",id:"mysql-full-text-search",level:2},{value:"Setup",id:"setup",level:3},{value:"Inserting Data",id:"inserting-data",level:3},{value:"Search Modes",id:"search-modes",level:3},{value:"1. Natural Language Mode (Default)",id:"1-natural-language-mode-default",level:4},{value:"2. Boolean Mode",id:"2-boolean-mode",level:4},{value:"3. Query Expansion Mode",id:"3-query-expansion-mode",level:4},{value:"Configuration",id:"configuration",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"PostgreSQL Full-Text Search",id:"postgresql-full-text-search",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Using tsvector and tsquery",id:"using-tsvector-and-tsquery",level:3},{value:"Without Index (Slower)",id:"without-index-slower",level:4},{value:"With Computed Column (Better)",id:"with-computed-column-better",level:4},{value:"Search Operators",id:"search-operators",level:3},{value:"Helper Functions",id:"helper-functions",level:3},{value:"Ranking and Weights",id:"ranking-and-weights",level:3},{value:"Highlighting Results",id:"highlighting-results",level:3},{value:"Language Support",id:"language-support",level:3},{value:"Index Types",id:"index-types",level:3},{value:"Performance Comparison Example",id:"performance-comparison-example",level:2},{value:"Test Data",id:"test-data",level:3},{value:"Query Performance",id:"query-performance",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"MySQL",id:"mysql",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"General",id:"general",level:3},{value:"Real-World Example: Blog Search",id:"real-world-example-blog-search",level:2},{value:"PostgreSQL Implementation",id:"postgresql-implementation",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"full-text-search--inverted-index",children:"Full-Text Search & Inverted Index"})}),"\n",(0,s.jsx)(n.h2,{id:"what-is-full-text-search",children:"What is Full-Text Search?"}),"\n",(0,s.jsxs)(n.p,{children:["Full-text search (FTS) is a technique for searching text within documents or database fields. Unlike simple ",(0,s.jsx)(n.code,{children:"LIKE"})," queries, FTS provides:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relevance ranking"})," - Results ordered by how well they match"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Natural language processing"})," - Handles stemming, stop words, synonyms"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"})," - Optimized for large text datasets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Advanced queries"})," - Boolean operators, phrase matching, proximity search"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"the-inverted-index",children:"The Inverted Index"}),"\n",(0,s.jsx)(n.h3,{id:"concept",children:"Concept"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"inverted index"})," is the core data structure behind full-text search. It maps terms (words) to their locations in documents."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Normal Index (Forward Index):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Document 1 \u2192 "The quick brown fox"\nDocument 2 \u2192 "The lazy dog sleeps"\nDocument 3 \u2192 "Quick brown dogs run"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Inverted Index:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"quick"  \u2192 [Doc 1, Doc 3]\n"brown"  \u2192 [Doc 1, Doc 3]\n"fox"    \u2192 [Doc 1]\n"lazy"   \u2192 [Doc 2]\n"dog"    \u2192 [Doc 2, Doc 3]\n"sleeps" \u2192 [Doc 2]\n"run"    \u2192 [Doc 3]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works-underneath",children:"How It Works Underneath"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tokenization"}),": Break text into terms (words)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"The Quick Brown Fox!" \u2192 ["the", "quick", "brown", "fox"]\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Normalization"}),": Convert to lowercase, remove punctuation"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["the", "quick", "brown", "fox"] \u2192 ["the", "quick", "brown", "fox"]\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stop Words Removal"}),": Remove common words"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["the", "quick", "brown", "fox"] \u2192 ["quick", "brown", "fox"]\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stemming"}),": Reduce words to root form"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'["running", "runs", "ran"] \u2192 ["run", "run", "run"]\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Index Building"}),": Create term \u2192 document mappings"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Term: "quick" \u2192 Posting List: [(doc_id: 1, position: 1), (doc_id: 3, position: 0)]\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"storage-structure",children:"Storage Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Term     \u2502        Posting List              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   "quick"   \u2502 [(doc:1, pos:[1]), (doc:3, ...)] \u2502\n\u2502   "brown"   \u2502 [(doc:1, pos:[2]), (doc:3, ...)] \u2502\n\u2502   "fox"     \u2502 [(doc:1, pos:[3])]               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"mysql-full-text-search",children:"MySQL Full-Text Search"}),"\n",(0,s.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,s.jsxs)(n.p,{children:["MySQL supports FTS on ",(0,s.jsx)(n.code,{children:"InnoDB"})," and ",(0,s.jsx)(n.code,{children:"MyISAM"})," tables with ",(0,s.jsx)(n.code,{children:"FULLTEXT"})," indexes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Create table with FTS\nCREATE TABLE articles (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    title VARCHAR(200),\n    body TEXT,\n    FULLTEXT KEY idx_title_body (title, body)\n) ENGINE=InnoDB;\n\n-- Add FULLTEXT index to existing table\nALTER TABLE articles\nADD FULLTEXT INDEX idx_content (title, body);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"inserting-data",children:"Inserting Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO articles (title, body) VALUES\n('MySQL Tutorial', 'This tutorial teaches you how to use MySQL full-text search effectively'),\n('PostgreSQL Guide', 'PostgreSQL offers powerful full-text search capabilities with GIN indexes'),\n('Database Indexing', 'Understanding inverted indexes is crucial for search performance'),\n('Quick Brown Fox', 'The quick brown fox jumps over the lazy dog');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"search-modes",children:"Search Modes"}),"\n",(0,s.jsx)(n.h4,{id:"1-natural-language-mode-default",children:"1. Natural Language Mode (Default)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Basic search\nSELECT id, title,\n       MATCH(title, body) AGAINST('MySQL search') AS relevance\nFROM articles\nWHERE MATCH(title, body) AGAINST('MySQL search')\nORDER BY relevance DESC;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatically removes stop words (the, is, a, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Words appearing in >50% of rows are treated as stop words"}),"\n",(0,s.jsx)(n.li,{children:"Returns relevance score (higher = better match)"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"2-boolean-mode",children:"2. Boolean Mode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'-- Must contain "MySQL" AND "search"\nSELECT * FROM articles\nWHERE MATCH(title, body) AGAINST(\'+MySQL +search\' IN BOOLEAN MODE);\n\n-- Must contain "MySQL" but NOT "PostgreSQL"\nSELECT * FROM articles\nWHERE MATCH(title, body) AGAINST(\'+MySQL -PostgreSQL\' IN BOOLEAN MODE);\n\n-- Must contain "MySQL" OR "database"\nSELECT * FROM articles\nWHERE MATCH(title, body) AGAINST(\'MySQL database\' IN BOOLEAN MODE);\n\n-- Phrase search\nSELECT * FROM articles\nWHERE MATCH(title, body) AGAINST(\'"full-text search"\' IN BOOLEAN MODE);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Boolean operators:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"+"})," Must include term"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"-"})," Must exclude term"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:">"})," Increase relevance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"<"})," Decrease relevance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*"})," Wildcard (e.g., ",(0,s.jsx)(n.code,{children:"search*"}),' matches "searching", "searches")']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"..."'})," Exact phrase"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"()"})," Grouping"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"3-query-expansion-mode",children:"3. Query Expansion Mode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Finds related terms automatically\nSELECT * FROM articles\nWHERE MATCH(title, body)\nAGAINST('database' WITH QUERY EXPANSION);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Performs initial search"}),"\n",(0,s.jsx)(n.li,{children:"Finds most relevant documents"}),"\n",(0,s.jsx)(n.li,{children:"Extracts related terms from those documents"}),"\n",(0,s.jsx)(n.li,{children:"Performs second search with expanded terms"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Minimum word length (default: 4 for InnoDB, 3 for MyISAM)\nSET GLOBAL innodb_ft_min_token_size = 3;\n\n-- Maximum word length\nSET GLOBAL innodb_ft_max_token_size = 84;\n\n-- Stop words\nSET GLOBAL innodb_ft_enable_stopword = ON;\n\n-- Requires restart\n-- Add to my.cnf:\n[mysqld]\ninnodb_ft_min_token_size=3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Check index usage\nEXPLAIN SELECT * FROM articles\nWHERE MATCH(title, body) AGAINST('MySQL');\n\n-- Optimize table (rebuild FTS index)\nOPTIMIZE TABLE articles;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"postgresql-full-text-search",children:"PostgreSQL Full-Text Search"}),"\n",(0,s.jsxs)(n.p,{children:["PostgreSQL has more advanced FTS capabilities with ",(0,s.jsx)(n.code,{children:"tsvector"})," and ",(0,s.jsx)(n.code,{children:"tsquery"})," types."]}),"\n",(0,s.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Create table\nCREATE TABLE articles (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(200),\n    body TEXT\n);\n\n-- Insert data\nINSERT INTO articles (title, body) VALUES\n('MySQL Tutorial', 'This tutorial teaches you how to use MySQL full-text search effectively'),\n('PostgreSQL Guide', 'PostgreSQL offers powerful full-text search capabilities with GIN indexes'),\n('Database Indexing', 'Understanding inverted indexes is crucial for search performance'),\n('Quick Brown Fox', 'The quick brown fox jumps over the lazy dog');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-tsvector-and-tsquery",children:"Using tsvector and tsquery"}),"\n",(0,s.jsx)(n.h4,{id:"without-index-slower",children:"Without Index (Slower)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Basic search\nSELECT id, title,\n       ts_rank(to_tsvector('english', title || ' ' || body),\n               to_tsquery('english', 'MySQL & search')) AS rank\nFROM articles\nWHERE to_tsvector('english', title || ' ' || body) @@ to_tsquery('english', 'MySQL & search')\nORDER BY rank DESC;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Components:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_tsvector()"}),": Converts text to searchable tokens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"to_tsquery()"}),": Converts search query to tokens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@@"}),": Match operator"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ts_rank()"}),": Calculates relevance score"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"with-computed-column-better",children:"With Computed Column (Better)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Add tsvector column\nALTER TABLE articles\nADD COLUMN search_vector tsvector\nGENERATED ALWAYS AS (\n    to_tsvector('english', coalesce(title, '') || ' ' || coalesce(body, ''))\n) STORED;\n\n-- Create GIN index (inverted index)\nCREATE INDEX idx_articles_search ON articles USING GIN(search_vector);\n\n-- Now search is fast\nSELECT id, title, ts_rank(search_vector, query) AS rank\nFROM articles, to_tsquery('english', 'MySQL & search') query\nWHERE search_vector @@ query\nORDER BY rank DESC;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"search-operators",children:"Search Operators"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- AND: both terms required\nSELECT * FROM articles\nWHERE search_vector @@ to_tsquery('english', 'MySQL & search');\n\n-- OR: either term matches\nSELECT * FROM articles\nWHERE search_vector @@ to_tsquery('english', 'MySQL | PostgreSQL');\n\n-- NOT: exclude term\nSELECT * FROM articles\nWHERE search_vector @@ to_tsquery('english', 'database & !MySQL');\n\n-- Phrase search (words in order)\nSELECT * FROM articles\nWHERE search_vector @@ phraseto_tsquery('english', 'full text search');\n\n-- Prefix search\nSELECT * FROM articles\nWHERE search_vector @@ to_tsquery('english', 'search:*');\n\n-- Complex query\nSELECT * FROM articles\nWHERE search_vector @@ to_tsquery('english', '(MySQL | PostgreSQL) & search & !tutorial');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- plainto_tsquery: simpler query syntax (treats as AND)\nSELECT * FROM articles\nWHERE search_vector @@ plainto_tsquery('english', 'MySQL search');\n\n-- websearch_to_tsquery: Google-like syntax\nSELECT * FROM articles\nWHERE search_vector @@ websearch_to_tsquery('english', '\"full text\" -tutorial');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ranking-and-weights",children:"Ranking and Weights"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Weight different fields differently\nALTER TABLE articles\nADD COLUMN weighted_vector tsvector\nGENERATED ALWAYS AS (\n    setweight(to_tsvector('english', coalesce(title, '')), 'A') ||\n    setweight(to_tsvector('english', coalesce(body, '')), 'B')\n) STORED;\n\nCREATE INDEX idx_weighted ON articles USING GIN(weighted_vector);\n\n-- Search with weights (title matches rank higher)\nSELECT id, title,\n       ts_rank(weighted_vector, query, 1) AS rank  -- normalization flag 1\nFROM articles, to_tsquery('english', 'search') query\nWHERE weighted_vector @@ query\nORDER BY rank DESC;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Weight levels:"})," A (1.0) > B (0.4) > C (0.2) > D (0.1)"]}),"\n",(0,s.jsx)(n.h3,{id:"highlighting-results",children:"Highlighting Results"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Highlight matching terms\nSELECT id, title,\n       ts_headline('english', body, query, 'MaxWords=30, MinWords=15')\nFROM articles, to_tsquery('english', 'search') query\nWHERE search_vector @@ query;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"language-support",children:"Language Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- English (default)\nto_tsvector('english', 'running dogs') \u2192 'dog':2 'run':1\n\n-- Spanish\nto_tsvector('spanish', 'corriendo perros') \u2192 'corr':1 'perr':2\n\n-- Simple (no stemming)\nto_tsvector('simple', 'running dogs') \u2192 'dogs':2 'running':1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"index-types",children:"Index Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- GIN (Generalized Inverted Index) - faster search, slower updates\nCREATE INDEX idx_gin ON articles USING GIN(search_vector);\n\n-- GiST (Generalized Search Tree) - faster updates, slower search\nCREATE INDEX idx_gist ON articles USING GIST(search_vector);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Choose GIN for:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Read-heavy workloads"}),"\n",(0,s.jsx)(n.li,{children:"Static or infrequently updated data"}),"\n",(0,s.jsx)(n.li,{children:"Best search performance"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Choose GiST for:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write-heavy workloads"}),"\n",(0,s.jsx)(n.li,{children:"Frequently updated data"}),"\n",(0,s.jsx)(n.li,{children:"Acceptable search performance"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"performance-comparison-example",children:"Performance Comparison Example"}),"\n",(0,s.jsx)(n.h3,{id:"test-data",children:"Test Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- 100k articles\nCREATE TABLE large_articles (\n    id SERIAL PRIMARY KEY,\n    title TEXT,\n    body TEXT,\n    search_vector tsvector\n);\n\n-- Populate with sample data...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-performance",children:"Query Performance"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Operation"}),(0,s.jsx)(n.th,{children:"LIKE Query"}),(0,s.jsx)(n.th,{children:"MySQL FTS"}),(0,s.jsx)(n.th,{children:"PostgreSQL FTS"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Simple search"}),(0,s.jsx)(n.td,{children:"~2000ms"}),(0,s.jsx)(n.td,{children:"~50ms"}),(0,s.jsx)(n.td,{children:"~30ms"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Complex boolean"}),(0,s.jsx)(n.td,{children:"Not possible"}),(0,s.jsx)(n.td,{children:"~80ms"}),(0,s.jsx)(n.td,{children:"~40ms"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Ranking"}),(0,s.jsx)(n.td,{children:"Not possible"}),(0,s.jsx)(n.td,{children:"Built-in"}),(0,s.jsx)(n.td,{children:"Built-in"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Multi-language"}),(0,s.jsx)(n.td,{children:"Manual"}),(0,s.jsx)(n.td,{children:"Limited"}),(0,s.jsx)(n.td,{children:"Excellent"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"mysql",children:"MySQL"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"InnoDB"})," for production (ACID compliance)"]}),"\n",(0,s.jsxs)(n.li,{children:["Adjust ",(0,s.jsx)(n.code,{children:"ft_min_word_length"})," for your language"]}),"\n",(0,s.jsx)(n.li,{children:"Use Boolean mode for complex queries"}),"\n",(0,s.jsxs)(n.li,{children:["Regularly ",(0,s.jsx)(n.code,{children:"OPTIMIZE TABLE"})," to rebuild indexes"]}),"\n",(0,s.jsx)(n.li,{children:"Consider partitioning for very large tables"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Always use GIN indexes for search columns"}),"\n",(0,s.jsxs)(n.li,{children:["Use generated columns for ",(0,s.jsx)(n.code,{children:"tsvector"})," storage"]}),"\n",(0,s.jsx)(n.li,{children:"Choose appropriate language for stemming"}),"\n",(0,s.jsx)(n.li,{children:"Use weighted vectors for multi-field search"}),"\n",(0,s.jsxs)(n.li,{children:["Consider ",(0,s.jsx)(n.code,{children:"pg_trgm"})," for fuzzy/partial matching"]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"ts_rank_cd()"})," for cover density ranking"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Analyze your query patterns before indexing"}),"\n",(0,s.jsx)(n.li,{children:"Monitor index size vs table size"}),"\n",(0,s.jsx)(n.li,{children:"Test with realistic data volumes"}),"\n",(0,s.jsx)(n.li,{children:"Use EXPLAIN to verify index usage"}),"\n",(0,s.jsx)(n.li,{children:"Consider search-specific solutions (Elasticsearch, MeiliSearch) for complex requirements"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"real-world-example-blog-search",children:"Real-World Example: Blog Search"}),"\n",(0,s.jsx)(n.h3,{id:"postgresql-implementation",children:"PostgreSQL Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE blog_posts (\n    id SERIAL PRIMARY KEY,\n    title TEXT NOT NULL,\n    excerpt TEXT,\n    content TEXT NOT NULL,\n    author TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    search_document tsvector GENERATED ALWAYS AS (\n        setweight(to_tsvector('english', coalesce(title, '')), 'A') ||\n        setweight(to_tsvector('english', coalesce(excerpt, '')), 'B') ||\n        setweight(to_tsvector('english', coalesce(content, '')), 'C') ||\n        setweight(to_tsvector('english', coalesce(author, '')), 'D')\n    ) STORED\n);\n\nCREATE INDEX idx_blog_search ON blog_posts USING GIN(search_document);\n\n-- Search query\nSELECT\n    id,\n    title,\n    ts_rank(search_document, query) AS rank,\n    ts_headline('english', content, query, 'MaxWords=50') AS snippet\nFROM blog_posts, websearch_to_tsquery('english', 'PostgreSQL indexing') AS query\nWHERE search_document @@ query\nORDER BY rank DESC, created_at DESC\nLIMIT 20;\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var s=r(96540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);