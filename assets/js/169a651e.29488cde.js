"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6525],{3944:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var s=r(4848),i=r(8453);const t={},a="System Design Fundamentals",l={id:"Frontend System Design/SystemDesignFundamentals",title:"System Design Fundamentals",description:"1. Key Characteristics of Distributed Systems",source:"@site/docs/Frontend System Design/SystemDesignFundamentals.mdx",sourceDirName:"Frontend System Design",slug:"/Frontend System Design/SystemDesignFundamentals",permalink:"/js.enigma/docs/Frontend System Design/SystemDesignFundamentals",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Frontend System Design/SystemDesignFundamentals.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Different Styling Techniques",permalink:"/js.enigma/docs/Frontend System Design/StyleTechnoques"},next:{title:"Company Specific",permalink:"/js.enigma/docs/category/company-specific"}},c={},d=[{value:"1. Key Characteristics of Distributed Systems",id:"1-key-characteristics-of-distributed-systems",level:2},{value:"Scalability",id:"scalability",level:3},{value:"Reliability",id:"reliability",level:3},{value:"2. Load Balancing",id:"2-load-balancing",level:2},{value:"Algorithms:",id:"algorithms",level:3},{value:"3. Caching",id:"3-caching",level:2},{value:"Caching Strategies:",id:"caching-strategies",level:3},{value:"4. Data Partitioning",id:"4-data-partitioning",level:2},{value:"Types:",id:"types",level:3},{value:"5. Indexes",id:"5-indexes",level:2},{value:"Types:",id:"types-1",level:3},{value:"6. Proxies",id:"6-proxies",level:2},{value:"Types:",id:"types-2",level:3},{value:"7. Redundancy and Replication",id:"7-redundancy-and-replication",level:2},{value:"Strategies:",id:"strategies",level:3},{value:"8. SQL vs. NoSQL",id:"8-sql-vs-nosql",level:2},{value:"SQL (Relational)",id:"sql-relational",level:3},{value:"NoSQL",id:"nosql",level:3},{value:"9. CAP Theorem",id:"9-cap-theorem",level:2},{value:"10. PACELC Theorem",id:"10-pacelc-theorem",level:2},{value:"11. Consistent Hashing",id:"11-consistent-hashing",level:2},{value:"12. Real-time Communication Protocols",id:"12-real-time-communication-protocols",level:2},{value:"Long-Polling",id:"long-polling",level:3},{value:"How It Works:",id:"how-it-works",level:3},{value:"Key Characteristics:",id:"key-characteristics",level:3},{value:"Advantages:",id:"advantages",level:3},{value:"Disadvantages:",id:"disadvantages",level:3},{value:"Common Use Cases:",id:"common-use-cases",level:3},{value:"WebSockets",id:"websockets",level:3},{value:"How It Works:",id:"how-it-works-1",level:3},{value:"Key Characteristics:",id:"key-characteristics-1",level:3},{value:"Advantages:",id:"advantages-1",level:3},{value:"Disadvantages:",id:"disadvantages-1",level:3},{value:"Common Use Cases:",id:"common-use-cases-1",level:3},{value:"Server-Sent Events",id:"server-sent-events",level:3},{value:"How It Works:",id:"how-it-works-2",level:3},{value:"Key Characteristics:",id:"key-characteristics-2",level:3},{value:"Advantages:",id:"advantages-2",level:3},{value:"Disadvantages:",id:"disadvantages-2",level:3},{value:"Common Use Cases:",id:"common-use-cases-2",level:3},{value:"Comparison Table",id:"comparison-table",level:2},{value:"13. Bloom Filters",id:"13-bloom-filters",level:2},{value:"14. Quorum",id:"14-quorum",level:2},{value:"15. Leader and Follower",id:"15-leader-and-follower",level:2},{value:"16. Heartbeat",id:"16-heartbeat",level:2},{value:"17. Checksum",id:"17-checksum",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"system-design-fundamentals",children:"System Design Fundamentals"})}),"\n",(0,s.jsx)(n.h2,{id:"1-key-characteristics-of-distributed-systems",children:"1. Key Characteristics of Distributed Systems"}),"\n",(0,s.jsx)(n.h3,{id:"scalability",children:"Scalability"}),"\n",(0,s.jsx)(n.p,{children:"The ability of a system to handle increased load by adding resources."}),"\n",(0,s.jsx)(n.p,{children:"Types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vertical Scaling (Scale Up)"}),": Adding more power to existing machines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Horizontal Scaling (Scale Out)"}),": Adding more machines"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ScalableSystem {\r\n  private nodes: Node[] = [];\r\n\r\n  addNode(node: Node): void {\r\n    this.nodes.push(node);\r\n    this.rebalanceLoad();\r\n  }\r\n\r\n  removeNode(nodeId: string): void {\r\n    this.nodes = this.nodes.filter(node => node.id !== nodeId);\r\n    this.rebalanceLoad();\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"reliability",children:"Reliability"}),"\n",(0,s.jsx)(n.p,{children:"The probability that a system will fail in a given period."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ReliableSystem {\r\n  calculateReliability(components: Component[]): number {\r\n    // For components in series\r\n    return components.reduce((acc, component) => \r\n      acc * component.reliability, 1);\r\n  }\r\n\r\n  calculateParallelReliability(components: Component[]): number {\r\n    // For components in parallel\r\n    return 1 - components.reduce((acc, component) => \r\n      acc * (1 - component.reliability), 1);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"2-load-balancing",children:"2. Load Balancing"}),"\n",(0,s.jsx)(n.p,{children:"Distributes incoming traffic across multiple servers."}),"\n",(0,s.jsx)(n.h3,{id:"algorithms",children:"Algorithms:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Round Robin"}),"\n",(0,s.jsx)(n.li,{children:"Least Connections"}),"\n",(0,s.jsx)(n.li,{children:"Least Response Time"}),"\n",(0,s.jsx)(n.li,{children:"Hash-based"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"interface LoadBalancer {\r\n  servers: Server[];\r\n  \r\n  roundRobin(): Server;\r\n  leastConnections(): Server;\r\n  hashBased(key: string): Server;\r\n}\r\n\r\nclass WeightedRoundRobin implements LoadBalancer {\r\n  private currentIndex = 0;\r\n  \r\n  roundRobin(): Server {\r\n    const server = this.servers[this.currentIndex];\r\n    this.currentIndex = (this.currentIndex + 1) % this.servers.length;\r\n    return server;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"3-caching",children:"3. Caching"}),"\n",(0,s.jsx)(n.p,{children:"Temporary storage layer for faster data access."}),"\n",(0,s.jsx)(n.h3,{id:"caching-strategies",children:"Caching Strategies:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Cache-Aside"}),"\n",(0,s.jsx)(n.li,{children:"Write-Through"}),"\n",(0,s.jsx)(n.li,{children:"Write-Behind"}),"\n",(0,s.jsx)(n.li,{children:"Refresh-Ahead"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class CacheManager {\r\n  private cache: Map<string, any>;\r\n  private db: Database;\r\n\r\n  async get(key: string): Promise<any> {\r\n    // Cache-aside implementation\r\n    let data = this.cache.get(key);\r\n    if (!data) {\r\n      data = await this.db.get(key);\r\n      this.cache.set(key, data);\r\n    }\r\n    return data;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-data-partitioning",children:"4. Data Partitioning"}),"\n",(0,s.jsx)(n.p,{children:"Splitting data across multiple machines."}),"\n",(0,s.jsx)(n.h3,{id:"types",children:"Types:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Horizontal Partitioning (Sharding)"}),"\n",(0,s.jsx)(n.li,{children:"Vertical Partitioning"}),"\n",(0,s.jsx)(n.li,{children:"Directory-Based Partitioning"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class DataPartitioner {\r\n  private shardCount: number;\r\n\r\n  constructor(shardCount: number) {\r\n    this.shardCount = shardCount;\r\n  }\r\n\r\n  getShardId(key: string): number {\r\n    const hash = this.hashFunction(key);\r\n    return hash % this.shardCount;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"5-indexes",children:"5. Indexes"}),"\n",(0,s.jsx)(n.p,{children:"Data structures to improve data retrieval speed."}),"\n",(0,s.jsx)(n.h3,{id:"types-1",children:"Types:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Primary Index"}),"\n",(0,s.jsx)(n.li,{children:"Secondary Index"}),"\n",(0,s.jsx)(n.li,{children:"Composite Index"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class DatabaseIndex {\r\n  private index: Map<string, number[]>;\r\n\r\n  addToIndex(key: string, documentId: number): void {\r\n    if (!this.index.has(key)) {\r\n      this.index.set(key, []);\r\n    }\r\n    this.index.get(key).push(documentId);\r\n  }\r\n\r\n  search(key: string): number[] {\r\n    return this.index.get(key) || [];\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"6-proxies",children:"6. Proxies"}),"\n",(0,s.jsx)(n.p,{children:"Intermediate servers between clients and backend servers."}),"\n",(0,s.jsx)(n.h3,{id:"types-2",children:"Types:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Forward Proxy"}),"\n",(0,s.jsx)(n.li,{children:"Reverse Proxy"}),"\n",(0,s.jsx)(n.li,{children:"Load Balancer Proxy"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ReverseProxy {\r\n  private backends: string[];\r\n  private loadBalancer: LoadBalancer;\r\n\r\n  async handleRequest(request: Request): Promise<Response> {\r\n    const backend = this.loadBalancer.getBackend();\r\n    return await this.forwardRequest(backend, request);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"7-redundancy-and-replication",children:"7. Redundancy and Replication"}),"\n",(0,s.jsx)(n.p,{children:"Creating and maintaining multiple copies of data."}),"\n",(0,s.jsx)(n.h3,{id:"strategies",children:"Strategies:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Active-Passive"}),"\n",(0,s.jsx)(n.li,{children:"Active-Active"}),"\n",(0,s.jsx)(n.li,{children:"Multi-AZ Replication"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ReplicationManager {\r\n  private primary: Database;\r\n  private replicas: Database[];\r\n\r\n  async write(data: any): Promise<void> {\r\n    await this.primary.write(data);\r\n    await Promise.all(\r\n      this.replicas.map(replica => replica.replicate(data))\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"8-sql-vs-nosql",children:"8. SQL vs. NoSQL"}),"\n",(0,s.jsx)(n.h3,{id:"sql-relational",children:"SQL (Relational)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Structured data"}),"\n",(0,s.jsx)(n.li,{children:"ACID properties"}),"\n",(0,s.jsx)(n.li,{children:"Fixed schema"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"nosql",children:"NoSQL"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unstructured data"}),"\n",(0,s.jsx)(n.li,{children:"Eventual consistency"}),"\n",(0,s.jsx)(n.li,{children:"Dynamic schema"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"interface Database {\r\n  // SQL-like operations\r\n  query(sql: string): Promise<Result>;\r\n  \r\n  // NoSQL-like operations\r\n  get(key: string): Promise<Document>;\r\n  put(key: string, value: Document): Promise<void>;\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"9-cap-theorem",children:"9. CAP Theorem"}),"\n",(0,s.jsx)(n.p,{children:"A distributed system can only provide two of:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Consistency"}),"\n",(0,s.jsx)(n.li,{children:"Availability"}),"\n",(0,s.jsx)(n.li,{children:"Partition Tolerance"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class DistributedSystem {\r\n  private type: 'CP' | 'AP' | 'CA';\r\n\r\n  handlePartition(): void {\r\n    switch(this.type) {\r\n      case 'CP':\r\n        this.sacrificeAvailability();\r\n        break;\r\n      case 'AP':\r\n        this.sacrificeConsistency();\r\n        break;\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"10-pacelc-theorem",children:"10. PACELC Theorem"}),"\n",(0,s.jsx)(n.p,{children:"Extension of CAP:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"During Partition (P): choose between Availability (A) and Consistency (C)"}),"\n",(0,s.jsx)(n.li,{children:"Else (E): choose between Latency (L) and Consistency (C)"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class PACELCSystem {\r\n  handleNormalOperation(preference: 'latency' | 'consistency'): void {\r\n    if (preference === 'latency') {\r\n      this.optimizeForLatency();\r\n    } else {\r\n      this.enforceStrongConsistency();\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"11-consistent-hashing",children:"11. Consistent Hashing"}),"\n",(0,s.jsx)(n.p,{children:"Distributes data across nodes while minimizing reorganization when nodes are added/removed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class ConsistentHashing {\r\n  private ring: Map<number, Node>;\r\n  private replicaCount: number;\r\n\r\n  addNode(node: Node): void {\r\n    for (let i = 0; i < this.replicaCount; i++) {\r\n      const hash = this.hashFunction(`${node.id}-${i}`);\r\n      this.ring.set(hash, node);\r\n    }\r\n  }\r\n\r\n  getNode(key: string): Node {\r\n    const hash = this.hashFunction(key);\r\n    return this.findNextNode(hash);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"12-real-time-communication-protocols",children:"12. Real-time Communication Protocols"}),"\n",(0,s.jsx)(n.h3,{id:"long-polling",children:"Long-Polling"}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works",children:"How It Works:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The client makes an HTTP request to the server."}),"\n",(0,s.jsx)(n.li,{children:"The server keeps the request open until new data is available or a timeout occurs."}),"\n",(0,s.jsx)(n.li,{children:"Once the server responds, the client immediately sends a new request to maintain the connection."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-characteristics",children:"Key Characteristics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simulates real-time communication using HTTP."}),"\n",(0,s.jsx)(n.li,{children:"Creates multiple HTTP requests (one for each polling cycle)."}),"\n",(0,s.jsx)(n.li,{children:"Works over HTTP 1.1, so no persistent connection is required."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advantages",children:"Advantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Works in environments where WebSockets or SSE may not be supported."}),"\n",(0,s.jsx)(n.li,{children:"Simple to implement."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"disadvantages",children:"Disadvantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Inefficient due to repeated HTTP requests and connection overhead."}),"\n",(0,s.jsx)(n.li,{children:"Higher latency compared to WebSockets and SSE."}),"\n",(0,s.jsx)(n.li,{children:"Puts additional load on servers."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Chat applications (legacy systems)."}),"\n",(0,s.jsx)(n.li,{children:"Scenarios where WebSocket support is not guaranteed."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class LongPollingClient {\r\n  async poll(): Promise<Data> {\r\n    while (true) {\r\n      const response = await fetch('/api/updates');\r\n      if (response.status === 200) {\r\n        return response.json();\r\n      }\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"websockets",children:"WebSockets"}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works-1",children:"How It Works:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The client establishes a persistent, full-duplex connection with the server over a single TCP connection."}),"\n",(0,s.jsx)(n.li,{children:"Communication can flow in both directions (client-to-server and server-to-client)."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-characteristics-1",children:"Key Characteristics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Uses the ",(0,s.jsx)(n.code,{children:"ws://"})," or ",(0,s.jsx)(n.code,{children:"wss://"})," protocol (secure WebSocket)."]}),"\n",(0,s.jsx)(n.li,{children:"After the initial handshake over HTTP/HTTPS, the connection upgrades to a WebSocket protocol."}),"\n",(0,s.jsx)(n.li,{children:"Efficient for high-frequency data exchange."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advantages-1",children:"Advantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Full-duplex communication allows real-time interaction."}),"\n",(0,s.jsx)(n.li,{children:"Low overhead after the initial connection."}),"\n",(0,s.jsx)(n.li,{children:"Ideal for scenarios requiring frequent or bidirectional data exchange."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"disadvantages-1",children:"Disadvantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requires WebSocket support on both client and server."}),"\n",(0,s.jsx)(n.li,{children:"May face challenges in environments with strict firewalls or proxies."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-use-cases-1",children:"Common Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Online multiplayer games."}),"\n",(0,s.jsx)(n.li,{children:"Collaborative tools (e.g., Google Docs)."}),"\n",(0,s.jsx)(n.li,{children:"Real-time financial data (e.g., stock tickers)."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class WebSocketHandler {\r\n  private ws: WebSocket;\r\n\r\n  connect(): void {\r\n    this.ws = new WebSocket('ws://server');\r\n    this.ws.onmessage = this.handleMessage;\r\n  }\r\n\r\n  send(data: any): void {\r\n    this.ws.send(JSON.stringify(data));\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"server-sent-events",children:"Server-Sent Events"}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works-2",children:"How It Works:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The server pushes updates to the client over an HTTP connection."}),"\n",(0,s.jsx)(n.li,{children:"The client maintains an open connection and listens for events from the server."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-characteristics-2",children:"Key Characteristics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Works only in one direction: server-to-client."}),"\n",(0,s.jsxs)(n.li,{children:["Uses the ",(0,s.jsx)(n.code,{children:"text/event-stream"})," MIME type."]}),"\n",(0,s.jsx)(n.li,{children:"Based on HTTP/1.1, leveraging persistent connections."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advantages-2",children:"Advantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simpler than WebSockets for one-way communication."}),"\n",(0,s.jsx)(n.li,{children:"Built-in reconnection mechanisms."}),"\n",(0,s.jsx)(n.li,{children:"Lightweight and efficient for server-to-client updates."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"disadvantages-2",children:"Disadvantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unidirectional: no way for the client to send messages back over the same connection."}),"\n",(0,s.jsx)(n.li,{children:"Limited support in some environments (e.g., older browsers or clients)."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-use-cases-2",children:"Common Use Cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time dashboards."}),"\n",(0,s.jsx)(n.li,{children:"Notifications."}),"\n",(0,s.jsx)(n.li,{children:"Social media feeds."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class SSEClient {\r\n  private eventSource: EventSource;\r\n\r\n  connect(): void {\r\n    this.eventSource = new EventSource('/api/events');\r\n    this.eventSource.onmessage = this.handleMessage;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"comparison-table",children:"Comparison Table"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Feature"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Long-Polling"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"WebSockets"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Server-Sent Events (SSE)"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Communication"})}),(0,s.jsx)(n.td,{children:"Client-initiated, server responds"}),(0,s.jsx)(n.td,{children:"Full-duplex (bidirectional)"}),(0,s.jsx)(n.td,{children:"Unidirectional (server-to-client)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Efficiency"})}),(0,s.jsx)(n.td,{children:"Low (multiple requests)"}),(0,s.jsx)(n.td,{children:"High (persistent connection)"}),(0,s.jsx)(n.td,{children:"Medium (persistent connection)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Latency"})}),(0,s.jsx)(n.td,{children:"Medium to high"}),(0,s.jsx)(n.td,{children:"Low"}),(0,s.jsx)(n.td,{children:"Low"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Browser Support"})}),(0,s.jsx)(n.td,{children:"Universally supported"}),(0,s.jsx)(n.td,{children:"Modern browsers only"}),(0,s.jsx)(n.td,{children:"Most modern browsers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Connection Protocol"})}),(0,s.jsx)(n.td,{children:"HTTP/HTTPS"}),(0,s.jsxs)(n.td,{children:["WebSocket protocol (",(0,s.jsx)(n.code,{children:"ws/wss"}),")"]}),(0,s.jsx)(n.td,{children:"HTTP/1.1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Data Format"})}),(0,s.jsx)(n.td,{children:"Custom (e.g., JSON)"}),(0,s.jsx)(n.td,{children:"Binary or text"}),(0,s.jsxs)(n.td,{children:["Plain text (",(0,s.jsx)(n.code,{children:"event-stream"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Reconnection"})}),(0,s.jsx)(n.td,{children:"Client manually re-establishes"}),(0,s.jsx)(n.td,{children:"Handled automatically"}),(0,s.jsx)(n.td,{children:"Built-in reconnect support"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Use Case Examples"})}),(0,s.jsx)(n.td,{children:"Legacy systems, basic real-time"}),(0,s.jsx)(n.td,{children:"Games, chats, collaborative apps"}),(0,s.jsx)(n.td,{children:"Notifications, dashboards"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"13-bloom-filters",children:"13. Bloom Filters"}),"\n",(0,s.jsx)(n.p,{children:"Probabilistic data structure to test whether an element is a member of a set."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class BloomFilter {\r\n  private bitArray: boolean[];\r\n  private hashFunctions: ((item: string) => number)[];\r\n\r\n  add(item: string): void {\r\n    this.hashFunctions.forEach(hash => {\r\n      const index = hash(item) % this.bitArray.length;\r\n      this.bitArray[index] = true;\r\n    });\r\n  }\r\n\r\n  mightContain(item: string): boolean {\r\n    return this.hashFunctions.every(hash => {\r\n      const index = hash(item) % this.bitArray.length;\r\n      return this.bitArray[index];\r\n    });\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"14-quorum",children:"14. Quorum"}),"\n",(0,s.jsx)(n.p,{children:"Number of nodes that must agree for a distributed operation to be considered successful."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class QuorumSystem {\r\n  private nodes: number;\r\n  private readQuorum: number;\r\n  private writeQuorum: number;\r\n\r\n  constructor(n: number, r: number, w: number) {\r\n    this.nodes = n;\r\n    this.readQuorum = r;\r\n    this.writeQuorum = w;\r\n  }\r\n\r\n  isConsistent(): boolean {\r\n    return this.readQuorum + this.writeQuorum > this.nodes;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"15-leader-and-follower",children:"15. Leader and Follower"}),"\n",(0,s.jsx)(n.p,{children:"Pattern for coordinating distributed systems."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class LeaderElection {\r\n  private nodes: Node[];\r\n  private currentLeader: Node | null = null;\r\n\r\n  electLeader(): void {\r\n    this.nodes.sort((a, b) => b.priority - a.priority);\r\n    this.currentLeader = this.nodes[0];\r\n    this.notifyFollowers();\r\n  }\r\n\r\n  handleLeaderFailure(): void {\r\n    this.electLeader();\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"16-heartbeat",children:"16. Heartbeat"}),"\n",(0,s.jsx)(n.p,{children:"Mechanism to detect node failures in distributed systems."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class HeartbeatMonitor {\r\n  private nodes: Map<string, Date>;\r\n  private timeout: number;\r\n\r\n  checkHeartbeats(): void {\r\n    const now = new Date();\r\n    for (const [nodeId, lastBeat] of this.nodes) {\r\n      if (now.getTime() - lastBeat.getTime() > this.timeout) {\r\n        this.handleNodeFailure(nodeId);\r\n      }\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"17-checksum",children:"17. Checksum"}),"\n",(0,s.jsx)(n.p,{children:"Detects errors in data transmission or storage."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"class Checksum {\r\n  calculate(data: string): number {\r\n    return data.split('')\r\n      .reduce((sum, char) => sum + char.charCodeAt(0), 0);\r\n  }\r\n\r\n  verify(data: string, checksum: number): boolean {\r\n    return this.calculate(data) === checksum;\r\n  }\r\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);