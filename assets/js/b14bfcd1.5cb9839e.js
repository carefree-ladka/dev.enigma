"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[894],{4829:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var t=r(74848),l=r(28453);const a={title:"Array Methods Polyfills"},i=void 0,c={id:"WebDev/JavaScript/Polyfills",title:"Array Methods Polyfills",description:"forEach Polyfill",source:"@site/docs/WebDev/JavaScript/Polyfills.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Polyfills",permalink:"/dev.enigma/docs/WebDev/JavaScript/Polyfills",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Polyfills.mdx",tags:[],version:"current",frontMatter:{title:"Array Methods Polyfills"},sidebar:"tutorialSidebar",previous:{title:"Object Related Problems",permalink:"/dev.enigma/docs/WebDev/JavaScript/Objects"},next:{title:"Promise Based Outputs",permalink:"/dev.enigma/docs/WebDev/JavaScript/PromiseBased"}},s={},o=[{value:"forEach Polyfill",id:"foreach-polyfill",level:3},{value:"Map Polyfill",id:"map-polyfill",level:3},{value:"Filter Polyfill",id:"filter-polyfill",level:3},{value:"Reduce Polyfill",id:"reduce-polyfill",level:3},{value:"Flat Polyfill",id:"flat-polyfill",level:3},{value:"In Place flattening",id:"in-place-flattening",level:3}];function u(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"foreach-polyfill",children:"forEach Polyfill"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const arr = [1, 2, 3, 4];\n\nArray.prototype.myForEach = function (cb) {\n  for (let i = 0; i < this.length; i++) {\n    // Execute the callback, passing the current element, index, and the array\n    cb(this[i], i, this);\n  }\n};\n\n// Example usage\narr.myForEach((item, index, array) => {\n  console.log(`Item: ${item}, Index: ${index}, Array: [${array}]`);\n});\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"map-polyfill",children:"Map Polyfill"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const arr = [1, 2, 3, 4];\n\nArray.prototype.myMap = function (cb) {\n  const result = [];\n  for (let i = 0; i < this.length; i++) {\n    result.push(cb(this[i], i, this));\n  }\n  return result;\n};\n\nconsole.log(arr.myMap((x) => x * 2)); //[ 2, 4, 6, 8 ]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"filter-polyfill",children:"Filter Polyfill"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const arr = [1, 2, 3, 4];\n\nArray.prototype.myFilter = function (cb) {\n  const result = [];\n  for (let i = 0; i < this.length; i++) {\n    if (cb(this[i], i, this)) result.push(this[i]);\n  }\n  return result;\n};\n\nconsole.log(arr.myFilter((x) => x % 2 === 0)); //[ 2, 4 ]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"reduce-polyfill",children:"Reduce Polyfill"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const arr = [1, 2, 3, 4];\n\nArray.prototype.myReduce = function (cb, intialvalue) {\n  let accumulator;\n  accumulator = intialvalue ? intialvalue : 0;\n  const startIndex = intialvalue ? 1 : 0;\n  for (let i = startIndex; i < this.length; i++) {\n    accumulator = cb(accumulator, this[i], i, this);\n  }\n  return accumulator;\n};\n\nconsole.log(arr.myReduce((acc, curr) => acc + curr, 0)); //10\n"})}),"\n",(0,t.jsx)(n.h3,{id:"flat-polyfill",children:"Flat Polyfill"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Recursion Based"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"const arr = [1, [[[2], 7], 8], [[[[[9]]]]]];\n\n// const isFlattened = (arr) => !arr.some(Array.isArray);\n\nconst flatten = (arr, depth) => {\n  if (depth <= 0) return arr;\n  return arr.reduce(\n    (acc, curr) =>\n      Array.isArray(curr)\n        ? [...acc, ...flatten(curr, depth - 1)]\n        : [...acc, curr],\n    []\n  );\n};\n\nconsole.log(flatten(arr, Infinity)); //[ 1, 2, 7, 8, 9 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Iterative Approach"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function flattenArray(arr) {\n  const stack = [...arr];  // Initialize stack with all elements of the array\n  const result = [];       // To store the flattened array\n\n  while (stack.length) {\n    const current = stack.pop(); // Pop the last element from the stack\n\n    if (Array.isArray(current)) {\n      // If it's an array, push its elements back onto the stack\n      stack.push(...current);\n    } else {\n      // If it's not an array, add it to the result\n      result.push(current);\n    }\n  }\n\n  return result.reverse();  // Reverse the result to maintain the original order\n}\n\n// Example usage\nconst nestedArray = [1, [2, [3, 4], 5], [6, 7], 8];\nconsole.log(flattenArray(nestedArray)); // Output: [1, 2, 3, 4, 5, 6, 7, 8]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"in-place-flattening",children:"In Place flattening"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function flattenArray(arr) {\n  let i = 0;\n\n  while (i < arr.length) {\n    if (!Array.isArray(arr[++i])) continue //Move to next element\n    arr.splice(i, 1, ...arr[i]); // Flatten the array element\n  }\n}\n\n// Example usage\nconst arr = [1, [2, [3, [4, 5]]], 6, [7, 8]];\nflattenArray(arr);\nconsole.log(arr); // Output: [1, 2, 3, 4, 5, 6, 7, 8]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(96540);const l={},a=t.createContext(l);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);