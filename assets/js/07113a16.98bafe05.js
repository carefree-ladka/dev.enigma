"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[727],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},76119:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var i=s(74848),r=s(28453);const l={},t="Object Storage",a={id:"Backend System Design/Object Storage",title:"Object Storage",description:"Table of Contents",source:"@site/docs/Backend System Design/Object Storage.mdx",sourceDirName:"Backend System Design",slug:"/Backend System Design/Object Storage",permalink:"/dev.enigma/docs/Backend System Design/Object Storage",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Backend System Design/Object Storage.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Microservice Patterns",permalink:"/dev.enigma/docs/Backend System Design/Microservice Patterns"},next:{title:"Rate Limiter System Design",permalink:"/dev.enigma/docs/Backend System Design/Rate Limiter System Design"}},d={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What is Object Storage",id:"what-is-object-storage",level:2},{value:"Definition",id:"definition",level:3},{value:"What Qualifies as a BLOB?",id:"what-qualifies-as-a-blob",level:3},{value:"Core Characteristics",id:"core-characteristics",level:3},{value:"Why Not Traditional Databases",id:"why-not-traditional-databases",level:2},{value:"The Problem with Storing BLOBs in Relational Databases",id:"the-problem-with-storing-blobs-in-relational-databases",level:3},{value:"Performance Impact",id:"performance-impact",level:3},{value:"Replication Problems",id:"replication-problems",level:3},{value:"Backup and Recovery Issues",id:"backup-and-recovery-issues",level:3},{value:"How Object Storage Works",id:"how-object-storage-works",level:2},{value:"High-Level Architecture",id:"high-level-architecture",level:3},{value:"Core Components",id:"core-components",level:3},{value:"1. Storage Nodes",id:"1-storage-nodes",level:4},{value:"2. Metadata Service",id:"2-metadata-service",level:4},{value:"3. Redundancy Layer",id:"3-redundancy-layer",level:4},{value:"Request Flow",id:"request-flow",level:3},{value:"Key Design Principles",id:"key-design-principles",level:2},{value:"1. Flat Namespace",id:"1-flat-namespace",level:3},{value:"2. Immutable Writes",id:"2-immutable-writes",level:3},{value:"3. Redundancy and Durability",id:"3-redundancy-and-durability",level:3},{value:"System Design Best Practices",id:"system-design-best-practices",level:2},{value:"1. Hybrid Storage Pattern",id:"1-hybrid-storage-pattern",level:3},{value:"2. Common Architecture Pattern",id:"2-common-architecture-pattern",level:3},{value:"3. Metadata vs File Storage",id:"3-metadata-vs-file-storage",level:3},{value:"Pre-signed URLs",id:"pre-signed-urls",level:2},{value:"The Problem",id:"the-problem",level:3},{value:"The Solution",id:"the-solution",level:3},{value:"Implementation Example",id:"implementation-example",level:3},{value:"Benefits",id:"benefits",level:3},{value:"Multi-part Upload",id:"multi-part-upload",level:2},{value:"The Problem",id:"the-problem-1",level:3},{value:"The Solution",id:"the-solution-1",level:3},{value:"Multi-part Upload Flow",id:"multi-part-upload-flow",level:3},{value:"Implementation Benefits",id:"implementation-benefits",level:3},{value:"Example Architecture",id:"example-architecture",level:3},{value:"Popular Object Storage Services",id:"popular-object-storage-services",level:2},{value:"Amazon S3 (Simple Storage Service)",id:"amazon-s3-simple-storage-service",level:3},{value:"Google Cloud Storage",id:"google-cloud-storage",level:3},{value:"Azure Blob Storage",id:"azure-blob-storage",level:3},{value:"Common Features Across All",id:"common-features-across-all",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"1. Social Media and Content Platforms",id:"1-social-media-and-content-platforms",level:3},{value:"2. Collaborative Tools and File Sharing",id:"2-collaborative-tools-and-file-sharing",level:3},{value:"3. Web Application Assets",id:"3-web-application-assets",level:3},{value:"4. Data Processing and Analytics",id:"4-data-processing-and-analytics",level:3},{value:"5. Media and Entertainment",id:"5-media-and-entertainment",level:3},{value:"Interview Questions",id:"interview-questions",level:2},{value:"1. &quot;Why would you use object storage instead of a traditional database for storing images?&quot;",id:"1-why-would-you-use-object-storage-instead-of-a-traditional-database-for-storing-images",level:3},{value:"2. &quot;How would you design a photo-sharing application&#39;s storage architecture?&quot;",id:"2-how-would-you-design-a-photo-sharing-applications-storage-architecture",level:3},{value:"3. &quot;What are pre-signed URLs and when would you use them?&quot;",id:"3-what-are-pre-signed-urls-and-when-would-you-use-them",level:3},{value:"4. &quot;How do you handle uploading very large files (&gt;1GB)?&quot;",id:"4-how-do-you-handle-uploading-very-large-files-1gb",level:3},{value:"5. &quot;Compare object storage with a traditional file system&quot;",id:"5-compare-object-storage-with-a-traditional-file-system",level:3},{value:"6. &quot;How would you implement a file upload feature for a web application?&quot;",id:"6-how-would-you-implement-a-file-upload-feature-for-a-web-application",level:3},{value:"7. &quot;What are the trade-offs of using object storage?&quot;",id:"7-what-are-the-trade-offs-of-using-object-storage",level:3},{value:"8. &quot;Design a system to handle 1 million image uploads per day&quot;",id:"8-design-a-system-to-handle-1-million-image-uploads-per-day",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"object-storage",children:"Object Storage"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#what-is-object-storage",children:"What is Object Storage"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#why-not-traditional-databases",children:"Why Not Traditional Databases"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#how-object-storage-works",children:"How Object Storage Works"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#key-design-principles",children:"Key Design Principles"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#system-design-best-practices",children:"System Design Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pre-signed-urls",children:"Pre-signed URLs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#multi-part-upload",children:"Multi-part Upload"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#popular-object-storage-services",children:"Popular Object Storage Services"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#use-cases",children:"Use Cases"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#interview-questions",children:"Interview Questions"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"what-is-object-storage",children:"What is Object Storage"}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(n.p,{children:["Object Storage is a ",(0,i.jsx)(n.strong,{children:"specialized storage architecture"})," designed for managing large files, commonly referred to as ",(0,i.jsx)(n.strong,{children:"Binary Large Objects (BLOBs)"}),". While not technically a database, it functions as a database specifically optimized for storing and retrieving large, static files."]}),"\n",(0,i.jsx)(n.h3,{id:"what-qualifies-as-a-blob",children:"What Qualifies as a BLOB?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Images and Photos"}),": Profile pictures, product images, thumbnails"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Videos"}),": User-generated content, streaming media, recorded sessions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audio Files"}),": Music, podcasts, voice recordings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documents"}),": PDFs, presentations, large text files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Files"}),": JSON exports, CSV files, log files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Assets"}),": CSS, JavaScript, fonts, icons"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"core-characteristics",children:"Core Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File-based Storage"}),": Stores complete files as atomic units"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flat Namespace"}),": No hierarchical folder structure (despite UI appearances)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Immutable"}),": Files cannot be modified, only replaced or versioned"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Highly Durable"}),": 99.999999999% (11 9's) durability through redundancy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalable"}),": Handles petabytes of data across distributed infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost-Effective"}),": Optimized for storage costs rather than compute"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"why-not-traditional-databases",children:"Why Not Traditional Databases"}),"\n",(0,i.jsx)(n.h3,{id:"the-problem-with-storing-blobs-in-relational-databases",children:"The Problem with Storing BLOBs in Relational Databases"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Storage Inefficiency"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"PostgreSQL Example:\n- Packs data into 8KB pages\n- 4MB image = 500 pages\n- Massive overhead for simple queries\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-impact",children:"Performance Impact"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Query Performance Degradation"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Simple query becomes expensive\nSELECT TOP 50 users\nFROM users;\n-- Database must manage megabytes of image data\n-- Even when you only need user metadata\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issues Created"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Pressure"}),": Large files consume excessive RAM"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slow Queries"}),": Simple operations become resource-intensive"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Pollution"}),": BLOBs fill up database cache inefficiently"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"replication-problems",children:"Replication Problems"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Bandwidth Consumption"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"4MB image replicated to 3 database replicas = 12MB per write"}),"\n",(0,i.jsx)(n.li,{children:"Massive bandwidth usage"}),"\n",(0,i.jsx)(n.li,{children:"Increased replication lag"}),"\n",(0,i.jsx)(n.li,{children:"Higher infrastructure costs"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backup-and-recovery-issues",children:"Backup and Recovery Issues"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backup Bloat"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Database backups include all BLOB data"}),"\n",(0,i.jsx)(n.li,{children:"What should be minutes becomes hours"}),"\n",(0,i.jsx)(n.li,{children:"Recovery time dramatically increased"}),"\n",(0,i.jsx)(n.li,{children:"Storage costs for backups skyrocket"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Real-World Scenario"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Without Object Storage:\nDatabase backup: 500GB (400GB are images)\nRestore time: 8 hours\n\nWith Object Storage:\nDatabase backup: 100GB (metadata only)\nRestore time: 30 minutes\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"how-object-storage-works",children:"How Object Storage Works"}),"\n",(0,i.jsx)(n.h3,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Client Request \u2192 Metadata Service \u2192 Storage Nodes \u2192 Stream Response\n     \u2193               \u2193                    \u2193              \u2193\n   "Get file1"    Index Lookup        Server A      Direct streaming\n                     \u2193\n                 "File1 on Server A"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,i.jsx)(n.h4,{id:"1-storage-nodes",children:"1. Storage Nodes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cheap commodity servers"})," storing files on disk"]}),"\n",(0,i.jsx)(n.li,{children:"Distributed across multiple racks and data centers"}),"\n",(0,i.jsx)(n.li,{children:"Optimized for throughput rather than low latency"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-metadata-service",children:"2. Metadata Service"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Central index"})," mapping file identifiers to storage locations"]}),"\n",(0,i.jsx)(n.li,{children:"Fast lookup service (usually in-memory)"}),"\n",(0,i.jsx)(n.li,{children:"Handles routing and load balancing"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-redundancy-layer",children:"3. Redundancy Layer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Files stored on ",(0,i.jsx)(n.strong,{children:"multiple servers"})," (typically 3+ copies)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Erasure coding"})," or ",(0,i.jsx)(n.strong,{children:"full replication"})]}),"\n",(0,i.jsx)(n.li,{children:"Automatic healing when nodes fail"}),"\n",(0,i.jsx)(n.li,{children:"Cross-datacenter replication for disaster recovery"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"request-flow",children:"Request Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client requests file"})," by unique identifier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metadata service"})," performs index lookup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage location"})," identified (e.g., Server A)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct streaming"})," from storage node to client"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redundancy"})," ensures availability if primary fails"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-design-principles",children:"Key Design Principles"}),"\n",(0,i.jsx)(n.h3,{id:"1-flat-namespace",children:"1. Flat Namespace"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Traditional File System"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/users/photos/2024/january/profile_pics/user123.jpg\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Object Storage"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"user-photos-2024-01-user123.jpg\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct lookup"})," without tree traversal"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Faster access"})," - O(1) instead of O(log n)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simpler implementation"})," and maintenance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UI sugar"})," can simulate folders for user experience"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-immutable-writes",children:"2. Immutable Writes"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Traditional Database"}),": Update existing records"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"UPDATE users SET profile_image = 'new_image.jpg' WHERE id = 123;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Object Storage"}),": Create new versions or overwrite"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"PUT /bucket/user123-profile-v2.jpg\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Advantages"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No locks required"})," - eliminates race conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simpler concurrency"})," model"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version control"})," capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better performance"})," without locking overhead"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-redundancy-and-durability",children:"3. Redundancy and Durability"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Replication Strategy"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'File "user123.jpg" exists on:\n- Server A (Primary)\n- Server B (Replica 1)\n- Server C (Replica 2)\n- Server D (Cross-DC replica)\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Durability Guarantees"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"11 9's durability"}),": 99.999999999%"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Automatic failure recovery"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Cross-datacenter redundancy"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Background data integrity checks"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"system-design-best-practices",children:"System Design Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-hybrid-storage-pattern",children:"1. Hybrid Storage Pattern"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Correct Approach"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Database (PostgreSQL/MySQL):\n\u251c\u2500\u2500 User metadata (ID, name, email, created_at)\n\u251c\u2500\u2500 Post metadata (ID, title, text, user_id)\n\u2514\u2500\u2500 File references (file_url, file_size, file_type)\n\nObject Storage (S3):\n\u251c\u2500\u2500 Profile images\n\u251c\u2500\u2500 Post photos/videos\n\u2514\u2500\u2500 User uploads\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example Schema"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- Store metadata in database\nCREATE TABLE posts (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER,\n    title VARCHAR(255),\n    content TEXT,\n    image_url VARCHAR(500), -- Reference to S3\n    created_at TIMESTAMP\n);\n\n-- Files stored in S3: s3://bucket/posts/user123/post456.jpg\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-common-architecture-pattern",children:"2. Common Architecture Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Client \u2192 API Server \u2192 Database (metadata)\n   \u2193                      \u2193\n   \u2514\u2500\u2500 Object Storage \u2190 File URL\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flow Example"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Client requests social media feed"}),"\n",(0,i.jsx)(n.li,{children:"API server queries database for posts metadata"}),"\n",(0,i.jsx)(n.li,{children:"Database returns post data with S3 URLs"}),"\n",(0,i.jsx)(n.li,{children:"Client downloads images directly from S3"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-metadata-vs-file-storage",children:"3. Metadata vs File Storage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Store in Database"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"File metadata (size, type, upload date)"}),"\n",(0,i.jsx)(n.li,{children:"User permissions and access controls"}),"\n",(0,i.jsx)(n.li,{children:"File relationships and associations"}),"\n",(0,i.jsx)(n.li,{children:"Search indices and tags"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Store in Object Storage"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Actual file bytes"}),"\n",(0,i.jsx)(n.li,{children:"Multiple file versions"}),"\n",(0,i.jsx)(n.li,{children:"Thumbnails and processed variants"}),"\n",(0,i.jsx)(n.li,{children:"Archive and backup copies"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pre-signed-urls",children:"Pre-signed URLs"}),"\n",(0,i.jsx)(n.h3,{id:"the-problem",children:"The Problem"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inefficient File Upload"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Client \u2192 Server \u2192 Object Storage\n  4MB      4MB        4MB\n  \u2191         \u2191          \u2191\nBandwidth  Server     Final\nconsumed   load       destination\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-solution",children:"The Solution"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Direct Upload with Pre-signed URLs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'1. Client requests upload permission\n   Client \u2192 Server: "I want to upload user123.jpg"\n\n2. Server requests pre-signed URL\n   Server \u2192 S3: "Give me upload URL for user123.jpg, valid 1 hour"\n\n3. S3 returns pre-signed URL\n   S3 \u2192 Server: "https://bucket.s3.amazonaws.com/user123.jpg?signature=..."\n\n4. Client uploads directly\n   Client \u2192 S3: Direct upload using pre-signed URL\n'})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-example",children:"Implementation Example"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Server-side (generating pre-signed URL)"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Python example\ndef generate_upload_url(filename, file_type):\n    presigned_url = s3_client.generate_presigned_url(\n        'put_object',\n        Params={\n            'Bucket': 'my-bucket',\n            'Key': filename,\n            'ContentType': file_type\n        },\n        ExpiresIn=3600  # 1 hour\n    )\n    return presigned_url\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Client-side (using pre-signed URL)"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// JavaScript example\nconst uploadFile = async (file, presignedUrl) => {\n  const response = await fetch(presignedUrl, {\n    method: 'PUT',\n    body: file,\n    headers: {\n      'Content-Type': file.type,\n    },\n  });\n  return response.ok;\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reduced server bandwidth"})," - no proxy through application server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better scalability"})," - server doesn't handle large file processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Faster uploads"})," - direct connection to object storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"})," - temporary, scoped permissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost savings"})," - reduced data transfer costs"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"multi-part-upload",children:"Multi-part Upload"}),"\n",(0,i.jsx)(n.h3,{id:"the-problem-1",children:"The Problem"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"File Size Limitations"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"HTTP POST/PUT limits (typically 5MB for S3)"}),"\n",(0,i.jsx)(n.li,{children:"Browser upload limits"}),"\n",(0,i.jsx)(n.li,{children:"Gateway and proxy limitations"}),"\n",(0,i.jsx)(n.li,{children:"Network timeout constraints for large files"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"the-solution-1",children:"The Solution"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Chunked Upload Process"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Large File (1GB)\n    \u2193\nSplit into chunks (5MB each)\n    \u2193\nUpload chunks in parallel\n    \u2193\nObject storage reassembles\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multi-part-upload-flow",children:"Multi-part Upload Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Initiate Upload"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Client \u2192 S3: "I want to upload 1GB file"\nS3 \u2192 Client: "Upload ID: abc123, use 5MB chunks"\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Upload Chunks"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Chunk 1 (5MB) \u2192 S3 \u2192 Part 1 ETag\nChunk 2 (5MB) \u2192 S3 \u2192 Part 2 ETag\nChunk 3 (5MB) \u2192 S3 \u2192 Part 3 ETag\n... (parallel uploads)\nChunk 200 (5MB) \u2192 S3 \u2192 Part 200 ETag\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Complete Upload"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Client \u2192 S3: "Complete upload abc123 with parts [ETag1, ETag2, ...]"\nS3 \u2192 Client: "Upload complete, file assembled"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-benefits",children:"Implementation Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel uploads"})," - faster overall transfer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resumable uploads"})," - retry individual chunks on failure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better reliability"})," - smaller chunks less likely to fail"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Progress tracking"})," - granular upload progress"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bandwidth optimization"})," - can adjust chunk size"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-architecture",children:"Example Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Client Application\n\u251c\u2500\u2500 File chunking logic\n\u251c\u2500\u2500 Parallel upload management\n\u251c\u2500\u2500 Progress tracking\n\u2514\u2500\u2500 Error retry mechanism\n    \u2193\nObject Storage\n\u251c\u2500\u2500 Multi-part upload API\n\u251c\u2500\u2500 Chunk validation\n\u251c\u2500\u2500 Assembly service\n\u2514\u2500\u2500 Cleanup of incomplete uploads\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"popular-object-storage-services",children:"Popular Object Storage Services"}),"\n",(0,i.jsx)(n.h3,{id:"amazon-s3-simple-storage-service",children:"Amazon S3 (Simple Storage Service)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Market Leader"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Most widely used and documented"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Default choice"})," for system design interviews"]}),"\n",(0,i.jsx)(n.li,{children:"Extensive feature set and integrations"}),"\n",(0,i.jsx)(n.li,{children:"Global availability"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pre-signed URLs for secure access"}),"\n",(0,i.jsx)(n.li,{children:"Multi-part upload (5MB chunk limit)"}),"\n",(0,i.jsx)(n.li,{children:"Storage classes for cost optimization"}),"\n",(0,i.jsx)(n.li,{children:"Cross-region replication"}),"\n",(0,i.jsx)(n.li,{children:"Event notifications"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"google-cloud-storage",children:"Google Cloud Storage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Google's Offering"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Similar features to S3"}),"\n",(0,i.jsx)(n.li,{children:"Strong integration with Google Cloud Platform"}),"\n",(0,i.jsx)(n.li,{children:"Competitive pricing"}),"\n",(0,i.jsx)(n.li,{children:"Multi-regional storage options"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"azure-blob-storage",children:"Azure Blob Storage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Microsoft's Solution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Integrated with Azure ecosystem"}),"\n",(0,i.jsx)(n.li,{children:"Hot, cool, and archive storage tiers"}),"\n",(0,i.jsx)(n.li,{children:"Strong enterprise adoption"}),"\n",(0,i.jsx)(n.li,{children:"Similar API patterns to competitors"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-features-across-all",children:"Common Features Across All"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pre-signed/Signed URLs"})," for secure access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-part upload"})," capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Versioning"})," and lifecycle management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encryption"})," at rest and in transit"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access controls"})," and permissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CDN integration"})," for global distribution"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"1-social-media-and-content-platforms",children:"1. Social Media and Content Platforms"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Architecture Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"User Posts \u2192 Metadata in Database \u2192 Photos/Videos in S3\n         \u2193                      \u2193\n    Post feed API         Direct download URLs\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Components"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User-generated content (photos, videos)"}),"\n",(0,i.jsx)(n.li,{children:"Profile images and cover photos"}),"\n",(0,i.jsx)(n.li,{children:"Story content and highlights"}),"\n",(0,i.jsx)(n.li,{children:"Live streaming archives"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-collaborative-tools-and-file-sharing",children:"2. Collaborative Tools and File Sharing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dropbox-like services"}),": File storage and synchronization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design tools"}),": Large design files and assets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document management"}),": PDFs, presentations, spreadsheets"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pattern"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"File Upload \u2192 Pre-signed URL \u2192 Direct S3 Upload\nFile Sharing \u2192 Signed URL \u2192 Direct S3 Download\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-web-application-assets",children:"3. Web Application Assets"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Static Content Delivery"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CSS and JavaScript files"}),"\n",(0,i.jsx)(n.li,{children:"Images and icons"}),"\n",(0,i.jsx)(n.li,{children:"Fonts and media assets"}),"\n",(0,i.jsx)(n.li,{children:"Usually fronted by CDN for global distribution"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Architecture"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Web App \u2192 CDN \u2192 Object Storage\n             \u2193\n        Global edge locations\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-data-processing-and-analytics",children:"4. Data Processing and Analytics"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Big Data Storage"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Log files"}),": Application logs, server logs, audit trails"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ML training data"}),": Large datasets for machine learning"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data exports"}),": Database dumps, report files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backup archives"}),": System backups and snapshots"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-media-and-entertainment",children:"5. Media and Entertainment"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Content Storage"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Video streaming libraries"}),"\n",(0,i.jsx)(n.li,{children:"Music catalogs"}),"\n",(0,i.jsx)(n.li,{children:"Podcast archives"}),"\n",(0,i.jsx)(n.li,{children:"Image galleries"}),"\n",(0,i.jsx)(n.li,{children:"360-degree content and VR assets"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"interview-questions",children:"Interview Questions"}),"\n",(0,i.jsx)(n.h3,{id:"1-why-would-you-use-object-storage-instead-of-a-traditional-database-for-storing-images",children:'1. "Why would you use object storage instead of a traditional database for storing images?"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Answer Framework"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Traditional databases aren't optimized for large files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Object storage scales horizontally with lower costs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficiency"}),": Reduces database backup size and replication overhead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specialization"}),": Purpose-built for file storage with features like pre-signed URLs"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-how-would-you-design-a-photo-sharing-applications-storage-architecture",children:'2. "How would you design a photo-sharing application\'s storage architecture?"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"System Design Approach"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Users upload photos:\n1. Client gets pre-signed URL from API server\n2. Client uploads directly to S3\n3. API server stores metadata in database\n4. Feed requests return metadata + S3 URLs\n5. Client downloads images directly from S3\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Components"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Database for post metadata and user data"}),"\n",(0,i.jsx)(n.li,{children:"S3 for actual image storage"}),"\n",(0,i.jsx)(n.li,{children:"CDN for global image delivery"}),"\n",(0,i.jsx)(n.li,{children:"Image processing service for thumbnails"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-what-are-pre-signed-urls-and-when-would-you-use-them",children:'3. "What are pre-signed URLs and when would you use them?"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Temporary URLs"})," with embedded authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use cases"}),": Secure uploads, private file access, reducing server load"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benefits"}),": Direct client-to-storage communication, better performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Time-limited, scope-limited permissions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-how-do-you-handle-uploading-very-large-files-1gb",children:'4. "How do you handle uploading very large files (>1GB)?"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Multi-part Upload Strategy"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Split large files into chunks (typically 5MB)"}),"\n",(0,i.jsx)(n.li,{children:"Upload chunks in parallel for better performance"}),"\n",(0,i.jsx)(n.li,{children:"Handle chunk failures independently"}),"\n",(0,i.jsx)(n.li,{children:"Reassemble on object storage side"}),"\n",(0,i.jsx)(n.li,{children:"Provide progress tracking and resumability"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-compare-object-storage-with-a-traditional-file-system",children:'5. "Compare object storage with a traditional file system"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Differences"}),":"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Object Storage"}),(0,i.jsx)(n.th,{children:"Traditional File System"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Namespace"})}),(0,i.jsx)(n.td,{children:"Flat"}),(0,i.jsx)(n.td,{children:"Hierarchical"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Scalability"})}),(0,i.jsx)(n.td,{children:"Horizontal"}),(0,i.jsx)(n.td,{children:"Vertical"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Durability"})}),(0,i.jsx)(n.td,{children:"11 9's with replication"}),(0,i.jsx)(n.td,{children:"Depends on RAID setup"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Access"})}),(0,i.jsx)(n.td,{children:"HTTP REST API"}),(0,i.jsx)(n.td,{children:"File system calls"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Consistency"})}),(0,i.jsx)(n.td,{children:"Eventually consistent"}),(0,i.jsx)(n.td,{children:"Strongly consistent"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cost"})}),(0,i.jsx)(n.td,{children:"Pay per GB stored"}),(0,i.jsx)(n.td,{children:"Fixed infrastructure"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"6-how-would-you-implement-a-file-upload-feature-for-a-web-application",children:'6. "How would you implement a file upload feature for a web application?"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implementation Steps"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client requests upload"}),": Send file metadata to server"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server validation"}),": Check file type, size, permissions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Generate pre-signed URL"}),": Request from S3 with expiration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct upload"}),": Client uploads to S3 using pre-signed URL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metadata storage"}),": Server stores file reference in database"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Confirmation"}),": Return success response with file URL"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"7-what-are-the-trade-offs-of-using-object-storage",children:'7. "What are the trade-offs of using object storage?"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Advantages"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Massive scalability and durability"}),"\n",(0,i.jsx)(n.li,{children:"Cost-effective for large files"}),"\n",(0,i.jsx)(n.li,{children:"Built-in redundancy"}),"\n",(0,i.jsx)(n.li,{children:"Global accessibility"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Disadvantages"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Eventually consistent (in some cases)"}),"\n",(0,i.jsx)(n.li,{children:"No file modification capabilities"}),"\n",(0,i.jsx)(n.li,{children:"API overhead for small operations"}),"\n",(0,i.jsx)(n.li,{children:"Network dependency for access"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"8-design-a-system-to-handle-1-million-image-uploads-per-day",children:'8. "Design a system to handle 1 million image uploads per day"'}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Architecture Considerations"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load balancing"}),": Distribute pre-signed URL requests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Horizontal scaling"}),": Multiple API servers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database optimization"}),": Efficient metadata storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring"}),": Track upload success rates and performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error handling"}),": Retry mechanisms and cleanup processes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Rate limiting and access controls"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);