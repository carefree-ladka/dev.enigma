"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[6147],{28453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>l});var i=r(96540);const t={},s=i.createContext(t);function a(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),i.createElement(s.Provider,{value:e},n.children)}},40512:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=r(74848),t=r(28453);const s={},a="Array",l={id:"DSA/DSA with JavaScript/DSA Cheatsheets/Array Techniques",title:"Array",description:"A comprehensive guide to mastering array patterns and techniques for Data Structures and Algorithms interviews and competitive programming.",source:"@site/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Array Techniques.mdx",sourceDirName:"DSA/DSA with JavaScript/DSA Cheatsheets",slug:"/DSA/DSA with JavaScript/DSA Cheatsheets/Array Techniques",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Array Techniques",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Array Techniques.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DSA Cheatsheets",permalink:"/dev.enigma/docs/category/dsa-cheatsheets"},next:{title:"Backtracking",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/DSA Cheatsheets/Backtracking"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"When to Use Arrays",id:"when-to-use-arrays",level:3},{value:"Basic Array Operations",id:"basic-array-operations",level:2},{value:"Core Array Methods",id:"core-array-methods",level:3},{value:"Array Iteration Patterns",id:"array-iteration-patterns",level:3},{value:"Two Pointer Techniques",id:"two-pointer-techniques",level:2},{value:"1. Opposite Direction Pointers",id:"1-opposite-direction-pointers",level:3},{value:"2. Same Direction Pointers (Fast/Slow)",id:"2-same-direction-pointers-fastslow",level:3},{value:"3. Three Sum Pattern",id:"3-three-sum-pattern",level:3},{value:"4. Container With Most Water",id:"4-container-with-most-water",level:3},{value:"Sliding Window Patterns",id:"sliding-window-patterns",level:2},{value:"1. Fixed Size Window",id:"1-fixed-size-window",level:3},{value:"2. Variable Size Window",id:"2-variable-size-window",level:3},{value:"3. Longest Substring Without Repeating Characters",id:"3-longest-substring-without-repeating-characters",level:3},{value:"4. Sliding Window Maximum",id:"4-sliding-window-maximum",level:3},{value:"Prefix Sum Techniques",id:"prefix-sum-techniques",level:2},{value:"1. Basic Prefix Sum",id:"1-basic-prefix-sum",level:3},{value:"2. Subarray Sum Equals K",id:"2-subarray-sum-equals-k",level:3},{value:"3. Maximum Subarray Sum (Kadane&#39;s Algorithm)",id:"3-maximum-subarray-sum-kadanes-algorithm",level:3},{value:"4. Product of Array Except Self",id:"4-product-of-array-except-self",level:3},{value:"Sorting and Searching",id:"sorting-and-searching",level:2},{value:"1. Binary Search Variations",id:"1-binary-search-variations",level:3},{value:"Basic Binary Search",id:"basic-binary-search",level:4},{value:"Find First/Last Occurrence",id:"find-firstlast-occurrence",level:4},{value:"Search in Rotated Sorted Array",id:"search-in-rotated-sorted-array",level:4},{value:"2. QuickSelect (Kth Largest Element)",id:"2-quickselect-kth-largest-element",level:3},{value:"3. Merge Intervals",id:"3-merge-intervals",level:3},{value:"Subarray Patterns",id:"subarray-patterns",level:2},{value:"1. Maximum Product Subarray",id:"1-maximum-product-subarray",level:3},{value:"2. Longest Increasing Subsequence (LIS)",id:"2-longest-increasing-subsequence-lis",level:3},{value:"3. Minimum Size Subarray Sum",id:"3-minimum-size-subarray-sum",level:3},{value:"Matrix Techniques",id:"matrix-techniques",level:2},{value:"1. Spiral Matrix Traversal",id:"1-spiral-matrix-traversal",level:3},{value:"2. Rotate Matrix 90 Degrees",id:"2-rotate-matrix-90-degrees",level:3},{value:"3. Set Matrix Zeroes",id:"3-set-matrix-zeroes",level:3},{value:"4. Search 2D Matrix",id:"4-search-2d-matrix",level:3},{value:"Dynamic Programming on Arrays",id:"dynamic-programming-on-arrays",level:2},{value:"1. House Robber",id:"1-house-robber",level:3},{value:"2. Climbing Stairs",id:"2-climbing-stairs",level:3},{value:"3. Buy and Sell Stock",id:"3-buy-and-sell-stock",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"1. Trapping Rain Water",id:"1-trapping-rain-water",level:3},{value:"2. Next Greater Element",id:"2-next-greater-element",level:3},{value:"3. Largest Rectangle in Histogram",id:"3-largest-rectangle-in-histogram",level:3},{value:"4. Daily Temperatures",id:"4-daily-temperatures",level:3},{value:"5. Jump Game",id:"5-jump-game",level:3},{value:"6. Gas Station",id:"6-gas-station",level:3},{value:"Problem-Solving Framework",id:"problem-solving-framework",level:2},{value:"Array Pattern Recognition",id:"array-pattern-recognition",level:3},{value:"Step-by-Step Approach",id:"step-by-step-approach",level:3},{value:"Common Optimization Techniques",id:"common-optimization-techniques",level:3},{value:"1. <strong>Space Optimization</strong>",id:"1-space-optimization",level:4},{value:"2. <strong>Early Termination</strong>",id:"2-early-termination",level:4},{value:"3. <strong>Preprocessing</strong>",id:"3-preprocessing",level:4},{value:"Practice Problems",id:"practice-problems",level:2},{value:"Beginner Level",id:"beginner-level",level:3},{value:"Intermediate Level",id:"intermediate-level",level:3},{value:"Advanced Level",id:"advanced-level",level:3},{value:"Expert Level",id:"expert-level",level:3},{value:"Time Complexity Analysis",id:"time-complexity-analysis",level:2},{value:"Common Patterns Summary",id:"common-patterns-summary",level:2},{value:"1. <strong>Two Pointers Template</strong>",id:"1-two-pointers-template",level:3},{value:"2. <strong>Sliding Window Template</strong>",id:"2-sliding-window-template",level:3},{value:"3. <strong>Prefix Sum Template</strong>",id:"3-prefix-sum-template",level:3},{value:"4. <strong>Binary Search Template</strong>",id:"4-binary-search-template",level:3},{value:"5. <strong>Monotonic Stack Template</strong>",id:"5-monotonic-stack-template",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"\u2705 <strong>Array Advantages</strong>",id:"-array-advantages",level:3},{value:"\u26a0\ufe0f <strong>Common Pitfalls</strong>",id:"\ufe0f-common-pitfalls",level:3},{value:"\ud83c\udfaf <strong>Best Practices</strong>",id:"-best-practices",level:3},{value:"\ud83e\udde0 <strong>Memory Tricks</strong>",id:"-memory-tricks",level:3},{value:"Quick Reference Cheat Sheet",id:"quick-reference-cheat-sheet",level:2}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"array",children:"Array"})}),"\n",(0,i.jsx)(e.p,{children:"A comprehensive guide to mastering array patterns and techniques for Data Structures and Algorithms interviews and competitive programming."}),"\n",(0,i.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#basic-array-operations",children:"Basic Array Operations"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#two-pointer-techniques",children:"Two Pointer Techniques"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#sliding-window-patterns",children:"Sliding Window Patterns"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#prefix-sum-techniques",children:"Prefix Sum Techniques"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#sorting-and-searching",children:"Sorting and Searching"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#subarray-patterns",children:"Subarray Patterns"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#matrix-techniques",children:"Matrix Techniques"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#dynamic-programming-on-arrays",children:"Dynamic Programming on Arrays"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#advanced-patterns",children:"Advanced Patterns"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#problem-solving-framework",children:"Problem-Solving Framework"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"#practice-problems",children:"Practice Problems"})}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Arrays"})," are the fundamental data structure in programming, forming the backbone of most algorithms. They're essential for:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sequential data processing"})," and iteration"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Index-based access"})," and manipulation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sorting and searching"})," algorithms"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Dynamic programming"})," solutions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Matrix operations"})," and 2D problems"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sliding window"})," and subarray techniques"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"when-to-use-arrays",children:"When to Use Arrays"}),"\n",(0,i.jsxs)(e.p,{children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Use when you need:"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Fast random access by index O(1)"}),"\n",(0,i.jsx)(e.li,{children:"Cache-friendly sequential processing"}),"\n",(0,i.jsx)(e.li,{children:"Fixed-size collections with known bounds"}),"\n",(0,i.jsx)(e.li,{children:"Mathematical operations on sequences"}),"\n",(0,i.jsx)(e.li,{children:"Sorting and searching operations"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["\u274c ",(0,i.jsx)(e.strong,{children:"Consider alternatives when:"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Frequent insertions/deletions in middle"}),"\n",(0,i.jsx)(e.li,{children:"Unknown or highly variable size"}),"\n",(0,i.jsx)(e.li,{children:"Need key-value associations (use objects/maps)"}),"\n",(0,i.jsx)(e.li,{children:"Require constant-time insertion/deletion"}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"basic-array-operations",children:"Basic Array Operations"}),"\n",(0,i.jsx)(e.h3,{id:"core-array-methods",children:"Core Array Methods"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Creation and initialization\nconst arr = new Array(5).fill(0); // [0, 0, 0, 0, 0]\nconst arr2 = Array.from({ length: 5 }, (_, i) => i); // [0, 1, 2, 3, 4]\nconst arr3 = [...Array(5).keys()]; // [0, 1, 2, 3, 4]\n\n// Access and modification\narr[0] = 10; // O(1) access\nconst first = arr[0]; // O(1) retrieval\narr.length; // Get size\n\n// Adding elements\narr.push(6); // Add to end - O(1) amortized\narr.unshift(0); // Add to beginning - O(n)\narr.splice(2, 0, 'new'); // Insert at index 2 - O(n)\n\n// Removing elements\narr.pop(); // Remove from end - O(1)\narr.shift(); // Remove from beginning - O(n)\narr.splice(2, 1); // Remove at index 2 - O(n)\n\n// Searching\narr.indexOf(value); // Find first index - O(n)\narr.lastIndexOf(value); // Find last index - O(n)\narr.includes(value); // Check if exists - O(n)\narr.find(x => x > 5); // Find first match - O(n)\narr.findIndex(x => x > 5); // Find index of first match - O(n)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"array-iteration-patterns",children:"Array Iteration Patterns"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const numbers = [1, 2, 3, 4, 5];\n\n// Basic iteration\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n\n// Functional iteration\nnumbers.forEach((num, index) => console.log(num, index));\nnumbers.map(x => x * 2); // Transform: [2, 4, 6, 8, 10]\nnumbers.filter(x => x % 2 === 0); // Filter: [2, 4]\nnumbers.reduce((sum, x) => sum + x, 0); // Reduce: 15\n\n// Advanced iteration\nfor (const num of numbers) console.log(num); // Values\nfor (const index in numbers) console.log(index); // Indices\nfor (const [i, num] of numbers.entries()) {\n  // Index + value\n  console.log(i, num);\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Time Complexity Summary:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Access: O(1)"}),"\n",(0,i.jsx)(e.li,{children:"Search: O(n)"}),"\n",(0,i.jsx)(e.li,{children:"Insertion: O(1) at end, O(n) elsewhere"}),"\n",(0,i.jsx)(e.li,{children:"Deletion: O(1) at end, O(n) elsewhere"}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"two-pointer-techniques",children:"Two Pointer Techniques"}),"\n",(0,i.jsx)(e.h3,{id:"1-opposite-direction-pointers",children:"1. Opposite Direction Pointers"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Two Sum in sorted array."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function twoSum(numbers, target) {\n  let left = 0;\n  let right = numbers.length - 1;\n\n  while (left < right) {\n    const sum = numbers[left] + numbers[right];\n\n    if (sum === target) {\n      return [left, right];\n    } else if (sum < target) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  return [];\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(e.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(e.h3,{id:"2-same-direction-pointers-fastslow",children:"2. Same Direction Pointers (Fast/Slow)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Remove duplicates from sorted array in-place."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function removeDuplicates(nums) {\n  if (nums.length <= 1) return nums.length;\n\n  let slow = 0; // Points to last unique element\n\n  for (let fast = 1; fast < nums.length; fast++) {\n    if (nums[fast] !== nums[slow]) {\n      slow++;\n      nums[slow] = nums[fast];\n    }\n  }\n\n  return slow + 1; // New length\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-three-sum-pattern",children:"3. Three Sum Pattern"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find all unique triplets that sum to zero."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function threeSum(nums) {\n  nums.sort((a, b) => a - b);\n  const result = [];\n\n  for (let i = 0; i < nums.length - 2; i++) {\n    // Skip duplicates for first number\n    if (i > 0 && nums[i] === nums[i - 1]) continue;\n\n    let left = i + 1;\n    let right = nums.length - 1;\n    const target = -nums[i];\n\n    while (left < right) {\n      const sum = nums[left] + nums[right];\n\n      if (sum === target) {\n        result.push([nums[i], nums[left], nums[right]]);\n\n        // Skip duplicates\n        while (left < right && nums[left] === nums[left + 1]) left++;\n        while (left < right && nums[right] === nums[right - 1]) right--;\n\n        left++;\n        right--;\n      } else if (sum < target) {\n        left++;\n      } else {\n        right--;\n      }\n    }\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"4-container-with-most-water",children:"4. Container With Most Water"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find maximum area between two lines."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function maxArea(height) {\n  let left = 0;\n  let right = height.length - 1;\n  let maxWater = 0;\n\n  while (left < right) {\n    const width = right - left;\n    const minHeight = Math.min(height[left], height[right]);\n    const water = width * minHeight;\n\n    maxWater = Math.max(maxWater, water);\n\n    // Move pointer with smaller height\n    if (height[left] < height[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  return maxWater;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Key Insight:"})," Always move the pointer with smaller height to potentially find larger area."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"sliding-window-patterns",children:"Sliding Window Patterns"}),"\n",(0,i.jsx)(e.h3,{id:"1-fixed-size-window",children:"1. Fixed Size Window"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Maximum sum of k consecutive elements."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function maxSumSubarray(arr, k) {\n  if (arr.length < k) return 0;\n\n  // Calculate sum of first window\n  let windowSum = 0;\n  for (let i = 0; i < k; i++) {\n    windowSum += arr[i];\n  }\n\n  let maxSum = windowSum;\n\n  // Slide the window\n  for (let i = k; i < arr.length; i++) {\n    windowSum += arr[i] - arr[i - k];\n    maxSum = Math.max(maxSum, windowSum);\n  }\n\n  return maxSum;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(e.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(e.h3,{id:"2-variable-size-window",children:"2. Variable Size Window"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Smallest subarray with sum \u2265 target."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function minSubArrayLen(target, nums) {\n  let left = 0;\n  let sum = 0;\n  let minLen = Infinity;\n\n  for (let right = 0; right < nums.length; right++) {\n    sum += nums[right];\n\n    // Shrink window while sum >= target\n    while (sum >= target) {\n      minLen = Math.min(minLen, right - left + 1);\n      sum -= nums[left];\n      left++;\n    }\n  }\n\n  return minLen === Infinity ? 0 : minLen;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-longest-substring-without-repeating-characters",children:"3. Longest Substring Without Repeating Characters"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find length of longest substring with unique characters."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function lengthOfLongestSubstring(s) {\n  const charSet = new Set();\n  let left = 0;\n  let maxLen = 0;\n\n  for (let right = 0; right < s.length; right++) {\n    // Shrink window until no duplicates\n    while (charSet.has(s[right])) {\n      charSet.delete(s[left]);\n      left++;\n    }\n\n    charSet.add(s[right]);\n    maxLen = Math.max(maxLen, right - left + 1);\n  }\n\n  return maxLen;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"4-sliding-window-maximum",children:"4. Sliding Window Maximum"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Maximum in each sliding window of size k."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function maxSlidingWindow(nums, k) {\n  const result = [];\n  const deque = []; // Stores indices in decreasing order of values\n\n  for (let i = 0; i < nums.length; i++) {\n    // Remove indices outside current window\n    while (deque.length > 0 && deque[0] <= i - k) {\n      deque.shift();\n    }\n\n    // Remove indices with smaller values\n    while (deque.length > 0 && nums[deque[deque.length - 1]] <= nums[i]) {\n      deque.pop();\n    }\n\n    deque.push(i);\n\n    // Add maximum to result when window is complete\n    if (i >= k - 1) {\n      result.push(nums[deque[0]]);\n    }\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(e.strong,{children:"Space Complexity:"})," O(k)"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"prefix-sum-techniques",children:"Prefix Sum Techniques"}),"\n",(0,i.jsx)(e.h3,{id:"1-basic-prefix-sum",children:"1. Basic Prefix Sum"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Range sum queries in O(1) time."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"class PrefixSum {\n  constructor(nums) {\n    this.prefixSum = new Array(nums.length + 1).fill(0);\n\n    // Build prefix sum array\n    for (let i = 0; i < nums.length; i++) {\n      this.prefixSum[i + 1] = this.prefixSum[i] + nums[i];\n    }\n  }\n\n  // Sum of elements from index left to right (inclusive)\n  rangeSum(left, right) {\n    return this.prefixSum[right + 1] - this.prefixSum[left];\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const ps = new PrefixSum([1, 2, 3, 4, 5]);\nconsole.log(ps.rangeSum(1, 3)); // Sum of [2, 3, 4] = 9\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-subarray-sum-equals-k",children:"2. Subarray Sum Equals K"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Count subarrays with sum equal to k."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function subarraySum(nums, k) {\n  const prefixSumCount = new Map();\n  prefixSumCount.set(0, 1); // Handle subarrays starting from index 0\n\n  let count = 0;\n  let prefixSum = 0;\n\n  for (const num of nums) {\n    prefixSum += num;\n\n    // Check if (prefixSum - k) exists\n    if (prefixSumCount.has(prefixSum - k)) {\n      count += prefixSumCount.get(prefixSum - k);\n    }\n\n    // Update prefix sum count\n    prefixSumCount.set(prefixSum, (prefixSumCount.get(prefixSum) || 0) + 1);\n  }\n\n  return count;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Key Insight:"})," If prefixSum[j] - prefixSum[i] = k, then subarray from i+1 to j has sum k."]}),"\n",(0,i.jsx)(e.h3,{id:"3-maximum-subarray-sum-kadanes-algorithm",children:"3. Maximum Subarray Sum (Kadane's Algorithm)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find contiguous subarray with maximum sum."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function maxSubArray(nums) {\n  let maxSoFar = nums[0];\n  let maxEndingHere = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    // Either start new subarray or extend current one\n    maxEndingHere = Math.max(nums[i], maxEndingHere + nums[i]);\n    maxSoFar = Math.max(maxSoFar, maxEndingHere);\n  }\n\n  return maxSoFar;\n}\n\n// Variant: Return the actual subarray\nfunction maxSubArrayWithIndices(nums) {\n  let maxSum = nums[0];\n  let currentSum = nums[0];\n  let start = 0,\n    end = 0,\n    tempStart = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    if (currentSum < 0) {\n      currentSum = nums[i];\n      tempStart = i;\n    } else {\n      currentSum += nums[i];\n    }\n\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n      start = tempStart;\n      end = i;\n    }\n  }\n\n  return {\n    maxSum,\n    subarray: nums.slice(start, end + 1),\n    indices: [start, end],\n  };\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"4-product-of-array-except-self",children:"4. Product of Array Except Self"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Return array where each element is product of all other elements."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function productExceptSelf(nums) {\n  const result = new Array(nums.length);\n\n  // Left pass: product of all elements to the left\n  result[0] = 1;\n  for (let i = 1; i < nums.length; i++) {\n    result[i] = result[i - 1] * nums[i - 1];\n  }\n\n  // Right pass: multiply by product of all elements to the right\n  let rightProduct = 1;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    result[i] *= rightProduct;\n    rightProduct *= nums[i];\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(e.strong,{children:"Space Complexity:"})," O(1) excluding output array"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"sorting-and-searching",children:"Sorting and Searching"}),"\n",(0,i.jsx)(e.h3,{id:"1-binary-search-variations",children:"1. Binary Search Variations"}),"\n",(0,i.jsx)(e.h4,{id:"basic-binary-search",children:"Basic Binary Search"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function binarySearch(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n\n    if (nums[mid] === target) {\n      return mid;\n    } else if (nums[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return -1; // Not found\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"find-firstlast-occurrence",children:"Find First/Last Occurrence"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function searchRange(nums, target) {\n  const findFirst = (nums, target) => {\n    let left = 0,\n      right = nums.length - 1;\n    let result = -1;\n\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n\n      if (nums[mid] === target) {\n        result = mid;\n        right = mid - 1; // Continue searching left\n      } else if (nums[mid] < target) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n\n    return result;\n  };\n\n  const findLast = (nums, target) => {\n    let left = 0,\n      right = nums.length - 1;\n    let result = -1;\n\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n\n      if (nums[mid] === target) {\n        result = mid;\n        left = mid + 1; // Continue searching right\n      } else if (nums[mid] < target) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n\n    return result;\n  };\n\n  return [findFirst(nums, target), findLast(nums, target)];\n}\n"})}),"\n",(0,i.jsx)(e.h4,{id:"search-in-rotated-sorted-array",children:"Search in Rotated Sorted Array"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function searchRotated(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n\n    if (nums[mid] === target) {\n      return mid;\n    }\n\n    // Determine which half is sorted\n    if (nums[left] <= nums[mid]) {\n      // Left half is sorted\n      if (nums[left] <= target && target < nums[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    } else {\n      // Right half is sorted\n      if (nums[mid] < target && target <= nums[right]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n\n  return -1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-quickselect-kth-largest-element",children:"2. QuickSelect (Kth Largest Element)"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findKthLargest(nums, k) {\n  const quickSelect = (left, right, kSmallest) => {\n    if (left === right) return nums[left];\n\n    const pivotIndex = partition(left, right);\n\n    if (pivotIndex === kSmallest) {\n      return nums[pivotIndex];\n    } else if (pivotIndex < kSmallest) {\n      return quickSelect(pivotIndex + 1, right, kSmallest);\n    } else {\n      return quickSelect(left, pivotIndex - 1, kSmallest);\n    }\n  };\n\n  const partition = (left, right) => {\n    const pivot = nums[right];\n    let i = left;\n\n    for (let j = left; j < right; j++) {\n      if (nums[j] <= pivot) {\n        [nums[i], nums[j]] = [nums[j], nums[i]];\n        i++;\n      }\n    }\n\n    [nums[i], nums[right]] = [nums[right], nums[i]];\n    return i;\n  };\n\n  return quickSelect(0, nums.length - 1, nums.length - k);\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Average Time Complexity:"})," O(n) | ",(0,i.jsx)(e.strong,{children:"Worst Case:"})," O(n\xb2)"]}),"\n",(0,i.jsx)(e.h3,{id:"3-merge-intervals",children:"3. Merge Intervals"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function merge(intervals) {\n  if (intervals.length <= 1) return intervals;\n\n  // Sort by start time\n  intervals.sort((a, b) => a[0] - b[0]);\n\n  const result = [intervals[0]];\n\n  for (let i = 1; i < intervals.length; i++) {\n    const current = intervals[i];\n    const lastMerged = result[result.length - 1];\n\n    if (current[0] <= lastMerged[1]) {\n      // Overlapping intervals - merge them\n      lastMerged[1] = Math.max(lastMerged[1], current[1]);\n    } else {\n      // Non-overlapping - add to result\n      result.push(current);\n    }\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"subarray-patterns",children:"Subarray Patterns"}),"\n",(0,i.jsx)(e.h3,{id:"1-maximum-product-subarray",children:"1. Maximum Product Subarray"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find contiguous subarray with maximum product."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function maxProduct(nums) {\n  let maxSoFar = nums[0];\n  let minSoFar = nums[0]; // Track minimum for negative numbers\n  let result = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    const num = nums[i];\n\n    if (num < 0) {\n      // Swap max and min when multiplying by negative\n      [maxSoFar, minSoFar] = [minSoFar, maxSoFar];\n    }\n\n    maxSoFar = Math.max(num, maxSoFar * num);\n    minSoFar = Math.min(num, minSoFar * num);\n\n    result = Math.max(result, maxSoFar);\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-longest-increasing-subsequence-lis",children:"2. Longest Increasing Subsequence (LIS)"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find length of longest increasing subsequence."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// O(n\xb2) DP solution\nfunction lengthOfLIS(nums) {\n  if (nums.length === 0) return 0;\n\n  const dp = new Array(nums.length).fill(1);\n  let maxLength = 1;\n\n  for (let i = 1; i < nums.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (nums[j] < nums[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    maxLength = Math.max(maxLength, dp[i]);\n  }\n\n  return maxLength;\n}\n\n// O(n log n) Binary Search solution\nfunction lengthOfLISOptimal(nums) {\n  if (nums.length === 0) return 0;\n\n  const tails = []; // tails[i] = smallest ending element of increasing subsequence of length i+1\n\n  for (const num of nums) {\n    let left = 0;\n    let right = tails.length;\n\n    // Binary search for insertion position\n    while (left < right) {\n      const mid = Math.floor((left + right) / 2);\n      if (tails[mid] < num) {\n        left = mid + 1;\n      } else {\n        right = mid;\n      }\n    }\n\n    // Update or append\n    if (left === tails.length) {\n      tails.push(num);\n    } else {\n      tails[left] = num;\n    }\n  }\n\n  return tails.length;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-minimum-size-subarray-sum",children:"3. Minimum Size Subarray Sum"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find minimum length subarray with sum \u2265 target."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function minSubArrayLen(target, nums) {\n  let left = 0;\n  let sum = 0;\n  let minLen = Infinity;\n\n  for (let right = 0; right < nums.length; right++) {\n    sum += nums[right];\n\n    while (sum >= target) {\n      minLen = Math.min(minLen, right - left + 1);\n      sum -= nums[left];\n      left++;\n    }\n  }\n\n  return minLen === Infinity ? 0 : minLen;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"matrix-techniques",children:"Matrix Techniques"}),"\n",(0,i.jsx)(e.h3,{id:"1-spiral-matrix-traversal",children:"1. Spiral Matrix Traversal"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Return matrix elements in spiral order."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function spiralOrder(matrix) {\n  if (matrix.length === 0) return [];\n\n  const result = [];\n  let top = 0,\n    bottom = matrix.length - 1;\n  let left = 0,\n    right = matrix[0].length - 1;\n\n  while (top <= bottom && left <= right) {\n    // Traverse right\n    for (let j = left; j <= right; j++) {\n      result.push(matrix[top][j]);\n    }\n    top++;\n\n    // Traverse down\n    for (let i = top; i <= bottom; i++) {\n      result.push(matrix[i][right]);\n    }\n    right--;\n\n    // Traverse left (if we still have rows)\n    if (top <= bottom) {\n      for (let j = right; j >= left; j--) {\n        result.push(matrix[bottom][j]);\n      }\n      bottom--;\n    }\n\n    // Traverse up (if we still have columns)\n    if (left <= right) {\n      for (let i = bottom; i >= top; i--) {\n        result.push(matrix[i][left]);\n      }\n      left++;\n    }\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-rotate-matrix-90-degrees",children:"2. Rotate Matrix 90 Degrees"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Rotate n\xd7n matrix 90 degrees clockwise in-place."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function rotate(matrix) {\n  const n = matrix.length;\n\n  // Transpose the matrix\n  for (let i = 0; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];\n    }\n  }\n\n  // Reverse each row\n  for (let i = 0; i < n; i++) {\n    matrix[i].reverse();\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-set-matrix-zeroes",children:"3. Set Matrix Zeroes"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Set entire row and column to 0 if element is 0."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function setZeroes(matrix) {\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  let firstRowZero = false;\n  let firstColZero = false;\n\n  // Check if first row has zero\n  for (let j = 0; j < cols; j++) {\n    if (matrix[0][j] === 0) {\n      firstRowZero = true;\n      break;\n    }\n  }\n\n  // Check if first column has zero\n  for (let i = 0; i < rows; i++) {\n    if (matrix[i][0] === 0) {\n      firstColZero = true;\n      break;\n    }\n  }\n\n  // Use first row and column as markers\n  for (let i = 1; i < rows; i++) {\n    for (let j = 1; j < cols; j++) {\n      if (matrix[i][j] === 0) {\n        matrix[i][0] = 0; // Mark row\n        matrix[0][j] = 0; // Mark column\n      }\n    }\n  }\n\n  // Set zeros based on markers\n  for (let i = 1; i < rows; i++) {\n    for (let j = 1; j < cols; j++) {\n      if (matrix[i][0] === 0 || matrix[0][j] === 0) {\n        matrix[i][j] = 0;\n      }\n    }\n  }\n\n  // Handle first row and column\n  if (firstRowZero) {\n    for (let j = 0; j < cols; j++) {\n      matrix[0][j] = 0;\n    }\n  }\n\n  if (firstColZero) {\n    for (let i = 0; i < rows; i++) {\n      matrix[i][0] = 0;\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Space Complexity:"})," O(1) by using matrix itself as storage"]}),"\n",(0,i.jsx)(e.h3,{id:"4-search-2d-matrix",children:"4. Search 2D Matrix"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Search target in sorted 2D matrix."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Approach 1: Treat as 1D sorted array\nfunction searchMatrix(matrix, target) {\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n\n  let left = 0;\n  let right = rows * cols - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const midValue = matrix[Math.floor(mid / cols)][mid % cols];\n\n    if (midValue === target) {\n      return true;\n    } else if (midValue < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return false;\n}\n\n// Approach 2: Start from top-right corner\nfunction searchMatrixII(matrix, target) {\n  let row = 0;\n  let col = matrix[0].length - 1;\n\n  while (row < matrix.length && col >= 0) {\n    if (matrix[row][col] === target) {\n      return true;\n    } else if (matrix[row][col] > target) {\n      col--;\n    } else {\n      row++;\n    }\n  }\n\n  return false;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"dynamic-programming-on-arrays",children:"Dynamic Programming on Arrays"}),"\n",(0,i.jsx)(e.h3,{id:"1-house-robber",children:"1. House Robber"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Rob houses without alerting police (no adjacent houses)."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function rob(nums) {\n  if (nums.length === 0) return 0;\n  if (nums.length === 1) return nums[0];\n\n  let prev2 = nums[0]; // dp[i-2]\n  let prev1 = Math.max(nums[0], nums[1]); // dp[i-1]\n\n  for (let i = 2; i < nums.length; i++) {\n    const current = Math.max(prev1, prev2 + nums[i]);\n    prev2 = prev1;\n    prev1 = current;\n  }\n\n  return prev1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-climbing-stairs",children:"2. Climbing Stairs"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Number of ways to reach top (1 or 2 steps at a time)."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function climbStairs(n) {\n  if (n <= 2) return n;\n\n  let prev2 = 1; // Ways to reach step 1\n  let prev1 = 2; // Ways to reach step 2\n\n  for (let i = 3; i <= n; i++) {\n    const current = prev1 + prev2;\n    prev2 = prev1;\n    prev1 = current;\n  }\n\n  return prev1;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-buy-and-sell-stock",children:"3. Buy and Sell Stock"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Maximum profit from one transaction."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function maxProfit(prices) {\n  let minPrice = prices[0];\n  let maxProfit = 0;\n\n  for (let i = 1; i < prices.length; i++) {\n    minPrice = Math.min(minPrice, prices[i]);\n    maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n  }\n\n  return maxProfit;\n}\n\n// Multiple transactions allowed\nfunction maxProfitMultiple(prices) {\n  let profit = 0;\n\n  for (let i = 1; i < prices.length; i++) {\n    if (prices[i] > prices[i - 1]) {\n      profit += prices[i] - prices[i - 1];\n    }\n  }\n\n  return profit;\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,i.jsx)(e.h3,{id:"1-trapping-rain-water",children:"1. Trapping Rain Water"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Calculate trapped rainwater between bars."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function trap(height) {\n  if (height.length < 3) return 0;\n\n  let left = 0;\n  let right = height.length - 1;\n  let leftMax = 0;\n  let rightMax = 0;\n  let water = 0;\n\n  while (left < right) {\n    if (height[left] < height[right]) {\n      if (height[left] >= leftMax) {\n        leftMax = height[left];\n      } else {\n        water += leftMax - height[left];\n      }\n      left++;\n    } else {\n      if (height[right] >= rightMax) {\n        rightMax = height[right];\n      } else {\n        water += rightMax - height[right];\n      }\n      right--;\n    }\n  }\n\n  return water;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity:"})," O(n) | ",(0,i.jsx)(e.strong,{children:"Space Complexity:"})," O(1)"]}),"\n",(0,i.jsx)(e.h3,{id:"2-next-greater-element",children:"2. Next Greater Element"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find next greater element for each array element."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function nextGreaterElement(nums) {\n  const result = new Array(nums.length).fill(-1);\n  const stack = []; // Monotonic decreasing stack\n\n  for (let i = 0; i < nums.length; i++) {\n    // Pop elements smaller than current\n    while (stack.length > 0 && nums[stack[stack.length - 1]] < nums[i]) {\n      const index = stack.pop();\n      result[index] = nums[i];\n    }\n\n    stack.push(i);\n  }\n\n  return result;\n}\n\n// Circular array variant\nfunction nextGreaterElementsCircular(nums) {\n  const n = nums.length;\n  const result = new Array(n).fill(-1);\n  const stack = [];\n\n  // Process array twice to handle circular nature\n  for (let i = 0; i < 2 * n; i++) {\n    const num = nums[i % n];\n\n    while (stack.length > 0 && nums[stack[stack.length - 1]] < num) {\n      result[stack.pop()] = num;\n    }\n\n    if (i < n) {\n      stack.push(i);\n    }\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-largest-rectangle-in-histogram",children:"3. Largest Rectangle in Histogram"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find area of largest rectangle in histogram."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function largestRectangleArea(heights) {\n  const stack = []; // Monotonic increasing stack\n  let maxArea = 0;\n\n  for (let i = 0; i <= heights.length; i++) {\n    const currentHeight = i === heights.length ? 0 : heights[i];\n\n    while (\n      stack.length > 0 &&\n      heights[stack[stack.length - 1]] > currentHeight\n    ) {\n      const height = heights[stack.pop()];\n      const width = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;\n      maxArea = Math.max(maxArea, height * width);\n    }\n\n    stack.push(i);\n  }\n\n  return maxArea;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"4-daily-temperatures",children:"4. Daily Temperatures"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find days until warmer temperature."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function dailyTemperatures(temperatures) {\n  const result = new Array(temperatures.length).fill(0);\n  const stack = []; // Store indices\n\n  for (let i = 0; i < temperatures.length; i++) {\n    while (\n      stack.length > 0 &&\n      temperatures[stack[stack.length - 1]] < temperatures[i]\n    ) {\n      const prevIndex = stack.pop();\n      result[prevIndex] = i - prevIndex;\n    }\n\n    stack.push(i);\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"5-jump-game",children:"5. Jump Game"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Determine if you can reach the last index."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function canJump(nums) {\n  let maxReach = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    if (i > maxReach) {\n      return false; // Can't reach this position\n    }\n\n    maxReach = Math.max(maxReach, i + nums[i]);\n\n    if (maxReach >= nums.length - 1) {\n      return true; // Can reach the end\n    }\n  }\n\n  return false;\n}\n\n// Minimum jumps to reach end\nfunction jumpMinimum(nums) {\n  let jumps = 0;\n  let currentEnd = 0;\n  let farthest = 0;\n\n  for (let i = 0; i < nums.length - 1; i++) {\n    farthest = Math.max(farthest, i + nums[i]);\n\n    if (i === currentEnd) {\n      jumps++;\n      currentEnd = farthest;\n    }\n  }\n\n  return jumps;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"6-gas-station",children:"6. Gas Station"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Problem:"})," Find starting gas station to complete circular tour."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function canCompleteCircuit(gas, cost) {\n  let totalTank = 0;\n  let currentTank = 0;\n  let startingStation = 0;\n\n  for (let i = 0; i < gas.length; i++) {\n    totalTank += gas[i] - cost[i];\n    currentTank += gas[i] - cost[i];\n\n    // If current tank goes negative, try starting from next station\n    if (currentTank < 0) {\n      startingStation = i + 1;\n      currentTank = 0;\n    }\n  }\n\n  return totalTank >= 0 ? startingStation : -1;\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Key Insight:"})," If total gas \u2265 total cost, there must be a solution."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"problem-solving-framework",children:"Problem-Solving Framework"}),"\n",(0,i.jsx)(e.h3,{id:"array-pattern-recognition",children:"Array Pattern Recognition"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Two Pointers"})," \u2192 Sorted array, palindrome, two sum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sliding Window"})," \u2192 Subarray/substring problems"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Prefix Sum"})," \u2192 Range queries, subarray sum"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Binary Search"})," \u2192 Sorted array, search space"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Stack/Monotonic"})," \u2192 Next greater/smaller element"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"DP"})," \u2192 Optimization problems, overlapping subproblems"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"step-by-step-approach",children:"Step-by-Step Approach"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function arrayProblemTemplate(arr, target) {\n  // 1. Understand the problem constraints\n  // - Array size, element range\n  // - Time/space complexity requirements\n  // - In-place vs extra space allowed\n\n  // 2. Identify the pattern\n  // - Two pointers for sorted arrays\n  // - Sliding window for subarrays\n  // - DP for optimization\n\n  // 3. Handle edge cases\n  if (!arr || arr.length === 0) return defaultValue;\n  if (arr.length === 1) return handleSingleElement(arr[0]);\n\n  // 4. Choose appropriate technique\n  let result = initialize();\n\n  // Main algorithm implementation\n  for (let i = 0; i < arr.length; i++) {\n    // Process current element\n    result = updateResult(result, arr[i], i);\n  }\n\n  return result;\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"common-optimization-techniques",children:"Common Optimization Techniques"}),"\n",(0,i.jsxs)(e.h4,{id:"1-space-optimization",children:["1. ",(0,i.jsx)(e.strong,{children:"Space Optimization"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Instead of creating new arrays\nconst newArr = arr.map(x => x * 2);\n\n// Modify in-place when possible\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] *= 2;\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"2-early-termination",children:["2. ",(0,i.jsx)(e.strong,{children:"Early Termination"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"function findFirst(arr, condition) {\n  for (let i = 0; i < arr.length; i++) {\n    if (condition(arr[i])) {\n      return i; // Early return\n    }\n  }\n  return -1;\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"3-preprocessing",children:["3. ",(0,i.jsx)(e.strong,{children:"Preprocessing"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Sort array if it helps reduce complexity\narr.sort((a, b) => a - b);\n\n// Create frequency map\nconst freq = new Map();\nfor (const num of arr) {\n  freq.set(num, (freq.get(num) || 0) + 1);\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"practice-problems",children:"Practice Problems"}),"\n",(0,i.jsx)(e.h3,{id:"beginner-level",children:"Beginner Level"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Two Sum"})," - Hash map or two pointers"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Remove Duplicates"})," - Two pointers"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Maximum Subarray"})," - Kadane's algorithm"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Merge Sorted Array"})," - Two pointers"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Plus One"})," - Array manipulation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Move Zeroes"})," - Two pointers"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"intermediate-level",children:"Intermediate Level"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"3Sum"})," - Two pointers with sorting"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Container With Most Water"})," - Two pointers"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Product of Array Except Self"})," - Prefix/suffix arrays"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Spiral Matrix"})," - Matrix traversal"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Rotate Array"})," - Array rotation techniques"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Subarray Sum Equals K"})," - Prefix sum + hash map"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Find Minimum in Rotated Sorted Array"})," - Binary search"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"advanced-level",children:"Advanced Level"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Trapping Rain Water"})," - Two pointers or stack"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Largest Rectangle in Histogram"})," - Monotonic stack"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sliding Window Maximum"})," - Deque optimization"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Jump Game II"})," - Greedy algorithm"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"First Missing Positive"})," - Array as hash table"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Median of Two Sorted Arrays"})," - Binary search"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Longest Increasing Subsequence"})," - DP + binary search"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"expert-level",children:"Expert Level"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Regular Expression Matching"})," - Complex DP"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Candy"})," - Greedy with two passes"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Russian Doll Envelopes"})," - LIS variation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Count of Smaller Numbers After Self"})," - Merge sort variation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Maximum Rectangle"})," - Histogram + DP"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Minimum Window Substring"})," - Advanced sliding window"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"time-complexity-analysis",children:"Time Complexity Analysis"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Pattern/Algorithm"}),(0,i.jsx)(e.th,{children:"Time Complexity"}),(0,i.jsx)(e.th,{children:"Space Complexity"}),(0,i.jsx)(e.th,{children:"Use Cases"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Linear Scan"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"Basic traversal"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Two Pointers"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"Sorted arrays, palindromes"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Sliding Window"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(k)"}),(0,i.jsx)(e.td,{children:"Subarray problems"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Binary Search"}),(0,i.jsx)(e.td,{children:"O(log n)"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"Sorted arrays"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Quick Sort"}),(0,i.jsx)(e.td,{children:"O(n log n) avg"}),(0,i.jsx)(e.td,{children:"O(log n)"}),(0,i.jsx)(e.td,{children:"General sorting"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Merge Sort"}),(0,i.jsx)(e.td,{children:"O(n log n)"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"Stable sorting"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Kadane's Algorithm"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"Maximum subarray"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Dutch Flag"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"3-way partitioning"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Monotonic Stack"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"Next greater/smaller"})]})]})]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"common-patterns-summary",children:"Common Patterns Summary"}),"\n",(0,i.jsxs)(e.h3,{id:"1-two-pointers-template",children:["1. ",(0,i.jsx)(e.strong,{children:"Two Pointers Template"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"let left = 0,\n  right = arr.length - 1;\nwhile (left < right) {\n  if (condition) {\n    // Found solution\n    return result;\n  } else if (needMoveLeft) {\n    left++;\n  } else {\n    right--;\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"2-sliding-window-template",children:["2. ",(0,i.jsx)(e.strong,{children:"Sliding Window Template"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"let left = 0,\n  right = 0;\nlet windowSum = 0;\n\nwhile (right < arr.length) {\n  windowSum += arr[right];\n\n  while (windowSum > target) {\n    windowSum -= arr[left];\n    left++;\n  }\n\n  // Update result\n  right++;\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"3-prefix-sum-template",children:["3. ",(0,i.jsx)(e.strong,{children:"Prefix Sum Template"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const prefixSum = [0];\nfor (let i = 0; i < arr.length; i++) {\n  prefixSum[i + 1] = prefixSum[i] + arr[i];\n}\n\n// Range sum query [left, right]\nconst rangeSum = prefixSum[right + 1] - prefixSum[left];\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"4-binary-search-template",children:["4. ",(0,i.jsx)(e.strong,{children:"Binary Search Template"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"let left = 0,\n  right = arr.length - 1;\n\nwhile (left <= right) {\n  const mid = Math.floor((left + right) / 2);\n\n  if (arr[mid] === target) {\n    return mid;\n  } else if (arr[mid] < target) {\n    left = mid + 1;\n  } else {\n    right = mid - 1;\n  }\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"5-monotonic-stack-template",children:["5. ",(0,i.jsx)(e.strong,{children:"Monotonic Stack Template"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"const stack = [];\nconst result = new Array(arr.length);\n\nfor (let i = 0; i < arr.length; i++) {\n  while (stack.length > 0 && arr[stack[stack.length - 1]] < arr[i]) {\n    const index = stack.pop();\n    result[index] = arr[i]; // Next greater element\n  }\n  stack.push(i);\n}\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(e.h3,{id:"-array-advantages",children:["\u2705 ",(0,i.jsx)(e.strong,{children:"Array Advantages"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"O(1) random access"})," by index"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Cache-friendly"})," sequential access"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Memory efficient"})," (contiguous storage)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Simple iteration"})," patterns"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Rich built-in methods"})," in modern languages"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"\ufe0f-common-pitfalls",children:["\u26a0\ufe0f ",(0,i.jsx)(e.strong,{children:"Common Pitfalls"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Index out of bounds"})," errors"]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Modifying array during iteration"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Not handling empty arrays"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Overflow in sum/product calculations"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Incorrect loop boundaries"})}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"-best-practices",children:["\ud83c\udfaf ",(0,i.jsx)(e.strong,{children:"Best Practices"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Validate inputs"})," and handle edge cases"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Choose appropriate data structure"})," for the problem"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Consider in-place vs extra space"})," trade-offs"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Use meaningful variable names"})," (left, right, slow, fast)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Test with small examples"})," first"]}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"-memory-tricks",children:["\ud83e\udde0 ",(0,i.jsx)(e.strong,{children:"Memory Tricks"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:'"Two pointers = O(1) space"'})," for sorted arrays"]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:'"Sliding window = efficient subarrays"'})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:'"Prefix sum = O(1) range queries"'})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:'"Binary search = O(log n) in sorted"'})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:'"Stack = next greater/smaller patterns"'})}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"quick-reference-cheat-sheet",children:"Quick Reference Cheat Sheet"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Array Creation\nnew Array(5).fill(0)              // [0,0,0,0,0]\nArray.from({length: 5}, (_, i) => i)  // [0,1,2,3,4]\n[...Array(5).keys()]              // [0,1,2,3,4]\n\n// Common Operations\narr.push(item)                    // Add to end\narr.pop()                         // Remove from end\narr.unshift(item)                 // Add to beginning\narr.shift()                       // Remove from beginning\narr.slice(start, end)             // Copy subarray\narr.splice(start, deleteCount, ...items) // Modify array\n\n// Searching\narr.indexOf(item)                 // First occurrence\narr.lastIndexOf(item)             // Last occurrence\narr.includes(item)                // Check existence\narr.find(predicate)               // First match\narr.findIndex(predicate)          // Index of first match\n\n// Functional Methods\narr.map(fn)                       // Transform elements\narr.filter(fn)                    // Filter elements\narr.reduce(fn, initial)           // Reduce to single value\narr.forEach(fn)                   // Iterate over elements\narr.every(fn)                     // All elements satisfy\narr.some(fn)                      // Any element satisfies\n\n// Sorting\narr.sort()                        // Sort in-place (lexicographic)\narr.sort((a, b) => a - b)         // Numeric ascending\narr.sort((a, b) => b - a)         // Numeric descending\n\n// Two Pointers\nlet left = 0, right = arr.length - 1;\nwhile (left < right) { /* logic */ }\n\n// Sliding Window\nlet left = 0;\nfor (let right = 0; right < arr.length; right++) {\n    // Expand window\n    while (/* shrink condition */) {\n        left++;\n    }\n    // Update result\n}\n\n// Binary Search\nlet left = 0, right = arr.length - 1;\nwhile (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    // Compare and adjust bounds\n}\n"})}),"\n",(0,i.jsx)(e.hr,{})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}}}]);