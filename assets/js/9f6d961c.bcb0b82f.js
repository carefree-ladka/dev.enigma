"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6997],{3556:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var r=n(4848),i=n(8453);const t={title:"Parenthesis Pattern"},l="Parenthesis Problems",a={id:"tutorial-basics/Parentheses",title:"Parenthesis Pattern",description:"Below is a list of common parenthesis-related problems.",source:"@site/docs/tutorial-basics/Parentheses.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Parentheses",permalink:"/js.enigma/docs/tutorial-basics/Parentheses",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Parentheses.mdx",tags:[],version:"current",frontMatter:{title:"Parenthesis Pattern"},sidebar:"tutorialSidebar",previous:{title:"Number of Islands Pattern",permalink:"/js.enigma/docs/tutorial-basics/NumberOfIsland"},next:{title:"Path Sum (Binary Tree)",permalink:"/js.enigma/docs/tutorial-basics/PathSumBinaryTree"}},o={},d=[{value:"Additional Parenthesis Problems",id:"additional-parenthesis-problems",level:3}];function c(e){const s={a:"a",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"parenthesis-problems",children:"Parenthesis Problems"})}),"\n",(0,r.jsx)(s.p,{children:"Below is a list of common parenthesis-related problems."}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Valid Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/valid-parentheses/",children:"LeetCode: Valid Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: Given a string containing just the characters ",(0,r.jsx)(s.code,{children:"("}),", ",(0,r.jsx)(s.code,{children:")"}),", ",(0,r.jsx)(s.code,{children:"{"}),", ",(0,r.jsx)(s.code,{children:"}"}),", ",(0,r.jsx)(s.code,{children:"["})," and ",(0,r.jsx)(s.code,{children:"]"}),", determine if the input string is valid."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Stack, Matching Parentheses."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Generate Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/generate-parentheses/",children:"LeetCode: Generate Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: Given ",(0,r.jsx)(s.code,{children:"n"})," pairs of parentheses, write a function to generate all combinations of well-formed parentheses."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Backtracking, Recursion."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Longest Valid Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/longest-valid-parentheses/",children:"LeetCode: Longest Valid Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Problem: Find the length of the longest valid (well-formed) parentheses substring."}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Dynamic Programming, Stack."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Remove Invalid Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/remove-invalid-parentheses/",children:"LeetCode: Remove Invalid Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Problem: Remove the minimum number of invalid parentheses to make the input string valid."}),"\n",(0,r.jsx)(s.li,{children:"Keywords: BFS, DFS, Backtracking."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Check if Parentheses are Balanced"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",children:"GeeksForGeeks: Check for Balanced Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Problem: Given an expression string, write a program to check if the string contains balanced parentheses."}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Stack."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Minimum Add to Make Parentheses Valid"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/",children:"LeetCode: Minimum Add to Make Parentheses Valid"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Problem: Return the minimum number of parentheses you must add to make the parentheses string valid."}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Stack, Greedy."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Valid Parenthesis String"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/valid-parenthesis-string/",children:"LeetCode: Valid Parenthesis String"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: Given a string containing ",(0,r.jsx)(s.code,{children:"("}),", ",(0,r.jsx)(s.code,{children:")"}),", and ",(0,r.jsx)(s.code,{children:"*"}),", determine if it is valid."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Greedy, Stack, Two Pointers."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Score of Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/score-of-parentheses/",children:"LeetCode: Score of Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: Given a balanced parentheses string ",(0,r.jsx)(s.code,{children:"S"}),", compute the score of the string based on rules."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Stack, Recursion."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Remove Outermost Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/remove-outermost-parentheses/",children:"LeetCode: Remove Outermost Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: A valid parentheses string is either ",(0,r.jsx)(s.code,{children:"()"})," or can be written as ",(0,r.jsx)(s.code,{children:"A + B"}),", where ",(0,r.jsx)(s.code,{children:"A"})," and ",(0,r.jsx)(s.code,{children:"B"})," are valid strings. Remove the outermost parentheses of every primitive string."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: String, Stack."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"additional-parenthesis-problems",children:"Additional Parenthesis Problems"}),"\n",(0,r.jsxs)(s.ol,{start:"10",children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Minimum Number of Swaps to Make the String Balanced"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/",children:"LeetCode: Minimum Number of Swaps to Make the String Balanced"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: You are given a string ",(0,r.jsx)(s.code,{children:"s"})," of even length consisting of parentheses only. You can swap two adjacent characters. Return the minimum number of swaps to make the string balanced."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Greedy, Two Pointers, Stack."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Different Ways to Add Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/different-ways-to-add-parentheses/description/",children:"LeetCode: Different Ways to Add Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Problem: Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators using parentheses."}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Divide and Conquer, Recursion."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Minimum Remove to Make Valid Parentheses"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/description/",children:"LeetCode: Minimum Remove to Make Valid Parentheses"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: Given a string ",(0,r.jsx)(s.code,{children:"s"})," of ",(0,r.jsx)(s.code,{children:"'('"}),", ",(0,r.jsx)(s.code,{children:"')'"}),", and lowercase English characters, remove the minimum number of invalid parentheses to make the string valid."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Stack, String."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Check if a Parentheses String Can Be Valid"}),(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.a,{href:"https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/description/",children:"LeetCode: Check if a Parentheses String Can Be Valid"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Problem: Given a string ",(0,r.jsx)(s.code,{children:"s"})," containing only parentheses and the string ",(0,r.jsx)(s.code,{children:"locked"}),", check if the parentheses string ",(0,r.jsx)(s.code,{children:"s"})," can be valid after some swaps of adjacent parentheses."]}),"\n",(0,r.jsx)(s.li,{children:"Keywords: Greedy, Stack."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var r=n(6540);const i={},t=r.createContext(i);function l(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);