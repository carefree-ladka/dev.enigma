"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8774],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},58326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var s=t(74848),r=t(28453);const i={},a="Jest & React Testing Library Cheatsheet",c={id:"WebDev/React/ReactJestRTL",title:"Jest & React Testing Library Cheatsheet",description:"Jest Core",source:"@site/docs/WebDev/React/ReactJestRTL.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReactJestRTL",permalink:"/dev.enigma/docs/WebDev/React/ReactJestRTL",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReactJestRTL.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Handling Race Conditions in React",permalink:"/dev.enigma/docs/WebDev/React/RaceCondition"},next:{title:"React TypeScript Cheatsheet",permalink:"/dev.enigma/docs/WebDev/React/ReactTypeScript"}},o={},l=[{value:"Jest Core",id:"jest-core",level:2},{value:"Test Structure",id:"test-structure",level:3},{value:"Matchers",id:"matchers",level:3},{value:"Mocks",id:"mocks",level:3},{value:"React Testing Library",id:"react-testing-library",level:2},{value:"Rendering",id:"rendering",level:3},{value:"Queries",id:"queries",level:3},{value:"User Events",id:"user-events",level:3},{value:"Common Patterns",id:"common-patterns",level:3},{value:"Custom Hooks Testing",id:"custom-hooks-testing",level:3},{value:"Testing Best Practices",id:"testing-best-practices",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"jest--react-testing-library-cheatsheet",children:"Jest & React Testing Library Cheatsheet"})}),"\n",(0,s.jsx)(n.h2,{id:"jest-core",children:"Jest Core"}),"\n",(0,s.jsx)(n.h3,{id:"test-structure",children:"Test Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"describe('Component/Unit', () => {\n  beforeAll(() => {})\n  beforeEach(() => {})\n  afterEach(() => {})\n  afterAll(() => {})\n\n  it('should do something', () => {})\n  test('does something', () => {})\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"matchers",children:"Matchers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Common\nexpect(value).toBe(exact)\nexpect(value).toEqual(deepEqual)\nexpect(value).toBeTruthy()\nexpect(value).toBeFalsy()\nexpect(value).toBeNull()\nexpect(value).toBeUndefined()\nexpect(value).toBeDefined()\n\n// Numbers\nexpect(value).toBeGreaterThan(3)\nexpect(value).toBeLessThan(5)\nexpect(value).toBeCloseTo(0.3)\n\n// Strings\nexpect(str).toMatch(/regex/)\nexpect(str).toContain('substring')\nexpect(str).toHaveLength(6)\n\n// Arrays/Objects\nexpect(arr).toContain(item)\nexpect(obj).toHaveProperty('key')\nexpect(arr).toHaveLength(n)\n\n// Functions/Async\nexpect(fn).toThrow(error)\nexpect(promise).resolves.toBe(value)\nexpect(promise).rejects.toThrow(error)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mocks",children:"Mocks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Function Mocks\nconst mock = jest.fn()\nmock.mockReturnValue(value)\nmock.mockImplementation(() => value)\nmock.mockResolvedValue(value)\nmock.mockRejectedValue(error)\n\n// Verifying Calls\nexpect(mock).toHaveBeenCalled()\nexpect(mock).toHaveBeenCalledWith(arg1, arg2)\nexpect(mock).toHaveBeenCalledTimes(n)\n\n// Module Mocks\njest.mock('./module')\njest.spyOn(object, 'method')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"react-testing-library",children:"React Testing Library"}),"\n",(0,s.jsx)(n.h3,{id:"rendering",children:"Rendering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { render, screen } from '@testing-library/react'\n\n// Basic Render\nrender(<Component />)\n\n// With Providers\nrender(\n  <Provider>\n    <Component />\n  </Provider>\n)\n\n// With Router\nrender(\n  <MemoryRouter initialEntries={['/path']}>\n    <Component />\n  </MemoryRouter>\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"queries",children:"Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Priority Order:\n// 1. getByRole\n// 2. getByLabelText\n// 3. getByPlaceholderText\n// 4. getByText\n// 5. getByDisplayValue\n// 6. getByAltText\n// 7. getByTitle\n// 8. getByTestId\n\n// Variants:\n// getBy: Expect element to be in DOM\n// queryBy: Element might not be in DOM\n// findBy: Async, element might appear in DOM\n\n// Multiple elements:\n// getAllBy, queryAllBy, findAllBy\n\n// Examples\nscreen.getByRole('button', { name: /submit/i })\nscreen.getByLabelText('Username')\nscreen.getByPlaceholderText('Enter value')\nscreen.getByText(/hello/i)\nscreen.getByTestId('custom-id')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"user-events",children:"User Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import userEvent from '@testing-library/user-event'\n\n// Setup\nconst user = userEvent.setup()\n\n// Events\nawait user.click(element)\nawait user.type(input, 'text')\nawait user.keyboard('{Enter}')\nawait user.selectOptions(select, ['option'])\nawait user.clear(input)\nawait user.tab()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Testing Form Submission\ntest('form submission', async () => {\n  const user = userEvent.setup()\n  const onSubmit = jest.fn()\n  \n  render(<Form onSubmit={onSubmit} />)\n  \n  await user.type(screen.getByLabelText('Email'), 'test@test.com')\n  await user.type(screen.getByLabelText('Password'), 'password')\n  await user.click(screen.getByRole('button', { name: /submit/i }))\n  \n  expect(onSubmit).toHaveBeenCalled()\n})\n\n// Testing Async Actions\ntest('async data fetching', async () => {\n  render(<UserList />)\n  \n  expect(screen.getByText('Loading...')).toBeInTheDocument()\n  \n  await screen.findByRole('list')\n  expect(screen.getAllByRole('listitem')).toHaveLength(3)\n})\n\n// Testing Error States\ntest('error handling', async () => {\n  server.use(\n    rest.get('/api/users', (req, res, ctx) => {\n      return res(ctx.status(500))\n    })\n  )\n  \n  render(<UserList />)\n  \n  await screen.findByText('Error loading users')\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-hooks-testing",children:"Custom Hooks Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { renderHook, act } from '@testing-library/react'\n\ntest('custom hook', () => {\n  const { result } = renderHook(() => useCustomHook())\n  \n  act(() => {\n    result.current.update()\n  })\n  \n  expect(result.current.value).toBe('updated')\n})\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Test behavior, not implementation"}),"\n",(0,s.jsx)(n.li,{children:"Use accessible queries"}),"\n",(0,s.jsx)(n.li,{children:"Avoid implementation details"}),"\n",(0,s.jsx)(n.li,{children:"Test user interactions"}),"\n",(0,s.jsx)(n.li,{children:"Test error scenarios"}),"\n",(0,s.jsx)(n.li,{children:"Mock external dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Keep tests focused and simple"}),"\n",(0,s.jsx)(n.li,{children:"Use meaningful test descriptions"}),"\n",(0,s.jsx)(n.li,{children:"Follow Arrange-Act-Assert pattern"}),"\n",(0,s.jsx)(n.li,{children:"Write maintainable tests"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);