"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4732],{8148:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>a});var o=r(4848),s=r(8453);const l={title:"Promise Based Outputs"},i="Understanding Micro Queue and Macro Queue in JavaScript",t={id:"tutorial-extras/JSInterviewQuestions/PromiseBased",title:"Promise Based Outputs",description:"In JavaScript, the concepts of Micro Queue and Macro Queue (also known as the Task Queue) refer to different types of queues that manage the execution of asynchronous tasks. Understanding these queues helps clarify how the event loop processes different types of operations.",source:"@site/docs/tutorial-extras/JSInterviewQuestions/PromiseBased.mdx",sourceDirName:"tutorial-extras/JSInterviewQuestions",slug:"/tutorial-extras/JSInterviewQuestions/PromiseBased",permalink:"/js.enigma/docs/tutorial-extras/JSInterviewQuestions/PromiseBased",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-extras/JSInterviewQuestions/PromiseBased.mdx",tags:[],version:"current",frontMatter:{title:"Promise Based Outputs"},sidebar:"tutorialSidebar",previous:{title:"Array Methods Polyfills",permalink:"/js.enigma/docs/tutorial-extras/JSInterviewQuestions/Polyfills"},next:{title:"Promise Polyfills",permalink:"/js.enigma/docs/tutorial-extras/JSInterviewQuestions/PromisePolyfills"}},c={},a=[{value:"Macro Queue (Task Queue)",id:"macro-queue-task-queue",level:2},{value:"Micro Queue (Job Queue)",id:"micro-queue-job-queue",level:2},{value:"Execution Order",id:"execution-order",level:2},{value:"Summary",id:"summary",level:2},{value:"Problem 1",id:"problem-1",level:3},{value:"Problem 2",id:"problem-2",level:3},{value:"Problem 3",id:"problem-3",level:3},{value:"Problem 4",id:"problem-4",level:3},{value:"Problem 5",id:"problem-5",level:3},{value:"Problem 6",id:"problem-6",level:3},{value:"Problem 7",id:"problem-7",level:3},{value:"Problem 8",id:"problem-8",level:3},{value:"Problem 9",id:"problem-9",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"understanding-micro-queue-and-macro-queue-in-javascript",children:"Understanding Micro Queue and Macro Queue in JavaScript"})}),"\n",(0,o.jsxs)(n.p,{children:["In JavaScript, the concepts of ",(0,o.jsx)(n.strong,{children:"Micro Queue"})," and ",(0,o.jsx)(n.strong,{children:"Macro Queue"})," (also known as the Task Queue) refer to different types of queues that manage the execution of asynchronous tasks. Understanding these queues helps clarify how the event loop processes different types of operations."]}),"\n",(0,o.jsx)(n.h2,{id:"macro-queue-task-queue",children:"Macro Queue (Task Queue)"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Macro Queue"})," contains tasks that are generally scheduled by APIs (like ",(0,o.jsx)(n.code,{children:"setTimeout"}),", ",(0,o.jsx)(n.code,{children:"setInterval"}),", or I/O operations). Tasks in this queue are executed one at a time in the order they were added. After all currently executing code has completed and any microtasks in the Micro Queue have been processed, the next task from the Macro Queue is executed."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Examples of tasks in the Macro Queue include:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"setTimeout"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"setInterval"})}),"\n",(0,o.jsx)(n.li,{children:"I/O operations (e.g., file reading)"}),"\n",(0,o.jsx)(n.li,{children:"Event handlers"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"micro-queue-job-queue",children:"Micro Queue (Job Queue)"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Micro Queue"}),", on the other hand, is used for more granular operations that need to occur after the currently executing script but before the next task from the Macro Queue. This queue is processed immediately after the execution of the currently running script and before any tasks from the Macro Queue are executed."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Examples of operations in the Micro Queue include:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Promises (",(0,o.jsx)(n.code,{children:"Promise.then"}),", ",(0,o.jsx)(n.code,{children:"Promise.catch"}),", ",(0,o.jsx)(n.code,{children:"Promise.finally"}),")"]}),"\n",(0,o.jsx)(n.li,{children:"Mutation Observers"}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"queueMicrotask()"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"execution-order",children:"Execution Order"}),"\n",(0,o.jsx)(n.p,{children:"When the JavaScript event loop runs, it follows this general order:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Execute the currently running code (main stack)."}),"\n",(0,o.jsxs)(n.li,{children:["Process all tasks in the ",(0,o.jsx)(n.strong,{children:"Micro Queue"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["If there are no more microtasks, process the next task in the ",(0,o.jsx)(n.strong,{children:"Macro Queue"}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Repeat the process."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Macro Queue"}),": Contains tasks like ",(0,o.jsx)(n.code,{children:"setTimeout"}),", ",(0,o.jsx)(n.code,{children:"setInterval"}),", and I/O tasks; processed after the Micro Queue."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Micro Queue"}),": Contains promise callbacks and other high-priority tasks; processed immediately after the current execution context."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"problem-1",children:"Problem 1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'console.log("Start");\r\n\r\nsetTimeout(() => {\r\n  console.log("Timeout 1");\r\n}, 0);\r\n\r\nPromise.resolve().then(() => {\r\n  console.log("Promise 1");\r\n}).then(() => {\r\n  console.log("Promise 2");\r\n});\r\n\r\nsetTimeout(() => {\r\n  console.log("Timeout 2");\r\n}, 0);\r\n\r\nconsole.log("End");\r\n\r\n/* \r\nStart\r\nEnd\r\nPromise 1\r\nPromise 2\r\nTimeout 1\r\nTimeout 2\r\n*/\n'})}),"\n",(0,o.jsx)(n.h3,{id:"problem-2",children:"Problem 2"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'function callbackExample(cb) {\r\n  console.log("Callback Start");\r\n  cb();\r\n  console.log("Callback End");\r\n}\r\n\r\nconsole.log("Start");\r\n\r\nsetTimeout(() => {\r\n  console.log("Timeout 1");\r\n\r\n  Promise.resolve().then(() => {\r\n    console.log("Promise inside Timeout 1");\r\n  });\r\n\r\n  callbackExample(() => {\r\n    console.log("Callback inside Timeout 1");\r\n  });\r\n}, 0);\r\n\r\nPromise.resolve().then(() => {\r\n  console.log("Promise 1");\r\n\r\n  setTimeout(() => {\r\n    console.log("Timeout inside Promise 1");\r\n\r\n    callbackExample(() => {\r\n      console.log("Callback inside Timeout from Promise 1");\r\n    });\r\n  }, 0);\r\n  \r\n}).then(() => {\r\n  console.log("Promise 2");\r\n});\r\n\r\nsetTimeout(() => {\r\n  console.log("Timeout 2");\r\n\r\n  callbackExample(() => {\r\n    console.log("Callback inside Timeout 2");\r\n  });\r\n\r\n  Promise.resolve().then(() => {\r\n    console.log("Promise inside Timeout 2");\r\n  });\r\n}, 0);\r\n\r\nconsole.log("End");\r\n\r\n/* \r\nStart\r\nEnd\r\nPromise 1\r\nPromise 2\r\nTimeout 1\r\nCallback Start\r\nCallback inside Timeout 1\r\nCallback End\r\nPromise inside Timeout 1\r\nTimeout 2\r\nCallback Start\r\nCallback inside Timeout 2\r\nCallback End\r\nPromise inside Timeout 2\r\nTimeout inside Promise 1\r\nCallback Start\r\nCallback inside Timeout from Promise 1\r\nCallback End\r\n*/\n'})}),"\n",(0,o.jsx)(n.h3,{id:"problem-3",children:"Problem 3"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:"console.log('console1');\r\n\r\nsetTimeout(() => {\r\n  console.log('setTimeout1');\r\n  Promise.resolve().then(() => {\r\n    console.log('Promise1');\r\n  })\r\n}, 0)\r\n\r\nnew Promise((resolve) => {\r\n  console.log('Promise 1');\r\n  setTimeout(() => {\r\n    resolve('resolve 1')\r\n  }, 0)\r\n}).then((res) => {\r\n  console.log('resolved 2');\r\n  setTimeout(() => {\r\n    console.log(res);\r\n  }, 0)\r\n})\r\n\r\n/* \r\nconsole1\r\nPromise 1\r\nsetTimeout1\r\nPromise1\r\nresolved 2\r\nresolve 1\r\n*/\n"})}),"\n",(0,o.jsx)(n.h3,{id:"problem-4",children:"Problem 4"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:"console.log(1);\r\n\r\nsetTimeout(() => {\r\n  console.log(3);\r\n  Promise.resolve().then(() => console.log(4))\r\n}, 0)\r\n\r\nPromise.resolve().then(() => {\r\n  console.log(5);\r\n  setTimeout(() => {\r\n    console.log(7);\r\n  }, 0)\r\n})\r\n\r\nconsole.log(6);\r\n\r\n/* \r\n1\r\n6\r\n5\r\n3\r\n4\r\n7\r\n*/\n"})}),"\n",(0,o.jsx)(n.h3,{id:"problem-5",children:"Problem 5"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'console.log("A");\r\n\r\nsetTimeout(() => console.log("B"), 0);\r\n\r\nPromise.resolve()\r\n  .then(() => console.log("C"))\r\n  .then(() => console.log("D"));\r\n\r\nconsole.log("E");\r\n/* \r\nA\r\nE\r\nC\r\nD\r\nB\r\n*/\n'})}),"\n",(0,o.jsx)(n.h3,{id:"problem-6",children:"Problem 6"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'setTimeout(() => console.log("1"), 0);\r\n\r\nPromise.resolve().then(() => {\r\n  console.log("2");\r\n  setTimeout(() => console.log("3"), 0);\r\n});\r\n\r\nconsole.log("4");\r\n/* \r\n4\r\n2\r\n1\r\n3\r\n */\n'})}),"\n",(0,o.jsx)(n.h3,{id:"problem-7",children:"Problem 7"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'setTimeout(() => console.log("X"), 0);\r\n\r\nPromise.resolve()\r\n  .then(() => console.log("Y"))\r\n  .then(() => {\r\n    console.log("Z");\r\n    setTimeout(() => console.log("W"), 0);\r\n  });\r\n\r\nconsole.log("Q");\r\n\r\n/* \r\nQ\r\nY\r\nZ\r\nX\r\nW\r\n*/\n'})}),"\n",(0,o.jsx)(n.h3,{id:"problem-8",children:"Problem 8"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'setTimeout(() => {\r\n  console.log("A");\r\n  Promise.resolve().then(() => console.log("B"));\r\n}, 0);\r\n\r\nPromise.resolve().then(() => {\r\n  console.log("C");\r\n  setTimeout(() => console.log("D"), 0);\r\n});\r\n\r\nconsole.log("E");\r\n\r\n/* \r\nE\r\nC\r\nA\r\nB\r\nD\r\n*/\n'})}),"\n",(0,o.jsx)(n.h3,{id:"problem-9",children:"Problem 9"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'Promise.resolve()\r\n  .then(() => {\r\n    console.log("A");\r\n    return Promise.resolve();\r\n  })\r\n  .then(() => {\r\n    console.log("B");\r\n    return Promise.resolve();\r\n  })\r\n  .then(() => console.log("C"));\r\n\r\nsetTimeout(() => console.log("D"), 0);\r\n\r\nconsole.log("E");\r\n\r\n/* \r\nE\r\nA\r\nB\r\nC\r\nD\r\n */\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>t});var o=r(6540);const s={},l=o.createContext(s);function i(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);