"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5998],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const i={},l=r.createContext(i);function s(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(l.Provider,{value:n},e.children)}},31962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=t(74848),i=t(28453);const l={},s="Java 8 Stream Practice Problems with Solutions",a={id:"Java Interview Guide/Java 8 Stream Practice Problems",title:"Java 8 Stream Practice Problems with Solutions",description:"Category 1: filter() - Filtering Operations",source:"@site/docs/Java Interview Guide/Java 8 Stream Practice Problems.mdx",sourceDirName:"Java Interview Guide",slug:"/Java Interview Guide/Java 8 Stream Practice Problems",permalink:"/docs/Java Interview Guide/Java 8 Stream Practice Problems",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java Interview Guide/Java 8 Stream Practice Problems.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How Programs Execute: CPU, RAM & Memory Management",permalink:"/docs/Java Interview Guide/How Programs Execute: CPU, RAM & Memory Management"},next:{title:"Java Backend Developer Interview Questions - 2025",permalink:"/docs/Java Interview Guide/Java Backend Developer Interview Questions - 2025"}},o={},c=[{value:"Category 1: filter() - Filtering Operations",id:"category-1-filter---filtering-operations",level:2},{value:"1. Filter Even Numbers",id:"1-filter-even-numbers",level:3},{value:"2. Filter Strings by Length",id:"2-filter-strings-by-length",level:3},{value:"3. Filter Employees by Salary",id:"3-filter-employees-by-salary",level:3},{value:"4. Filter Null Values",id:"4-filter-null-values",level:3},{value:"5. Filter by Multiple Conditions",id:"5-filter-by-multiple-conditions",level:3},{value:"6. Filter Distinct Prime Numbers",id:"6-filter-distinct-prime-numbers",level:3},{value:"Category 2: map() - Transformation Operations",id:"category-2-map---transformation-operations",level:2},{value:"7. Convert to Uppercase",id:"7-convert-to-uppercase",level:3},{value:"8. Extract Property",id:"8-extract-property",level:3},{value:"9. Square Numbers",id:"9-square-numbers",level:3},{value:"10. String to Length",id:"10-string-to-length",level:3},{value:"11. Object Transformation",id:"11-object-transformation",level:3},{value:"12. Concatenate Prefix",id:"12-concatenate-prefix",level:3},{value:"Category 3: flatMap() - Flattening Operations",id:"category-3-flatmap---flattening-operations",level:2},{value:"13. Flatten Nested Lists",id:"13-flatten-nested-lists",level:3},{value:"14. Split and Flatten",id:"14-split-and-flatten",level:3},{value:"15. Flatten Object Collections",id:"15-flatten-object-collections",level:3},{value:"16. Character Stream",id:"16-character-stream",level:3},{value:"17. Flatten Optional Values",id:"17-flatten-optional-values",level:3},{value:"Category 4: distinct() - Removing Duplicates",id:"category-4-distinct---removing-duplicates",level:2},{value:"18. Remove Duplicate Numbers",id:"18-remove-duplicate-numbers",level:3},{value:"19. Unique Employee IDs",id:"19-unique-employee-ids",level:3},{value:"20. Case-Insensitive Unique Strings",id:"20-case-insensitive-unique-strings",level:3},{value:"Category 5: sorted() - Sorting Operations",id:"category-5-sorted---sorting-operations",level:2},{value:"21. Sort Numbers Ascending",id:"21-sort-numbers-ascending",level:3},{value:"22. Sort Strings Descending",id:"22-sort-strings-descending",level:3},{value:"23. Sort by Multiple Fields",id:"23-sort-by-multiple-fields",level:3},{value:"24. Sort by Custom Comparator",id:"24-sort-by-custom-comparator",level:3},{value:"25. Sort with Null Handling",id:"25-sort-with-null-handling",level:3},{value:"Category 6: limit() &amp; skip() - Pagination Operations",id:"category-6-limit--skip---pagination-operations",level:2},{value:"26. Get First N Elements",id:"26-get-first-n-elements",level:3},{value:"27. Skip and Take",id:"27-skip-and-take",level:3},{value:"28. Top 3 Salaries",id:"28-top-3-salaries",level:3},{value:"29. Pagination",id:"29-pagination",level:3},{value:"Category 7: peek() - Debugging Operations",id:"category-7-peek---debugging-operations",level:2},{value:"30. Debug Stream Pipeline",id:"30-debug-stream-pipeline",level:3},{value:"31. Logging Transformation",id:"31-logging-transformation",level:3},{value:"Category 8: collect() - Collection Operations",id:"category-8-collect---collection-operations",level:2},{value:"32. Collect to List",id:"32-collect-to-list",level:3},{value:"33. Collect to Set",id:"33-collect-to-set",level:3},{value:"34. Collect to Map",id:"34-collect-to-map",level:3},{value:"35. Joining Strings",id:"35-joining-strings",level:3},{value:"36. Partitioning",id:"36-partitioning",level:3},{value:"37. Grouping by Property",id:"37-grouping-by-property",level:3},{value:"38. Grouping with Counting",id:"38-grouping-with-counting",level:3},{value:"39. Grouping with Sum",id:"39-grouping-with-sum",level:3},{value:"40. Multi-level Grouping",id:"40-multi-level-grouping",level:3},{value:"Category 9: reduce() - Reduction Operations",id:"category-9-reduce---reduction-operations",level:2},{value:"41. Sum of Numbers",id:"41-sum-of-numbers",level:3},{value:"42. Product of Numbers",id:"42-product-of-numbers",level:3},{value:"43. Concatenate Strings",id:"43-concatenate-strings",level:3},{value:"44. Find Maximum",id:"44-find-maximum",level:3},{value:"45. Find Minimum Salary",id:"45-find-minimum-salary",level:3},{value:"46. Complex Reduction",id:"46-complex-reduction",level:3},{value:"Category 10: count() - Counting Operations",id:"category-10-count---counting-operations",level:2},{value:"47. Count Elements",id:"47-count-elements",level:3},{value:"48. Count After Filter",id:"48-count-after-filter",level:3},{value:"49. Count Distinct Values",id:"49-count-distinct-values",level:3},{value:"Category 11: anyMatch(), allMatch(), noneMatch()",id:"category-11-anymatch-allmatch-nonematch",level:2},{value:"50. Any Match",id:"50-any-match",level:3},{value:"51. All Match",id:"51-all-match",level:3},{value:"52. None Match",id:"52-none-match",level:3},{value:"53. Multiple Conditions",id:"53-multiple-conditions",level:3},{value:"Category 12: findFirst() &amp; findAny()",id:"category-12-findfirst--findany",level:2},{value:"54. Find First Element",id:"54-find-first-element",level:3},{value:"55. Find First After Filter",id:"55-find-first-after-filter",level:3},{value:"56. Find Any in Parallel",id:"56-find-any-in-parallel",level:3},{value:"57. Find First Even Number",id:"57-find-first-even-number",level:3},{value:"Category 13: min() &amp; max()",id:"category-13-min--max",level:2},{value:"58. Find Maximum Salary",id:"58-find-maximum-salary",level:3},{value:"59. Find Minimum Length String",id:"59-find-minimum-length-string",level:3},{value:"60. Find Max Using Custom Comparator",id:"60-find-max-using-custom-comparator",level:3},{value:"Category 14: forEach() &amp; forEachOrdered()",id:"category-14-foreach--foreachordered",level:2},{value:"61. Print All Elements",id:"61-print-all-elements",level:3},{value:"62. Update State",id:"62-update-state",level:3},{value:"63. Ordered Processing",id:"63-ordered-processing",level:3},{value:"Category 15: toArray()",id:"category-15-toarray",level:2},{value:"64. Convert to Array",id:"64-convert-to-array",level:3},{value:"65. Convert to Integer Array",id:"65-convert-to-integer-array",level:3},{value:"Category 16: Numeric Stream Operations",id:"category-16-numeric-stream-operations",level:2},{value:"66. Sum Using IntStream",id:"66-sum-using-intstream",level:3},{value:"67. Average Calculation",id:"67-average-calculation",level:3},{value:"68. Range Generation",id:"68-range-generation",level:3},{value:"69. Statistics",id:"69-statistics",level:3},{value:"70. Map to Int",id:"70-map-to-int",level:3},{value:"Category 17: Parallel Streams",id:"category-17-parallel-streams",level:2},{value:"71. Parallel Processing",id:"71-parallel-processing",level:3},{value:"72. Parallel Sum",id:"72-parallel-sum",level:3},{value:"73. Thread Safety",id:"73-thread-safety",level:3},{value:"Category 18: Optional Operations",id:"category-18-optional-operations",level:2},{value:"74. Handle Empty Stream",id:"74-handle-empty-stream",level:3},{value:"75. Optional with orElse",id:"75-optional-with-orelse",level:3},{value:"76. Optional Chaining",id:"76-optional-chaining",level:3},{value:"Category 19: Collectors Advanced",id:"category-19-collectors-advanced",level:2},{value:"77. Collectors.toMap with Merge Function",id:"77-collectorstomap-with-merge-function",level:3},{value:"78. Downstream Collectors",id:"78-downstream-collectors",level:3},{value:"79. Mapping Collector",id:"79-mapping-collector",level:3},{value:"80. Custom Collector",id:"80-custom-collector",level:3},{value:"Category 20: Complex Real-World Problems",id:"category-20-complex-real-world-problems",level:2},{value:"81. Second Highest Salary",id:"81-second-highest-salary",level:3},{value:"82. Most Frequent Element",id:"82-most-frequent-element",level:3},{value:"83. Remove Duplicates Preserve Order",id:"83-remove-duplicates-preserve-order",level:3},{value:"84. Anagram Grouping",id:"84-anagram-grouping",level:3},{value:"85. Duplicate Elements",id:"85-duplicate-elements",level:3},{value:"86. Nth Highest Element",id:"86-nth-highest-element",level:3},{value:"87. Merge Two Lists",id:"87-merge-two-lists",level:3},{value:"88. Department with Max Employees",id:"88-department-with-max-employees",level:3},{value:"89. String Frequency Map",id:"89-string-frequency-map",level:3},{value:"90. Employee with Longest Name",id:"90-employee-with-longest-name",level:3},{value:"91. Cumulative Sum",id:"91-cumulative-sum",level:3},{value:"92. Intersection of Lists",id:"92-intersection-of-lists",level:3},{value:"93. Partition and Transform",id:"93-partition-and-transform",level:3},{value:"94. Reverse Each Word",id:"94-reverse-each-word",level:3},{value:"95. Find Missing Numbers",id:"95-find-missing-numbers",level:3},{value:"96. Age Group Classification",id:"96-age-group-classification",level:3},{value:"97. Calculate Percentile",id:"97-calculate-percentile",level:3},{value:"98. Rolling Average",id:"98-rolling-average",level:3},{value:"99. Pair Sum Target",id:"99-pair-sum-target",level:3},{value:"100. Hierarchical Grouping",id:"100-hierarchical-grouping",level:3},{value:"Supporting Classes",id:"supporting-classes",level:2},{value:"Bonus: Interview Favorites Solutions",id:"bonus-interview-favorites-solutions",level:2},{value:"Find First Non-Repeated Character",id:"find-first-non-repeated-character",level:3},{value:"Sort Map by Values",id:"sort-map-by-values",level:3},{value:"Calculate Running Total",id:"calculate-running-total",level:3},{value:"Find Elements That Appear Once",id:"find-elements-that-appear-once",level:3},{value:"Convert List to Map with Index",id:"convert-list-to-map-with-index",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Common Pitfalls to Avoid",id:"common-pitfalls-to-avoid",level:2},{value:"Interview Tips",id:"interview-tips",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"java-8-stream-practice-problems-with-solutions",children:"Java 8 Stream Practice Problems with Solutions"})}),"\n",(0,r.jsx)(n.h2,{id:"category-1-filter---filtering-operations",children:"Category 1: filter() - Filtering Operations"}),"\n",(0,r.jsx)(n.h3,{id:"1-filter-even-numbers",children:"1. Filter Even Numbers"}),"\n",(0,r.jsx)(n.p,{children:"Given a list of integers, filter and return only even numbers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> filterEvenNumbers(List<Integer> numbers) {\n    return numbers.stream()\n            .filter(n -> n % 2 == 0)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-filter-strings-by-length",children:"2. Filter Strings by Length"}),"\n",(0,r.jsx)(n.p,{children:"From a list of strings, filter strings that have length greater than 5."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> filterStringsByLength(List<String> strings) {\n    return strings.stream()\n            .filter(s -> s.length() > 5)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-filter-employees-by-salary",children:"3. Filter Employees by Salary"}),"\n",(0,r.jsx)(n.p,{children:"Given a list of Employee objects, filter employees whose salary is greater than 50000."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Employee> filterEmployeesBySalary(List<Employee> employees) {\n    return employees.stream()\n            .filter(e -> e.getSalary() > 50000)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-filter-null-values",children:"4. Filter Null Values"}),"\n",(0,r.jsx)(n.p,{children:"Remove all null values from a list of strings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> filterNullValues(List<String> strings) {\n    return strings.stream()\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-filter-by-multiple-conditions",children:"5. Filter by Multiple Conditions"}),"\n",(0,r.jsx)(n.p,{children:'From a list of products, filter products where price > 100 AND category equals "Electronics".'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static List<Product> filterByMultipleConditions(List<Product> products) {\n    return products.stream()\n            .filter(p -> p.getPrice() > 100 && "Electronics".equals(p.getCategory()))\n            .collect(Collectors.toList());\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6-filter-distinct-prime-numbers",children:"6. Filter Distinct Prime Numbers"}),"\n",(0,r.jsx)(n.p,{children:"Filter prime numbers from a list and remove duplicates."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> filterDistinctPrimeNumbers(List<Integer> numbers) {\n    return numbers.stream()\n            .filter(Java8StreamSolutions::isPrime)\n            .distinct()\n            .collect(Collectors.toList());\n}\n\nprivate static boolean isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-2-map---transformation-operations",children:"Category 2: map() - Transformation Operations"}),"\n",(0,r.jsx)(n.h3,{id:"7-convert-to-uppercase",children:"7. Convert to Uppercase"}),"\n",(0,r.jsx)(n.p,{children:"Convert all strings in a list to uppercase."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> convertToUppercase(List<String> strings) {\n    return strings.stream()\n            .map(String::toUpperCase)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"8-extract-property",children:"8. Extract Property"}),"\n",(0,r.jsx)(n.p,{children:"From a list of Employee objects, extract and return a list of all employee names."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> extractEmployeeNames(List<Employee> employees) {\n    return employees.stream()\n            .map(Employee::getName)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"9-square-numbers",children:"9. Square Numbers"}),"\n",(0,r.jsx)(n.p,{children:"Given a list of integers, return a list with each number squared."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> squareNumbers(List<Integer> numbers) {\n    return numbers.stream()\n            .map(n -> n * n)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"10-string-to-length",children:"10. String to Length"}),"\n",(0,r.jsx)(n.p,{children:"Convert a list of strings to a list of their lengths."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> stringToLength(List<String> strings) {\n    return strings.stream()\n            .map(String::length)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"11-object-transformation",children:"11. Object Transformation"}),"\n",(0,r.jsx)(n.p,{children:"Convert a list of Employee objects to EmployeeDTO objects."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<EmployeeDTO> transformToDTO(List<Employee> employees) {\n    return employees.stream()\n            .map(e -> new EmployeeDTO(e.getId(), e.getName(), e.getSalary()))\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"12-concatenate-prefix",children:"12. Concatenate Prefix"}),"\n",(0,r.jsx)(n.p,{children:'Add a prefix "Mr. " to all names in a list.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static List<String> concatenatePrefix(List<String> names) {\n    return names.stream()\n            .map(name -> "Mr. " + name)\n            .collect(Collectors.toList());\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-3-flatmap---flattening-operations",children:"Category 3: flatMap() - Flattening Operations"}),"\n",(0,r.jsx)(n.h3,{id:"13-flatten-nested-lists",children:"13. Flatten Nested Lists"}),"\n",(0,r.jsx)(n.p,{children:"Given a list of lists of integers, flatten it to a single list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> flattenNestedLists(List<List<Integer>> nestedLists) {\n    return nestedLists.stream()\n            .flatMap(List::stream)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"14-split-and-flatten",children:"14. Split and Flatten"}),"\n",(0,r.jsx)(n.p,{children:"From a list of sentences, split each into words and return all words as a single list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static List<String> splitAndFlatten(List<String> sentences) {\n    return sentences.stream()\n            .flatMap(s -> Arrays.stream(s.split("\\\\s+")))\n            .collect(Collectors.toList());\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"15-flatten-object-collections",children:"15. Flatten Object Collections"}),"\n",(0,r.jsx)(n.p,{children:"Given a list of Department objects (each containing a list of Employees), get all employees in a single list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Employee> flattenDepartmentEmployees(List<Department> departments) {\n    return departments.stream()\n            .flatMap(d -> d.getEmployees().stream())\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"16-character-stream",children:"16. Character Stream"}),"\n",(0,r.jsx)(n.p,{children:"Convert a list of strings into a stream of all individual characters."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Character> getCharacterStream(List<String> strings) {\n    return strings.stream()\n            .flatMap(s -> s.chars().mapToObj(c -> (char) c))\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"17-flatten-optional-values",children:"17. Flatten Optional Values"}),"\n",(0,r.jsxs)(n.p,{children:["Given a list of ",(0,r.jsx)(n.code,{children:"Optional<String>"}),", flatten to get all present values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> flattenOptionals(List<Optional<String>> optionals) {\n    return optionals.stream()\n            .filter(Optional::isPresent)\n            .map(Optional::get)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-4-distinct---removing-duplicates",children:"Category 4: distinct() - Removing Duplicates"}),"\n",(0,r.jsx)(n.h3,{id:"18-remove-duplicate-numbers",children:"18. Remove Duplicate Numbers"}),"\n",(0,r.jsx)(n.p,{children:"From a list of integers with duplicates, return unique values."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> removeDuplicateNumbers(List<Integer> numbers) {\n    return numbers.stream()\n            .distinct()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"19-unique-employee-ids",children:"19. Unique Employee IDs"}),"\n",(0,r.jsx)(n.p,{children:"From a list of employees, get unique employee IDs."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Long> getUniqueEmployeeIds(List<Employee> employees) {\n    return employees.stream()\n            .map(Employee::getId)\n            .distinct()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"20-case-insensitive-unique-strings",children:"20. Case-Insensitive Unique Strings"}),"\n",(0,r.jsx)(n.p,{children:"Get unique strings ignoring case sensitivity."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> caseInsensitiveUnique(List<String> strings) {\n    return strings.stream()\n            .map(String::toLowerCase)\n            .distinct()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-5-sorted---sorting-operations",children:"Category 5: sorted() - Sorting Operations"}),"\n",(0,r.jsx)(n.h3,{id:"21-sort-numbers-ascending",children:"21. Sort Numbers Ascending"}),"\n",(0,r.jsx)(n.p,{children:"Sort a list of integers in ascending order."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> sortNumbersAscending(List<Integer> numbers) {\n    return numbers.stream()\n            .sorted()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"22-sort-strings-descending",children:"22. Sort Strings Descending"}),"\n",(0,r.jsx)(n.p,{children:"Sort a list of strings in descending order."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> sortStringsDescending(List<String> strings) {\n    return strings.stream()\n            .sorted(Comparator.reverseOrder())\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"23-sort-by-multiple-fields",children:"23. Sort by Multiple Fields"}),"\n",(0,r.jsx)(n.p,{children:"Sort employees first by department, then by salary within each department."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Employee> sortByMultipleFields(List<Employee> employees) {\n    return employees.stream()\n            .sorted(Comparator.comparing(Employee::getDepartment)\n                    .thenComparing(Employee::getSalary))\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"24-sort-by-custom-comparator",children:"24. Sort by Custom Comparator"}),"\n",(0,r.jsx)(n.p,{children:"Sort products by price in descending order, then by name alphabetically."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Product> sortByCustomComparator(List<Product> products) {\n    return products.stream()\n            .sorted(Comparator.comparing(Product::getPrice).reversed()\n                    .thenComparing(Product::getName))\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"25-sort-with-null-handling",children:"25. Sort with Null Handling"}),"\n",(0,r.jsx)(n.p,{children:"Sort a list of strings where some values might be null (nulls last)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> sortWithNullHandling(List<String> strings) {\n    return strings.stream()\n            .sorted(Comparator.nullsLast(Comparator.naturalOrder()))\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-6-limit--skip---pagination-operations",children:"Category 6: limit() & skip() - Pagination Operations"}),"\n",(0,r.jsx)(n.h3,{id:"26-get-first-n-elements",children:"26. Get First N Elements"}),"\n",(0,r.jsx)(n.p,{children:"Return the first 5 elements from a list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> getFirstNElements(List<Integer> numbers) {\n    return numbers.stream()\n            .limit(5)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"27-skip-and-take",children:"27. Skip and Take"}),"\n",(0,r.jsx)(n.p,{children:"Skip first 10 elements and take next 5 elements."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> skipAndTake(List<Integer> numbers) {\n    return numbers.stream()\n            .skip(10)\n            .limit(5)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"28-top-3-salaries",children:"28. Top 3 Salaries"}),"\n",(0,r.jsx)(n.p,{children:"Get the top 3 highest salaries from employee list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Double> getTop3Salaries(List<Employee> employees) {\n    return employees.stream()\n            .map(Employee::getSalary)\n            .sorted(Comparator.reverseOrder())\n            .distinct()\n            .limit(3)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"29-pagination",children:"29. Pagination"}),"\n",(0,r.jsx)(n.p,{children:"Implement pagination - get page 3 with page size 10."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Employee> getPaginatedResults(List<Employee> employees, int page, int pageSize) {\n    return employees.stream()\n            .skip((long) (page - 1) * pageSize)\n            .limit(pageSize)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-7-peek---debugging-operations",children:"Category 7: peek() - Debugging Operations"}),"\n",(0,r.jsx)(n.h3,{id:"30-debug-stream-pipeline",children:"30. Debug Stream Pipeline"}),"\n",(0,r.jsx)(n.p,{children:"Use peek() to print each element while processing."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static List<Integer> debugStreamPipeline(List<Integer> numbers) {\n    return numbers.stream()\n            .peek(n -> System.out.println("Original: " + n))\n            .filter(n -> n % 2 == 0)\n            .peek(n -> System.out.println("After filter: " + n))\n            .map(n -> n * 2)\n            .peek(n -> System.out.println("After map: " + n))\n            .collect(Collectors.toList());\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"31-logging-transformation",children:"31. Logging Transformation"}),"\n",(0,r.jsx)(n.p,{children:"Log each element before and after transformation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static List<String> loggingTransformation(List<String> strings) {\n    return strings.stream()\n            .peek(s -> System.out.println("Before: " + s))\n            .map(String::toUpperCase)\n            .peek(s -> System.out.println("After: " + s))\n            .collect(Collectors.toList());\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-8-collect---collection-operations",children:"Category 8: collect() - Collection Operations"}),"\n",(0,r.jsx)(n.h3,{id:"32-collect-to-list",children:"32. Collect to List"}),"\n",(0,r.jsx)(n.p,{children:"Convert stream to ArrayList."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<String> collectToList(Stream<String> stream) {\n    return stream.collect(Collectors.toCollection(ArrayList::new));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"33-collect-to-set",children:"33. Collect to Set"}),"\n",(0,r.jsx)(n.p,{children:"Convert stream to HashSet to remove duplicates."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Set<Integer> collectToSet(List<Integer> numbers) {\n    return numbers.stream()\n            .collect(Collectors.toCollection(HashSet::new));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"34-collect-to-map",children:"34. Collect to Map"}),"\n",(0,r.jsx)(n.p,{children:"Convert list of employees to a Map with employeeId as key."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<Long, Employee> collectToMap(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.toMap(Employee::getId, e -> e));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"35-joining-strings",children:"35. Joining Strings"}),"\n",(0,r.jsx)(n.p,{children:"Join all strings in a list with comma separator."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static String joiningStrings(List<String> strings) {\n    return strings.stream()\n            .collect(Collectors.joining(", "));\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"36-partitioning",children:"36. Partitioning"}),"\n",(0,r.jsxs)(n.p,{children:["Partition employees into two groups: salary > 50000 and salary ",(0,r.jsx)(n.code,{children:"<="})," 50000."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<Boolean, List<Employee>> partitionEmployees(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.partitioningBy(e -> e.getSalary() > 50000));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"37-grouping-by-property",children:"37. Grouping by Property"}),"\n",(0,r.jsx)(n.p,{children:"Group employees by their department."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, List<Employee>> groupByDepartment(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(Employee::getDepartment));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"38-grouping-with-counting",children:"38. Grouping with Counting"}),"\n",(0,r.jsx)(n.p,{children:"Count number of employees in each department."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Long> groupAndCount(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"39-grouping-with-sum",children:"39. Grouping with Sum"}),"\n",(0,r.jsx)(n.p,{children:"Calculate total salary by department."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Double> groupAndSum(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(\n                    Employee::getDepartment,\n                    Collectors.summingDouble(Employee::getSalary)));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"40-multi-level-grouping",children:"40. Multi-level Grouping"}),"\n",(0,r.jsx)(n.p,{children:"Group employees by department, then by city within each department."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Map<String, List<Employee>>> multiLevelGrouping(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(\n                    Employee::getDepartment,\n                    Collectors.groupingBy(Employee::getCity)));\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-9-reduce---reduction-operations",children:"Category 9: reduce() - Reduction Operations"}),"\n",(0,r.jsx)(n.h3,{id:"41-sum-of-numbers",children:"41. Sum of Numbers"}),"\n",(0,r.jsx)(n.p,{children:"Calculate sum of all integers in a list using reduce."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static int sumOfNumbers(List<Integer> numbers) {\n    return numbers.stream()\n            .reduce(0, Integer::sum);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"42-product-of-numbers",children:"42. Product of Numbers"}),"\n",(0,r.jsx)(n.p,{children:"Calculate product of all numbers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static int productOfNumbers(List<Integer> numbers) {\n    return numbers.stream()\n            .reduce(1, (a, b) -> a * b);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"43-concatenate-strings",children:"43. Concatenate Strings"}),"\n",(0,r.jsx)(n.p,{children:"Concatenate all strings using reduce."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static String concatenateStrings(List<String> strings) {\n    return strings.stream()\n            .reduce("", (a, b) -> a + b);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"44-find-maximum",children:"44. Find Maximum"}),"\n",(0,r.jsx)(n.p,{children:"Find maximum number using reduce."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Integer> findMaximum(List<Integer> numbers) {\n    return numbers.stream()\n            .reduce(Integer::max);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"45-find-minimum-salary",children:"45. Find Minimum Salary"}),"\n",(0,r.jsx)(n.p,{children:"Find employee with minimum salary using reduce."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Employee> findMinimumSalary(List<Employee> employees) {\n    return employees.stream()\n            .reduce((e1, e2) -> e1.getSalary() < e2.getSalary() ? e1 : e2);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"46-complex-reduction",children:"46. Complex Reduction"}),"\n",(0,r.jsx)(n.p,{children:"Calculate total price of products after applying 10% discount."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static double calculateTotalWithDiscount(List<Product> products) {\n    return products.stream()\n            .map(p -> p.getPrice() * 0.9)\n            .reduce(0.0, Double::sum);\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-10-count---counting-operations",children:"Category 10: count() - Counting Operations"}),"\n",(0,r.jsx)(n.h3,{id:"47-count-elements",children:"47. Count Elements"}),"\n",(0,r.jsx)(n.p,{children:"Count total number of elements in a stream."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static long countElements(List<String> strings) {\n    return strings.stream()\n            .count();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"48-count-after-filter",children:"48. Count After Filter"}),"\n",(0,r.jsx)(n.p,{children:"Count how many employees have salary > 50000."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static long countAfterFilter(List<Employee> employees) {\n    return employees.stream()\n            .filter(e -> e.getSalary() > 50000)\n            .count();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"49-count-distinct-values",children:"49. Count Distinct Values"}),"\n",(0,r.jsx)(n.p,{children:"Count unique values in a list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static long countDistinctValues(List<Integer> numbers) {\n    return numbers.stream()\n            .distinct()\n            .count();\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-11-anymatch-allmatch-nonematch",children:"Category 11: anyMatch(), allMatch(), noneMatch()"}),"\n",(0,r.jsx)(n.h3,{id:"50-any-match",children:"50. Any Match"}),"\n",(0,r.jsx)(n.p,{children:"Check if any employee has salary > 100000."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static boolean anyMatchSalary(List<Employee> employees) {\n    return employees.stream()\n            .anyMatch(e -> e.getSalary() > 100000);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"51-all-match",children:"51. All Match"}),"\n",(0,r.jsx)(n.p,{children:"Check if all products have price > 0."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static boolean allMatchPrice(List<Product> products) {\n    return products.stream()\n            .allMatch(p -> p.getPrice() > 0);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"52-none-match",children:"52. None Match"}),"\n",(0,r.jsx)(n.p,{children:"Check if no employee is below 18 years old."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static boolean noneMatchAge(List<Employee> employees) {\n    return employees.stream()\n            .noneMatch(e -> e.getAge() < 18);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"53-multiple-conditions",children:"53. Multiple Conditions"}),"\n",(0,r.jsx)(n.p,{children:'Check if any string starts with "A" and has length > 5.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static boolean multipleConditionsMatch(List<String> strings) {\n    return strings.stream()\n            .anyMatch(s -> s.startsWith("A") && s.length() > 5);\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-12-findfirst--findany",children:"Category 12: findFirst() & findAny()"}),"\n",(0,r.jsx)(n.h3,{id:"54-find-first-element",children:"54. Find First Element"}),"\n",(0,r.jsx)(n.p,{children:"Get the first element from a stream."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<String> findFirstElement(List<String> strings) {\n    return strings.stream()\n            .findFirst();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"55-find-first-after-filter",children:"55. Find First After Filter"}),"\n",(0,r.jsx)(n.p,{children:"Find first employee with salary > 50000."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Employee> findFirstAfterFilter(List<Employee> employees) {\n    return employees.stream()\n            .filter(e -> e.getSalary() > 50000)\n            .findFirst();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"56-find-any-in-parallel",children:"56. Find Any in Parallel"}),"\n",(0,r.jsx)(n.p,{children:"Use findAny() in parallel stream."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Integer> findAnyInParallel(List<Integer> numbers) {\n    return numbers.parallelStream()\n            .filter(n -> n > 100)\n            .findAny();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"57-find-first-even-number",children:"57. Find First Even Number"}),"\n",(0,r.jsx)(n.p,{children:"Find first even number greater than 100."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Integer> findFirstEven(List<Integer> numbers) {\n    return numbers.stream()\n            .filter(n -> n > 100 && n % 2 == 0)\n            .findFirst();\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-13-min--max",children:"Category 13: min() & max()"}),"\n",(0,r.jsx)(n.h3,{id:"58-find-maximum-salary",children:"58. Find Maximum Salary"}),"\n",(0,r.jsx)(n.p,{children:"Find employee with maximum salary."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Employee> findMaxSalary(List<Employee> employees) {\n    return employees.stream()\n            .max(Comparator.comparing(Employee::getSalary));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"59-find-minimum-length-string",children:"59. Find Minimum Length String"}),"\n",(0,r.jsx)(n.p,{children:"Find shortest string in a list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<String> findMinLength(List<String> strings) {\n    return strings.stream()\n            .min(Comparator.comparing(String::length));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"60-find-max-using-custom-comparator",children:"60. Find Max Using Custom Comparator"}),"\n",(0,r.jsx)(n.p,{children:"Find oldest employee by date of birth."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Employee> findOldestEmployee(List<Employee> employees) {\n    return employees.stream()\n            .min(Comparator.comparing(Employee::getDateOfBirth));\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-14-foreach--foreachordered",children:"Category 14: forEach() & forEachOrdered()"}),"\n",(0,r.jsx)(n.h3,{id:"61-print-all-elements",children:"61. Print All Elements"}),"\n",(0,r.jsx)(n.p,{children:"Print each element in the stream."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static void printAllElements(List<String> strings) {\n    strings.stream()\n            .forEach(System.out::println);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"62-update-state",children:"62. Update State"}),"\n",(0,r.jsx)(n.p,{children:"Increase salary of all employees by 10% (use forEach)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static void increaseSalary(List<Employee> employees) {\n    employees.forEach(e -> e.setSalary(e.getSalary() * 1.1));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"63-ordered-processing",children:"63. Ordered Processing"}),"\n",(0,r.jsx)(n.p,{children:"Ensure elements are processed in order using forEachOrdered."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static void orderedProcessing(List<Integer> numbers) {\n    numbers.parallelStream()\n            .forEachOrdered(System.out::println);\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-15-toarray",children:"Category 15: toArray()"}),"\n",(0,r.jsx)(n.h3,{id:"64-convert-to-array",children:"64. Convert to Array"}),"\n",(0,r.jsx)(n.p,{children:"Convert stream of strings to String array."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static String[] convertToArray(List<String> strings) {\n    return strings.stream()\n            .toArray(String[]::new);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"65-convert-to-integer-array",children:"65. Convert to Integer Array"}),"\n",(0,r.jsx)(n.p,{children:"Convert list to Integer[] array."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Integer[] convertToIntegerArray(List<Integer> numbers) {\n    return numbers.stream()\n            .toArray(Integer[]::new);\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-16-numeric-stream-operations",children:"Category 16: Numeric Stream Operations"}),"\n",(0,r.jsx)(n.h3,{id:"66-sum-using-intstream",children:"66. Sum Using IntStream"}),"\n",(0,r.jsx)(n.p,{children:"Calculate sum using IntStream.sum()."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static int sumUsingIntStream(List<Integer> numbers) {\n    return numbers.stream()\n            .mapToInt(Integer::intValue)\n            .sum();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"67-average-calculation",children:"67. Average Calculation"}),"\n",(0,r.jsx)(n.p,{children:"Calculate average of numbers using average()."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static OptionalDouble calculateAverage(List<Integer> numbers) {\n    return numbers.stream()\n            .mapToInt(Integer::intValue)\n            .average();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"68-range-generation",children:"68. Range Generation"}),"\n",(0,r.jsx)(n.p,{children:"Generate numbers from 1 to 100 using IntStream.range()."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> generateRange() {\n    return IntStream.rangeClosed(1, 100)\n            .boxed()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"69-statistics",children:"69. Statistics"}),"\n",(0,r.jsx)(n.p,{children:"Get max, min, average, sum in one go using summaryStatistics()."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static IntSummaryStatistics getStatistics(List<Integer> numbers) {\n    return numbers.stream()\n            .mapToInt(Integer::intValue)\n            .summaryStatistics();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"70-map-to-int",children:"70. Map to Int"}),"\n",(0,r.jsx)(n.p,{children:"Convert list of strings to IntStream of their lengths and find sum."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static int sumOfLengths(List<String> strings) {\n    return strings.stream()\n            .mapToInt(String::length)\n            .sum();\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-17-parallel-streams",children:"Category 17: Parallel Streams"}),"\n",(0,r.jsx)(n.h3,{id:"71-parallel-processing",children:"71. Parallel Processing"}),"\n",(0,r.jsx)(n.p,{children:"Convert sequential stream to parallel and compare performance."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> parallelProcessing(List<Integer> numbers) {\n    return numbers.parallelStream()\n            .map(n -> n * 2)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"72-parallel-sum",children:"72. Parallel Sum"}),"\n",(0,r.jsx)(n.p,{children:"Calculate sum of large list using parallel stream."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static int parallelSum(List<Integer> numbers) {\n    return numbers.parallelStream()\n            .mapToInt(Integer::intValue)\n            .sum();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"73-thread-safety",children:"73. Thread Safety"}),"\n",(0,r.jsx)(n.p,{children:"Demonstrate thread-safety issues with parallel streams."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> threadSafetyDemo(List<Integer> numbers) {\n    // Thread-safe approach\n    return numbers.parallelStream()\n            .filter(n -> n % 2 == 0)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-18-optional-operations",children:"Category 18: Optional Operations"}),"\n",(0,r.jsx)(n.h3,{id:"74-handle-empty-stream",children:"74. Handle Empty Stream"}),"\n",(0,r.jsx)(n.p,{children:"Use Optional to handle empty stream results."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static String handleEmptyStream(List<String> strings) {\n    return strings.stream()\n            .findFirst()\n            .orElse("Default Value");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"75-optional-with-orelse",children:"75. Optional with orElse"}),"\n",(0,r.jsx)(n.p,{children:"Find employee by ID, return default if not found."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Employee findEmployeeById(List<Employee> employees, Long id) {\n    return employees.stream()\n            .filter(e -> e.getId().equals(id))\n            .findFirst()\n            .orElse(new Employee());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"76-optional-chaining",children:"76. Optional Chaining"}),"\n",(0,r.jsx)(n.p,{children:"Use Optional with map and flatMap."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<String> optionalChaining(List<Employee> employees, Long id) {\n    return employees.stream()\n            .filter(e -> e.getId().equals(id))\n            .findFirst()\n            .map(Employee::getDepartment)\n            .map(String::toUpperCase);\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-19-collectors-advanced",children:"Category 19: Collectors Advanced"}),"\n",(0,r.jsx)(n.h3,{id:"77-collectorstomap-with-merge-function",children:"77. Collectors.toMap with Merge Function"}),"\n",(0,r.jsx)(n.p,{children:"Handle duplicate keys while collecting to map."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Employee> toMapWithMerge(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.toMap(\n                    Employee::getDepartment,\n                    e -> e,\n                    (e1, e2) -> e1.getSalary() > e2.getSalary() ? e1 : e2));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"78-downstream-collectors",children:"78. Downstream Collectors"}),"\n",(0,r.jsx)(n.p,{children:"Group by department and get max salary in each."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Optional<Employee>> downstreamCollectors(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(\n                    Employee::getDepartment,\n                    Collectors.maxBy(Comparator.comparing(Employee::getSalary))));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"79-mapping-collector",children:"79. Mapping Collector"}),"\n",(0,r.jsx)(n.p,{children:"Group employees by department and collect only their names."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, List<String>> mappingCollector(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(\n                    Employee::getDepartment,\n                    Collectors.mapping(Employee::getName, Collectors.toList())));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"80-custom-collector",children:"80. Custom Collector"}),"\n",(0,r.jsx)(n.p,{children:"Create a custom collector to calculate median."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static double calculateMedian(List<Integer> numbers) {\n    List<Integer> sorted = numbers.stream()\n            .sorted()\n            .collect(Collectors.toList());\n    int size = sorted.size();\n    if (size % 2 == 0) {\n        return (sorted.get(size / 2 - 1) + sorted.get(size / 2)) / 2.0;\n    } else {\n        return sorted.get(size / 2);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"category-20-complex-real-world-problems",children:"Category 20: Complex Real-World Problems"}),"\n",(0,r.jsx)(n.h3,{id:"81-second-highest-salary",children:"81. Second Highest Salary"}),"\n",(0,r.jsx)(n.p,{children:"Find second highest salary from employee list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Double> secondHighestSalary(List<Employee> employees) {\n    return employees.stream()\n            .map(Employee::getSalary)\n            .distinct()\n            .sorted(Comparator.reverseOrder())\n            .skip(1)\n            .findFirst();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"82-most-frequent-element",children:"82. Most Frequent Element"}),"\n",(0,r.jsx)(n.p,{children:"Find the most frequently occurring element in a list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Integer> mostFrequentElement(List<Integer> numbers) {\n    return numbers.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet().stream()\n            .max(Map.Entry.comparingByValue())\n            .map(Map.Entry::getKey);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"83-remove-duplicates-preserve-order",children:"83. Remove Duplicates Preserve Order"}),"\n",(0,r.jsx)(n.p,{children:"Remove duplicates while maintaining insertion order."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> removeDuplicatesPreserveOrder(List<Integer> numbers) {\n    return numbers.stream()\n            .distinct()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"84-anagram-grouping",children:"84. Anagram Grouping"}),"\n",(0,r.jsx)(n.p,{children:"Group strings that are anagrams of each other."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, List<String>> groupAnagrams(List<String> strings) {\n    return strings.stream()\n            .collect(Collectors.groupingBy(s -> {\n                char[] chars = s.toCharArray();\n                Arrays.sort(chars);\n                return new String(chars);\n            }));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"85-duplicate-elements",children:"85. Duplicate Elements"}),"\n",(0,r.jsx)(n.p,{children:"Find all duplicate elements in a list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> findDuplicates(List<Integer> numbers) {\n    return numbers.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet().stream()\n            .filter(e -> e.getValue() > 1)\n            .map(Map.Entry::getKey)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"86-nth-highest-element",children:"86. Nth Highest Element"}),"\n",(0,r.jsx)(n.p,{children:"Find nth highest salary (generic solution)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Double> nthHighestSalary(List<Employee> employees, int n) {\n    return employees.stream()\n            .map(Employee::getSalary)\n            .distinct()\n            .sorted(Comparator.reverseOrder())\n            .skip(n - 1)\n            .findFirst();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"87-merge-two-lists",children:"87. Merge Two Lists"}),"\n",(0,r.jsx)(n.p,{children:"Merge two lists and remove duplicates."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> mergeLists(List<Integer> list1, List<Integer> list2) {\n    return Stream.concat(list1.stream(), list2.stream())\n            .distinct()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"88-department-with-max-employees",children:"88. Department with Max Employees"}),"\n",(0,r.jsx)(n.p,{children:"Find department with maximum number of employees."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<String> departmentWithMaxEmployees(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(Employee::getDepartment, Collectors.counting()))\n            .entrySet().stream()\n            .max(Map.Entry.comparingByValue())\n            .map(Map.Entry::getKey);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"89-string-frequency-map",children:"89. String Frequency Map"}),"\n",(0,r.jsx)(n.p,{children:"Create a map of each string and its frequency count."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Long> stringFrequencyMap(List<String> strings) {\n    return strings.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"90-employee-with-longest-name",children:"90. Employee with Longest Name"}),"\n",(0,r.jsx)(n.p,{children:"Find employee with the longest name in each department."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Optional<Employee>> longestNameByDepartment(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(\n                    Employee::getDepartment,\n                    Collectors.maxBy(Comparator.comparing(e -> e.getName().length()))));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"91-cumulative-sum",children:"91. Cumulative Sum"}),"\n",(0,r.jsx)(n.p,{children:"Create a list of cumulative sums from original list."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> cumulativeSum(List<Integer> numbers) {\n    return numbers.stream()\n            .collect(() -> new ArrayList<Integer>(),\n                    (list, n) -> {\n                        int sum = list.isEmpty() ? n : list.get(list.size() - 1) + n;\n                        list.add(sum);\n                    },\n                    ArrayList::addAll);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"92-intersection-of-lists",children:"92. Intersection of Lists"}),"\n",(0,r.jsx)(n.p,{children:"Find common elements between two lists."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> findIntersection(List<Integer> list1, List<Integer> list2) {\n    return list1.stream()\n            .filter(list2::contains)\n            .distinct()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"93-partition-and-transform",children:"93. Partition and Transform"}),"\n",(0,r.jsx)(n.p,{children:"Partition list into two groups and apply different transformations."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<Boolean, List<Integer>> partitionAndTransform(List<Integer> numbers) {\n    Map<Boolean, List<Integer>> partitioned = numbers.stream()\n            .collect(Collectors.partitioningBy(n -> n % 2 == 0));\n\n    // Transform even numbers (multiply by 2)\n    partitioned.put(true, partitioned.get(true).stream()\n            .map(n -> n * 2)\n            .collect(Collectors.toList()));\n\n    // Transform odd numbers (add 1)\n    partitioned.put(false, partitioned.get(false).stream()\n            .map(n -> n + 1)\n            .collect(Collectors.toList()));\n\n    return partitioned;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"94-reverse-each-word",children:"94. Reverse Each Word"}),"\n",(0,r.jsx)(n.p,{children:"Reverse each word in a sentence while maintaining word order."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static String reverseEachWord(String sentence) {\n    return Arrays.stream(sentence.split("\\\\s+"))\n            .map(word -> new StringBuilder(word).reverse().toString())\n            .collect(Collectors.joining(" "));\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"95-find-missing-numbers",children:"95. Find Missing Numbers"}),"\n",(0,r.jsx)(n.p,{children:"Find missing numbers in a sequence from 1 to N."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> findMissingNumbers(List<Integer> numbers, int n) {\n    Set<Integer> numSet = new HashSet<>(numbers);\n    return IntStream.rangeClosed(1, n)\n            .filter(i -> !numSet.contains(i))\n            .boxed()\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"96-age-group-classification",children:"96. Age Group Classification"}),"\n",(0,r.jsx)(n.p,{children:"Classify employees into age groups (18-30, 31-50, 51+)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public static Map<String, List<Employee>> classifyByAgeGroup(List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(e -> {\n                int age = e.getAge();\n                if (age <= 30) return "18-30";\n                else if (age <= 50) return "31-50";\n                else return "51+";\n            }));\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"97-calculate-percentile",children:"97. Calculate Percentile"}),"\n",(0,r.jsx)(n.p,{children:"Calculate 90th percentile of salaries."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static double calculate90thPercentile(List<Employee> employees) {\n    List<Double> sortedSalaries = employees.stream()\n            .map(Employee::getSalary)\n            .sorted()\n            .collect(Collectors.toList());\n\n    int index = (int) Math.ceil(0.90 * sortedSalaries.size()) - 1;\n    return sortedSalaries.get(index);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"98-rolling-average",children:"98. Rolling Average"}),"\n",(0,r.jsx)(n.p,{children:"Calculate rolling average of last 3 elements."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Double> rollingAverage(List<Integer> numbers, int windowSize) {\n    return IntStream.range(0, numbers.size())\n            .filter(i -> i >= windowSize - 1)\n            .mapToObj(i -> {\n                double sum = 0;\n                for (int j = 0; j < windowSize; j++) {\n                    sum += numbers.get(i - j);\n                }\n                return sum / windowSize;\n            })\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"99-pair-sum-target",children:"99. Pair Sum Target"}),"\n",(0,r.jsx)(n.p,{children:"Find pairs of numbers that sum to a target value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<int[]> findPairsWithSum(List<Integer> numbers, int target) {\n    Set<Integer> seen = new HashSet<>();\n    return numbers.stream()\n            .filter(n -> {\n                int complement = target - n;\n                if (seen.contains(complement)) {\n                    return true;\n                }\n                seen.add(n);\n                return false;\n            })\n            .map(n -> new int[]{target - n, n})\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"100-hierarchical-grouping",children:"100. Hierarchical Grouping"}),"\n",(0,r.jsx)(n.p,{children:"Create hierarchical grouping: Country -> State -> City -> Employees."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Map<String, Map<String, List<Employee>>>> hierarchicalGrouping(\n        List<Employee> employees) {\n    return employees.stream()\n            .collect(Collectors.groupingBy(\n                    Employee::getCountry,\n                    Collectors.groupingBy(\n                            Employee::getState,\n                            Collectors.groupingBy(Employee::getCity))));\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"supporting-classes",children:"Supporting Classes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Employee Class\nclass Employee {\n    private Long id;\n    private String name;\n    private double salary;\n    private String department;\n    private String city;\n    private String state;\n    private String country;\n    private int age;\n    private LocalDate dateOfBirth;\n\n    // Constructors\n    public Employee() {}\n\n    public Employee(Long id, String name, double salary, String department) {\n        this.id = id;\n        this.name = name;\n        this.salary = salary;\n        this.department = department;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public double getSalary() { return salary; }\n    public void setSalary(double salary) { this.salary = salary; }\n\n    public String getDepartment() { return department; }\n    public void setDepartment(String department) { this.department = department; }\n\n    public String getCity() { return city; }\n    public void setCity(String city) { this.city = city; }\n\n    public String getState() { return state; }\n    public void setState(String state) { this.state = state; }\n\n    public String getCountry() { return country; }\n    public void setCountry(String country) { this.country = country; }\n\n    public int getAge() { return age; }\n    public void setAge(int age) { this.age = age; }\n\n    public LocalDate getDateOfBirth() { return dateOfBirth; }\n    public void setDateOfBirth(LocalDate dateOfBirth) { this.dateOfBirth = dateOfBirth; }\n}\n\n// EmployeeDTO Class\nclass EmployeeDTO {\n    private Long id;\n    private String name;\n    private double salary;\n\n    public EmployeeDTO(Long id, String name, double salary) {\n        this.id = id;\n        this.name = name;\n        this.salary = salary;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public double getSalary() { return salary; }\n    public void setSalary(double salary) { this.salary = salary; }\n}\n\n// Product Class\nclass Product {\n    private Long id;\n    private String name;\n    private double price;\n    private String category;\n\n    public Product() {}\n\n    public Product(Long id, String name, double price, String category) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.category = category;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public double getPrice() { return price; }\n    public void setPrice(double price) { this.price = price; }\n\n    public String getCategory() { return category; }\n    public void setCategory(String category) { this.category = category; }\n}\n\n// Department Class\nclass Department {\n    private Long id;\n    private String name;\n    private List<Employee> employees;\n\n    public Department() {\n        this.employees = new ArrayList<>();\n    }\n\n    public Department(Long id, String name, List<Employee> employees) {\n        this.id = id;\n        this.name = name;\n        this.employees = employees;\n    }\n\n    // Getters and Setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public List<Employee> getEmployees() { return employees; }\n    public void setEmployees(List<Employee> employees) { this.employees = employees; }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"bonus-interview-favorites-solutions",children:"Bonus: Interview Favorites Solutions"}),"\n",(0,r.jsx)(n.h3,{id:"find-first-non-repeated-character",children:"Find First Non-Repeated Character"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Optional<Character> findFirstNonRepeatedChar(String str) {\n    Map<Character, Long> charCount = str.chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.groupingBy(Function.identity(),\n                    LinkedHashMap::new, Collectors.counting()));\n\n    return charCount.entrySet().stream()\n            .filter(e -> e.getValue() == 1)\n            .map(Map.Entry::getKey)\n            .findFirst();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sort-map-by-values",children:"Sort Map by Values"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<String, Integer> sortMapByValues(Map<String, Integer> map) {\n    return map.entrySet().stream()\n            .sorted(Map.Entry.comparingByValue())\n            .collect(Collectors.toMap(\n                    Map.Entry::getKey,\n                    Map.Entry::getValue,\n                    (e1, e2) -> e1,\n                    LinkedHashMap::new));\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calculate-running-total",children:"Calculate Running Total"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> calculateRunningTotal(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<>();\n    numbers.stream()\n            .reduce(0, (sum, n) -> {\n                int newSum = sum + n;\n                result.add(newSum);\n                return newSum;\n            });\n    return result;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"find-elements-that-appear-once",children:"Find Elements That Appear Once"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static List<Integer> findElementsAppearingOnce(List<Integer> numbers) {\n    return numbers.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n            .entrySet().stream()\n            .filter(e -> e.getValue() == 1)\n            .map(Map.Entry::getKey)\n            .collect(Collectors.toList());\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"convert-list-to-map-with-index",children:"Convert List to Map with Index"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public static Map<Integer, String> listToMapWithIndex(List<String> list) {\n    return IntStream.range(0, list.size())\n            .boxed()\n            .collect(Collectors.toMap(\n                    i -> i,\n                    list::get));\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class Main {\n    public static void main(String[] args) {\n        // Example 1: Filter Even Numbers\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> evenNumbers = filterEvenNumbers(numbers);\n        System.out.println("Even numbers: " + evenNumbers);\n\n        // Example 2: Group Employees by Department\n        List<Employee> employees = Arrays.asList(\n            new Employee(1L, "John", 60000, "IT"),\n            new Employee(2L, "Jane", 75000, "HR"),\n            new Employee(3L, "Bob", 55000, "IT"),\n            new Employee(4L, "Alice", 80000, "HR")\n        );\n\n        Map<String, List<Employee>> groupedByDept = groupByDepartment(employees);\n        System.out.println("Employees by department: " + groupedByDept);\n\n        // Example 3: Second Highest Salary\n        Optional<Double> secondHighest = secondHighestSalary(employees);\n        secondHighest.ifPresent(salary ->\n            System.out.println("Second highest salary: " + salary));\n\n        // Example 4: Find Duplicates\n        List<Integer> numbersWithDuplicates = Arrays.asList(1, 2, 3, 2, 4, 5, 3, 6);\n        List<Integer> duplicates = findDuplicates(numbersWithDuplicates);\n        System.out.println("Duplicates: " + duplicates);\n\n        // Example 5: String Frequency\n        List<String> words = Arrays.asList("apple", "banana", "apple", "cherry", "banana");\n        Map<String, Long> frequency = stringFrequencyMap(words);\n        System.out.println("Word frequency: " + frequency);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"filter()"})," - Use for filtering elements based on conditions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"map()"})," - Use for transforming elements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"flatMap()"})," - Use for flattening nested structures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"collect()"})," - Terminal operation to gather results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"reduce()"})," - For aggregation operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Collectors"})," - Powerful utility for complex collection operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optional"})," - Handle null safely"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parallel Streams"})," - For performance with large datasets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method References"})," - Clean and readable code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Chaining"})," - Combine multiple operations for complex logic"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"parallel streams"})," for large datasets (10,000+ elements)"]}),"\n",(0,r.jsxs)(n.li,{children:["Avoid ",(0,r.jsx)(n.strong,{children:"unnecessary boxing/unboxing"})," - use primitive streams when possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Short-circuit operations"})," (findFirst, anyMatch) can improve performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateless operations"})," are preferred for parallel processing"]}),"\n",(0,r.jsxs)(n.li,{children:["Consider ",(0,r.jsx)(n.strong,{children:"memory overhead"})," of intermediate collections"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"method references"})," over lambdas when possible for better performance"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls-to-avoid",children:"Common Pitfalls to Avoid"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modifying source"})," while streaming"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Using forEach for accumulation"})," (use reduce or collect instead)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ignoring null values"})," without filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not handling empty streams"})," properly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Overusing parallel streams"})," for small datasets"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Creating unnecessary intermediate collections"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Using peek() for business logic"})," (it's for debugging only)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"interview-tips",children:"Interview Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Always consider ",(0,r.jsx)(n.strong,{children:"edge cases"})," (empty lists, null values)"]}),"\n",(0,r.jsxs)(n.li,{children:["Explain ",(0,r.jsx)(n.strong,{children:"time and space complexity"})]}),"\n",(0,r.jsxs)(n.li,{children:["Mention ",(0,r.jsx)(n.strong,{children:"alternatives"})," (traditional loops vs streams)"]}),"\n",(0,r.jsxs)(n.li,{children:["Discuss ",(0,r.jsx)(n.strong,{children:"when NOT to use streams"})," (simple iterations, performance-critical code)"]}),"\n",(0,r.jsxs)(n.li,{children:["Be prepared to ",(0,r.jsx)(n.strong,{children:"optimize"})," your solution"]}),"\n",(0,r.jsxs)(n.li,{children:["Know the difference between ",(0,r.jsx)(n.strong,{children:"intermediate and terminal operations"})]}),"\n",(0,r.jsxs)(n.li,{children:["Understand ",(0,r.jsx)(n.strong,{children:"lazy evaluation"})," in streams"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);