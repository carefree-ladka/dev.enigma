"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5189],{9006:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var t=r(4848),o=r(8453);const c={title:"Closures"},i=void 0,s={id:"WebDev/JavaScript/Closure",title:"Closures",description:"Closures allow functions to retain access to variables from their containing (or outer) function even after that function has finished executing.",source:"@site/docs/WebDev/JavaScript/Closure.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/Closure",permalink:"/js.enigma/docs/WebDev/JavaScript/Closure",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/Closure.mdx",tags:[],version:"current",frontMatter:{title:"Closures"},sidebar:"tutorialSidebar",previous:{title:"DOM Methods & Selectors Cheatsheet",permalink:"/js.enigma/docs/WebDev/HTMLDOM/DOMCheatSheet"},next:{title:"Currying Variations",permalink:"/js.enigma/docs/WebDev/JavaScript/Currying"}},u={},l=[{value:"Counter Example",id:"counter-example",level:3},{value:"Closure inside Loop",id:"closure-inside-loop",level:3},{value:"Problem 3",id:"problem-3",level:3},{value:"Problem 4",id:"problem-4",level:3}];function a(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Closures allow functions to retain access to variables from their containing (or outer) function even after that function has finished executing."}),"\n",(0,t.jsx)(n.h3,{id:"counter-example",children:"Counter Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function createCounter() {\r\n  let count = 0; // This is the closure variable\r\n\r\n  return function() {\r\n    count += 1; // This function has access to `count`\r\n    return count;\r\n  };\r\n}\r\n\r\nconst counter = createCounter(); // `counter` is a function with a closure\r\n\r\nconsole.log(counter()); // Output: 1\r\nconsole.log(counter()); // Output: 2\r\nconsole.log(counter()); // Output: 3\n"})}),"\n",(0,t.jsx)(n.h3,{id:"closure-inside-loop",children:"Closure inside Loop"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"for (var i = 0; i < 5; i++) {\r\n  setTimeout(() => console.log(i), 1000);\r\n}\r\n\r\n/* \r\n5\r\n5\r\n5\r\n5\r\n5\r\n*/\r\n\r\n//To fix this : let or IIFE\r\n\r\nfor (let i = 0; i < 5; i++) {\r\n  setTimeout(() => console.log(i), 1000);\r\n}\r\n\r\n//or\r\n\r\nfor (var i = 0; i < 5; i++) {\r\n  ((i) => setTimeout(() => console.log(i), 1000))(i);\r\n}\r\n\r\n//Print values per second\r\nfor (var i = 0; i < 5; i++) {\r\n  ((i) => setTimeout(() => console.log(i), 1000 * i))(i);\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"problem-3",children:"Problem 3"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function createFunctions() {\r\n  let functions = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    functions.push(function() {\r\n      return i;\r\n    });\r\n  }\r\n  return functions;\r\n}\r\n\r\nconst funcs = createFunctions();\r\nconsole.log(funcs[0]()); // Output: 3\r\nconsole.log(funcs[1]()); // Output: 3\r\nconsole.log(funcs[2]()); // Output: 3\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Hint"}),": The var keyword has function scope, not block scope. Understand how closures capture variables and how var affects this behavior."]}),"\n",(0,t.jsx)(n.h3,{id:"problem-4",children:"Problem 4"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"function createCounter() {\r\n  let count = 0;\r\n  return {\r\n    increment: function() {\r\n      count++;\r\n      return count;\r\n    },\r\n    reset: function() {\r\n      count = 0;\r\n    },\r\n    getCount: function() {\r\n      return count;\r\n    }\r\n  };\r\n}\r\n\r\nconst counter = createCounter();\r\nconsole.log(counter.increment()); // Output: 1\r\nconsole.log(counter.increment()); // Output: 2\r\ncounter.reset();\r\nconsole.log(counter.getCount()); // Output: 0\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Hint"}),": Closures allow the returned methods to access and modify the count variable even though createCounter has finished executing"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const o={},c=t.createContext(o);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);