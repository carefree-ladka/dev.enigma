"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5267],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(96540);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}},66992:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var r=i(74848),s=i(28453);const t={},l="Java Microservices - Beginner's Guide",a={id:"Spring Boot/Java Microservices - Beginner's Guide",title:"Java Microservices - Beginner's Guide",description:"Table of Contents",source:"@site/docs/Spring Boot/Java Microservices - Beginner's Guide.mdx",sourceDirName:"Spring Boot",slug:"/Spring Boot/Java Microservices - Beginner's Guide",permalink:"/docs/Spring Boot/Java Microservices - Beginner's Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Spring Boot/Java Microservices - Beginner's Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GitHub Actions + Docker CI/CD Pipeline for Spring Boot",permalink:"/docs/Spring Boot/GitHub Actions + Docker CICD Pipeline for Spring Boot"},next:{title:"Jenkins for Beginners - Spring Boot Development Guide",permalink:"/docs/Spring Boot/Jenkins for Beginners - Spring Boot Development Guide"}},c={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"What are Microservices?",id:"what-are-microservices",level:2},{value:"Key Points:",id:"key-points",level:3},{value:"Simple Analogy:",id:"simple-analogy",level:3},{value:"Monolith vs Microservices",id:"monolith-vs-microservices",level:2},{value:"Key Characteristics",id:"key-characteristics",level:2},{value:"1. <strong>Business Capability Focus</strong>",id:"1-business-capability-focus",level:3},{value:"2. <strong>Decentralized Governance</strong>",id:"2-decentralized-governance",level:3},{value:"3. <strong>Failure Isolation</strong>",id:"3-failure-isolation",level:3},{value:"4. <strong>Smart Endpoints and Dumb Pipes</strong>",id:"4-smart-endpoints-and-dumb-pipes",level:3},{value:"5. <strong>Design for Failure</strong>",id:"5-design-for-failure",level:3},{value:"Benefits and Challenges",id:"benefits-and-challenges",level:2},{value:"\u2705 Benefits",id:"-benefits",level:3},{value:"\u274c Challenges",id:"-challenges",level:3},{value:"Java Microservices Ecosystem",id:"java-microservices-ecosystem",level:2},{value:"Core Frameworks",id:"core-frameworks",level:3},{value:"Supporting Tools",id:"supporting-tools",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Service Boundaries",id:"1-service-boundaries",level:3},{value:"2. Database per Service",id:"2-database-per-service",level:3},{value:"3. API Gateway",id:"3-api-gateway",level:3},{value:"Getting Started with Spring Boot",id:"getting-started-with-spring-boot",level:2},{value:"1. Basic Microservice Structure",id:"1-basic-microservice-structure",level:3},{value:"2. Key Annotations",id:"2-key-annotations",level:3},{value:"3. Application Properties",id:"3-application-properties",level:3},{value:"Communication Patterns",id:"communication-patterns",level:2},{value:"1. Synchronous Communication",id:"1-synchronous-communication",level:3},{value:"REST API Calls",id:"rest-api-calls",level:4},{value:"Feign Client (Declarative)",id:"feign-client-declarative",level:4},{value:"2. Asynchronous Communication",id:"2-asynchronous-communication",level:3},{value:"Message Queues (RabbitMQ Example)",id:"message-queues-rabbitmq-example",level:4},{value:"3. When to Use Each Pattern",id:"3-when-to-use-each-pattern",level:3},{value:"Data Management",id:"data-management",level:2},{value:"1. Database per Service Pattern",id:"1-database-per-service-pattern",level:3},{value:"2. Shared Database Anti-Pattern",id:"2-shared-database-anti-pattern",level:3},{value:"3. Data Consistency Patterns",id:"3-data-consistency-patterns",level:3},{value:"Saga Pattern",id:"saga-pattern",level:4},{value:"Service Discovery",id:"service-discovery",level:2},{value:"1. Netflix Eureka (Spring Cloud)",id:"1-netflix-eureka-spring-cloud",level:3},{value:"Eureka Server",id:"eureka-server",level:4},{value:"Eureka Client",id:"eureka-client",level:4},{value:"2. Application Configuration",id:"2-application-configuration",level:3},{value:"Configuration Management",id:"configuration-management",level:2},{value:"1. Spring Cloud Config",id:"1-spring-cloud-config",level:3},{value:"Config Server",id:"config-server",level:4},{value:"Config Client",id:"config-client",level:4},{value:"2. Environment-Specific Configuration",id:"2-environment-specific-configuration",level:3},{value:"Monitoring and Logging",id:"monitoring-and-logging",level:2},{value:"1. Distributed Tracing",id:"1-distributed-tracing",level:3},{value:"2. Health Checks",id:"2-health-checks",level:3},{value:"3. Metrics with Micrometer",id:"3-metrics-with-micrometer",level:3},{value:"Security",id:"security",level:2},{value:"1. OAuth2 with JWT",id:"1-oauth2-with-jwt",level:3},{value:"2. Service-to-Service Authentication",id:"2-service-to-service-authentication",level:3},{value:"Deployment Strategies",id:"deployment-strategies",level:2},{value:"1. Docker Containerization",id:"1-docker-containerization",level:3},{value:"2. Kubernetes Deployment",id:"2-kubernetes-deployment",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. <strong>Start with a Monolith</strong>",id:"1-start-with-a-monolith",level:3},{value:"2. <strong>Service Size</strong>",id:"2-service-size",level:3},{value:"3. <strong>API Design</strong>",id:"3-api-design",level:3},{value:"4. <strong>Error Handling</strong>",id:"4-error-handling",level:3},{value:"5. <strong>Circuit Breaker Pattern</strong>",id:"5-circuit-breaker-pattern",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"1. <strong>Distributed Monolith</strong>",id:"1-distributed-monolith",level:3},{value:"2. <strong>Chatty Interfaces</strong>",id:"2-chatty-interfaces",level:3},{value:"3. <strong>Shared Database</strong>",id:"3-shared-database",level:3},{value:"4. <strong>Ignoring Network Latency</strong>",id:"4-ignoring-network-latency",level:3},{value:"5. <strong>Not Monitoring Enough</strong>",id:"5-not-monitoring-enough",level:3},{value:"Learning Path",id:"learning-path",level:2},{value:"Phase 1: Foundations",id:"phase-1-foundations",level:3},{value:"Phase 2: Microservices Basics",id:"phase-2-microservices-basics",level:3},{value:"Phase 3: Advanced Patterns",id:"phase-3-advanced-patterns",level:3},{value:"Phase 4: Production Ready",id:"phase-4-production-ready",level:3},{value:"Useful Resources",id:"useful-resources",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Books",id:"books",level:3},{value:"Tools to Explore",id:"tools-to-explore",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"java-microservices---beginners-guide",children:"Java Microservices - Beginner's Guide"})}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#what-are-microservices",children:"What are Microservices?"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#monolith-vs-microservices",children:"Monolith vs Microservices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#key-characteristics",children:"Key Characteristics"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#benefits-and-challenges",children:"Benefits and Challenges"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#java-microservices-ecosystem",children:"Java Microservices Ecosystem"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#core-concepts",children:"Core Concepts"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#getting-started-with-spring-boot",children:"Getting Started with Spring Boot"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#communication-patterns",children:"Communication Patterns"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#data-management",children:"Data Management"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#service-discovery",children:"Service Discovery"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#configuration-management",children:"Configuration Management"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#monitoring-and-logging",children:"Monitoring and Logging"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security",children:"Security"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#deployment-strategies",children:"Deployment Strategies"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#common-pitfalls",children:"Common Pitfalls"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-are-microservices",children:"What are Microservices?"}),"\n",(0,r.jsxs)(n.p,{children:["Microservices is an architectural approach where a large application is built as a ",(0,r.jsx)(n.strong,{children:"suite of small, independent services"})," that communicate over well-defined APIs."]}),"\n",(0,r.jsx)(n.h3,{id:"key-points",children:"Key Points:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each service runs in its own process"}),"\n",(0,r.jsx)(n.li,{children:"Services are developed and deployed independently"}),"\n",(0,r.jsx)(n.li,{children:"Services can be written in different programming languages"}),"\n",(0,r.jsx)(n.li,{children:"Services communicate via HTTP/REST or messaging"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"simple-analogy",children:"Simple Analogy:"}),"\n",(0,r.jsxs)(n.p,{children:["Think of a traditional monolithic application like a ",(0,r.jsx)(n.strong,{children:"big apartment building"})," - if you want to change the kitchen, you might affect the entire building. Microservices are like a ",(0,r.jsx)(n.strong,{children:"neighborhood of houses"})," - you can renovate one house without affecting others."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"monolith-vs-microservices",children:"Monolith vs Microservices"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"Monolith"}),(0,r.jsx)(n.th,{children:"Microservices"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Architecture"})}),(0,r.jsx)(n.td,{children:"Single deployable unit"}),(0,r.jsx)(n.td,{children:"Multiple independent services"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Database"})}),(0,r.jsx)(n.td,{children:"Shared database"}),(0,r.jsx)(n.td,{children:"Database per service"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Technology Stack"})}),(0,r.jsx)(n.td,{children:"Single technology"}),(0,r.jsx)(n.td,{children:"Mixed technologies allowed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Deployment"})}),(0,r.jsx)(n.td,{children:"Deploy entire application"}),(0,r.jsx)(n.td,{children:"Deploy services independently"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Scaling"})}),(0,r.jsx)(n.td,{children:"Scale entire application"}),(0,r.jsx)(n.td,{children:"Scale individual services"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Development Team"})}),(0,r.jsx)(n.td,{children:"Single team"}),(0,r.jsx)(n.td,{children:"Multiple small teams"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Complexity"})}),(0,r.jsx)(n.td,{children:"Simple initially"}),(0,r.jsx)(n.td,{children:"Complex from the start"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,r.jsxs)(n.h3,{id:"1-business-capability-focus",children:["1. ",(0,r.jsx)(n.strong,{children:"Business Capability Focus"})]}),"\n",(0,r.jsx)(n.p,{children:"Each microservice is built around a specific business capability (e.g., User Management, Payment Processing, Inventory Management)."}),"\n",(0,r.jsxs)(n.h3,{id:"2-decentralized-governance",children:["2. ",(0,r.jsx)(n.strong,{children:"Decentralized Governance"})]}),"\n",(0,r.jsx)(n.p,{children:"Teams can choose their own technology stack and make independent decisions."}),"\n",(0,r.jsxs)(n.h3,{id:"3-failure-isolation",children:["3. ",(0,r.jsx)(n.strong,{children:"Failure Isolation"})]}),"\n",(0,r.jsx)(n.p,{children:"If one service fails, others continue to operate."}),"\n",(0,r.jsxs)(n.h3,{id:"4-smart-endpoints-and-dumb-pipes",children:["4. ",(0,r.jsx)(n.strong,{children:"Smart Endpoints and Dumb Pipes"})]}),"\n",(0,r.jsx)(n.p,{children:"Services handle business logic, while communication is simple (HTTP, messaging)."}),"\n",(0,r.jsxs)(n.h3,{id:"5-design-for-failure",children:["5. ",(0,r.jsx)(n.strong,{children:"Design for Failure"})]}),"\n",(0,r.jsx)(n.p,{children:"Assume services will fail and design accordingly."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"benefits-and-challenges",children:"Benefits and Challenges"}),"\n",(0,r.jsx)(n.h3,{id:"-benefits",children:"\u2705 Benefits"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Independent Development & Deployment"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Teams can work independently"}),"\n",(0,r.jsx)(n.li,{children:"Faster release cycles"}),"\n",(0,r.jsx)(n.li,{children:"Less coordination overhead"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technology Diversity"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Choose the right tool for each job"}),"\n",(0,r.jsx)(n.li,{children:"Easier to adopt new technologies"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Scalability"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Scale only the services that need it"}),"\n",(0,r.jsx)(n.li,{children:"More efficient resource usage"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fault Tolerance"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Failure in one service doesn't bring down entire system"}),"\n",(0,r.jsx)(n.li,{children:"Better resilience"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-challenges",children:"\u274c Challenges"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Complexity"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Network calls instead of method calls"}),"\n",(0,r.jsx)(n.li,{children:"Distributed system complexity"}),"\n",(0,r.jsx)(n.li,{children:"More moving parts"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Consistency"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No ACID transactions across services"}),"\n",(0,r.jsx)(n.li,{children:"Eventual consistency challenges"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Testing"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Integration testing is harder"}),"\n",(0,r.jsx)(n.li,{children:"Need for contract testing"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Operational Overhead"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More services to monitor"}),"\n",(0,r.jsx)(n.li,{children:"More deployment pipelines"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"java-microservices-ecosystem",children:"Java Microservices Ecosystem"}),"\n",(0,r.jsx)(n.h3,{id:"core-frameworks",children:"Core Frameworks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Boot"})," - Most popular Java microservices framework"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Cloud"})," - Provides microservices patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quarkus"})," - Kubernetes-native Java stack"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Micronaut"})," - Modern JVM-based framework"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"supporting-tools",children:"Supporting Tools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker"})," - Containerization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kubernetes"})," - Container orchestration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maven/Gradle"})," - Build tools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Netflix OSS"})," - Microservices libraries (Eureka, Hystrix)"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"1-service-boundaries",children:"1. Service Boundaries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c Bad: Services sharing databases\n\u274c Bad: Services knowing internal details of others\n\u2705 Good: Services with clear, well-defined interfaces\n\u2705 Good: Services owning their data\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-database-per-service",children:"2. Database per Service"}),"\n",(0,r.jsx)(n.p,{children:"Each microservice should have its own database to ensure loose coupling."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"User Service \u2192 User DB\nOrder Service \u2192 Order DB\nPayment Service \u2192 Payment DB\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-api-gateway",children:"3. API Gateway"}),"\n",(0,r.jsx)(n.p,{children:"Central entry point for all client requests."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Client \u2192 API Gateway \u2192 [User Service, Order Service, Payment Service]\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getting-started-with-spring-boot",children:"Getting Started with Spring Boot"}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-microservice-structure",children:"1. Basic Microservice Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@SpringBootApplication\n@RestController\npublic class UserServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(UserServiceApplication.class, args);\n    }\n\n    @GetMapping("/users/{id}")\n    public User getUser(@PathVariable Long id) {\n        // Business logic here\n        return userService.findById(id);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-key-annotations",children:"2. Key Annotations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@SpringBootApplication"})," - Main application class"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@RestController"})," - REST API controller"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@Service"})," - Business logic layer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@Repository"})," - Data access layer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@Entity"})," - JPA entity"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-application-properties",children:"3. Application Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# application.yml\nserver:\n  port: 8081\n\nspring:\n  application:\n    name: user-service\n  datasource:\n    url: jdbc:h2:mem:userdb\n    driver-class-name: org.h2.Driver\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"communication-patterns",children:"Communication Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-synchronous-communication",children:"1. Synchronous Communication"}),"\n",(0,r.jsx)(n.h4,{id:"rest-api-calls",children:"REST API Calls"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class OrderService {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public User getUserDetails(Long userId) {\n        String url = "http://user-service/users/" + userId;\n        return restTemplate.getForObject(url, User.class);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"feign-client-declarative",children:"Feign Client (Declarative)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@FeignClient(name = "user-service")\npublic interface UserServiceClient {\n\n    @GetMapping("/users/{id}")\n    User getUserById(@PathVariable Long id);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-asynchronous-communication",children:"2. Asynchronous Communication"}),"\n",(0,r.jsx)(n.h4,{id:"message-queues-rabbitmq-example",children:"Message Queues (RabbitMQ Example)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RabbitListener(queues = "order.created")\npublic void handleOrderCreated(OrderCreatedEvent event) {\n    // Process order created event\n    emailService.sendOrderConfirmation(event.getOrderId());\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-when-to-use-each-pattern",children:"3. When to Use Each Pattern"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Pattern"}),(0,r.jsx)(n.th,{children:"Use When"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Synchronous"})}),(0,r.jsx)(n.td,{children:"Need immediate response"}),(0,r.jsx)(n.td,{children:"Get user profile"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Asynchronous"})}),(0,r.jsx)(n.td,{children:"Fire-and-forget operations"}),(0,r.jsx)(n.td,{children:"Send email notification"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"data-management",children:"Data Management"}),"\n",(0,r.jsx)(n.h3,{id:"1-database-per-service-pattern",children:"1. Database per Service Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u2705 Good Pattern:\nUser Service \u2192 MySQL (Users table)\nOrder Service \u2192 PostgreSQL (Orders, OrderItems tables)\nInventory Service \u2192 MongoDB (Products collection)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-shared-database-anti-pattern",children:"2. Shared Database Anti-Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c Avoid This:\nUser Service \u2198\n              Shared DB\nOrder Service \u2197\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-data-consistency-patterns",children:"3. Data Consistency Patterns"}),"\n",(0,r.jsx)(n.h4,{id:"saga-pattern",children:"Saga Pattern"}),"\n",(0,r.jsx)(n.p,{children:"For managing transactions across multiple services:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Service\npublic class OrderSagaOrchestrator {\n\n    public void processOrder(Order order) {\n        try {\n            // Step 1: Reserve inventory\n            inventoryService.reserveItems(order.getItems());\n\n            // Step 2: Process payment\n            paymentService.processPayment(order.getPayment());\n\n            // Step 3: Create order\n            orderService.createOrder(order);\n\n        } catch (Exception e) {\n            // Compensating actions\n            inventoryService.releaseReservation(order.getItems());\n            // ... other rollback actions\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"service-discovery",children:"Service Discovery"}),"\n",(0,r.jsx)(n.h3,{id:"1-netflix-eureka-spring-cloud",children:"1. Netflix Eureka (Spring Cloud)"}),"\n",(0,r.jsx)(n.h4,{id:"eureka-server",children:"Eureka Server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@EnableEurekaServer\n@SpringBootApplication\npublic class EurekaServerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaServerApplication.class, args);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"eureka-client",children:"Eureka Client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@EnableEurekaClient\n@SpringBootApplication\npublic class UserServiceApplication {\n    // Application code\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-application-configuration",children:"2. Application Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Eureka Client Configuration\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n    register-with-eureka: true\n    fetch-registry: true\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,r.jsx)(n.h3,{id:"1-spring-cloud-config",children:"1. Spring Cloud Config"}),"\n",(0,r.jsx)(n.h4,{id:"config-server",children:"Config Server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@EnableConfigServer\n@SpringBootApplication\npublic class ConfigServerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ConfigServerApplication.class, args);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"config-client",children:"Config Client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# bootstrap.yml\nspring:\n  cloud:\n    config:\n      uri: http://localhost:8888\n  application:\n    name: user-service\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-environment-specific-configuration",children:"2. Environment-Specific Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"config-repo/\n\u251c\u2500\u2500 user-service.yml          # Default config\n\u251c\u2500\u2500 user-service-dev.yml      # Development config\n\u251c\u2500\u2500 user-service-prod.yml     # Production config\n\u2514\u2500\u2500 application.yml           # Global config\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-logging",children:"Monitoring and Logging"}),"\n",(0,r.jsx)(n.h3,{id:"1-distributed-tracing",children:"1. Distributed Tracing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Spring Cloud Sleuth automatically adds tracing\n@GetMapping("/users/{id}")\npublic User getUser(@PathVariable Long id) {\n    log.info("Getting user with id: {}", id); // Automatically traced\n    return userService.findById(id);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-health-checks",children:"2. Health Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class DatabaseHealthIndicator implements HealthIndicator {\n\n    @Override\n    public Health health() {\n        if (isDatabaseUp()) {\n            return Health.up().withDetail("database", "Available").build();\n        } else {\n            return Health.down().withDetail("database", "Not Available").build();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-metrics-with-micrometer",children:"3. Metrics with Micrometer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class UserController {\n\n    private final Counter userRequestCounter;\n\n    public UserController(MeterRegistry meterRegistry) {\n        this.userRequestCounter = Counter.builder("user.requests")\n            .description("Number of user requests")\n            .register(meterRegistry);\n    }\n\n    @GetMapping("/users/{id}")\n    public User getUser(@PathVariable Long id) {\n        userRequestCounter.increment();\n        return userService.findById(id);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,r.jsx)(n.h3,{id:"1-oauth2-with-jwt",children:"1. OAuth2 with JWT"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@EnableWebSecurity\n@EnableResourceServer\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n            .antMatchers("/public/**").permitAll()\n            .anyRequest().authenticated()\n            .and()\n            .oauth2ResourceServer()\n            .jwt();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-service-to-service-authentication",children:"2. Service-to-Service Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class FeignClientConfig {\n\n    @Bean\n    public RequestInterceptor requestTokenBearerInterceptor() {\n        return requestTemplate -> {\n            String token = getCurrentUserToken();\n            requestTemplate.header("Authorization", "Bearer " + token);\n        };\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"deployment-strategies",children:"Deployment Strategies"}),"\n",(0,r.jsx)(n.h3,{id:"1-docker-containerization",children:"1. Docker Containerization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'FROM openjdk:11-jre-slim\n\nCOPY target/user-service-1.0.jar app.jar\n\nEXPOSE 8080\n\nENTRYPOINT ["java", "-jar", "/app.jar"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-kubernetes-deployment",children:"2. Kubernetes Deployment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n    spec:\n      containers:\n        - name: user-service\n          image: user-service:1.0\n          ports:\n            - containerPort: 8080\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.h3,{id:"1-start-with-a-monolith",children:["1. ",(0,r.jsx)(n.strong,{children:"Start with a Monolith"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Build a monolith first"}),"\n",(0,r.jsx)(n.li,{children:"Extract microservices when you understand the domain boundaries"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-service-size",children:["2. ",(0,r.jsx)(n.strong,{children:"Service Size"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Follow the "two-pizza team" rule'}),"\n",(0,r.jsx)(n.li,{children:"If a team can't be fed with two pizzas, the service might be too big"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-api-design",children:["3. ",(0,r.jsx)(n.strong,{children:"API Design"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Good: Versioned APIs\n@GetMapping("/v1/users/{id}")\npublic User getUserV1(@PathVariable Long id) { ... }\n\n@GetMapping("/v2/users/{id}")\npublic UserV2 getUserV2(@PathVariable Long id) { ... }\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4-error-handling",children:["4. ",(0,r.jsx)(n.strong,{children:"Error Handling"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(UserNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException e) {\n        ErrorResponse error = new ErrorResponse("USER_NOT_FOUND", e.getMessage());\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"5-circuit-breaker-pattern",children:["5. ",(0,r.jsx)(n.strong,{children:"Circuit Breaker Pattern"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class UserServiceClient {\n\n    @CircuitBreaker(name = "user-service", fallbackMethod = "fallbackUser")\n    public User getUser(Long id) {\n        return restTemplate.getForObject("/users/" + id, User.class);\n    }\n\n    public User fallbackUser(Long id, Exception ex) {\n        return new User(id, "Unknown User"); // Fallback response\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.h3,{id:"1-distributed-monolith",children:["1. ",(0,r.jsx)(n.strong,{children:"Distributed Monolith"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Problem"}),": Services are too tightly coupled\n\u2705 ",(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure services can be developed and deployed independently"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-chatty-interfaces",children:["2. ",(0,r.jsx)(n.strong,{children:"Chatty Interfaces"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Problem"}),": Too many API calls between services\n\u2705 ",(0,r.jsx)(n.strong,{children:"Solution"}),": Design coarser-grained APIs"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-shared-database",children:["3. ",(0,r.jsx)(n.strong,{children:"Shared Database"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Problem"}),": Multiple services accessing the same database\n\u2705 ",(0,r.jsx)(n.strong,{children:"Solution"}),": Database per service pattern"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-ignoring-network-latency",children:["4. ",(0,r.jsx)(n.strong,{children:"Ignoring Network Latency"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Problem"}),": Treating remote calls like local calls\n\u2705 ",(0,r.jsx)(n.strong,{children:"Solution"}),": Design for network failures and latency"]}),"\n",(0,r.jsxs)(n.h3,{id:"5-not-monitoring-enough",children:["5. ",(0,r.jsx)(n.strong,{children:"Not Monitoring Enough"})]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Problem"}),": Lack of observability in distributed system\n\u2705 ",(0,r.jsx)(n.strong,{children:"Solution"}),": Comprehensive monitoring, logging, and tracing"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"learning-path",children:"Learning Path"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-foundations",children:"Phase 1: Foundations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Learn Spring Boot basics"}),"\n",(0,r.jsx)(n.li,{children:"Understand REST API design"}),"\n",(0,r.jsx)(n.li,{children:"Practice with simple CRUD applications"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-microservices-basics",children:"Phase 2: Microservices Basics"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create multiple Spring Boot services"}),"\n",(0,r.jsx)(n.li,{children:"Implement service-to-service communication"}),"\n",(0,r.jsx)(n.li,{children:"Set up service discovery with Eureka"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-advanced-patterns",children:"Phase 3: Advanced Patterns"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Implement API Gateway"}),"\n",(0,r.jsx)(n.li,{children:"Add configuration management"}),"\n",(0,r.jsx)(n.li,{children:"Set up monitoring and logging"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-production-ready",children:"Phase 4: Production Ready"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Add security (OAuth2/JWT)"}),"\n",(0,r.jsx)(n.li,{children:"Implement circuit breakers"}),"\n",(0,r.jsx)(n.li,{children:"Set up containerization and orchestration"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"useful-resources",children:"Useful Resources"}),"\n",(0,r.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.spring.io/spring-boot/",children:"Spring Boot Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://spring.io/projects/spring-cloud",children:"Spring Cloud Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://microservices.io/",children:"Microservices Patterns"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"books",children:"Books"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Microservices Patterns" by Chris Richardson'}),"\n",(0,r.jsx)(n.li,{children:'"Building Microservices" by Sam Newman'}),"\n",(0,r.jsx)(n.li,{children:'"Spring Microservices in Action" by John Carnell'}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"tools-to-explore",children:"Tools to Explore"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker"})," - Containerization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kubernetes"})," - Container orchestration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Postman"})," - API testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zipkin"})," - Distributed tracing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prometheus"})," - Monitoring"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ELK Stack"})," - Logging"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"Microservices architecture offers many benefits but comes with increased complexity. Start small, learn the patterns, and gradually build up your understanding. Remember:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Domain-driven design"})," is crucial for service boundaries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automation"})," is essential for managing complexity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitoring"})," is critical for distributed systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Team structure"})," should align with service architecture"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start simple"})," and evolve your architecture over time"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The key to successful microservices is not the technology, but understanding the business domain and designing services around business capabilities."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);