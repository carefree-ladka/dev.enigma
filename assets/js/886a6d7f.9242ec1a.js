"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1457],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},88012:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=s(74848),i=s(28453);const r={},a="JUnit Java Testing - Complete Developer Guide",o={id:"Java/JUnit Java Testing",title:"JUnit Java Testing - Complete Developer Guide",description:"Table of Contents",source:"@site/docs/Java/JUnit Java Testing.mdx",sourceDirName:"Java",slug:"/Java/JUnit Java Testing",permalink:"/js.enigma/docs/Java/JUnit Java Testing",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/JUnit Java Testing.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GitHub Actions + Docker CI/CD Pipeline for Spring Boot",permalink:"/js.enigma/docs/Java/GitHub Actions + Docker CICD Pipeline for Spring Boot"},next:{title:"Java Backend Interview Roadmap \ud83d\ude80",permalink:"/js.enigma/docs/Java/Java Backend Interview Roadmap"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction to JUnit",id:"introduction-to-junit",level:2},{value:"Why JUnit is Essential:",id:"why-junit-is-essential",level:3},{value:"JUnit 5 Architecture:",id:"junit-5-architecture",level:3},{value:"Core Annotations",id:"core-annotations",level:2},{value:"@Test - The Foundation",id:"test---the-foundation",level:3},{value:"@DisplayName - Better Test Descriptions",id:"displayname---better-test-descriptions",level:3},{value:"@Disabled - Skip Tests Temporarily",id:"disabled---skip-tests-temporarily",level:3},{value:"Assertions",id:"assertions",level:2},{value:"Basic Assertions (Most Frequently Used)",id:"basic-assertions-most-frequently-used",level:3},{value:"Array and Collection Assertions",id:"array-and-collection-assertions",level:3},{value:"Exception Assertions",id:"exception-assertions",level:3},{value:"Advanced Assertions",id:"advanced-assertions",level:3},{value:"Test Lifecycle",id:"test-lifecycle",level:2},{value:"Setup and Teardown Annotations",id:"setup-and-teardown-annotations",level:3},{value:"Parameterized Tests",id:"parameterized-tests",level:2},{value:"@ValueSource - Simple Parameter Testing",id:"valuesource---simple-parameter-testing",level:3},{value:"@CsvSource - Multiple Parameters",id:"csvsource---multiple-parameters",level:3},{value:"@MethodSource - Complex Data",id:"methodsource---complex-data",level:3},{value:"Exception Testing",id:"exception-testing",level:2},{value:"Testing Expected Exceptions",id:"testing-expected-exceptions",level:3},{value:"Timeout Testing",id:"timeout-testing",level:2},{value:"@Timeout Annotation",id:"timeout-annotation",level:3},{value:"Test Organization",id:"test-organization",level:2},{value:"Nested Test Classes",id:"nested-test-classes",level:3},{value:"Test Ordering",id:"test-ordering",level:3},{value:"Mocking with Mockito",id:"mocking-with-mockito",level:2},{value:"Basic Mocking Setup",id:"basic-mocking-setup",level:3},{value:"Argument Matchers",id:"argument-matchers",level:3},{value:"Stubbing Void Methods",id:"stubbing-void-methods",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Follow AAA Pattern (Arrange, Act, Assert)",id:"1-follow-aaa-pattern-arrange-act-assert",level:3},{value:"2. Use Descriptive Test Names",id:"2-use-descriptive-test-names",level:3},{value:"3. Test One Thing at a Time",id:"3-test-one-thing-at-a-time",level:3},{value:"4. Use Custom Assertions for Complex Objects",id:"4-use-custom-assertions-for-complex-objects",level:3},{value:"5. Test Data Builders",id:"5-test-data-builders",level:3},{value:"Frequently Used Testing Patterns",id:"frequently-used-testing-patterns",level:2},{value:"1. Repository Layer Testing",id:"1-repository-layer-testing",level:3},{value:"2. Service Layer Testing with Mocks",id:"2-service-layer-testing-with-mocks",level:3},{value:"3. Controller Testing",id:"3-controller-testing",level:3},{value:"Key Takeaways for Development",id:"key-takeaways-for-development",level:2},{value:"Most Important Annotations:",id:"most-important-annotations",level:3},{value:"Essential Assertions:",id:"essential-assertions",level:3},{value:"Testing Strategy:",id:"testing-strategy",level:3},{value:"Remember:",id:"remember",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"junit-java-testing---complete-developer-guide",children:"JUnit Java Testing - Complete Developer Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#introduction-to-junit",children:"Introduction to JUnit"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#core-annotations",children:"Core Annotations"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#assertions",children:"Assertions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#test-lifecycle",children:"Test Lifecycle"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#parameterized-tests",children:"Parameterized Tests"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#exception-testing",children:"Exception Testing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#timeout-testing",children:"Timeout Testing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#test-organization",children:"Test Organization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#mocking-with-mockito",children:"Mocking with Mockito"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-junit",children:"Introduction to JUnit"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"JUnit"})," is the most popular testing framework for Java applications. It provides annotations to identify test methods, assertions to verify expected results, and test runners to execute tests."]}),"\n",(0,t.jsx)(n.h3,{id:"why-junit-is-essential",children:"Why JUnit is Essential:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unit Testing"}),": Validates individual components work correctly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Regression Prevention"}),": Catches bugs when code changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Tests serve as living documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Confidence"}),": Enables refactoring with confidence"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"junit-5-architecture",children:"JUnit 5 Architecture:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JUnit Platform"}),": Foundation for launching testing frameworks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JUnit Jupiter"}),": Programming and extension model for JUnit 5"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JUnit Vintage"}),": Backward compatibility with JUnit 3 and 4"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"core-annotations",children:"Core Annotations"}),"\n",(0,t.jsx)(n.h3,{id:"test---the-foundation",children:"@Test - The Foundation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CalculatorTest {\n\n    @Test\n    void testAddition() {\n        Calculator calc = new Calculator();\n        int result = calc.add(2, 3);\n        assertEquals(5, result, "2 + 3 should equal 5");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"displayname---better-test-descriptions",children:"@DisplayName - Better Test Descriptions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Should calculate correct sum when adding positive numbers")\nvoid testAddPositiveNumbers() {\n    // Test implementation\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"disabled---skip-tests-temporarily",children:"@Disabled - Skip Tests Temporarily"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\n@Disabled("Feature not yet implemented")\nvoid testFeatureNotReady() {\n    // This test will be skipped\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"assertions",children:"Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"basic-assertions-most-frequently-used",children:"Basic Assertions (Most Frequently Used)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import static org.junit.jupiter.api.Assertions.*;\n\n@Test\nvoid basicAssertions() {\n    // Equality checks\n    assertEquals(expected, actual);\n    assertEquals(expected, actual, "Custom error message");\n\n    // Boolean checks\n    assertTrue(condition);\n    assertFalse(condition);\n\n    // Null checks\n    assertNull(object);\n    assertNotNull(object);\n\n    // Reference checks\n    assertSame(expected, actual);  // Same object reference\n    assertNotSame(expected, actual);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"array-and-collection-assertions",children:"Array and Collection Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid collectionAssertions() {\n    String[] expected = {"apple", "banana", "cherry"};\n    String[] actual = {"apple", "banana", "cherry"};\n\n    // Array comparison\n    assertArrayEquals(expected, actual);\n\n    // Collection comparison\n    List<String> expectedList = Arrays.asList("a", "b", "c");\n    List<String> actualList = Arrays.asList("a", "b", "c");\n    assertEquals(expectedList, actualList);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"exception-assertions",children:"Exception Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid exceptionAssertions() {\n    // Assert that exception is thrown\n    Exception exception = assertThrows(\n        IllegalArgumentException.class,\n        () -> calculator.divide(10, 0)\n    );\n\n    assertEquals("Cannot divide by zero", exception.getMessage());\n\n    // Assert no exception is thrown\n    assertDoesNotThrow(() -> calculator.add(1, 2));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-assertions",children:"Advanced Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid advancedAssertions() {\n    Person person = new Person("John", 25);\n\n    // Multiple assertions executed together\n    assertAll("person properties",\n        () -> assertEquals("John", person.getName()),\n        () -> assertEquals(25, person.getAge()),\n        () -> assertTrue(person.isAdult())\n    );\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"test-lifecycle",children:"Test Lifecycle"}),"\n",(0,t.jsx)(n.h3,{id:"setup-and-teardown-annotations",children:"Setup and Teardown Annotations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import org.junit.jupiter.api.*;\n\npublic class DatabaseTest {\n    private static Database database;\n    private Connection connection;\n\n    @BeforeAll\n    static void setupDatabase() {\n        // Runs once before all tests in the class\n        database = new Database();\n        database.initialize();\n    }\n\n    @BeforeEach\n    void setupConnection() {\n        // Runs before each test method\n        connection = database.getConnection();\n        connection.beginTransaction();\n    }\n\n    @Test\n    void testUserCreation() {\n        // Test implementation\n    }\n\n    @AfterEach\n    void cleanupConnection() {\n        // Runs after each test method\n        connection.rollback();\n        connection.close();\n    }\n\n    @AfterAll\n    static void cleanupDatabase() {\n        // Runs once after all tests in the class\n        database.shutdown();\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important Note"}),": ",(0,t.jsx)(n.code,{children:"@BeforeAll"})," and ",(0,t.jsx)(n.code,{children:"@AfterAll"})," methods must be static."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"parameterized-tests",children:"Parameterized Tests"}),"\n",(0,t.jsx)(n.h3,{id:"valuesource---simple-parameter-testing",children:"@ValueSource - Simple Parameter Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.*;\n\n@ParameterizedTest\n@ValueSource(ints = {1, 2, 3, 5, 8, 13})\n@DisplayName("Should return true for positive numbers")\nvoid testPositiveNumbers(int number) {\n    assertTrue(MathUtils.isPositive(number));\n}\n\n@ParameterizedTest\n@ValueSource(strings = {"", " ", "   "})\nvoid testBlankStrings(String input) {\n    assertTrue(StringUtils.isBlank(input));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"csvsource---multiple-parameters",children:"@CsvSource - Multiple Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ParameterizedTest\n@CsvSource({\n    "1, 1, 2",\n    "2, 3, 5",\n    "5, 7, 12"\n})\nvoid testAddition(int a, int b, int expected) {\n    assertEquals(expected, calculator.add(a, b));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"methodsource---complex-data",children:"@MethodSource - Complex Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ParameterizedTest\n@MethodSource("providePersonData")\nvoid testPersonValidation(String name, int age, boolean expectedValid) {\n    Person person = new Person(name, age);\n    assertEquals(expectedValid, person.isValid());\n}\n\nstatic Stream<Arguments> providePersonData() {\n    return Stream.of(\n        Arguments.of("John", 25, true),\n        Arguments.of("", 25, false),\n        Arguments.of("Jane", -5, false)\n    );\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"exception-testing",children:"Exception Testing"}),"\n",(0,t.jsx)(n.h3,{id:"testing-expected-exceptions",children:"Testing Expected Exceptions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testDivisionByZero() {\n    ArithmeticException exception = assertThrows(\n        ArithmeticException.class,\n        () -> calculator.divide(10, 0),\n        "Division by zero should throw ArithmeticException"\n    );\n\n    assertTrue(exception.getMessage().contains("zero"));\n}\n\n@Test\nvoid testValidInput() {\n    // Ensure no exception is thrown with valid input\n    assertDoesNotThrow(() -> calculator.divide(10, 2));\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"timeout-testing",children:"Timeout Testing"}),"\n",(0,t.jsx)(n.h3,{id:"timeout-annotation",children:"@Timeout Annotation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import org.junit.jupiter.api.Timeout;\nimport java.util.concurrent.TimeUnit;\n\n@Test\n@Timeout(value = 2, unit = TimeUnit.SECONDS)\nvoid testLongRunningOperation() {\n    // This test will fail if it takes longer than 2 seconds\n    heavyComputation();\n}\n\n@Test\nvoid testWithAssertTimeout() {\n    assertTimeout(Duration.ofSeconds(2), () -> {\n        // Code that should complete within 2 seconds\n        return heavyComputation();\n    });\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"test-organization",children:"Test Organization"}),"\n",(0,t.jsx)(n.h3,{id:"nested-test-classes",children:"Nested Test Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import org.junit.jupiter.api.Nested;\n\npublic class CalculatorTest {\n\n    @Nested\n    @DisplayName("Addition Tests")\n    class AdditionTests {\n\n        @Test\n        @DisplayName("Should add positive numbers correctly")\n        void addPositiveNumbers() {\n            assertEquals(5, calculator.add(2, 3));\n        }\n\n        @Test\n        @DisplayName("Should handle negative numbers")\n        void addNegativeNumbers() {\n            assertEquals(-1, calculator.add(-3, 2));\n        }\n    }\n\n    @Nested\n    @DisplayName("Division Tests")\n    class DivisionTests {\n\n        @Test\n        void divideNormalNumbers() {\n            assertEquals(2.5, calculator.divide(5, 2));\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"test-ordering",children:"Test Ordering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import org.junit.jupiter.api.TestMethodOrder;\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.Order;\n\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class OrderedTests {\n\n    @Test\n    @Order(1)\n    void firstTest() {\n        // Runs first\n    }\n\n    @Test\n    @Order(2)\n    void secondTest() {\n        // Runs second\n    }\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"mocking-with-mockito",children:"Mocking with Mockito"}),"\n",(0,t.jsx)(n.h3,{id:"basic-mocking-setup",children:"Basic Mocking Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import org.mockito.*;\nimport static org.mockito.Mockito.*;\n\npublic class UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @InjectMocks\n    private UserService userService;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    void testFindUser() {\n        // Arrange\n        User mockUser = new User("John", "john@email.com");\n        when(userRepository.findById(1L)).thenReturn(mockUser);\n\n        // Act\n        User result = userService.findUser(1L);\n\n        // Assert\n        assertEquals("John", result.getName());\n        verify(userRepository).findById(1L);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"argument-matchers",children:"Argument Matchers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Test\nvoid testWithArgumentMatchers() {\n    // Match any string\n    when(userRepository.findByEmail(anyString())).thenReturn(new User());\n\n    // Match specific conditions\n    when(userRepository.findByAge(argThat(age -> age > 18)))\n        .thenReturn(Arrays.asList(new User()));\n\n    // Match exact values\n    when(userRepository.save(eq(user))).thenReturn(user);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"stubbing-void-methods",children:"Stubbing Void Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Test\nvoid testVoidMethod() {\n    // For void methods, use doNothing(), doThrow(), etc.\n    doNothing().when(emailService).sendEmail(anyString());\n\n    // Test the service\n    userService.registerUser(user);\n\n    verify(emailService).sendEmail(user.getEmail());\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-follow-aaa-pattern-arrange-act-assert",children:"1. Follow AAA Pattern (Arrange, Act, Assert)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testUserRegistration() {\n    // Arrange\n    User newUser = new User("John", "john@email.com");\n    when(userRepository.existsByEmail(anyString())).thenReturn(false);\n\n    // Act\n    boolean result = userService.registerUser(newUser);\n\n    // Assert\n    assertTrue(result);\n    verify(userRepository).save(newUser);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-use-descriptive-test-names",children:"2. Use Descriptive Test Names"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good\n@Test\nvoid shouldReturnTrueWhenUserEmailIsUnique() { }\n\n// Bad\n@Test\nvoid testUser() { }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-test-one-thing-at-a-time",children:"3. Test One Thing at a Time"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Good - Tests one specific behavior\n@Test\nvoid shouldThrowExceptionWhenEmailAlreadyExists() {\n    when(userRepository.existsByEmail("test@email.com")).thenReturn(true);\n\n    assertThrows(EmailAlreadyExistsException.class,\n        () -> userService.registerUser(new User("John", "test@email.com")));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-use-custom-assertions-for-complex-objects",children:"4. Use Custom Assertions for Complex Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserAssertions {\n    public static void assertUserEquals(User expected, User actual) {\n        assertAll("user properties",\n            () -> assertEquals(expected.getName(), actual.getName()),\n            () -> assertEquals(expected.getEmail(), actual.getEmail()),\n            () -> assertEquals(expected.getAge(), actual.getAge())\n        );\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-test-data-builders",children:"5. Test Data Builders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserTestDataBuilder {\n    private String name = "Default Name";\n    private String email = "default@email.com";\n    private int age = 25;\n\n    public UserTestDataBuilder withName(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public UserTestDataBuilder withEmail(String email) {\n        this.email = email;\n        return this;\n    }\n\n    public User build() {\n        return new User(name, email, age);\n    }\n}\n\n// Usage in tests\n@Test\nvoid testUserCreation() {\n    User user = new UserTestDataBuilder()\n        .withName("John")\n        .withEmail("john@email.com")\n        .build();\n\n    // Test with the created user\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"frequently-used-testing-patterns",children:"Frequently Used Testing Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"1-repository-layer-testing",children:"1. Repository Layer Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@Transactional\nclass UserRepositoryTest {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Test\n    void shouldFindUserByEmail() {\n        // Given\n        User user = new User("John", "john@email.com");\n        userRepository.save(user);\n\n        // When\n        Optional<User> found = userRepository.findByEmail("john@email.com");\n\n        // Then\n        assertTrue(found.isPresent());\n        assertEquals("John", found.get().getName());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-service-layer-testing-with-mocks",children:"2. Service Layer Testing with Mocks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private EmailService emailService;\n\n    @InjectMocks\n    private UserService userService;\n\n    @Test\n    void shouldRegisterUserSuccessfully() {\n        // Given\n        User user = new User("John", "john@email.com");\n        when(userRepository.existsByEmail(user.getEmail())).thenReturn(false);\n        when(userRepository.save(user)).thenReturn(user);\n\n        // When\n        User registered = userService.registerUser(user);\n\n        // Then\n        assertNotNull(registered);\n        verify(emailService).sendWelcomeEmail(user.getEmail());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-controller-testing",children:"3. Controller Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@WebMvcTest(UserController.class)\nclass UserControllerTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private UserService userService;\n\n    @Test\n    void shouldCreateUser() throws Exception {\n        User user = new User("John", "john@email.com");\n        when(userService.createUser(any(User.class))).thenReturn(user);\n\n        mockMvc.perform(post("/api/users")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content("{\\"name\\":\\"John\\",\\"email\\":\\"john@email.com\\"}"))\n                .andExpect(status().isCreated())\n                .andExpect(jsonPath("$.name").value("John"))\n                .andExpect(jsonPath("$.email").value("john@email.com"));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways-for-development",children:"Key Takeaways for Development"}),"\n",(0,t.jsx)(n.h3,{id:"most-important-annotations",children:"Most Important Annotations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@Test"})," - Mark test methods"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@BeforeEach"})," / ",(0,t.jsx)(n.code,{children:"@AfterEach"})," - Setup and cleanup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@ParameterizedTest"})," - Data-driven tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@Mock"})," / ",(0,t.jsx)(n.code,{children:"@InjectMocks"})," - For mocking dependencies"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"essential-assertions",children:"Essential Assertions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assertEquals()"})," - Most common assertion"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assertThrows()"})," - Exception testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assertAll()"})," - Multiple related assertions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assertTrue()"})," / ",(0,t.jsx)(n.code,{children:"assertFalse()"})," - Boolean checks"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-strategy",children:"Testing Strategy:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unit Tests"}),": Test individual components in isolation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integration Tests"}),": Test component interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test Coverage"}),": Aim for meaningful coverage, not just high percentages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test Maintenance"}),": Keep tests simple and maintainable"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"remember",children:"Remember:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Write tests first (TDD) or alongside code"}),"\n",(0,t.jsx)(n.li,{children:"Tests should be fast, independent, and repeatable"}),"\n",(0,t.jsx)(n.li,{children:"Good tests serve as documentation"}),"\n",(0,t.jsx)(n.li,{children:"Mock external dependencies in unit tests"}),"\n",(0,t.jsx)(n.li,{children:"Use real dependencies in integration tests"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);