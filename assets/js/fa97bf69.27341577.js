"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[36359],{16322:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=i(74848),t=i(28453);const s={},a="System Design: Top-K YouTube Videos",l={id:"High Level Designs/System Design: Top-K YouTube Videos",title:"System Design: Top-K YouTube Videos",description:"A comprehensive guide to designing a real-time system for tracking and displaying the most viewed YouTube videos using stream processing and probabilistic data structures.",source:"@site/docs/High Level Designs/System Design: Top-K YouTube Videos.mdx",sourceDirName:"High Level Designs",slug:"/High Level Designs/System Design: Top-K YouTube Videos",permalink:"/docs/High Level Designs/System Design: Top-K YouTube Videos",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/High Level Designs/System Design: Top-K YouTube Videos.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"System Design: Spotify Top-K Songs Tracker",permalink:"/docs/High Level Designs/System Design: Spotify Top-K Songs Tracker"},next:{title:"Video Streaming at Scale \ud83c\udfa5",permalink:"/docs/High Level Designs/Video Streaming"}},d={},o=[{value:"1. Problem Understanding &amp; Requirements",id:"1-problem-understanding--requirements",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"Scale Estimation",id:"scale-estimation",level:3},{value:"2. High-Level Architecture",id:"2-high-level-architecture",level:2},{value:"3. Core Components Deep Dive",id:"3-core-components-deep-dive",level:2},{value:"3.1 Data Model",id:"31-data-model",level:3},{value:"3.2 Stream Processing Pipeline",id:"32-stream-processing-pipeline",level:3},{value:"4. Count-Min Sketch Implementation",id:"4-count-min-sketch-implementation",level:2},{value:"What is Count-Min Sketch?",id:"what-is-count-min-sketch",level:3},{value:"Count-Min Sketch Algorithm",id:"count-min-sketch-algorithm",level:3},{value:"Why Count-Min Sketch for YouTube?",id:"why-count-min-sketch-for-youtube",level:3},{value:"5. Top-K Algorithm Design",id:"5-top-k-algorithm-design",level:2},{value:"Heap-Based Approach",id:"heap-based-approach",level:3},{value:"Space-Saving Algorithm (Alternative)",id:"space-saving-algorithm-alternative",level:3},{value:"6. Time Window Processing",id:"6-time-window-processing",level:2},{value:"Window Types",id:"window-types",level:3},{value:"Multi-Window Architecture",id:"multi-window-architecture",level:3},{value:"7. Database Design",id:"7-database-design",level:2},{value:"Redis Schema (Hot Data - Top-K Cache)",id:"redis-schema-hot-data---top-k-cache",level:3},{value:"Cassandra Schema (Cold Data - Historical)",id:"cassandra-schema-cold-data---historical",level:3},{value:"8. System Architecture Patterns",id:"8-system-architecture-patterns",level:2},{value:"8.1 Lambda Architecture Pattern",id:"81-lambda-architecture-pattern",level:3},{value:"8.2 Kappa Architecture Pattern (Simplified)",id:"82-kappa-architecture-pattern-simplified",level:3},{value:"9. Optimizations &amp; Trade-offs",id:"9-optimizations--trade-offs",level:2},{value:"9.1 Partitioning Strategy",id:"91-partitioning-strategy",level:3},{value:"9.2 Hierarchical Aggregation",id:"92-hierarchical-aggregation",level:3},{value:"9.3 Sampling Techniques",id:"93-sampling-techniques",level:3},{value:"10. Handling Edge Cases",id:"10-handling-edge-cases",level:2},{value:"10.1 Viral Video Spike",id:"101-viral-video-spike",level:3},{value:"10.2 Bot Detection &amp; Fraud Prevention",id:"102-bot-detection--fraud-prevention",level:3},{value:"10.3 Late Arriving Events",id:"103-late-arriving-events",level:3},{value:"11. Monitoring &amp; Observability",id:"11-monitoring--observability",level:2},{value:"Key Metrics",id:"key-metrics",level:3},{value:"12. API Design",id:"12-api-design",level:2},{value:"REST API Endpoints",id:"rest-api-endpoints",level:3},{value:"WebSocket for Real-time Updates",id:"websocket-for-real-time-updates",level:3},{value:"13. Cost Optimization",id:"13-cost-optimization",level:2},{value:"Resource Estimates",id:"resource-estimates",level:3},{value:"Cost Optimization Strategies",id:"cost-optimization-strategies",level:3},{value:"14. Generic Top-K System Design Framework",id:"14-generic-top-k-system-design-framework",level:2},{value:"Universal Components for Any Top-K Problem",id:"universal-components-for-any-top-k-problem",level:3},{value:"14.1 Problem Categories &amp; Patterns",id:"141-problem-categories--patterns",level:3},{value:"Category 1: Heavy Hitters (Most Frequent Items)",id:"category-1-heavy-hitters-most-frequent-items",level:4},{value:"Category 2: Time-Sensitive Ranking (Trending Items)",id:"category-2-time-sensitive-ranking-trending-items",level:4},{value:"Category 3: Multi-Dimensional Top-K",id:"category-3-multi-dimensional-top-k",level:4},{value:"14.2 Universal Design Checklist",id:"142-universal-design-checklist",level:3},{value:"Phase 1: Requirements Analysis",id:"phase-1-requirements-analysis",level:4},{value:"Phase 2: Algorithm Selection",id:"phase-2-algorithm-selection",level:4},{value:"Phase 3: Data Structure Selection",id:"phase-3-data-structure-selection",level:4},{value:"14.3 Common Patterns &amp; Anti-Patterns",id:"143-common-patterns--anti-patterns",level:3},{value:"\u2705 Best Practices",id:"-best-practices",level:4},{value:"\u274c Anti-Patterns to Avoid",id:"-anti-patterns-to-avoid",level:4},{value:"14.4 Scalability Patterns",id:"144-scalability-patterns",level:3},{value:"Horizontal Scaling Strategy",id:"horizontal-scaling-strategy",level:4},{value:"Vertical Scaling Strategy",id:"vertical-scaling-strategy",level:4},{value:"14.5 Testing &amp; Validation",id:"145-testing--validation",level:3},{value:"Correctness Testing",id:"correctness-testing",level:4},{value:"14.6 Monitoring Template",id:"146-monitoring-template",level:3},{value:"14.7 Configuration Template",id:"147-configuration-template",level:3},{value:"14.8 Migration Strategy",id:"148-migration-strategy",level:3},{value:"14.9 Quick Reference: Problem \u2192 Solution",id:"149-quick-reference-problem--solution",level:3},{value:"15. Summary &amp; Trade-offs",id:"15-summary--trade-offs",level:2},{value:"Design Decisions",id:"design-decisions",level:3},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Scalability",id:"scalability",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"system-design-top-k-youtube-videos",children:"System Design: Top-K YouTube Videos"})}),"\n",(0,r.jsx)(n.p,{children:"A comprehensive guide to designing a real-time system for tracking and displaying the most viewed YouTube videos using stream processing and probabilistic data structures."}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-understanding--requirements",children:"1. Problem Understanding & Requirements"}),"\n",(0,r.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Track view counts for billions of videos in real-time"}),"\n",(0,r.jsx)(n.li,{children:"Return top-K (e.g., top 100) most viewed videos globally"}),"\n",(0,r.jsx)(n.li,{children:"Support time-windowed queries (last hour, day, week)"}),"\n",(0,r.jsx)(n.li,{children:"Handle video metadata updates"}),"\n",(0,r.jsx)(n.li,{children:"Support regional/category-specific top-K queries"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"High Throughput"}),": Process millions of views per second"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Low Latency"}),": Real-time processing with ",(0,r.jsx)(n.code,{children:"<1"})," second lag"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability"}),": Horizontal scaling for growing traffic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Approximate Accuracy"}),": 90-95% accuracy acceptable (trade-off for performance)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Availability"}),": 99.99% uptime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cost Efficiency"}),": Optimize memory and compute resources"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scale-estimation",children:"Scale Estimation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Daily Active Users:        1 billion\nVideos on Platform:        2 billion\nDaily Video Views:         5 billion\nAverage Views/Second:      ~58,000\nPeak Views/Second:         ~200,000\nView Event Size:           ~500 bytes\nDaily Data Volume:         ~2.5 TB\n"})}),"\n",(0,r.jsx)(n.h2,{id:"2-high-level-architecture",children:"2. High-Level Architecture"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    Client[Video Players/Clients]\n\n    subgraph "Ingestion Layer"\n        LB[Load Balancer]\n        API[API Gateway Cluster]\n    end\n\n    subgraph "Stream Processing"\n        Kafka[Apache Kafka<br/>Event Stream]\n        Flink[Apache Flink<br/>Stream Processors]\n    end\n\n    subgraph "Storage & Aggregation"\n        CMS[Count-Min Sketch<br/>In-Memory]\n        Redis[Redis Cluster<br/>Top-K Cache]\n        Cassandra[Cassandra<br/>Historical Data]\n    end\n\n    subgraph "Query Layer"\n        QueryAPI[Query Service]\n        Agg[Aggregation Service]\n    end\n\n    Client --\x3e|View Events| LB\n    LB --\x3e API\n    API --\x3e|Publish Events| Kafka\n    Kafka --\x3e|Consume| Flink\n    Flink --\x3e|Update Counts| CMS\n    Flink --\x3e|Maintain Top-K| Redis\n    Flink --\x3e|Persist| Cassandra\n    QueryAPI --\x3e|Read Top-K| Redis\n    QueryAPI --\x3e|Historical Query| Cassandra\n    Agg --\x3e|Aggregate| Cassandra'}),"\n",(0,r.jsx)(n.h2,{id:"3-core-components-deep-dive",children:"3. Core Components Deep Dive"}),"\n",(0,r.jsx)(n.h3,{id:"31-data-model",children:"3.1 Data Model"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"View Event Schema:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "event_id": "uuid",\n  "video_id": "string",\n  "user_id": "string",\n  "timestamp": "long",\n  "region": "string",\n  "category": "string",\n  "watch_duration": "int",\n  "device_type": "string"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"32-stream-processing-pipeline",children:"3.2 Stream Processing Pipeline"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Kafka Topics"\n        Raw[raw-views]\n        Valid[validated-views]\n        Agg[aggregated-counts]\n    end\n\n    subgraph "Flink Jobs"\n        Validator[Validation Job]\n        Counter[Count Job]\n        TopK[Top-K Job]\n        Window[Windowing Job]\n    end\n\n    Raw --\x3e Validator\n    Validator --\x3e|Valid| Valid\n    Validator --\x3e|Invalid| DLQ[Dead Letter Queue]\n    Valid --\x3e Counter\n    Valid --\x3e Window\n    Counter --\x3e TopK\n    Window --\x3e TopK\n    TopK --\x3e Agg'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Stream Processing Flow:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation Stage"}),": Filter duplicates, validate schema, check fraud"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Counting Stage"}),": Update Count-Min Sketch for approximate counts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Aggregation Stage"}),": Maintain heap-based Top-K"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Windowing Stage"}),": Time-based aggregations (tumbling/sliding windows)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-count-min-sketch-implementation",children:"4. Count-Min Sketch Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"what-is-count-min-sketch",children:"What is Count-Min Sketch?"}),"\n",(0,r.jsx)(n.p,{children:"A probabilistic data structure that estimates frequency of events in a stream using sub-linear space."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Properties:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Space: O(w \xd7 d) where w = width, d = depth"}),"\n",(0,r.jsx)(n.li,{children:"Update Time: O(d)"}),"\n",(0,r.jsx)(n.li,{children:"Query Time: O(d)"}),"\n",(0,r.jsx)(n.li,{children:"Overestimates, never underestimates"}),"\n",(0,r.jsx)(n.li,{children:"Error bound: \u03b5 with probability \u03b4"}),"\n"]}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Count-Min Sketch Structure"\n        direction TB\n        H1[Hash Function 1] --\x3e R1[Row 1: Counter Array]\n        H2[Hash Function 2] --\x3e R2[Row 2: Counter Array]\n        H3[Hash Function 3] --\x3e R3[Row 3: Counter Array]\n        H4[Hash Function 4] --\x3e R4[Row 4: Counter Array]\n    end\n\n    Video[Video ID: ABC123] --\x3e H1\n    Video --\x3e H2\n    Video --\x3e H3\n    Video --\x3e H4\n\n    style R1 fill:#e1f5ff\n    style R2 fill:#e1f5ff\n    style R3 fill:#e1f5ff\n    style R4 fill:#e1f5ff'}),"\n",(0,r.jsx)(n.h3,{id:"count-min-sketch-algorithm",children:"Count-Min Sketch Algorithm"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u03b5 (epsilon): Error tolerance (e.g., 0.01 = 1% error)"}),"\n",(0,r.jsx)(n.li,{children:"\u03b4 (delta): Confidence (e.g., 0.99 = 99% confidence)"}),"\n",(0,r.jsx)(n.li,{children:"Width (w): \u2308e/\u03b5\u2309 \u2248 272 for \u03b5=0.01"}),"\n",(0,r.jsx)(n.li,{children:"Depth (d): \u2308ln(1/\u03b4)\u2309 \u2248 5 for \u03b4=0.01"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update Operation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"For each hash function h_i (i = 1 to d):\n    index = h_i(video_id) mod w\n    counter[i][index] += 1\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query Operation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"estimated_count = MIN(counter[i][h_i(video_id) mod w]) for all i\n"})}),"\n",(0,r.jsx)(n.h3,{id:"why-count-min-sketch-for-youtube",children:"Why Count-Min Sketch for YouTube?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Memory Comparison:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Approach"}),(0,r.jsx)(n.th,{children:"Memory Required"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Exact Counters (2B videos)"}),(0,r.jsx)(n.td,{children:"16 GB (8 bytes \xd7 2B)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Count-Min Sketch"}),(0,r.jsx)(n.td,{children:"~10 MB (272 \xd7 5 \xd7 8 bytes)"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Space Savings: 1,600x reduction!"})}),"\n",(0,r.jsx)(n.h2,{id:"5-top-k-algorithm-design",children:"5. Top-K Algorithm Design"}),"\n",(0,r.jsx)(n.h3,{id:"heap-based-approach",children:"Heap-Based Approach"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Top-K Maintenance"\n        CMS[Count-Min Sketch<br/>All Video Counts]\n        MH[Min-Heap<br/>Top K Videos]\n        Cache[Redis Cache<br/>Sorted Set]\n    end\n\n    Stream[View Event Stream] --\x3e CMS\n    CMS --\x3e|Get Count| Check{Count > Min?}\n    Check --\x3e|Yes| MH\n    Check --\x3e|No| Discard[Discard]\n    MH --\x3e|Periodic Sync| Cache\n\n    Query[Query Request] --\x3e Cache\n    Cache --\x3e Response[Top-K Response]'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Algorithm Steps:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Initialize"}),": Create min-heap of size K"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"For each view event"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Update Count-Min Sketch"}),"\n",(0,r.jsx)(n.li,{children:"Get estimated count from CMS"}),"\n",(0,r.jsxs)(n.li,{children:["If count > heap minimum:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Remove minimum from heap"}),"\n",(0,r.jsx)(n.li,{children:"Insert (video_id, count) into heap"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Periodically sync heap to Redis"})," (every 1-5 seconds)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"space-saving-algorithm-alternative",children:"Space-Saving Algorithm (Alternative)"}),"\n",(0,r.jsx)(n.p,{children:"Maintains K counters for heavy hitters with guaranteed error bounds:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Space: O(K)"}),"\n",(0,r.jsx)(n.li,{children:"Better accuracy than pure Count-Min Sketch"}),"\n",(0,r.jsx)(n.li,{children:"Combines frequency estimation with Top-K"}),"\n"]}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    Event[New View Event] --\x3e Exists{Video in<br/>Top-K?}\n    Exists --\x3e|Yes| Inc[Increment Counter]\n    Exists --\x3e|No| Full{Counter<br/>Full?}\n    Full --\x3e|No| Add[Add New Counter]\n    Full --\x3e|Yes| Replace[Replace Minimum<br/>& Increment]\n\n    Inc --\x3e Update[Update Top-K]\n    Add --\x3e Update\n    Replace --\x3e Update"}),"\n",(0,r.jsx)(n.h2,{id:"6-time-window-processing",children:"6. Time Window Processing"}),"\n",(0,r.jsx)(n.h3,{id:"window-types",children:"Window Types"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Tumbling Window (1 hour)"\n        T1[00:00-01:00] --\x3e T2[01:00-02:00] --\x3e T3[02:00-03:00]\n    end\n\n    subgraph "Sliding Window (1 hour, slide 15min)"\n        S1[00:00-01:00]\n        S2[00:15-01:15]\n        S3[00:30-01:30]\n        S4[00:45-01:45]\n    end\n\n    subgraph "Session Window (30min timeout)"\n        SE1[User Session 1]\n        SE2[User Session 2]\n    end'}),"\n",(0,r.jsx)(n.h3,{id:"multi-window-architecture",children:"Multi-Window Architecture"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    Stream[View Event Stream]\n\n    subgraph "Time Windows"\n        W1[1 Hour Window]\n        W2[24 Hour Window]\n        W3[7 Day Window]\n    end\n\n    subgraph "Separate Top-K Per Window"\n        K1[Top-100 Last Hour]\n        K2[Top-100 Last Day]\n        K3[Top-100 Last Week]\n    end\n\n    Stream --\x3e W1 & W2 & W3\n    W1 --\x3e K1\n    W2 --\x3e K2\n    W3 --\x3e K3\n\n    K1 & K2 & K3 --\x3e Redis[Redis Cluster]'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation with Apache Flink:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"DataStream<ViewEvent> views = ...;\n\n// 1-hour tumbling window\nDataStream<TopK> hourlyTopK = views\n    .keyBy(ViewEvent::getVideoId)\n    .window(TumblingEventTimeWindows.of(Time.hours(1)))\n    .aggregate(new CountMinSketchAggregator())\n    .process(new TopKFunction(100));\n\n// 24-hour sliding window (slide every hour)\nDataStream<TopK> dailyTopK = views\n    .keyBy(ViewEvent::getVideoId)\n    .window(SlidingEventTimeWindows.of(Time.hours(24), Time.hours(1)))\n    .aggregate(new CountMinSketchAggregator())\n    .process(new TopKFunction(100));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"7-database-design",children:"7. Database Design"}),"\n",(0,r.jsx)(n.h3,{id:"redis-schema-hot-data---top-k-cache",children:"Redis Schema (Hot Data - Top-K Cache)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Key Pattern: topk:{window}:{region}:{category}\nType: Sorted Set (ZSET)\n\nExample:\ntopk:1h:global:all \u2192 [(video_1, 1M), (video_2, 900K), ...]\ntopk:24h:US:music \u2192 [(video_5, 5M), (video_9, 4.8M), ...]\ntopk:7d:global:gaming \u2192 [(video_12, 50M), ...]\n\nCommands:\n- ZADD topk:1h:global:all 1000000 video_1\n- ZREVRANGE topk:1h:global:all 0 99 WITHSCORES  # Get Top-100\n- ZINCRBY topk:1h:global:all 1 video_1           # Increment\n"})}),"\n",(0,r.jsx)(n.h3,{id:"cassandra-schema-cold-data---historical",children:"Cassandra Schema (Cold Data - Historical)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cql",children:"CREATE TABLE video_view_counts (\n    video_id text,\n    time_bucket timestamp,  -- Hourly buckets\n    window_type text,       -- '1h', '24h', '7d'\n    region text,\n    category text,\n    view_count bigint,\n    PRIMARY KEY ((video_id, window_type), time_bucket, region, category)\n) WITH CLUSTERING ORDER BY (time_bucket DESC);\n\nCREATE TABLE top_k_snapshots (\n    window_type text,\n    time_bucket timestamp,\n    region text,\n    category text,\n    ranking list<frozen<video_rank>>,\n    PRIMARY KEY ((window_type, region, category), time_bucket)\n) WITH CLUSTERING ORDER BY (time_bucket DESC);\n\n-- Custom type\nCREATE TYPE video_rank (\n    video_id text,\n    view_count bigint,\n    rank int\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"8-system-architecture-patterns",children:"8. System Architecture Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"81-lambda-architecture-pattern",children:"8.1 Lambda Architecture Pattern"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Speed Layer (Real-time)"\n        Kafka1[Kafka Stream]\n        Flink1[Flink Processing]\n        Redis1[Redis Cache]\n    end\n\n    subgraph "Batch Layer (Accurate)"\n        Kafka2[Kafka Stream]\n        Spark[Spark Batch Jobs]\n        Cassandra1[Cassandra]\n    end\n\n    subgraph "Serving Layer"\n        Merge[Merge Service]\n        API[Query API]\n    end\n\n    Source[View Events] --\x3e Kafka1 & Kafka2\n    Kafka1 --\x3e Flink1 --\x3e Redis1\n    Kafka2 --\x3e Spark --\x3e Cassandra1\n\n    Redis1 --\x3e Merge\n    Cassandra1 --\x3e Merge\n    Merge --\x3e API'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Speed layer: Low latency, approximate results"}),"\n",(0,r.jsx)(n.li,{children:"Batch layer: High accuracy, eventual consistency"}),"\n",(0,r.jsx)(n.li,{children:"Serving layer: Merges both for best of both worlds"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"82-kappa-architecture-pattern-simplified",children:"8.2 Kappa Architecture Pattern (Simplified)"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    Source[View Events] --\x3e Kafka[Kafka Stream]\n    Kafka --\x3e Flink[Flink Stream Processing]\n    Flink --\x3e Redis[Redis Cache]\n    Flink --\x3e Cassandra[Cassandra]\n\n    Redis --\x3e Query[Query Service]\n    Cassandra --\x3e Query"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simpler architecture"}),"\n",(0,r.jsx)(n.li,{children:"Single processing pipeline"}),"\n",(0,r.jsx)(n.li,{children:"Reprocess by replaying Kafka"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-optimizations--trade-offs",children:"9. Optimizations & Trade-offs"}),"\n",(0,r.jsx)(n.h3,{id:"91-partitioning-strategy",children:"9.1 Partitioning Strategy"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Kafka Partitioning"\n        Events[View Events]\n        P1[Partition 1<br/>video_id hash % 64 = 0-15]\n        P2[Partition 2<br/>video_id hash % 64 = 16-31]\n        P3[Partition 3<br/>video_id hash % 64 = 32-47]\n        P4[Partition 4<br/>video_id hash % 64 = 48-63]\n    end\n\n    subgraph "Flink Parallelism"\n        F1[Flink Task 1]\n        F2[Flink Task 2]\n        F3[Flink Task 3]\n        F4[Flink Task 4]\n    end\n\n    Events --\x3e P1 & P2 & P3 & P4\n    P1 --\x3e F1\n    P2 --\x3e F2\n    P3 --\x3e F3\n    P4 --\x3e F4'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Partitioning by video_id ensures:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All views for same video go to same partition"}),"\n",(0,r.jsx)(n.li,{children:"Enables local Count-Min Sketch per partition"}),"\n",(0,r.jsx)(n.li,{children:"Parallel processing across partitions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"92-hierarchical-aggregation",children:"9.2 Hierarchical Aggregation"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\n    L1[Leaf Nodes<br/>Regional Aggregators] --\x3e L2[Regional Top-K]\n    L2 --\x3e L3[Continental Top-K]\n    L3 --\x3e L4[Global Top-K]\n\n    style L1 fill:#ffe6e6\n    style L2 fill:#fff2cc\n    style L3 fill:#e6f3ff\n    style L4 fill:#e6ffe6"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reduces network traffic"}),"\n",(0,r.jsx)(n.li,{children:"Pre-aggregation at edge"}),"\n",(0,r.jsx)(n.li,{children:"Faster global Top-K computation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"93-sampling-techniques",children:"9.3 Sampling Techniques"}),"\n",(0,r.jsx)(n.p,{children:"For extremely high traffic videos, use sampling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"If view_count > threshold:\n    sample_rate = base_rate / (view_count / threshold)\n    if random() < sample_rate:\n        process_event()\n        weight = 1 / sample_rate\n"})}),"\n",(0,r.jsx)(n.h2,{id:"10-handling-edge-cases",children:"10. Handling Edge Cases"}),"\n",(0,r.jsx)(n.h3,{id:"101-viral-video-spike",children:"10.1 Viral Video Spike"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Video as Viral Video\n    participant Detector as Spike Detector\n    participant Scaler as Auto Scaler\n    participant Processing as Processing Layer\n\n    Video->>Detector: Sudden traffic spike\n    Detector->>Detector: Detect anomaly (5x normal rate)\n    Detector->>Scaler: Trigger scale-up\n    Scaler->>Processing: Add 3x more Flink tasks\n    Processing->>Video: Handle increased load"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Detection:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor rate of change in view counts"}),"\n",(0,r.jsx)(n.li,{children:"Alert when growth > 500% in 15 minutes"}),"\n",(0,r.jsx)(n.li,{children:"Auto-scale processing capacity"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"102-bot-detection--fraud-prevention",children:"10.2 Bot Detection & Fraud Prevention"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    Event[View Event] --\x3e Checks{Fraud Checks}\n    Checks --\x3e|Duplicate IP| Filter1[Rate Limiter]\n    Checks --\x3e|Suspicious Pattern| Filter2[ML Model]\n    Checks --\x3e|Bot Signature| Filter3[Bot Detector]\n\n    Filter1 & Filter2 & Filter3 --\x3e Decision{Valid?}\n    Decision --\x3e|Yes| Process[Process Event]\n    Decision --\x3e|No| Reject[Reject Event]"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fraud Detection Rules:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"IP-based rate limiting (max N views/minute)"}),"\n",(0,r.jsx)(n.li,{children:"User session validation"}),"\n",(0,r.jsx)(n.li,{children:"Device fingerprinting"}),"\n",(0,r.jsx)(n.li,{children:"ML-based bot detection"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"103-late-arriving-events",children:"10.3 Late Arriving Events"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\n    Event[Late Event<br/>timestamp: 10:45<br/>arrival: 11:10]\n\n    Check{Within<br/>Allowed Lateness?}\n\n    Event --\x3e Check\n    Check --\x3e|Yes, <15min| Include[Include in Window<br/>Trigger Re-computation]\n    Check --\x3e|No, >15min| Discard[Discard or<br/>Side Output]"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Watermark Strategy:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Watermark = Max_Event_Time - Allowed_Lateness\nAllowed_Lateness = 15 minutes\n"})}),"\n",(0,r.jsx)(n.h2,{id:"11-monitoring--observability",children:"11. Monitoring & Observability"}),"\n",(0,r.jsx)(n.h3,{id:"key-metrics",children:"Key Metrics"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Ingestion Metrics"\n        M1[Events/sec]\n        M2[Event Latency]\n        M3[Error Rate]\n    end\n\n    subgraph "Processing Metrics"\n        M4[Processing Lag]\n        M5[Backpressure]\n        M6[CMS Error Rate]\n    end\n\n    subgraph "Storage Metrics"\n        M7[Redis Hit Rate]\n        M8[Cassandra Latency]\n        M9[Storage Size]\n    end\n\n    subgraph "Business Metrics"\n        M10[Top-K Accuracy]\n        M11[Query Latency p99]\n        M12[Data Freshness]\n    end'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alerting Rules:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Processing lag > 10 seconds"}),"\n",(0,r.jsx)(n.li,{children:"Error rate > 0.1%"}),"\n",(0,r.jsx)(n.li,{children:"Redis hit rate < 95%"}),"\n",(0,r.jsx)(n.li,{children:"Query latency p99 > 100ms"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"12-api-design",children:"12. API Design"}),"\n",(0,r.jsx)(n.h3,{id:"rest-api-endpoints",children:"REST API Endpoints"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'GET /api/v1/videos/top\nQuery Parameters:\n  - k: number (default: 100)\n  - window: enum (1h, 24h, 7d, 30d)\n  - region: string (default: global)\n  - category: string (default: all)\n\nResponse:\n{\n  "window": "24h",\n  "region": "US",\n  "category": "music",\n  "timestamp": "2025-10-21T10:00:00Z",\n  "videos": [\n    {\n      "rank": 1,\n      "video_id": "abc123",\n      "title": "Viral Song",\n      "view_count": 5000000,\n      "thumbnail_url": "...",\n      "channel": "Popular Artist"\n    },\n    ...\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"websocket-for-real-time-updates",children:"WebSocket for Real-time Updates"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'ws://api.youtube.com/v1/videos/top/stream\nMessage Format:\n{\n  "type": "ranking_update",\n  "window": "1h",\n  "changes": [\n    {"video_id": "xyz789", "old_rank": 5, "new_rank": 3},\n    {"video_id": "abc123", "old_rank": null, "new_rank": 100}\n  ],\n  "timestamp": "2025-10-21T10:30:15Z"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"13-cost-optimization",children:"13. Cost Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"resource-estimates",children:"Resource Estimates"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Component"}),(0,r.jsx)(n.th,{children:"Specification"}),(0,r.jsx)(n.th,{children:"Monthly Cost"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Kafka Cluster"}),(0,r.jsx)(n.td,{children:"20 brokers (m5.2xlarge)"}),(0,r.jsx)(n.td,{children:"$8,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Flink Cluster"}),(0,r.jsx)(n.td,{children:"50 task managers (c5.4xlarge)"}),(0,r.jsx)(n.td,{children:"$25,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Redis Cluster"}),(0,r.jsx)(n.td,{children:"10 nodes (r6g.2xlarge)"}),(0,r.jsx)(n.td,{children:"$5,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Cassandra"}),(0,r.jsx)(n.td,{children:"30 nodes (i3.2xlarge)"}),(0,r.jsx)(n.td,{children:"$15,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Network"}),(0,r.jsx)(n.td,{children:"100 TB egress"}),(0,r.jsx)(n.td,{children:"$9,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Total"})}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"~$62,000/month"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"cost-optimization-strategies",children:"Cost Optimization Strategies"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Count-Min Sketch"})," instead of exact counters (1,600x memory savings)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tiered storage"}),": Redis (hot) \u2192 Cassandra (warm) \u2192 S3 (cold)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compression"}),": Enable Kafka message compression (60% reduction)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reserved instances"}),": Save 40% on compute costs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data retention"}),": Keep only 30 days in Cassandra, archive to S3"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"14-generic-top-k-system-design-framework",children:"14. Generic Top-K System Design Framework"}),"\n",(0,r.jsx)(n.h3,{id:"universal-components-for-any-top-k-problem",children:"Universal Components for Any Top-K Problem"}),"\n",(0,r.jsx)(n.p,{children:"Every Top-K system (trending tweets, popular products, hot searches, etc.) shares common patterns. Here's a reusable framework:"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "1. Event Collection"\n        Source[Event Sources]\n        Validation[Validation Layer]\n        Dedup[Deduplication]\n    end\n\n    subgraph "2. Counting Mechanism"\n        Exact[Exact Counters]\n        Approx[Approximate Counters]\n        Hybrid[Hybrid Approach]\n    end\n\n    subgraph "3. Top-K Selection"\n        Heap[Heap-Based]\n        Sketch[Count-Min + Heap]\n        Lossy[Lossy Counting]\n        SpaceSave[Space-Saving]\n    end\n\n    subgraph "4. Storage Strategy"\n        Hot[Hot Storage - Cache]\n        Warm[Warm Storage - DB]\n        Cold[Cold Storage - Archive]\n    end\n\n    subgraph "5. Query Interface"\n        RealTime[Real-time API]\n        Batch[Batch API]\n        Stream[Stream/WebSocket]\n    end\n\n    Source --\x3e Validation --\x3e Dedup\n    Dedup --\x3e Exact & Approx & Hybrid\n    Exact & Approx & Hybrid --\x3e Heap & Sketch & Lossy & SpaceSave\n    Heap & Sketch & Lossy & SpaceSave --\x3e Hot\n    Hot --\x3e Warm --\x3e Cold\n    Hot --\x3e RealTime & Batch & Stream'}),"\n",(0,r.jsx)(n.h3,{id:"141-problem-categories--patterns",children:"14.1 Problem Categories & Patterns"}),"\n",(0,r.jsx)(n.h4,{id:"category-1-heavy-hitters-most-frequent-items",children:"Category 1: Heavy Hitters (Most Frequent Items)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Examples"}),": Top products, trending hashtags, popular searches"]}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    A[Bounded Domain<br/>Small # of items] --\x3e|Use| B[Exact Counting<br/>HashMap]\n    C[Unbounded Domain<br/>Millions of items] --\x3e|Use| D[Count-Min Sketch<br/>Space-Saving]\n\n    E[High Accuracy<br/>Required] --\x3e|Use| F[Exact + Sampling]\n    G[Memory Constrained] --\x3e|Use| H[Probabilistic<br/>Structures]"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Decision Matrix:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Cardinality"}),(0,r.jsx)(n.th,{children:"Memory Budget"}),(0,r.jsx)(n.th,{children:"Latency"}),(0,r.jsx)(n.th,{children:"Algorithm Choice"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"< 100K"}),(0,r.jsx)(n.td,{children:"High"}),(0,r.jsx)(n.td,{children:"Low"}),(0,r.jsx)(n.td,{children:"HashMap + Min-Heap"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"100K-10M"}),(0,r.jsx)(n.td,{children:"Medium"}),(0,r.jsx)(n.td,{children:"Low"}),(0,r.jsx)(n.td,{children:"Count-Min Sketch + Heap"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"> 10M"}),(0,r.jsx)(n.td,{children:"Low"}),(0,r.jsx)(n.td,{children:"Medium"}),(0,r.jsx)(n.td,{children:"Space-Saving + Sampling"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Any"}),(0,r.jsx)(n.td,{children:"Very Low"}),(0,r.jsx)(n.td,{children:"Any"}),(0,r.jsx)(n.td,{children:"Lossy Counting"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"category-2-time-sensitive-ranking-trending-items",children:"Category 2: Time-Sensitive Ranking (Trending Items)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Examples"}),": Trending topics, viral content, breaking news"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key Challenge"}),": Balance recency vs popularity"]}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TD\n    Event[Event with Timestamp]\n\n    subgraph "Time Decay Functions"\n        Linear[Linear Decay<br/>weight = 1 - age/window]\n        Exp[Exponential Decay<br/>weight = e^(-\u03bb * age)]\n        Step[Step Function<br/>weight = 1 if recent, 0 else]\n    end\n\n    subgraph "Scoring"\n        Score[score = count * decay_weight]\n    end\n\n    Event --\x3e Linear & Exp & Step\n    Linear & Exp & Step --\x3e Score'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exponential Decay Formula:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"score(t) = count * e^(-\u03bb * (current_time - event_time))\n\u03bb = decay_rate (e.g., 0.0001 for hourly decay)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"category-3-multi-dimensional-top-k",children:"Category 3: Multi-Dimensional Top-K"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Examples"}),": Top products by category, top videos by region"]}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Dimension Strategy"\n        Single[Single Dimension<br/>One Top-K list]\n        Multi[Multiple Dimensions<br/>Separate Top-K per dimension]\n        Composite[Composite Key<br/>region:category]\n    end\n\n    subgraph "Storage Pattern"\n        Flat[Flat Structure<br/>topk:global]\n        Hierarchical[Hierarchical<br/>topk:region:category]\n        Matrix[Matrix Structure<br/>2D partitioning]\n    end\n\n    Single --\x3e Flat\n    Multi --\x3e Hierarchical\n    Composite --\x3e Matrix'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Storage Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Single dimension\ntopk:global \u2192 [item1, item2, ...]\n\n# Multiple dimensions\ntopk:us:electronics \u2192 [item3, item5, ...]\ntopk:uk:books \u2192 [item7, item9, ...]\n\n# With aggregation\ntopk:global \u2192 aggregate(all regions, all categories)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"142-universal-design-checklist",children:"14.2 Universal Design Checklist"}),"\n",(0,r.jsx)(n.h4,{id:"phase-1-requirements-analysis",children:"Phase 1: Requirements Analysis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\u2713 Define "Top-K" clearly\n  \u25a1 By count/frequency?\n  \u25a1 By score (weighted)?\n  \u25a1 By revenue/value?\n  \u25a1 By engagement (clicks, time)?\n\n\u2713 Cardinality estimation\n  \u25a1 Total unique items: ___\n  \u25a1 Active items per window: ___\n  \u25a1 Expected growth rate: ___\n\n\u2713 Query patterns\n  \u25a1 Global Top-K\n  \u25a1 Regional/Segmented Top-K\n  \u25a1 Time-windowed Top-K\n  \u25a1 Real-time updates needed?\n\n\u2713 Accuracy requirements\n  \u25a1 Exact required? (\xb10%)\n  \u25a1 High accuracy? (\xb11-2%)\n  \u25a1 Approximate OK? (\xb15-10%)\n\n\u2713 Latency requirements\n  \u25a1 Real-time (<1s)\n  \u25a1 Near real-time (1-10s)\n  \u25a1 Batch (minutes/hours)\n'})}),"\n",(0,r.jsx)(n.h4,{id:"phase-2-algorithm-selection",children:"Phase 2: Algorithm Selection"}),"\n",(0,r.jsx)(n.mermaid,{value:"flowchart TD\n    Start{Start} --\x3e Card{Cardinality?}\n\n    Card --\x3e|< 100K| Small[Small Scale]\n    Card --\x3e|100K-10M| Medium[Medium Scale]\n    Card --\x3e|> 10M| Large[Large Scale]\n\n    Small --\x3e Exact[Exact Counting<br/>HashMap + Heap]\n\n    Medium --\x3e AccReq{Accuracy?}\n    AccReq --\x3e|> 99%| HybridM[Exact + Sampling]\n    AccReq --\x3e|> 95%| CMSM[Count-Min Sketch]\n    AccReq --\x3e|> 90%| SSM[Space-Saving]\n\n    Large --\x3e Memory{Memory?}\n    Memory --\x3e|Abundant| HybridL[Partitioned Exact]\n    Memory --\x3e|Limited| ProbL[Probabilistic<br/>CMS + Sampling]\n\n    style Exact fill:#90EE90\n    style HybridM fill:#FFD700\n    style CMSM fill:#87CEEB\n    style SSM fill:#DDA0DD\n    style HybridL fill:#FFD700\n    style ProbL fill:#87CEEB"}),"\n",(0,r.jsx)(n.h4,{id:"phase-3-data-structure-selection",children:"Phase 3: Data Structure Selection"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Comparison Table:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Data Structure"}),(0,r.jsx)(n.th,{children:"Space"}),(0,r.jsx)(n.th,{children:"Update"}),(0,r.jsx)(n.th,{children:"Query"}),(0,r.jsx)(n.th,{children:"Use Case"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"HashMap + Heap"})}),(0,r.jsx)(n.td,{children:"O(N)"}),(0,r.jsx)(n.td,{children:"O(log K)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"Small N, exact counts"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Count-Min Sketch"})}),(0,r.jsx)(n.td,{children:"O(w*d)"}),(0,r.jsx)(n.td,{children:"O(d)"}),(0,r.jsx)(n.td,{children:"O(d)"}),(0,r.jsx)(n.td,{children:"Large N, approximate"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Count Sketch"})}),(0,r.jsx)(n.td,{children:"O(w*d)"}),(0,r.jsx)(n.td,{children:"O(d)"}),(0,r.jsx)(n.td,{children:"O(d)"}),(0,r.jsx)(n.td,{children:"Better accuracy than CMS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Space-Saving"})}),(0,r.jsx)(n.td,{children:"O(K)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(K)"}),(0,r.jsx)(n.td,{children:"Memory-critical, Top-K only"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Lossy Counting"})}),(0,r.jsx)(n.td,{children:"O(1/\u03b5)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(1/\u03b5)"}),(0,r.jsx)(n.td,{children:"Bounded error, simple"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"HyperLogLog"})}),(0,r.jsx)(n.td,{children:"O(m)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"O(1)"}),(0,r.jsx)(n.td,{children:"Cardinality only"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Bloom Filter"})}),(0,r.jsx)(n.td,{children:"O(m)"}),(0,r.jsx)(n.td,{children:"O(k)"}),(0,r.jsx)(n.td,{children:"O(k)"}),(0,r.jsx)(n.td,{children:"Membership, not counting"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"143-common-patterns--anti-patterns",children:"14.3 Common Patterns & Anti-Patterns"}),"\n",(0,r.jsx)(n.h4,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Layered Aggregation"})}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\n    L1[Edge Layer<br/>Local Top-1000] --\x3e L2[Regional Layer<br/>Top-500]\n    L2 --\x3e L3[Continental Layer<br/>Top-200]\n    L3 --\x3e L4[Global Layer<br/>Top-100]\n\n    style L1 fill:#ffe6e6\n    style L2 fill:#fff9e6\n    style L3 fill:#e6f7ff\n    style L4 fill:#e6ffe6"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reduces network traffic by 10-100x"}),"\n",(0,r.jsx)(n.li,{children:"Enables parallel processing"}),"\n",(0,r.jsx)(n.li,{children:"Natural sharding strategy"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Hybrid Counting Strategy"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"If item_count < threshold:\n    Use exact counting (HashMap)\nElse:\n    Use Count-Min Sketch\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Progressive Accuracy"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Top 10:    Exact (99.9% accuracy)\nTop 11-50: High precision (98% accuracy)\nTop 51-100: Good enough (95% accuracy)\nTop 100+:  Approximate (90% accuracy)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Time-Based Partitioning"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Partition by hour/day:\n  topk:2025-10-21-10 \u2192 Hour window\n  topk:2025-10-21 \u2192 Day window\n  topk:2025-10 \u2192 Month window\n\nEnable:\n- Parallel processing\n- Easy TTL/expiration\n- Historical queries\n"})}),"\n",(0,r.jsx)(n.h4,{id:"-anti-patterns-to-avoid",children:"\u274c Anti-Patterns to Avoid"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'1. The "Everything Exact" Trap'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c Storing exact counts for billions of items\n\u2705 Use probabilistic for tail, exact for head\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'2. The "Single Point of Aggregation"'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c One server aggregates all events\n\u2705 Hierarchical aggregation across multiple layers\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'3. The "No Time Windows"'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c Only all-time Top-K\n\u2705 Multiple windows (1h, 24h, 7d, 30d, all-time)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'4. The "Synchronous Updates"'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c Update Top-K on every single event\n\u2705 Batch updates or micro-batches (100-1000 events)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:'5. The "Ignoring Cold Start"'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u274c Empty Top-K at system startup\n\u2705 Bootstrap from historical data or defaults\n"})}),"\n",(0,r.jsx)(n.h3,{id:"144-scalability-patterns",children:"14.4 Scalability Patterns"}),"\n",(0,r.jsx)(n.h4,{id:"horizontal-scaling-strategy",children:"Horizontal Scaling Strategy"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Partition by Key"\n        Hash[Consistent Hashing]\n        Range[Range Partitioning]\n        Custom[Custom Logic]\n    end\n\n    subgraph "Aggregation Strategy"\n        Local[Local Top-K per partition]\n        Merge[Merge Top-K lists]\n        Final[Final Top-K]\n    end\n\n    subgraph "Example"\n        P1[Partition 1<br/>Items A-F<br/>Top-100]\n        P2[Partition 2<br/>Items G-L<br/>Top-100]\n        P3[Partition 3<br/>Items M-R<br/>Top-100]\n        P4[Partition 4<br/>Items S-Z<br/>Top-100]\n\n        Agg[Aggregator<br/>Merge 400 items<br/>Return Top-100]\n    end\n\n    Hash & Range & Custom --\x3e Local\n    Local --\x3e Merge --\x3e Final\n\n    P1 & P2 & P3 & P4 --\x3e Agg'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Merge Algorithm for Distributed Top-K:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def merge_topk_lists(partition_topks: List[List[Item]], k: int):\n    """\n    Merge Top-K from multiple partitions\n    Time: O(P * K * log K) where P = partitions\n    """\n    min_heap = []\n\n    # Initialize with first item from each partition\n    for partition_id, items in enumerate(partition_topks):\n        if items:\n            heapq.heappush(min_heap, (-items[0].count, partition_id, 0))\n\n    result = []\n    while min_heap and len(result) < k:\n        neg_count, partition_id, idx = heapq.heappop(min_heap)\n        items = partition_topks[partition_id]\n        result.append(items[idx])\n\n        # Add next item from same partition\n        if idx + 1 < len(items):\n            heapq.heappush(min_heap, (-items[idx+1].count, partition_id, idx+1))\n\n    return result\n'})}),"\n",(0,r.jsx)(n.h4,{id:"vertical-scaling-strategy",children:"Vertical Scaling Strategy"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Memory Tiers"\n        L1[L1: Redis<br/>Top-100<br/>1ms latency]\n        L2[L2: Redis<br/>Top-10K<br/>5ms latency]\n        L3[L3: Cassandra<br/>Top-1M<br/>50ms latency]\n        L4[L4: S3<br/>Historical<br/>500ms latency]\n    end\n\n    Query[Query] --\x3e L1\n    L1 --\x3e|Cache Miss| L2\n    L2 --\x3e|Cache Miss| L3\n    L3 --\x3e|Cache Miss| L4\n\n    style L1 fill:#ff6b6b\n    style L2 fill:#ffd93d\n    style L3 fill:#6bcf7f\n    style L4 fill:#4d96ff'}),"\n",(0,r.jsx)(n.h3,{id:"145-testing--validation",children:"14.5 Testing & Validation"}),"\n",(0,r.jsx)(n.h4,{id:"correctness-testing",children:"Correctness Testing"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TD\n    subgraph "Test Strategy"\n        Unit[Unit Tests<br/>Algorithm correctness]\n        Integration[Integration Tests<br/>End-to-end flow]\n        Load[Load Tests<br/>Performance]\n        Chaos[Chaos Tests<br/>Resilience]\n    end\n\n    subgraph "Validation Approach"\n        Ground[Ground Truth<br/>Small dataset, exact count]\n        Compare[Compare Results<br/>Approximate vs Exact]\n        Measure[Measure Error<br/>Calculate accuracy]\n    end\n\n    Unit --\x3e Ground\n    Integration --\x3e Compare\n    Load --\x3e Measure'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Accuracy Validation Script:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def validate_topk_accuracy(exact_counts, approximate_topk, k):\n    \"\"\"\n    Validate Top-K accuracy\n    \"\"\"\n    # Get ground truth Top-K\n    ground_truth = sorted(exact_counts.items(),\n                         key=lambda x: x[1],\n                         reverse=True)[:k]\n\n    # Calculate metrics\n    precision = len(set(approximate_topk) & set(ground_truth)) / k\n\n    # Rank correlation (Kendall's Tau)\n    rank_correlation = calculate_kendall_tau(ground_truth, approximate_topk)\n\n    # Count error\n    avg_count_error = sum(abs(exact_counts[item] - approx_count)\n                         for item, approx_count in approximate_topk) / k\n\n    return {\n        'precision': precision,\n        'rank_correlation': rank_correlation,\n        'avg_count_error': avg_count_error\n    }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"146-monitoring-template",children:"14.6 Monitoring Template"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Universal Metrics Dashboard:"})}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Input Metrics"\n        M1[Events/sec]\n        M2[Event Size]\n        M3[Unique Items/sec]\n    end\n\n    subgraph "Processing Metrics"\n        M4[Processing Latency<br/>p50, p95, p99]\n        M5[Queue Depth]\n        M6[Error Rate]\n    end\n\n    subgraph "Accuracy Metrics"\n        M7[Top-K Precision]\n        M8[Count Error %]\n        M9[Rank Correlation]\n    end\n\n    subgraph "Resource Metrics"\n        M10[Memory Usage]\n        M11[CPU Usage]\n        M12[Network I/O]\n    end\n\n    subgraph "Business Metrics"\n        M13[Query Latency]\n        M14[Cache Hit Rate]\n        M15[Data Freshness]\n    end'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alert Thresholds (Generic):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"alerts:\n  critical:\n    - processing_lag > 60s\n    - error_rate > 1%\n    - query_latency_p99 > 1s\n    - cache_hit_rate < 90%\n\n  warning:\n    - processing_lag > 30s\n    - error_rate > 0.1%\n    - memory_usage > 80%\n    - topk_accuracy < 95%\n"})}),"\n",(0,r.jsx)(n.h3,{id:"147-configuration-template",children:"14.7 Configuration Template"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Reusable Configuration Pattern:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'top_k_config:\n  # Core parameters\n  k: 100                          # Number of top items\n  update_interval_ms: 1000        # How often to recompute Top-K\n\n  # Algorithm selection\n  algorithm:\n    small_scale: "exact_heap"     # < 100K items\n    medium_scale: "count_min_sketch"  # 100K-10M items\n    large_scale: "space_saving"   # > 10M items\n\n  # Count-Min Sketch parameters\n  cms:\n    width: 2048                   # w = ceil(e / epsilon)\n    depth: 7                      # d = ceil(ln(1 / delta))\n    epsilon: 0.001                # Error rate: 0.1%\n    delta: 0.001                  # Confidence: 99.9%\n\n  # Time windows\n  windows:\n    - name: "realtime"\n      duration: "5m"\n      slide: "1m"\n    - name: "hourly"\n      duration: "1h"\n      slide: "5m"\n    - name: "daily"\n      duration: "24h"\n      slide: "1h"\n    - name: "weekly"\n      duration: "7d"\n      slide: "1d"\n\n  # Storage tiers\n  storage:\n    hot:\n      type: "redis"\n      ttl: "1h"\n      max_size: "1GB"\n    warm:\n      type: "cassandra"\n      ttl: "30d"\n    cold:\n      type: "s3"\n      ttl: "365d"\n\n  # Performance tuning\n  performance:\n    batch_size: 1000              # Events per batch\n    parallelism: 16               # Parallel workers\n    buffer_size: 10000            # Event buffer\n    checkpoint_interval: "60s"    # State checkpoint\n\n  # Scaling thresholds\n  auto_scale:\n    scale_up_threshold: 0.8       # CPU/Memory %\n    scale_down_threshold: 0.3\n    min_instances: 2\n    max_instances: 20\n'})}),"\n",(0,r.jsx)(n.h3,{id:"148-migration-strategy",children:"14.8 Migration Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"From Exact to Approximate:"})}),"\n",(0,r.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Phase 1: Dual Write"\n        Old[Exact System<br/>HashMap]\n        New[Approximate System<br/>Count-Min Sketch]\n        Both[Write to Both]\n    end\n\n    subgraph "Phase 2: Shadow Mode"\n        Compare[Compare Results<br/>Measure Accuracy]\n        Validate[Validate < 5% error]\n    end\n\n    subgraph "Phase 3: Gradual Migration"\n        Route[Route 1% traffic \u2192 New]\n        Increase[Gradually increase %]\n        Switch[100% on New System]\n    end\n\n    subgraph "Phase 4: Cleanup"\n        Remove[Remove Old System]\n    end\n\n    Both --\x3e Compare\n    Compare --\x3e Validate\n    Validate --\x3e Route\n    Route --\x3e Increase\n    Increase --\x3e Switch\n    Switch --\x3e Remove'}),"\n",(0,r.jsx)(n.h3,{id:"149-quick-reference-problem--solution",children:"14.9 Quick Reference: Problem \u2192 Solution"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Problem Type"}),(0,r.jsx)(n.th,{children:"Key Challenge"}),(0,r.jsx)(n.th,{children:"Recommended Approach"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Trending Hashtags"})}),(0,r.jsx)(n.td,{children:"Time decay"}),(0,r.jsx)(n.td,{children:"Exponential decay + Count-Min Sketch"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Popular Products"})}),(0,r.jsx)(n.td,{children:"Multiple categories"}),(0,r.jsx)(n.td,{children:"Multi-dimensional Top-K + Redis"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Viral Videos"})}),(0,r.jsx)(n.td,{children:"Sudden spikes"}),(0,r.jsx)(n.td,{children:"Auto-scaling + Heavy hitter detection"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Hot Searches"})}),(0,r.jsx)(n.td,{children:"Short-lived trends"}),(0,r.jsx)(n.td,{children:"Sliding windows + Space-Saving"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Top Sellers"})}),(0,r.jsx)(n.td,{children:"Exact revenue"}),(0,r.jsx)(n.td,{children:"Exact counting + Sampling for tail"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Frequent Buyers"})}),(0,r.jsx)(n.td,{children:"User segmentation"}),(0,r.jsx)(n.td,{children:"Hierarchical Top-K per segment"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Popular Articles"})}),(0,r.jsx)(n.td,{children:"Time + engagement"}),(0,r.jsx)(n.td,{children:"Composite score + Min-Heap"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Trending Topics"})}),(0,r.jsx)(n.td,{children:"Multi-region"}),(0,r.jsx)(n.td,{children:"Distributed Top-K + Merge"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"15-summary--trade-offs",children:"15. Summary & Trade-offs"}),"\n",(0,r.jsx)(n.h3,{id:"design-decisions",children:"Design Decisions"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"Choice"}),(0,r.jsx)(n.th,{children:"Alternative"}),(0,r.jsx)(n.th,{children:"Trade-off"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Counting"})}),(0,r.jsx)(n.td,{children:"Count-Min Sketch"}),(0,r.jsx)(n.td,{children:"Exact counters"}),(0,r.jsx)(n.td,{children:"Accuracy vs Memory"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Top-K"})}),(0,r.jsx)(n.td,{children:"Min-Heap + CMS"}),(0,r.jsx)(n.td,{children:"Space-Saving"}),(0,r.jsx)(n.td,{children:"Simplicity vs Accuracy"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Stream Processing"})}),(0,r.jsx)(n.td,{children:"Apache Flink"}),(0,r.jsx)(n.td,{children:"Spark Streaming"}),(0,r.jsx)(n.td,{children:"Latency vs Maturity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Cache"})}),(0,r.jsx)(n.td,{children:"Redis Sorted Sets"}),(0,r.jsx)(n.td,{children:"Memcached"}),(0,r.jsx)(n.td,{children:"Features vs Speed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Storage"})}),(0,r.jsx)(n.td,{children:"Cassandra"}),(0,r.jsx)(n.td,{children:"PostgreSQL"}),(0,r.jsx)(n.td,{children:"Scale vs Simplicity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Architecture"})}),(0,r.jsx)(n.td,{children:"Kappa"}),(0,r.jsx)(n.td,{children:"Lambda"}),(0,r.jsx)(n.td,{children:"Simplicity vs Accuracy"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Probabilistic data structures"})," (Count-Min Sketch) enable massive scale"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stream processing"})," provides real-time updates with low latency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Time windows"})," support different use cases (trending vs popular)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Partitioning by video_id"})," enables parallel processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hierarchical aggregation"})," reduces network traffic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-layer caching"})," (Redis + Cassandra + S3) optimizes cost"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accuracy trade-off"})," (90-95%) acceptable for this use case"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scalability",children:"Scalability"}),"\n",(0,r.jsx)(n.p,{children:"The system can scale to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 500,000+ views/second"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 5+ billion videos"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Sub-second query latency"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 99.99% availability"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Global distribution across regions"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Total System Capacity:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throughput"}),": 500K events/sec"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Latency"}),": ",(0,r.jsx)(n.code,{children:"<1"})," second end-to-end"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Accuracy"}),": 90-95% (configurable via CMS parameters)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Storage"}),": ~10 MB per Top-K (Count-Min Sketch)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scale"}),": Horizontally scalable to billions of videos"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(96540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);