"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8671],{9614:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(4848),o=n(8453);const i={title:"Trie Data Structure"},s=void 0,l={id:"tutorial-basics/Trie",title:"Trie Data Structure",description:"Trie Data Structure",source:"@site/docs/tutorial-basics/Trie.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Trie",permalink:"/js.enigma/docs/tutorial-basics/Trie",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/Trie.mdx",tags:[],version:"current",frontMatter:{title:"Trie Data Structure"},sidebar:"tutorialSidebar",previous:{title:"Topological Sort Tutorial",permalink:"/js.enigma/docs/tutorial-basics/TopologicalSort"},next:{title:"Two Pointers Technique",permalink:"/js.enigma/docs/tutorial-basics/TwoPointers"}},a={},c=[{value:"Trie Data Structure",id:"trie-data-structure",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Operations",id:"operations",level:3},{value:"Code Implementation",id:"code-implementation",level:3}];function d(r){const e={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"trie-data-structure",children:"Trie Data Structure"}),"\n",(0,t.jsx)(e.p,{children:"A Trie, also known as a prefix tree or digital tree, is a specialized tree used to store associative data structures. It is commonly used for storing strings or sequences where it can efficiently support operations like insertion, deletion, and prefix search."}),"\n",(0,t.jsx)(e.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Nodes"}),": Each node represents a character of the stored strings."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Edges"}),": The edges between nodes represent the transitions from one character to the next."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Root"}),": The root node represents the starting point of the Trie and does not store any character."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"operations",children:"Operations"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Insertion"}),": Add a new string to the Trie."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Search"}),": Check if a string exists in the Trie."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Prefix Search"}),": Find all strings that share a common prefix."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Deletion"}),": Remove a string from the Trie."]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"code-implementation",children:"Code Implementation"}),"\n",(0,t.jsx)(e.p,{children:"Here's a basic implementation of a Trie in JavaScript:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'class TrieNode {\r\n  constructor() {\r\n    this.children = {};\r\n    this.isEndOfWord = false;\r\n  }\r\n}\r\n\r\nclass Trie {\r\n  constructor() {\r\n    this.root = new TrieNode();\r\n  }\r\n\r\n  // Insert a word into the Trie\r\n  insert(word) {\r\n    let node = this.root;\r\n    for (const char of word) {\r\n      if (!node.children[char]) {\r\n        node.children[char] = new TrieNode();\r\n      }\r\n      node = node.children[char];\r\n    }\r\n    node.isEndOfWord = true;\r\n  }\r\n\r\n  // Search for a word in the Trie\r\n  search(word) {\r\n    let node = this.root;\r\n    for (const char of word) {\r\n      if (!node.children[char]) {\r\n        return false;\r\n      }\r\n      node = node.children[char];\r\n    }\r\n    return node.isEndOfWord;\r\n  }\r\n\r\n  // Search for words with a given prefix\r\n  startsWith(prefix) {\r\n    let node = this.root;\r\n    for (const char of prefix) {\r\n      if (!node.children[char]) {\r\n        return false;\r\n      }\r\n      node = node.children[char];\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Helper function to perform DFS and collect all words\r\n  #collectAllWords = (node, prefix, results) => {\r\n    if (node.isEndOfWord) {\r\n      results.push(prefix);\r\n    }\r\n    for (let char in node.children) {\r\n      this.#collectAllWords(node.children[char], prefix + char, results);\r\n    }\r\n  }\r\n\r\n  // Autocomplete function\r\n  autocomplete(prefix) {\r\n    let node = this.root;\r\n    for (let char of prefix) {\r\n      if (!node.children[char]) {\r\n        return []; // If prefix doesn\'t exist, return an empty array\r\n      }\r\n      node = node.children[char];\r\n    }\r\n\r\n    let results = [];\r\n    this.#collectAllWords(node, prefix, results);\r\n    return results;\r\n  }\r\n\r\n// Longest common prefix function\r\n  longestPrefix() {\r\n    let node = this.root;\r\n    let prefix = \'\';\r\n\r\n    while (node && !node.isEndOfWord) {\r\n      const keys = Object.keys(node.children);\r\n\r\n      // If there is more than one child or no children, break the loop\r\n      if (keys.length !== 1) {\r\n        break;\r\n      }\r\n\r\n      // Move to the next child\r\n      const nextChar = keys[0];\r\n      prefix += nextChar;\r\n      node = node.children[nextChar];\r\n    }\r\n\r\n    return prefix;\r\n  }\r\n}\r\n\r\n// Example usage\r\nconst trie = new Trie();\r\ntrie.insert("hello");\r\ntrie.insert("world");\r\ntrie.insert("apple");\r\ntrie.insert("app");\r\ntrie.insert("apply");\r\ntrie.insert("banana");\r\ntrie.insert("bat");\r\ntrie.insert("ball");\r\n\r\nconsole.log(trie.search("hello")); // Output: true\r\nconsole.log(trie.search("hell")); // Output: false\r\nconsole.log(trie.startsWith("hell")); // Output: true\r\nconsole.log(trie.startsWith("worl")); // Output: true\r\n\r\nconsole.log(trie.autocomplete("app")); // ["apple", "apply", "app"]\r\nconsole.log(trie.autocomplete("ba"));  // ["banana", "bat", "ball"]\r\nconsole.log(trie.autocomplete("c"));   // []\r\nconsole.log(trie.longestPrefix());  // Output: ""\r\n\r\n\n'})})]})}function h(r={}){const{wrapper:e}={...(0,o.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>s,x:()=>l});var t=n(6540);const o={},i=t.createContext(o);function s(r){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function l(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:s(r.components),t.createElement(i.Provider,{value:e},r.children)}}}]);