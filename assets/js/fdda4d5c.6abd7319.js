"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[812],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:n},e.children)}},90696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var r=t(74848),s=t(28453);const i={},c="TypeScript Cheatsheet",a={id:"WebDev/TypeScript/TypeScriptIntroduction",title:"TypeScript Cheatsheet",description:"Basic Types",source:"@site/docs/WebDev/TypeScript/TypeScriptIntroduction.mdx",sourceDirName:"WebDev/TypeScript",slug:"/WebDev/TypeScript/TypeScriptIntroduction",permalink:"/dev.enigma/docs/WebDev/TypeScript/TypeScriptIntroduction",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/TypeScript/TypeScriptIntroduction.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TypeScript Generics",permalink:"/dev.enigma/docs/WebDev/TypeScript/TypeScriptGenerics"},next:{title:"TypeScript Operators",permalink:"/dev.enigma/docs/WebDev/TypeScript/TypeScriptOperators"}},l={},o=[{value:"Basic Types",id:"basic-types",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Classes &amp; OOP",id:"classes--oop",level:2},{value:"Generics",id:"generics",level:2},{value:"Utility Types",id:"utility-types",level:2},{value:"<strong>1\ufe0f\u20e3 <code>Partial&lt;T&gt;</code> \u2192 Makes all properties optional</strong>",id:"1\ufe0f\u20e3-partialt--makes-all-properties-optional",level:2},{value:"<strong>2\ufe0f\u20e3 <code>Required&lt;T&gt;</code> \u2192 Makes all properties required</strong>",id:"2\ufe0f\u20e3-requiredt--makes-all-properties-required",level:2},{value:"<strong>3\ufe0f\u20e3 <code>Readonly&lt;T&gt;</code> \u2192 Prevents modification of properties</strong>",id:"3\ufe0f\u20e3-readonlyt--prevents-modification-of-properties",level:2},{value:"<strong>4\ufe0f\u20e3 <code>Pick&lt;T, K&gt;</code> \u2192 Selects specific properties</strong>",id:"4\ufe0f\u20e3-pickt-k--selects-specific-properties",level:2},{value:"<strong>5\ufe0f\u20e3 <code>Omit&lt;T, K&gt;</code> \u2192 Excludes specific properties</strong>",id:"5\ufe0f\u20e3-omitt-k--excludes-specific-properties",level:2},{value:"<strong>6\ufe0f\u20e3 <code>Record&lt;K, T&gt;</code> \u2192 Creates an object type with specific key-value pairs</strong>",id:"6\ufe0f\u20e3-recordk-t--creates-an-object-type-with-specific-key-value-pairs",level:2},{value:"<strong>7\ufe0f\u20e3 <code>Exclude&lt;T, U&gt;</code> \u2192 Removes specific types from a union</strong>",id:"7\ufe0f\u20e3-excludet-u--removes-specific-types-from-a-union",level:2},{value:"<strong>8\ufe0f\u20e3 <code>Extract&lt;T, U&gt;</code> \u2192 Keeps only specific types from a union</strong>",id:"8\ufe0f\u20e3-extractt-u--keeps-only-specific-types-from-a-union",level:2},{value:"<strong>9\ufe0f\u20e3 <code>NonNullable&lt;T&gt;</code> \u2192 Removes <code>null</code> and <code>undefined</code></strong>",id:"9\ufe0f\u20e3-nonnullablet--removes-null-and-undefined",level:2},{value:"<strong>\ud83d\udd1f <code>ReturnType&lt;T&gt;</code> \u2192 Extracts the return type of a function</strong>",id:"-returntypet--extracts-the-return-type-of-a-function",level:2},{value:"<strong>\ud83c\udf1f Bonus: <code>Parameters&lt;T&gt;</code> \u2192 Extracts function parameters</strong>",id:"-bonus-parameterst--extracts-function-parameters",level:2},{value:"Advanced Types",id:"advanced-types",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Best Practices &amp; Common Patterns",id:"best-practices--common-patterns",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"typescript-cheatsheet",children:"TypeScript Cheatsheet"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-types",children:"Basic Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Primitive types\nlet isDone: boolean = false;\nlet decimal: number = 6;\nlet color: string = "blue";\nlet list: number[] = [1, 2, 3];\nlet tuple: [string, number] = ["hello", 10];\n\n// Special types\nlet notSure: any = 4;\nlet u: undefined = undefined;\nlet n: null = null;\nlet v: void = undefined;\nlet nv: never = (() => { throw new Error(); })();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Basic interface\ninterface User {\n  name: string;\n  age: number;\n  readonly id: number;\n  email?: string;  // Optional property\n}\n\n// Interface extending another interface\ninterface Employee extends User {\n  department: string;\n  salary: number;\n}\n\n// Interface with method definition\ninterface Clickable {\n  onClick(): void;\n  onDoubleClick?(event: MouseEvent): void;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"classes--oop",children:"Classes & OOP"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Abstract class\nabstract class Animal {\n  protected name: string;\n  \n  constructor(name: string) {\n    this.name = name;\n  }\n  \n  abstract makeSound(): void;\n  \n  move(distance: number): void {\n    console.log(`${this.name} moved ${distance}m.`);\n  }\n}\n\n// Class implementation\nclass Dog extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  \n  makeSound(): void {\n    console.log('Woof!');\n  }\n}\n\n// Access modifiers\nclass Account {\n  private balance: number;\n  public readonly id: string;\n  protected type: string;\n  \n  constructor(id: string) {\n    this.id = id;\n    this.balance = 0;\n    this.type = 'standard';\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generics",children:"Generics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Generic function\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\n// Generic interface\ninterface Collection<T> {\n  add(item: T): void;\n  remove(item: T): void;\n  getItems(): T[];\n}\n\n// Generic class\nclass Queue<T> {\n  private data: T[] = [];\n  \n  push(item: T): void {\n    this.data.push(item);\n  }\n  \n  pop(): T | undefined {\n    return this.data.shift();\n  }\n}\n\n// Generic constraints\ninterface Lengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"utility-types",children:"Utility Types"}),"\n",(0,r.jsxs)(n.p,{children:["TypeScript provides ",(0,r.jsx)(n.strong,{children:"built-in utility types"})," that help modify and work with existing types efficiently."]}),"\n",(0,r.jsx)(n.h2,{id:"1\ufe0f\u20e3-partialt--makes-all-properties-optional",children:(0,r.jsxs)(n.strong,{children:["1\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Partial<T>"})," \u2192 Makes all properties optional"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Partial<T>"})," utility ",(0,r.jsx)(n.strong,{children:"converts all properties"})," of a type into ",(0,r.jsx)(n.strong,{children:"optional"})," ones."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type User = { id: number; name: string; age: number; };\ntype PartialUser = Partial<User>;\n\n// Equivalent to:\ntype PartialUser = { id?: number; name?: string; age?: number; };\n"})}),"\n",(0,r.jsx)(n.h2,{id:"2\ufe0f\u20e3-requiredt--makes-all-properties-required",children:(0,r.jsxs)(n.strong,{children:["2\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Required<T>"})," \u2192 Makes all properties required"]})}),"\n",(0,r.jsxs)(n.p,{children:["Opposite of ",(0,r.jsx)(n.code,{children:"Partial<T>"}),", the ",(0,r.jsx)(n.code,{children:"Required<T>"})," utility ",(0,r.jsx)(n.strong,{children:"ensures all properties are mandatory"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type User = { id?: number; name?: string; age?: number; };\ntype RequiredUser = Required<User>;\n\n// Equivalent to:\ntype RequiredUser = { id: number; name: string; age: number; };\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3\ufe0f\u20e3-readonlyt--prevents-modification-of-properties",children:(0,r.jsxs)(n.strong,{children:["3\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Readonly<T>"})," \u2192 Prevents modification of properties"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Readonly<T>"})," utility ",(0,r.jsx)(n.strong,{children:"makes all properties immutable"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type User = { id: number; name: string; };\ntype ReadonlyUser = Readonly<User>;\n\n// Now, ReadonlyUser properties cannot be modified:\nconst user: ReadonlyUser = { id: 1, name: \"Ashish\" };\nuser.id = 2; // \u274c Error: Cannot assign to 'id' because it is a read-only property.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4\ufe0f\u20e3-pickt-k--selects-specific-properties",children:(0,r.jsxs)(n.strong,{children:["4\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Pick<T, K>"})," \u2192 Selects specific properties"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Pick<T, K>"})," utility ",(0,r.jsx)(n.strong,{children:"creates a new type with only selected properties"})," from an existing type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type User = { id: number; name: string; age: number; };\ntype UserNameOnly = Pick<User, "name">;\n\n// Equivalent to:\ntype UserNameOnly = { name: string; };\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5\ufe0f\u20e3-omitt-k--excludes-specific-properties",children:(0,r.jsxs)(n.strong,{children:["5\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Omit<T, K>"})," \u2192 Excludes specific properties"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Omit<T, K>"})," utility ",(0,r.jsx)(n.strong,{children:"removes certain properties"})," from a type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type User = { id: number; name: string; age: number; };\ntype UserWithoutId = Omit<User, "id">;\n\n// Equivalent to:\ntype UserWithoutId = { name: string; age: number; };\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6\ufe0f\u20e3-recordk-t--creates-an-object-type-with-specific-key-value-pairs",children:(0,r.jsxs)(n.strong,{children:["6\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Record<K, T>"})," \u2192 Creates an object type with specific key-value pairs"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Record<K, T>"})," utility ",(0,r.jsxs)(n.strong,{children:["defines an object type with keys of type ",(0,r.jsx)(n.code,{children:"K"})," and values of type ",(0,r.jsx)(n.code,{children:"T"})]}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type UserRoles = Record<string, "admin" | "user">;\n\n// Example usage:\nconst roles: UserRoles = {\n  ashish: "admin",\n  john: "user",\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"7\ufe0f\u20e3-excludet-u--removes-specific-types-from-a-union",children:(0,r.jsxs)(n.strong,{children:["7\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Exclude<T, U>"})," \u2192 Removes specific types from a union"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Exclude<T, U>"})," utility ",(0,r.jsx)(n.strong,{children:"filters out specific types from a union"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type Status = "active" | "inactive" | "banned";\ntype AllowedStatus = Exclude<Status, "banned">;\n\n// Equivalent to:\ntype AllowedStatus = "active" | "inactive";\n'})}),"\n",(0,r.jsx)(n.h2,{id:"8\ufe0f\u20e3-extractt-u--keeps-only-specific-types-from-a-union",children:(0,r.jsxs)(n.strong,{children:["8\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"Extract<T, U>"})," \u2192 Keeps only specific types from a union"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Extract<T, U>"})," utility ",(0,r.jsx)(n.strong,{children:"extracts only the specified types from a union"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type Status = "active" | "inactive" | "banned";\ntype ActiveStatus = Extract<Status, "active">;\n\n// Equivalent to:\ntype ActiveStatus = "active";\n'})}),"\n",(0,r.jsx)(n.h2,{id:"9\ufe0f\u20e3-nonnullablet--removes-null-and-undefined",children:(0,r.jsxs)(n.strong,{children:["9\ufe0f\u20e3 ",(0,r.jsx)(n.code,{children:"NonNullable<T>"})," \u2192 Removes ",(0,r.jsx)(n.code,{children:"null"})," and ",(0,r.jsx)(n.code,{children:"undefined"})]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"NonNullable<T>"})," utility ",(0,r.jsxs)(n.strong,{children:["removes ",(0,r.jsx)(n.code,{children:"null"})," and ",(0,r.jsx)(n.code,{children:"undefined"})," from a type"]}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type MaybeUser = string | null | undefined;\ntype User = NonNullable<MaybeUser>;\n\n// Equivalent to:\ntype User = string;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-returntypet--extracts-the-return-type-of-a-function",children:(0,r.jsxs)(n.strong,{children:["\ud83d\udd1f ",(0,r.jsx)(n.code,{children:"ReturnType<T>"})," \u2192 Extracts the return type of a function"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ReturnType<T>"})," utility ",(0,r.jsx)(n.strong,{children:"gets the return type of a function"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'function getUser() { return { id: 1, name: "Ashish" }; }\ntype User = ReturnType<typeof getUser>;\n\n// Equivalent to:\ntype User = { id: number; name: string; };\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-bonus-parameterst--extracts-function-parameters",children:(0,r.jsxs)(n.strong,{children:["\ud83c\udf1f Bonus: ",(0,r.jsx)(n.code,{children:"Parameters<T>"})," \u2192 Extracts function parameters"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Parameters<T>"})," utility ",(0,r.jsx)(n.strong,{children:"gets the parameter types of a function"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function add(a: number, b: number) { return a + b; }\ntype Params = Parameters<typeof add>;\n\n// Equivalent to:\ntype Params = [number, number];\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-types",children:"Advanced Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Union Types\ntype StringOrNumber = string | number;\n\n// Intersection Types\ntype Employee = Person & Identifiable;\n\n// Type Guards\nfunction isString(value: any): value is string {\n  return typeof value === 'string';\n}\n\n// Mapped Types\ntype Nullable<T> = { [P in keyof T]: T[P] | null };\n\n// Conditional Types\ntype NonNullable<T> = T extends null | undefined ? never : T;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Class Decorator\nfunction sealed(constructor: Function) {\n  Object.seal(constructor);\n  Object.seal(constructor.prototype);\n}\n\n@sealed\nclass Example {\n  // ...\n}\n\n// Property Decorator\nfunction required(target: Object, propertyKey: string) {\n  let value: any;\n  \n  const getter = () => value;\n  const setter = (newVal: any) => {\n    if (newVal === undefined || newVal === null) {\n      throw new Error('Value is required');\n    }\n    value = newVal;\n  };\n  \n  Object.defineProperty(target, propertyKey, {\n    get: getter,\n    set: setter,\n    enumerable: true,\n    configurable: true,\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices--common-patterns",children:"Best Practices & Common Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Type assertion\nlet someValue: any = "this is a string";\nlet strLength: number = (someValue as string).length;\n\n// Type inference with \'as const\'\nconst config = {\n  endpoint: "api.example.com",\n  port: 3000\n} as const;\n\n// Index signatures\ninterface StringMap {\n  [key: string]: string;\n}\n\n// Discriminated unions\ninterface Square {\n  kind: "square";\n  size: number;\n}\n\ninterface Rectangle {\n  kind: "rectangle";\n  width: number;\n  height: number;\n}\n\ntype Shape = Square | Rectangle;\n\n// Type guards with discriminated unions\nfunction getArea(shape: Shape): number {\n  switch (shape.kind) {\n    case "square":\n      return shape.size * shape.size;\n    case "rectangle":\n      return shape.width * shape.height;\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);