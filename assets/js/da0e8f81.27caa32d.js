"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[3104],{9619:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=i(74848),s=i(28453);const r={},a="GitHub Actions + Docker CI/CD Pipeline for Spring Boot",o={id:"Spring Boot/GitHub Actions + Docker CICD Pipeline for Spring Boot",title:"GitHub Actions + Docker CI/CD Pipeline for Spring Boot",description:"Overview",source:"@site/docs/Spring Boot/GitHub Actions + Docker CICD Pipeline for Spring Boot.mdx",sourceDirName:"Spring Boot",slug:"/Spring Boot/GitHub Actions + Docker CICD Pipeline for Spring Boot",permalink:"/docs/Spring Boot/GitHub Actions + Docker CICD Pipeline for Spring Boot",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Spring Boot/GitHub Actions + Docker CICD Pipeline for Spring Boot.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Docker Basics for Spring Boot Applications",permalink:"/docs/Spring Boot/Docker Basics for Spring Boot Applications"},next:{title:"Java Microservices - Beginner's Guide",permalink:"/docs/Spring Boot/Java Microservices - Beginner's Guide"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"GitHub Actions Terminology",id:"github-actions-terminology",level:3},{value:"CI/CD Pipeline Stages",id:"cicd-pipeline-stages",level:3},{value:"Basic GitHub Actions Workflow",id:"basic-github-actions-workflow",level:2},{value:"Simple CI Workflow",id:"simple-ci-workflow",level:3},{value:"Complete CI/CD Pipeline with Docker",id:"complete-cicd-pipeline-with-docker",level:2},{value:"Advanced Workflow",id:"advanced-workflow",level:3},{value:"Multi-Environment Deployment",id:"multi-environment-deployment",level:2},{value:"Environment-Specific Workflows",id:"environment-specific-workflows",level:3},{value:"Docker Multi-Stage Build for CI/CD",id:"docker-multi-stage-build-for-cicd",level:2},{value:"Optimized Dockerfile for CI/CD",id:"optimized-dockerfile-for-cicd",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Matrix Strategy for Multiple Environments",id:"matrix-strategy-for-multiple-environments",level:3},{value:"Conditional Deployments",id:"conditional-deployments",level:3},{value:"Parallel Jobs with Dependencies",id:"parallel-jobs-with-dependencies",level:3},{value:"Secrets and Environment Management",id:"secrets-and-environment-management",level:2},{value:"Required Secrets",id:"required-secrets",level:3},{value:"Environment Variables in Workflow",id:"environment-variables-in-workflow",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Caching Strategies",id:"caching-strategies",level:3},{value:"Build Optimization",id:"build-optimization",level:3},{value:"Monitoring and Notifications",id:"monitoring-and-notifications",level:2},{value:"Slack Notifications",id:"slack-notifications",level:3},{value:"Status Badges",id:"status-badges",level:3},{value:"Deployment Strategies",id:"deployment-strategies",level:2},{value:"Blue-Green Deployment",id:"blue-green-deployment",level:3},{value:"Rolling Updates with Health Checks",id:"rolling-updates-with-health-checks",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Docker Build Failures",id:"docker-build-failures",level:3},{value:"Test Failures",id:"test-failures",level:3},{value:"Deployment Rollback",id:"deployment-rollback",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"Security",id:"security",level:3},{value:"Performance",id:"performance",level:3},{value:"Reliability",id:"reliability",level:3},{value:"Maintainability",id:"maintainability",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"github-actions--docker-cicd-pipeline-for-spring-boot",children:"GitHub Actions + Docker CI/CD Pipeline for Spring Boot"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"GitHub Actions provides powerful CI/CD capabilities that integrate seamlessly with Docker for Spring Boot applications. This guide covers everything from basic workflows to advanced deployment pipelines."}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"github-actions-terminology",children:"GitHub Actions Terminology"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Workflow"}),": Automated process defined in YAML file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job"}),": Set of steps that execute on the same runner"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Step"}),": Individual task within a job"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Action"}),": Reusable unit of code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runner"}),": Server that runs workflows"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger"}),": Event that starts a workflow"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cicd-pipeline-stages",children:"CI/CD Pipeline Stages"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Source"})," \u2192 Code push/PR"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Build"})," \u2192 Compile and test"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Package"})," \u2192 Create Docker image"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy"})," \u2192 Release to environments"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-github-actions-workflow",children:"Basic GitHub Actions Workflow"}),"\n",(0,t.jsx)(n.h3,{id:"simple-ci-workflow",children:"Simple CI Workflow"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:".github/workflows/ci.yml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: CI Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: testdb\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          java-version: '17'\n          distribution: 'temurin'\n\n      - name: Cache Maven dependencies\n        uses: actions/cache@v4\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: ${{ runner.os }}-m2\n\n      - name: Run tests\n        run: mvn clean test\n        env:\n          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb\n          SPRING_DATASOURCE_USERNAME: postgres\n          SPRING_DATASOURCE_PASSWORD: postgres\n\n      - name: Generate test report\n        uses: dorny/test-reporter@v1\n        if: success() || failure()\n        with:\n          name: Maven Tests\n          path: target/surefire-reports/*.xml\n          reporter: java-junit\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-cicd-pipeline-with-docker",children:"Complete CI/CD Pipeline with Docker"}),"\n",(0,t.jsx)(n.h3,{id:"advanced-workflow",children:"Advanced Workflow"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:".github/workflows/cicd.yml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n    tags: ['v*']\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: testdb\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          java-version: '17'\n          distribution: 'temurin'\n\n      - name: Cache Maven dependencies\n        uses: actions/cache@v4\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: ${{ runner.os }}-m2\n\n      - name: Run unit tests\n        run: mvn clean test\n\n      - name: Run integration tests\n        run: mvn verify -P integration-tests\n        env:\n          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb\n          SPRING_DATASOURCE_USERNAME: postgres\n          SPRING_DATASOURCE_PASSWORD: postgres\n          SPRING_REDIS_HOST: localhost\n          SPRING_REDIS_PORT: 6379\n\n      - name: Generate code coverage report\n        run: mvn jacoco:report\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v4\n        with:\n          file: target/site/jacoco/jacoco.xml\n\n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n  build-and-push:\n    needs: test\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    outputs:\n      image-digest: ${{ steps.build.outputs.digest }}\n      image-tag: ${{ steps.meta.outputs.tags }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v4\n        with:\n          java-version: '17'\n          distribution: 'temurin'\n\n      - name: Cache Maven dependencies\n        uses: actions/cache@v4\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: ${{ runner.os }}-m2\n\n      - name: Build application\n        run: mvn clean package -DskipTests\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=sha,prefix=sha-,format=short\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        id: build\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          platforms: linux/amd64,linux/arm64\n\n  security-scan:\n    needs: build-and-push\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: ${{ needs.build-and-push.outputs.image-tag }}\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n\n      - name: Upload Trivy scan results\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: 'trivy-results.sarif'\n\n  deploy-staging:\n    needs: [test, build-and-push, security-scan]\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n    environment: staging\n\n    steps:\n      - name: Deploy to staging\n        run: |\n          echo \"Deploying ${{ needs.build-and-push.outputs.image-tag }} to staging\"\n          # Add your staging deployment logic here\n\n  deploy-production:\n    needs: [test, build-and-push, security-scan]\n    runs-on: ubuntu-latest\n    if: startsWith(github.ref, 'refs/tags/v')\n    environment: production\n\n    steps:\n      - name: Deploy to production\n        run: |\n          echo \"Deploying ${{ needs.build-and-push.outputs.image-tag }} to production\"\n          # Add your production deployment logic here\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multi-environment-deployment",children:"Multi-Environment Deployment"}),"\n",(0,t.jsx)(n.h3,{id:"environment-specific-workflows",children:"Environment-Specific Workflows"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:".github/workflows/deploy-staging.yml"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: Deploy to Staging\n\non:\n  workflow_run:\n    workflows: ['CI/CD Pipeline']\n    types:\n      - completed\n    branches: [develop]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    environment: staging\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name: Deploy to ECS\n        run: |\n          # Update ECS service with new image\n          aws ecs update-service \\\n            --cluster staging-cluster \\\n            --service myapp-service \\\n            --force-new-deployment \\\n            --task-definition myapp-staging:${{ github.sha }}\n\n      - name: Wait for deployment\n        run: |\n          aws ecs wait services-stable \\\n            --cluster staging-cluster \\\n            --services myapp-service\n\n      - name: Run smoke tests\n        run: |\n          # Wait for service to be healthy\n          sleep 30\n          curl -f https://staging.myapp.com/actuator/health\n"})}),"\n",(0,t.jsx)(n.h2,{id:"docker-multi-stage-build-for-cicd",children:"Docker Multi-Stage Build for CI/CD"}),"\n",(0,t.jsx)(n.h3,{id:"optimized-dockerfile-for-cicd",children:"Optimized Dockerfile for CI/CD"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Build stage\nFROM maven:3.9-openjdk-17 AS build\nWORKDIR /app\n\n# Copy dependency files first for better caching\nCOPY pom.xml .\nCOPY src ./src\n\n# Build the application\nRUN mvn clean package -DskipTests\n\n# Test stage\nFROM build AS test\nRUN mvn test\n\n# Runtime stage\nFROM openjdk:17-jre-slim AS runtime\n\n# Install curl for health checks\nRUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*\n\n# Create non-root user\nRUN groupadd -r spring && useradd -r -g spring spring\n\nWORKDIR /app\n\n# Copy built artifact\nCOPY --from=build /app/target/*.jar app.jar\n\n# Change ownership\nRUN chown spring:spring app.jar\n\n# Switch to non-root user\nUSER spring\n\nEXPOSE 8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\\n  CMD curl -f http://localhost:8080/actuator/health || exit 1\n\n# Run application\nENTRYPOINT ["java", "-jar", "app.jar"]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"matrix-strategy-for-multiple-environments",children:"Matrix Strategy for Multiple Environments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"strategy:\n  matrix:\n    environment: [staging, production]\n    java-version: [11, 17, 21]\n\nsteps:\n  - name: Set up JDK ${{ matrix.java-version }}\n    uses: actions/setup-java@v4\n    with:\n      java-version: ${{ matrix.java-version }}\n      distribution: 'temurin'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"conditional-deployments",children:"Conditional Deployments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"jobs:\n  deploy:\n    if: |\n      github.event_name == 'push' &&\n      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))\n\n    steps:\n      - name: Deploy to staging\n        if: github.ref == 'refs/heads/main'\n        run: echo \"Deploying to staging\"\n\n      - name: Deploy to production\n        if: startsWith(github.ref, 'refs/tags/')\n        run: echo \"Deploying to production\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parallel-jobs-with-dependencies",children:"Parallel Jobs with Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"jobs:\n  build:\n    runs-on: ubuntu-latest\n    # ... build steps\n\n  test-unit:\n    needs: build\n    runs-on: ubuntu-latest\n    # ... unit test steps\n\n  test-integration:\n    needs: build\n    runs-on: ubuntu-latest\n    # ... integration test steps\n\n  deploy:\n    needs: [test-unit, test-integration]\n    runs-on: ubuntu-latest\n    # ... deployment steps\n"})}),"\n",(0,t.jsx)(n.h2,{id:"secrets-and-environment-management",children:"Secrets and Environment Management"}),"\n",(0,t.jsx)(n.h3,{id:"required-secrets",children:"Required Secrets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Container Registry\nGITHUB_TOKEN                 # Automatic\nDOCKER_USERNAME             # Docker Hub\nDOCKER_PASSWORD             # Docker Hub\n\n# Cloud Providers\nAWS_ACCESS_KEY_ID           # AWS\nAWS_SECRET_ACCESS_KEY       # AWS\nAZURE_CREDENTIALS           # Azure\nGCP_SA_KEY                  # Google Cloud\n\n# External Services\nSONAR_TOKEN                 # SonarCloud\nCODECOV_TOKEN              # Codecov\n\n# Database\nDB_PASSWORD                 # Production DB\n"})}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables-in-workflow",children:"Environment Variables in Workflow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"env:\n  SPRING_PROFILES_ACTIVE: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}\n  DATABASE_URL: ${{ secrets.DATABASE_URL }}\n  REDIS_URL: ${{ secrets.REDIS_URL }}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,t.jsx)(n.h3,{id:"caching-strategies",children:"Caching Strategies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Cache Docker layers\n  uses: actions/cache@v4\n  with:\n    path: /tmp/.buildx-cache\n    key: ${{ runner.os }}-buildx-${{ github.sha }}\n    restore-keys: |\n      ${{ runner.os }}-buildx-\n\n- name: Cache Maven dependencies\n  uses: actions/cache@v4\n  with:\n    path: ~/.m2\n    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n    restore-keys: ${{ runner.os }}-m2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-optimization",children:"Build Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Build with BuildKit\n  uses: docker/build-push-action@v5\n  with:\n    context: .\n    push: true\n    tags: myapp:latest\n    cache-from: type=gha\n    cache-to: type=gha,mode=max\n    build-args: |\n      BUILDKIT_INLINE_CACHE=1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-notifications",children:"Monitoring and Notifications"}),"\n",(0,t.jsx)(n.h3,{id:"slack-notifications",children:"Slack Notifications"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Notify Slack on failure\n  if: failure()\n  uses: 8398a7/action-slack@v3\n  with:\n    status: failure\n    channel: '#deployments'\n    webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"status-badges",children:"Status Badges"}),"\n",(0,t.jsx)(n.p,{children:"Add to README.md:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markdown",children:"![CI/CD Pipeline](https://github.com/username/repo/actions/workflows/cicd.yml/badge.svg)\n![Docker Build](https://github.com/username/repo/actions/workflows/docker.yml/badge.svg)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"deployment-strategies",children:"Deployment Strategies"}),"\n",(0,t.jsx)(n.h3,{id:"blue-green-deployment",children:"Blue-Green Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- name: Blue-Green Deployment\n  run: |\n    # Deploy to green environment\n    kubectl set image deployment/myapp myapp=myapp:${{ github.sha }} -n green\n    kubectl rollout status deployment/myapp -n green\n\n    # Switch traffic\n    kubectl patch service myapp -p \'{"spec":{"selector":{"version":"green"}}}\' -n production\n\n    # Clean up blue environment\n    kubectl delete deployment myapp -n blue\n'})}),"\n",(0,t.jsx)(n.h3,{id:"rolling-updates-with-health-checks",children:"Rolling Updates with Health Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Rolling Update\n  run: |\n    kubectl set image deployment/myapp myapp=myapp:${{ github.sha }}\n    kubectl rollout status deployment/myapp --timeout=300s\n\n    # Health check\n    kubectl get pods -l app=myapp\n    curl -f https://api.myapp.com/actuator/health\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,t.jsx)(n.h3,{id:"docker-build-failures",children:"Docker Build Failures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Debug Docker build\n  if: failure()\n  run: |\n    docker images\n    docker system df\n    docker buildx ls\n"})}),"\n",(0,t.jsx)(n.h3,{id:"test-failures",children:"Test Failures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Upload test artifacts\n  if: failure()\n  uses: actions/upload-artifact@v4\n  with:\n    name: test-results\n    path: |\n      target/surefire-reports/\n      target/site/jacoco/\n      logs/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deployment-rollback",children:"Deployment Rollback"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- name: Rollback on failure\n  if: failure()\n  run: |\n    kubectl rollout undo deployment/myapp\n    kubectl rollout status deployment/myapp\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,t.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use least privilege principle for secrets"}),"\n",(0,t.jsx)(n.li,{children:"Scan container images for vulnerabilities"}),"\n",(0,t.jsx)(n.li,{children:"Use non-root users in containers"}),"\n",(0,t.jsx)(n.li,{children:"Keep dependencies updated"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use multi-stage builds"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper caching strategies"}),"\n",(0,t.jsx)(n.li,{children:"Parallel job execution where possible"}),"\n",(0,t.jsx)(n.li,{children:"Optimize Docker layer caching"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"reliability",children:"Reliability"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement comprehensive testing"}),"\n",(0,t.jsx)(n.li,{children:"Use health checks and readiness probes"}),"\n",(0,t.jsx)(n.li,{children:"Plan for rollback scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Monitor deployment success"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"maintainability",children:"Maintainability"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use reusable workflows and actions"}),"\n",(0,t.jsx)(n.li,{children:"Document deployment processes"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper logging and monitoring"}),"\n",(0,t.jsx)(n.li,{children:"Version your deployment artifacts"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This comprehensive guide provides everything needed to implement robust CI/CD pipelines with GitHub Actions and Docker for Spring Boot applications."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);