"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[928],{7634:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=t(4848),s=t(8453);const i={title:"Line Sweep Algorithm"},l=void 0,o={id:"tutorial-basics/LineSweep",title:"Line Sweep Algorithm",description:'The Line Sweep algorithm is a computational geometry technique used to solve various problems involving intervals or segments. The basic idea is to "sweep" a line across the plane and process events as the line intersects with points of interest (typically the endpoints of segments).',source:"@site/docs/tutorial-basics/LineSweep.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/LineSweep",permalink:"/js.enigma/docs/tutorial-basics/LineSweep",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/tutorial-basics/LineSweep.mdx",tags:[],version:"current",frontMatter:{title:"Line Sweep Algorithm"},sidebar:"tutorialSidebar",previous:{title:"LRU Cache Design",permalink:"/js.enigma/docs/tutorial-basics/LRUcache"},next:{title:"Merge Sort",permalink:"/js.enigma/docs/tutorial-basics/MergeSort"}},c={},a=[{value:"Steps of the Line Sweep Algorithm",id:"steps-of-the-line-sweep-algorithm",level:2},{value:"Example: Finding Intersections of Line Segments",id:"example-finding-intersections-of-line-segments",level:2},{value:"Step-by-Step Process",id:"step-by-step-process",level:3},{value:"Meeting Rooms II",id:"meeting-rooms-ii",level:3},{value:"Employee Free time",id:"employee-free-time",level:3},{value:"Related LeetCode Problems",id:"related-leetcode-problems",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Line Sweep"}),' algorithm is a computational geometry technique used to solve various problems involving intervals or segments. The basic idea is to "sweep" a line across the plane and process events as the line intersects with points of interest (typically the endpoints of segments).']}),"\n",(0,r.jsx)(n.h2,{id:"steps-of-the-line-sweep-algorithm",children:"Steps of the Line Sweep Algorithm"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Event Creation"}),": Create a list of events from the segments or intervals. Each event represents a point where an interval starts or ends."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sorting Events"}),": Sort the events primarily by the x-coordinate. If two events have the same x-coordinate, handle the starting events before ending events."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sweeping the Line"}),": Initialize a data structure (like a balanced tree or a multiset) to keep track of active segments. As you process each event:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For a starting event, add the segment to the active set."}),"\n",(0,r.jsx)(n.li,{children:"For an ending event, remove the segment from the active set."}),"\n",(0,r.jsx)(n.li,{children:"Optionally, during the sweep, check for intersections or perform other calculations based on the active segments."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Processing Events"}),": For each event, update the state of the active segments and collect any required information (like intersection points, area calculations, etc.)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Must Read  : ",(0,r.jsx)(n.a,{href:"https://leetcode.com/discuss/study-guide/2166045/line-sweep-algorithms",children:"Line Sweep"})]}),"\n",(0,r.jsx)(n.h2,{id:"example-finding-intersections-of-line-segments",children:"Example: Finding Intersections of Line Segments"}),"\n",(0,r.jsx)(n.p,{children:"Consider the following line segments:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Segment A: (1, 3)"}),"\n",(0,r.jsx)(n.li,{children:"Segment B: (2, 5)"}),"\n",(0,r.jsx)(n.li,{children:"Segment C: (4, 6)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"step-by-step-process",children:"Step-by-Step Process"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create Events"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Event A_start: (1, start, A)"}),"\n",(0,r.jsx)(n.li,{children:"Event A_end: (3, end, A)"}),"\n",(0,r.jsx)(n.li,{children:"Event B_start: (2, start, B)"}),"\n",(0,r.jsx)(n.li,{children:"Event B_end: (5, end, B)"}),"\n",(0,r.jsx)(n.li,{children:"Event C_start: (4, start, C)"}),"\n",(0,r.jsx)(n.li,{children:"Event C_end: (6, end, C)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sort Events"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"[(1, start, A), (2, start, B), (3, end, A), (4, start, C), (5, end, B), (6, end, C)]"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sweep the Line"}),":"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start with an empty active set."}),"\n",(0,r.jsxs)(n.li,{children:["Process Event A_start: Add Segment A \u2192 Active Set: ",(0,r.jsx)(n.code,{children:"{A}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Process Event B_start: Add Segment B \u2192 Active Set: ",(0,r.jsx)(n.code,{children:"{A, B}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Process Event A_end: Remove Segment A \u2192 Active Set: ",(0,r.jsx)(n.code,{children:"{B}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Process Event C_start: Add Segment C \u2192 Active Set: ",(0,r.jsx)(n.code,{children:"{B, C}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Process Event B_end: Remove Segment B \u2192 Active Set: ",(0,r.jsx)(n.code,{children:"{C}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Process Event C_end: Remove Segment C \u2192 Active Set: ",(0,r.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Intersections Found"}),": In this case, Segment A intersects with Segment B at point (2,3)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"meeting-rooms-ii",children:"Meeting Rooms II"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"function minMeetingRooms(intervals) {\r\n  if (intervals.length === 0) return 0;\r\n\r\n  const events = [];\r\n\r\n  // Step 1: Convert intervals to events\r\n  intervals.forEach(([start, end]) => {\r\n    events.push([start, 1]);  // Start of a meeting\r\n    events.push([end, -1]);   // End of a meeting\r\n  });\r\n\r\n  // Step 2: Sort events\r\n  events.sort(([time1, type1], [time2, type2]) => {\r\n    if (time1 === time2) {\r\n      return type1 - type2; // End event (-1) before start event (+1)\r\n    }\r\n    return time1 - time2;   // Sort by time\r\n  });\r\n\r\n  // Step 3: Sweep through events to find max rooms required\r\n  let activeRooms = 0;\r\n  let maxRooms = 0;\r\n\r\n  events.forEach(([, type]) => {\r\n    activeRooms += type; // Increment or decrement active room count\r\n    maxRooms = Math.max(maxRooms, activeRooms); // Update maximum rooms needed\r\n  });\r\n\r\n  return maxRooms; // Return the maximum number of rooms needed\r\n}\r\n\r\n// Example usage:\r\nconst intervals = [\r\n  [0, 30],\r\n  [5, 10],\r\n  [15, 20]\r\n];\r\nconsole.log(minMeetingRooms(intervals)); // Output: 2\n"})}),"\n",(0,r.jsx)(n.h3,{id:"employee-free-time",children:"Employee Free time"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-JavaScript",children:"/**\r\n * // Definition for an Interval.\r\n * function Interval(start, end) {\r\n *    this.start = start;\r\n *    this.end = end;\r\n * };\r\n */\r\n\r\n/**\r\n * @param {Interval[][]} schedules\r\n * @return {Interval[]}\r\n */\r\nfunction employeeFreeTime(schedules) {\r\n  const events = [];\r\n\r\n  // Step 1: Create events from employee schedules\r\n  schedules.forEach(schedule => {\r\n    schedule.forEach(({ start, end }) => {\r\n      events.push([start, 'start']);\r\n      events.push([end, 'end']);\r\n    });\r\n  });\r\n\r\n  // Step 2: Sort events\r\n  events.sort(([time1, type1], [time2, type2]) => {\r\n    return time1 === time2 ? (type1 === 'end' ? -1 : 1) : time1 - time2;\r\n  });\r\n\r\n  // Step 3: Sweep through events to find free time\r\n  const freeTime = [];\r\n  let active = 0;\r\n  let lastEnd = null;\r\n\r\n  for (const [time, type] of events) {\r\n    if (type === 'start') {\r\n      if (active === 0 && lastEnd !== null) {\r\n        // Add the free time interval if there was a gap\r\n        if (lastEnd < time) { // Ensure that we only add intervals where there is a gap\r\n          freeTime.push(new Interval(lastEnd, time));\r\n        }\r\n      }\r\n      active++; // Increase active intervals\r\n    } else { // type === 'end'\r\n      active--; // Decrease active intervals\r\n      if (active === 0) {\r\n        lastEnd = time; // Mark the end of the last active interval\r\n      }\r\n    }\r\n  }\r\n\r\n  return freeTime; // Return an array of Interval objects\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-leetcode-problems",children:"Related LeetCode Problems"}),"\n",(0,r.jsx)(n.p,{children:"Here are some problems on LeetCode that can be solved using the Line Sweep algorithm:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/meeting-rooms-ii/",children:"Meeting Rooms II"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/insert-interval/",children:"Insert Interval"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-interval-to-include-each-query/",children:"Minimum Interval to Include Each Query"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/the-skyline-problem/",children:"Skyline Problem"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/merge-intervals/",children:"Overlapping Intervals"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://leetcode.com/problems/car-fleet/",children:"Car Fleet"})})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["More Problems: ",(0,r.jsx)(n.a,{href:"https://leetcode.com/problem-list/mzw3cyy6/",children:"https://leetcode.com/problem-list/mzw3cyy6/"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);