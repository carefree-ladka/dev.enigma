"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8624],{4355:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=r(4848),n=r(8453);r(1432);const o={title:"Quick Sort",description:"A comprehensive guide to understanding and implementing Quick Sort."},s="Quick Sort",a={id:"DSA/QuickSort",title:"Quick Sort",description:"A comprehensive guide to understanding and implementing Quick Sort.",source:"@site/docs/DSA/QuickSort.mdx",sourceDirName:"DSA",slug:"/DSA/QuickSort",permalink:"/js.enigma/docs/DSA/QuickSort",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/QuickSort.mdx",tags:[],version:"current",frontMatter:{title:"Quick Sort",description:"A comprehensive guide to understanding and implementing Quick Sort."},sidebar:"tutorialSidebar",previous:{title:"Quick Select Algorithm",permalink:"/js.enigma/docs/DSA/QuickSelect"},next:{title:"Recursion Patterns Cheatsheet",permalink:"/js.enigma/docs/DSA/Recursion"}},c={},l=[{value:"How Quick Sort Works",id:"how-quick-sort-works",level:2},{value:"Algorithm Steps",id:"algorithm-steps",level:3},{value:"Pseudocode",id:"pseudocode",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"quick-sort",children:"Quick Sort"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Quick Sort"})," is a widely used and efficient sorting algorithm that follows the divide-and-conquer strategy. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively."]}),"\n",(0,i.jsx)(t.h2,{id:"how-quick-sort-works",children:"How Quick Sort Works"}),"\n",(0,i.jsxs)(t.p,{children:["Quick Sort is a comparison-based sorting algorithm with an average time complexity of ",(0,i.jsx)(t.code,{children:"O(n log n)"}),". Its efficiency depends on the choice of the pivot and partitioning strategy. The basic idea is to sort the array in place, with minimal additional memory usage."]}),"\n",(0,i.jsx)(t.h3,{id:"algorithm-steps",children:"Algorithm Steps"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Choose a Pivot:"})," Select an element from the array as the pivot. Various strategies can be used to choose the pivot (e.g., first element, last element, random element, median-of-three)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Partition the Array:"})," Rearrange the elements in the array so that elements less than the pivot come before it and elements greater than the pivot come after it."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Recursively Apply Quick Sort:"})," Recursively apply Quick Sort to the sub-arrays formed by the partition."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,i.jsx)(t.p,{children:"Here\u2019s the pseudocode for Quick Sort:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-Javascript",children:"function quickSort(arr, left = 0, right = arr.length - 1) {\n    if (left >= right) return;\n\n    const pivotIndex = partition(arr, left, right);\n    quickSort(arr, left, pivotIndex - 1);\n    quickSort(arr, pivotIndex + 1, right);\n}\n\nfunction partition(arr, left, right) {\n    const pivot = arr[right];\n    let i = left;\n\n    for (let j = left; j < right; j++) {\n        if (arr[j] < pivot) {\n            [arr[i], arr[j]] = [arr[j], arr[i]];  // Swap elements\n            i++;\n        }\n    }\n\n    [arr[i], arr[right]] = [arr[right], arr[i]];  // Swap pivot into place\n    return i;\n}\n\n// Example usage\nconst array = [3, 6, 8, 10, 1, 2, 1];\nquickSort(array);\nconsole.log(array);  // Output: [1, 1, 2, 3, 6, 8, 10]\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);