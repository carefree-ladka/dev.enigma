"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[4945],{452:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var i=n(74848),r=n(28453);const l={},t="Distributed Systems: The Complete Guide",a={id:"Backend System Design/Distributed Systems: The Complete Guide",title:"Distributed Systems: The Complete Guide",description:"1. What is a Distributed System?",source:"@site/docs/Backend System Design/Distributed Systems: The Complete Guide.mdx",sourceDirName:"Backend System Design",slug:"/Backend System Design/Distributed Systems: The Complete Guide",permalink:"/docs/Backend System Design/Distributed Systems: The Complete Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Backend System Design/Distributed Systems: The Complete Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Database Systems Comparison",permalink:"/docs/Backend System Design/Database Systems Comparison"},next:{title:"Instagram System Design",permalink:"/docs/Backend System Design/Instagram System Design"}},c={},d=[{value:"1. What is a Distributed System?",id:"1-what-is-a-distributed-system",level:2},{value:"Examples",id:"examples",level:3},{value:"2. Why Distributed Systems?",id:"2-why-distributed-systems",level:2},{value:"3. Key Characteristics",id:"3-key-characteristics",level:2},{value:"4. Challenges in Distributed Systems",id:"4-challenges-in-distributed-systems",level:2},{value:"5. Core Concepts",id:"5-core-concepts",level:2},{value:"CAP Theorem",id:"cap-theorem",level:3},{value:"Examples:",id:"examples-1",level:4},{value:"Data Replication",id:"data-replication",level:3},{value:"Consensus",id:"consensus",level:3},{value:"Time &amp; Ordering",id:"time--ordering",level:3},{value:"Fault Tolerance",id:"fault-tolerance",level:3},{value:"6. Types of Distributed Systems",id:"6-types-of-distributed-systems",level:2},{value:"7. Popular Architectures",id:"7-popular-architectures",level:2},{value:"8. Design Principles",id:"8-design-principles",level:2},{value:"9. Real-World Systems",id:"9-real-world-systems",level:2},{value:"10. Distributed System in Practice",id:"10-distributed-system-in-practice",level:2},{value:"Example: Loading your Instagram feed",id:"example-loading-your-instagram-feed",level:3},{value:"11. Learning Roadmap",id:"11-learning-roadmap",level:2},{value:"Foundations",id:"foundations",level:3},{value:"Core Distributed Concepts",id:"core-distributed-concepts",level:3},{value:"Systems &amp; Tools",id:"systems--tools",level:3},{value:"Practice Design",id:"practice-design",level:3},{value:"12. Interview Tips",id:"12-interview-tips",level:2},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Core Fault Tolerance Strategies",id:"core-fault-tolerance-strategies",level:2},{value:"1. Redundancy",id:"1-redundancy",level:3},{value:"2. Replication",id:"2-replication",level:3},{value:"3. Failover &amp; Leader Election",id:"3-failover--leader-election",level:3},{value:"4. Retry, Timeout &amp; Backoff",id:"4-retry-timeout--backoff",level:3},{value:"5. Idempotency",id:"5-idempotency",level:3},{value:"6. Quorum &amp; Voting",id:"6-quorum--voting",level:3},{value:"7. Consensus Protocols",id:"7-consensus-protocols",level:3},{value:"8. Graceful Degradation",id:"8-graceful-degradation",level:3},{value:"9. Circuit Breakers",id:"9-circuit-breakers",level:3},{value:"10. Checkpointing &amp; Rollback",id:"10-checkpointing--rollback",level:3},{value:"11. Chaos Engineering (Proactive Strategy)",id:"11-chaos-engineering-proactive-strategy",level:3},{value:"Fault Tolerance Strategy Summary",id:"fault-tolerance-strategy-summary",level:2},{value:"1. Web Applications",id:"1-web-applications",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies",level:3},{value:"2. Databases",id:"2-databases",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies-1",level:3},{value:"3. Messaging Systems",id:"3-messaging-systems",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies-2",level:3},{value:"4. Microservices",id:"4-microservices",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies-3",level:3},{value:"5. Storage Systems",id:"5-storage-systems",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies-4",level:3},{value:"6. Global Applications",id:"6-global-applications",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies-5",level:3},{value:"7. Fault Injection &amp; Testing",id:"7-fault-injection--testing",level:2},{value:"Failure Scenarios &amp; Strategies",id:"failure-scenarios--strategies-6",level:3},{value:"Interview Answer Template",id:"interview-answer-template",level:2},{value:"Mini Example: WhatsApp Message Delivery",id:"mini-example-whatsapp-message-delivery",level:2},{value:"Answer Outline:",id:"answer-outline",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2}];function o(e){const s={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"distributed-systems-the-complete-guide",children:"Distributed Systems: The Complete Guide"})}),"\n",(0,i.jsx)(s.h2,{id:"1-what-is-a-distributed-system",children:"1. What is a Distributed System?"}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.strong,{children:"distributed system"})," is a collection of independent computers (nodes/servers) that appear to the user as a single system. These nodes communicate via a network and work together to achieve a common goal."]}),"\n",(0,i.jsx)(s.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Google Search"})," \u2192 billions of queries handled by thousands of servers globally"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Netflix"})," \u2192 streaming movies from servers close to you (CDNs)"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"2-why-distributed-systems",children:"2. Why Distributed Systems?"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Scalability"})," \u2192 handle millions of users by adding servers"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Fault Tolerance"})," \u2192 if one server fails, the system keeps running"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Low Latency"})," \u2192 bring services closer to users (e.g., CDNs)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Cost Efficiency"})," \u2192 commodity hardware instead of giant supercomputers"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"3-key-characteristics",children:"3. Key Characteristics"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Transparency"}),": Users don't know if data is on one machine or many"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Concurrency"}),": Many users/tasks run simultaneously"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Fault tolerance"}),": Survives machine/network failures"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Scalability"}),": Can grow horizontally by adding more machines"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"4-challenges-in-distributed-systems",children:"4. Challenges in Distributed Systems"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Network latency & partitioning (messages may be delayed, dropped, or duplicated)"}),"\n",(0,i.jsx)(s.li,{children:"Consistency across replicas (everyone should see the same data)"}),"\n",(0,i.jsx)(s.li,{children:"Fault tolerance (what if a server crashes during a transaction?)"}),"\n",(0,i.jsx)(s.li,{children:"Coordination between nodes"}),"\n",(0,i.jsx)(s.li,{children:"Security (data traveling across networks)"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"5-core-concepts",children:"5. Core Concepts"}),"\n",(0,i.jsx)(s.h3,{id:"cap-theorem",children:"CAP Theorem"}),"\n",(0,i.jsxs)(s.p,{children:["Any distributed system can only guarantee ",(0,i.jsx)(s.strong,{children:"two out of three"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consistency"})," \u2192 every user sees the same data"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Availability"})," \u2192 system always responds"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Partition tolerance"})," \u2192 works even if network splits"]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"examples-1",children:"Examples:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"CP (Consistency + Partition Tolerance)"})," \u2192 MongoDB, HBase"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"AP (Availability + Partition Tolerance)"})," \u2192 DynamoDB, Cassandra"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"data-replication",children:"Data Replication"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Master-Slave (Primary-Replica)"}),": one node writes, others read"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Multi-Master"}),": multiple nodes can write (more complex conflict resolution)"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"consensus",children:"Consensus"}),"\n",(0,i.jsx)(s.p,{children:"How do nodes agree on a value despite failures?"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Paxos"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Raft"})}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"ZAB"})," (used in ZooKeeper)"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"time--ordering",children:"Time & Ordering"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Clock skew"})," \u2192 different servers have different times"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Lamport Timestamps"})," & ",(0,i.jsx)(s.strong,{children:"Vector Clocks"})," help order events without perfect clocks"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"fault-tolerance",children:"Fault Tolerance"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Replication"})," \u2192 multiple copies of data"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Leader election"})," \u2192 pick a new leader if current one fails"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Retries & Timeouts"})," \u2192 clients retry requests"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"6-types-of-distributed-systems",children:"6. Types of Distributed Systems"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Distributed Databases"})," (Cassandra, MongoDB, DynamoDB)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Distributed File Systems"})," (HDFS, Google File System)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Distributed Messaging"})," (Kafka, RabbitMQ, Pulsar)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Microservices"})," (Netflix, Uber)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Peer-to-Peer"})," (BitTorrent, Blockchain)"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"7-popular-architectures",children:"7. Popular Architectures"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Client-Server"})," \u2192 classic model (browser \u2194 server)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Peer-to-Peer"})," \u2192 no central authority (BitTorrent)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Microservices"})," \u2192 services talk via APIs"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Event-driven"})," \u2192 Kafka-based pipelines"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"8-design-principles",children:"8. Design Principles"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Idempotency"})," \u2192 retrying an operation should not break things"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Loose coupling"})," \u2192 components should be independent"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Resiliency patterns"}),": Circuit breaker, Retry, Bulkhead, Fail-fast"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Eventual Consistency"})," \u2192 common in AP systems"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"9-real-world-systems",children:"9. Real-World Systems"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Google Spanner"})," \u2192 globally consistent DB"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Amazon DynamoDB"})," \u2192 highly available NoSQL"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Apache Kafka"})," \u2192 distributed event streaming"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Hadoop HDFS"})," \u2192 distributed storage for big data"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"10-distributed-system-in-practice",children:"10. Distributed System in Practice"}),"\n",(0,i.jsx)(s.h3,{id:"example-loading-your-instagram-feed",children:"Example: Loading your Instagram feed"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Request goes to ",(0,i.jsx)(s.strong,{children:"load balancer"})]}),"\n",(0,i.jsxs)(s.li,{children:["Forwarded to nearest ",(0,i.jsx)(s.strong,{children:"application server"})]}),"\n",(0,i.jsxs)(s.li,{children:["Posts fetched from ",(0,i.jsx)(s.strong,{children:"distributed database"})," (replicas for availability)"]}),"\n",(0,i.jsxs)(s.li,{children:["Images served from ",(0,i.jsx)(s.strong,{children:"CDN"})," (Content Delivery Network)"]}),"\n",(0,i.jsxs)(s.li,{children:["Notifications handled by ",(0,i.jsx)(s.strong,{children:"message queues"})]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"11-learning-roadmap",children:"11. Learning Roadmap"}),"\n",(0,i.jsx)(s.h3,{id:"foundations",children:"Foundations"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Networking basics (TCP, UDP, HTTP, RPC, gRPC)"}),"\n",(0,i.jsx)(s.li,{children:"OS concepts (threads, processes, concurrency)"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"core-distributed-concepts",children:"Core Distributed Concepts"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CAP theorem, Consensus, Leader election"}),"\n",(0,i.jsx)(s.li,{children:"Fault tolerance, Replication, Eventual consistency"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"systems--tools",children:"Systems & Tools"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Messaging"}),": Kafka, ZooKeeper, Redis Cluster"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Databases"}),": Cassandra, DynamoDB, MongoDB"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"practice-design",children:"Practice Design"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Design a URL shortener"}),"\n",(0,i.jsx)(s.li,{children:"Design a chat app (WhatsApp)"}),"\n",(0,i.jsx)(s.li,{children:"Design Netflix / YouTube"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"12-interview-tips",children:"12. Interview Tips"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Always ask about ",(0,i.jsx)(s.strong,{children:"scale"})," (users, requests/sec, data size)"]}),"\n",(0,i.jsxs)(s.li,{children:["Understand ",(0,i.jsx)(s.strong,{children:"trade-offs"}),": Consistency vs Availability"]}),"\n",(0,i.jsxs)(s.li,{children:["Know ",(0,i.jsx)(s.strong,{children:"fault tolerance strategies"})]}),"\n",(0,i.jsxs)(s.li,{children:["Be ready to ",(0,i.jsx)(s.strong,{children:"draw diagrams"})," (replication, sharding)"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Concept"}),(0,i.jsx)(s.th,{children:"Description"}),(0,i.jsx)(s.th,{children:"Examples"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"CAP Theorem"})}),(0,i.jsx)(s.td,{children:"Choose 2: Consistency, Availability, Partition Tolerance"}),(0,i.jsx)(s.td,{children:"CP: MongoDB, AP: Cassandra"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Consensus"})}),(0,i.jsx)(s.td,{children:"Algorithm for nodes to agree"}),(0,i.jsx)(s.td,{children:"Paxos, Raft, ZAB"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Replication"})}),(0,i.jsx)(s.td,{children:"Multiple copies of data"}),(0,i.jsx)(s.td,{children:"Master-Slave, Multi-Master"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Fault Tolerance"})}),(0,i.jsx)(s.td,{children:"System survives failures"}),(0,i.jsx)(s.td,{children:"Leader election, Retries"})]})]})]}),"\n",(0,i.jsx)(s.h1,{id:"fault-tolerance-strategies-in-distributed-systems",children:"Fault Tolerance Strategies in Distributed Systems"}),"\n",(0,i.jsx)(s.h2,{id:"core-fault-tolerance-strategies",children:"Core Fault Tolerance Strategies"}),"\n",(0,i.jsx)(s.h3,{id:"1-redundancy",children:"1. Redundancy"}),"\n",(0,i.jsx)(s.p,{children:"Have extra components so if one fails, another takes over."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Hardware redundancy"})," \u2192 multiple servers, disks, power supplies"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Software redundancy"})," \u2192 replicas of services or databases"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Examples:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Netflix keeps multiple server copies of the same video file"}),"\n",(0,i.jsx)(s.li,{children:"RAID for disks (mirroring, striping with parity)"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"2-replication",children:"2. Replication"}),"\n",(0,i.jsx)(s.p,{children:"Store data in multiple places to survive failures."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Active replication"}),": All replicas serve requests simultaneously"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Passive replication"}),": One leader handles requests, others stand by"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Examples:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Primary-Replica DB setup"}),"\n",(0,i.jsx)(s.li,{children:"Kafka keeps multiple copies of logs across brokers"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"3-failover--leader-election",children:"3. Failover & Leader Election"}),"\n",(0,i.jsx)(s.p,{children:"Automatically switch to a backup if the main service fails."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Static failover"})," \u2192 pre-defined backup"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Dynamic failover"})," \u2192 system elects a new leader"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Tools:"})," ZooKeeper, etcd, Consul"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"If a Kafka broker (leader) dies, ZooKeeper elects a new leader for the partition"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"4-retry-timeout--backoff",children:"4. Retry, Timeout & Backoff"}),"\n",(0,i.jsx)(s.p,{children:"Handle temporary failures gracefully."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Retry"})," the request after failure"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Timeouts"})," prevent waiting forever"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Exponential backoff"})," \u2192 retry with increasing delays"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"HTTP client retries API calls with exponential backoff"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"5-idempotency",children:"5. Idempotency"}),"\n",(0,i.jsx)(s.p,{children:"An operation can be retried without unintended side effects."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Payment API: ",(0,i.jsx)(s.code,{children:"POST /charge"})," should not double-charge if retried"]}),"\n",(0,i.jsxs)(s.li,{children:["Instead, use an ",(0,i.jsx)(s.strong,{children:"idempotency key"})]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"6-quorum--voting",children:"6. Quorum & Voting"}),"\n",(0,i.jsx)(s.p,{children:"Require agreement from a majority of replicas before committing."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Read/Write Quorums"})," ensure data consistency even if some nodes fail"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Cassandra/DynamoDB use quorum reads/writes (",(0,i.jsx)(s.code,{children:"R + W > N"}),")"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"7-consensus-protocols",children:"7. Consensus Protocols"}),"\n",(0,i.jsx)(s.p,{children:"Nodes agree on a value even in presence of failures."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.strong,{children:"Paxos, Raft, Viewstamped Replication"})}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Raft ensures replicated state machines stay consistent across failures"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"8-graceful-degradation",children:"8. Graceful Degradation"}),"\n",(0,i.jsx)(s.p,{children:"The system continues to operate in a limited mode."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Netflix disables personalized recommendations if the ML service is down, but streaming still works"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"9-circuit-breakers",children:"9. Circuit Breakers"}),"\n",(0,i.jsx)(s.p,{children:"Stop calling a failing service until it recovers."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Prevents cascading failures"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'In microservices, if the payment service is down, the order service returns "Payment unavailable" instead of hanging'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"10-checkpointing--rollback",children:"10. Checkpointing & Rollback"}),"\n",(0,i.jsx)(s.p,{children:"Save progress periodically so you can restart from a safe point."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Hadoop/Spark jobs checkpoint data so if a node fails, they restart from the last checkpoint"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"11-chaos-engineering-proactive-strategy",children:"11. Chaos Engineering (Proactive Strategy)"}),"\n",(0,i.jsx)(s.p,{children:"Intentionally break things to ensure fault tolerance works."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example:"})," Netflix's ",(0,i.jsx)(s.strong,{children:"Chaos Monkey"})," randomly kills servers to test resilience"]}),"\n",(0,i.jsx)(s.h2,{id:"fault-tolerance-strategy-summary",children:"Fault Tolerance Strategy Summary"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Strategy"}),(0,i.jsx)(s.th,{children:"Goal"}),(0,i.jsx)(s.th,{children:"Example in Real Systems"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Redundancy"})}),(0,i.jsx)(s.td,{children:"Backup hardware/software"}),(0,i.jsx)(s.td,{children:"RAID, multi-server setups"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Replication"})}),(0,i.jsx)(s.td,{children:"Extra copies of data/services"}),(0,i.jsx)(s.td,{children:"Kafka, MongoDB replicas"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Failover & Leader Election"})}),(0,i.jsx)(s.td,{children:"Auto-switch to backup"}),(0,i.jsx)(s.td,{children:"ZooKeeper, Kubernetes HA"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Retry/Timeout/Backoff"})}),(0,i.jsx)(s.td,{children:"Survive temporary errors"}),(0,i.jsx)(s.td,{children:"HTTP API retries"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Idempotency"})}),(0,i.jsx)(s.td,{children:"Safe retries"}),(0,i.jsx)(s.td,{children:"Payment APIs"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Quorum & Voting"})}),(0,i.jsx)(s.td,{children:"Majority agreement"}),(0,i.jsx)(s.td,{children:"Cassandra, DynamoDB"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Consensus"})}),(0,i.jsx)(s.td,{children:"Agreement in failures"}),(0,i.jsx)(s.td,{children:"Raft, Paxos"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Graceful Degradation"})}),(0,i.jsx)(s.td,{children:"Partial functionality"}),(0,i.jsx)(s.td,{children:"Netflix recommendations"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Circuit Breakers"})}),(0,i.jsx)(s.td,{children:"Prevent cascading failures"}),(0,i.jsx)(s.td,{children:"Hystrix, Resilience4j"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Checkpointing"})}),(0,i.jsx)(s.td,{children:"Recover progress"}),(0,i.jsx)(s.td,{children:"Hadoop, Spark"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Chaos Engineering"})}),(0,i.jsx)(s.td,{children:"Test resilience proactively"}),(0,i.jsx)(s.td,{children:"Netflix Chaos Monkey"})]})]})]}),"\n",(0,i.jsx)(s.h1,{id:"fault-tolerance-playbook-for-system-design-interviews",children:"Fault Tolerance Playbook (For System Design Interviews)"}),"\n",(0,i.jsx)(s.h2,{id:"1-web-applications",children:"1. Web Applications"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Designing Instagram/WhatsApp"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Web server crashes"})," \u2192 Load balancer routes requests to another server"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Too much traffic"})," \u2192 Auto-scaling adds new servers"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Session loss"})," \u2192 Store sessions in Redis (replicated)"]}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," Always mention ",(0,i.jsx)(s.strong,{children:"load balancers + auto-scaling + caching"})," when designing user-facing apps."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"2-databases",children:"2. Databases"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Design Amazon DynamoDB / Cassandra"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies-1",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Primary DB down"})," \u2192 Replica takes over (failover)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Data center loss"})," \u2192 Multi-region replication"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Conflicting writes"})," \u2192 Use ",(0,i.jsx)(s.strong,{children:"quorums"})," (",(0,i.jsx)(s.code,{children:"R+W > N"}),") or vector clocks"]}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," Explain ",(0,i.jsx)(s.strong,{children:"Replication Factor (RF)"})," and ",(0,i.jsx)(s.strong,{children:"quorum reads/writes"})," when asked about fault tolerance in databases."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"3-messaging-systems",children:"3. Messaging Systems"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Design Kafka / RabbitMQ"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies-2",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Broker fails"})," \u2192 Partitions have replicas, new leader is elected"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Consumer crashes"})," \u2192 Offsets stored in Kafka, consumer restarts from last committed offset"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Producer retries"})," \u2192 With idempotency enabled, no duplicate messages"]}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," Always highlight ",(0,i.jsx)(s.strong,{children:"leader election + replication + offset recovery"})," in messaging systems."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"4-microservices",children:"4. Microservices"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Design Netflix / Uber backend"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies-3",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"One service fails"})," \u2192 Circuit breaker prevents cascading failure"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Network latency"})," \u2192 Retry with exponential backoff"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"High load"})," \u2192 Queue requests (message broker)"]}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," Use ",(0,i.jsx)(s.strong,{children:"graceful degradation"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"If recommendation service fails, just show trending movies"}),"\n",(0,i.jsx)(s.li,{children:'If payment service fails, allow users to save orders but mark them as "unpaid"'}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"5-storage-systems",children:"5. Storage Systems"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Design Google Drive / Dropbox"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies-4",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"File server dies"})," \u2192 Data replicated across multiple servers (erasure coding / 3x replication)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"User upload interrupted"})," \u2192 Resume from checkpoint (multipart uploads)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Data corruption"})," \u2192 Checksums detect & repair from replicas"]}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," Talk about ",(0,i.jsx)(s.strong,{children:"replication across availability zones (AZs)"})," and ",(0,i.jsx)(s.strong,{children:"checksums for data integrity"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"6-global-applications",children:"6. Global Applications"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Design WhatsApp / Netflix worldwide"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies-5",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Region goes offline"})," \u2192 Traffic routed to another region via DNS load balancing"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Cross-region latency"})," \u2192 CDNs cache content near users"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"User consistency issues"})," \u2192 Eventual consistency with conflict resolution"]}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," If interviewer asks ",(0,i.jsx)(s.em,{children:'"What if an entire data center goes down?"'}),", answer:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Multi-region replication (active-active or active-passive)"}),"\n",(0,i.jsx)(s.li,{children:"Global load balancers (Anycast DNS, GSLB)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"7-fault-injection--testing",children:"7. Fault Injection & Testing"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Example: Netflix Chaos Monkey"})}),"\n",(0,i.jsx)(s.h3,{id:"failure-scenarios--strategies-6",children:"Failure Scenarios & Strategies"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Randomly kill servers \u2192 System should keep running"}),"\n",(0,i.jsx)(s.li,{children:"Inject latency \u2192 Ensure retries & backoff work"}),"\n",(0,i.jsx)(s.li,{children:"Shut down a region \u2192 Verify failover"}),"\n"]}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Interview Tip:"})," Mention ",(0,i.jsx)(s.strong,{children:"Chaos Engineering"})," as a proactive fault tolerance technique \u2014 it shows senior-level thinking."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"interview-answer-template",children:"Interview Answer Template"}),"\n",(0,i.jsxs)(s.p,{children:["When asked: ",(0,i.jsx)(s.em,{children:'"How is your system fault tolerant?"'})," \u2014 reply in this structure:"]}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Component Redundancy"}),": multiple servers, load balancers"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Data Replication"}),": across machines & regions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Automatic Failover"}),": leader election / replica promotion"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Retries & Idempotency"}),": safe recovery from transient failures"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Graceful Degradation"}),": partial functionality if a service is down"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Monitoring & Testing"}),": health checks, chaos testing"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"mini-example-whatsapp-message-delivery",children:"Mini Example: WhatsApp Message Delivery"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Question:"})," ",(0,i.jsx)(s.em,{children:'"How does WhatsApp ensure a message isn\'t lost if a server fails?"'})]}),"\n",(0,i.jsx)(s.h3,{id:"answer-outline",children:"Answer Outline:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Message stored in ",(0,i.jsx)(s.strong,{children:"multiple replicas"})," (Kafka / database)"]}),"\n",(0,i.jsxs)(s.li,{children:["Producer uses ",(0,i.jsx)(s.strong,{children:"acknowledgments (acks=all)"})," before confirming send"]}),"\n",(0,i.jsxs)(s.li,{children:["If consumer (receiver's phone) is offline, message stored in ",(0,i.jsx)(s.strong,{children:"queue"})," until delivery"]}),"\n",(0,i.jsxs)(s.li,{children:["If primary server dies, ",(0,i.jsx)(s.strong,{children:"replica takes over (leader election)"})]}),"\n",(0,i.jsx)(s.li,{children:"If all replicas die (rare), client retries (idempotent message ID)"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Distributed systems are about trade-offs."})," You can't have perfect consistency, availability, and partition tolerance all at once. Choose wisely based on your use case."]}),"\n"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Start simple"})," \u2192 Add distribution when you need it"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Plan for failure"})," \u2192 Everything will fail eventually"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Monitor everything"})," \u2192 Observability is crucial"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Test failure scenarios"})," \u2192 Chaos engineering"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var i=n(96540);const r={},l=i.createContext(r);function t(e){const s=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:s},e.children)}}}]);