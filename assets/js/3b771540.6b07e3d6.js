"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[60],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},85266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=t(74848),r=t(28453);const o={title:"DFS & BFS on Graphs",description:"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs."},i=void 0,a={id:"DSA/DSA with JavaScript/DFSBFSGraph",title:"DFS & BFS on Graphs",description:"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs.",source:"@site/docs/DSA/DSA with JavaScript/DFSBFSGraph.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/DFSBFSGraph",permalink:"/docs/DSA/DSA with JavaScript/DFSBFSGraph",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/DFSBFSGraph.mdx",tags:[],version:"current",frontMatter:{title:"DFS & BFS on Graphs",description:"A comprehensive guide to implementing Depth-First Search (DFS) & BFS (Breadth-First Search) on graphs."},sidebar:"tutorialSidebar",previous:{title:"Cyclic Sort Algorithm",permalink:"/docs/DSA/DSA with JavaScript/CyclicSort"},next:{title:"Depth-First Search (DFS) for Trees",permalink:"/docs/DSA/DSA with JavaScript/DFSTree"}},h={},d=[{value:"Depth-First Search (DFS) on Graphs",id:"depth-first-search-dfs-on-graphs",level:2},{value:"How DFS Works",id:"how-dfs-works",level:2},{value:"Pseudocode",id:"pseudocode",level:3},{value:"Recusrive DFS",id:"recusrive-dfs",level:3},{value:"Iterative DFS",id:"iterative-dfs",level:3},{value:"How BFS Works",id:"how-bfs-works",level:2},{value:"Pseudocode",id:"pseudocode-1",level:3},{value:"BFS",id:"bfs",level:3},{value:"Shortest Path Using BFS",id:"shortest-path-using-bfs",level:3},{value:"Shortest Path Using BFS for a 2D Grid",id:"shortest-path-using-bfs-for-a-2d-grid",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"depth-first-search-dfs-on-graphs",children:"Depth-First Search (DFS) on Graphs"}),"\n",(0,s.jsx)(n.p,{children:"Depth-First Search (DFS) is a fundamental algorithm for traversing or searching through graph data structures. The algorithm starts at a given node and explores as far as possible along each branch before backtracking."}),"\n",(0,s.jsx)(n.h2,{id:"how-dfs-works",children:"How DFS Works"}),"\n",(0,s.jsx)(n.p,{children:"DFS can be implemented using either a recursive approach or an iterative approach with a stack. The key idea is to start from a source node, visit its adjacent nodes, and continue this process until all nodes reachable from the source are visited."}),"\n",(0,s.jsx)(n.h3,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,s.jsx)(n.p,{children:"Here's the pseudocode for a recursive DFS on an undirected graph:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Javascript",children:"const graph = {\n  A: ['B', 'C'],\n  B: ['A', 'D', 'E'],\n  C: ['A', 'F'],\n  D: ['B'],\n  E: ['B'],\n  F: ['C'],\n  G: ['L'],\n  M: ['S']\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"recusrive-dfs",children:"Recusrive DFS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Javascript",children:"const dfs = (graph, startNode, visited = new Set()) => {\n  visited.add(startNode);\n  console.log(startNode);\n\n  for (const neighbour of graph[startNode] || []) {\n    if (!visited.has(neighbour)) {\n      dfs(graph, neighbour, visited);\n    }\n  }\n};\n\nconst visited = new Set();\n\n// To handle disconnected components, loop through all nodes\nfor (const node of Object.keys(graph)) {\n  if (!visited.has(node)) {\n    dfs(graph, node, visited);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"iterative-dfs",children:"Iterative DFS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Javascript",children:"const dfsIterative = (graph, start, visited = new Set()) => {\n  const stack = [start]\n  visited.add(start)\n\n  while (stack.length) {\n    const current = stack.pop()\n    console.log(current);\n    for (const neighbour of graph[current]) {\n      if (!visited.has(neighbour)) {\n        stack.push(neighbour)\n        visited.add(neighbour)\n      }\n    }\n\n  }\n}\n\n// To handle disconnected components, loop through all nodes\nconst allNodes = new Set(Object.keys(graph));\nconst visited = new Set();\n\nfor (const node of allNodes) {\n  if (!visited.has(node)) {\n    dfsIterative(graph, node, visited);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h1,{id:"breadth-first-search-bfs-on-graphs",children:"Breadth-First Search (BFS) on Graphs"}),"\n",(0,s.jsx)(n.p,{children:"Breadth-First Search (BFS) is an algorithm used for traversing or searching through graph or tree data structures. The algorithm starts at a given node and explores all of its neighbors at the present depth before moving on to nodes at the next depth level."}),"\n",(0,s.jsx)(n.h2,{id:"how-bfs-works",children:"How BFS Works"}),"\n",(0,s.jsx)(n.p,{children:"BFS is typically implemented using a queue data structure. It starts from a source node and explores all of its neighbors first before moving on to the next layer of nodes. This ensures that nodes are visited in the order of their distance from the source node."}),"\n",(0,s.jsx)(n.h3,{id:"pseudocode-1",children:"Pseudocode"}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s the pseudocode for BFS on an undirected graph:"}),"\n",(0,s.jsx)(n.h3,{id:"bfs",children:"BFS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Javascript",children:"const bfs = (graph, start, visited = new Set()) => {\n  const queue = [start]\n  visited.add(start)\n\n  while (queue.length) {\n    const current = queue.shift()\n    console.log(current);\n    for (const neighbour of graph[current]) {\n      if (!visited.has(neighbour)) {\n        queue.push(neighbour)\n        visited.add(neighbour)\n      }\n    }\n  }\n}\n\n// To handle disconnected components, loop through all nodes\nconst allNodes = new Set(Object.keys(graph));\nconst visited = new Set();\n\nfor (const node of allNodes) {\n  if (!visited.has(node)) {\n    bfs(graph, node, visited);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"shortest-path-using-bfs",children:"Shortest Path Using BFS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"const bfsShortestPath = (graph, start, end) => {\n  const queue = [[start]];\n  const visited = new Set();\n\n  while (queue.length > 0) {\n    const path = queue.shift(); // Get the current path\n    const node = path[path.length - 1]; // Get the last node in the path\n\n    if (node === end) {\n      return path; // Return the path if we've reached the end\n    }\n\n    if (!visited.has(node)) {\n      visited.add(node); // Mark the node as visited\n\n      for (const neighbor of graph[node] ?? []) {\n        // Create a new path to the neighbor and enqueue it\n        const newPath = [...path, neighbor];\n        queue.push(newPath);\n      }\n    }\n  }\n\n  return []; // Return an empty array if there's no path to the end\n}\n\n// Example usage with disconnected vertices:\nconst graph = {\n  A: ['B', 'C'],\n  B: ['A', 'D', 'E'],\n  C: ['A', 'F'],\n  D: ['B'],\n  E: ['B', 'F'],\n  F: ['C', 'E'],\n  G: [], // Disconnected vertex G\n};\n\nconst shortestPath1 = bfsShortestPath(graph, 'A', 'F');\nconsole.log(shortestPath1); // Output: ['A', 'C', 'F']\n\nconst shortestPath2 = bfsShortestPath(graph, 'A', 'G');\nconsole.log(shortestPath2); // Output: [] (no path to G)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"shortest-path-using-bfs-for-a-2d-grid",children:"Shortest Path Using BFS for a 2D Grid"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-JavaScript",children:"const bfsShortestPath = (grid, start, end) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]]; // Down, Right, Up, Left\n  const queue = [[...start, 0]]; // [row, col, distance]\n  const visited = new Set(); // To track visited cells\n  visited.add(start.toString()); // Mark the start cell as visited\n\n  while (queue.length > 0) {\n    const [row, col, distance] = queue.shift(); // Dequeue\n\n    // Check if we reached the end\n    if (row === end[0] && col === end[1]) {\n      return distance; // Return the distance (shortest path length)\n    }\n\n    // Explore the neighbors\n    for (const [dRow, dCol] of directions) {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n\n      // Check if the new position is within bounds and not visited\n      if (\n        newRow >= 0 &&\n        newRow < rows &&\n        newCol >= 0 &&\n        newCol < cols &&\n        grid[newRow][newCol] === 0 && // Assuming 0 is a valid cell\n        !visited.has([newRow, newCol].toString())\n      ) {\n        visited.add([newRow, newCol].toString()); // Mark as visited\n        queue.push([newRow, newCol, distance + 1]); // Enqueue with increased distance\n      }\n    }\n  }\n\n  return -1; // Return -1 if there's no path\n}\n\n// Example usage:\nconst grid = [\n  [0, 0, 0, 1],\n  [0, 1, 0, 0],\n  [0, 0, 0, 0],\n  [1, 0, 1, 0]\n];\n\nconst start = [0, 0]; // Starting position\nconst end = [3, 3];   // Ending position\n\nconst shortestPathLength = bfsShortestPath(grid, start, end);\nconsole.log(shortestPathLength); // Should output: 6\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);