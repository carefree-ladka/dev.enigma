"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3966],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>s});var r=i(96540);const l={},d=r.createContext(l);function t(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(d.Provider,{value:n},e.children)}},63887:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});var r=i(74848),l=i(28453);const d={},t="Spring Boot SQL Cheat Sheet",s={id:"Java/Spring Boot SQL Cheat Sheet",title:"Spring Boot SQL Cheat Sheet",description:"1. Common SQL Data Types & Java Mapping",source:"@site/docs/Java/Spring Boot SQL Cheat Sheet.mdx",sourceDirName:"Java",slug:"/Java/Spring Boot SQL Cheat Sheet",permalink:"/dev.enigma/docs/Java/Spring Boot SQL Cheat Sheet",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Spring Boot SQL Cheat Sheet.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Spring Boot Backend Interview Roadmap",permalink:"/dev.enigma/docs/Java/Spring Boot Backend Interview Roadmap"},next:{title:"Spring Boot Beginner Guide",permalink:"/dev.enigma/docs/Java/Spring Boot"}},a={},c=[{value:"1. Common SQL Data Types &amp; Java Mapping",id:"1-common-sql-data-types--java-mapping",level:2},{value:"2. Common Constraints",id:"2-common-constraints",level:2},{value:"3. CRUD SQL Queries",id:"3-crud-sql-queries",level:2},{value:"SELECT \u2013 Read",id:"select--read",level:3},{value:"INSERT \u2013 Create",id:"insert--create",level:3},{value:"UPDATE \u2013 Update",id:"update--update",level:3},{value:"DELETE \u2013 Delete",id:"delete--delete",level:3},{value:"4. Joins",id:"4-joins",level:2},{value:"Complex Join Examples",id:"complex-join-examples",level:3},{value:"5. Aggregation Functions",id:"5-aggregation-functions",level:2},{value:"6. Useful SQL Clauses &amp; Functions",id:"6-useful-sql-clauses--functions",level:2},{value:"7. SQL \u2192 Spring Boot / JPA Mapping",id:"7-sql--spring-boot--jpa-mapping",level:2},{value:"8. Spring Boot JPA Examples",id:"8-spring-boot-jpa-examples",level:2},{value:"Entity Definition",id:"entity-definition",level:3},{value:"Repository Interface",id:"repository-interface",level:3},{value:"Service Layer",id:"service-layer",level:3},{value:"9. Advanced JPA Features",id:"9-advanced-jpa-features",level:2},{value:"Specifications (Dynamic Queries)",id:"specifications-dynamic-queries",level:3},{value:"Projections",id:"projections",level:3},{value:"10. Common Query Patterns",id:"10-common-query-patterns",level:2},{value:"Pagination and Sorting",id:"pagination-and-sorting",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"11. Performance Tips",id:"11-performance-tips",level:2},{value:"Database Indexing",id:"database-indexing",level:3},{value:"JPA Performance",id:"jpa-performance",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"spring-boot-sql-cheat-sheet",children:"Spring Boot SQL Cheat Sheet"})}),"\n",(0,r.jsx)(n.h2,{id:"1-common-sql-data-types--java-mapping",children:"1. Common SQL Data Types & Java Mapping"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"SQL Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Java Type"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"INT"})," / ",(0,r.jsx)(n.code,{children:"INTEGER"})]}),(0,r.jsx)(n.td,{children:"Whole numbers"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"int"})," / ",(0,r.jsx)(n.code,{children:"Integer"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"BIGINT"})}),(0,r.jsx)(n.td,{children:"Large integers"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"long"})," / ",(0,r.jsx)(n.code,{children:"Long"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"DECIMAL(p,s)"})}),(0,r.jsx)(n.td,{children:"Fixed-point numbers"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"BigDecimal"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"FLOAT"})," / ",(0,r.jsx)(n.code,{children:"DOUBLE"})]}),(0,r.jsx)(n.td,{children:"Floating-point numbers"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float"})," / ",(0,r.jsx)(n.code,{children:"double"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CHAR(n)"})}),(0,r.jsx)(n.td,{children:"Fixed-length string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"VARCHAR(n)"})}),(0,r.jsx)(n.td,{children:"Variable-length string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"TEXT"})," / ",(0,r.jsx)(n.code,{children:"CLOB"})]}),(0,r.jsx)(n.td,{children:"Large text"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"DATE"})}),(0,r.jsx)(n.td,{children:"Date only"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LocalDate"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TIME"})}),(0,r.jsx)(n.td,{children:"Time only"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LocalTime"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"TIMESTAMP"})," / ",(0,r.jsx)(n.code,{children:"DATETIME"})]}),(0,r.jsx)(n.td,{children:"Date + time"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LocalDateTime"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"BOOLEAN"})," / ",(0,r.jsx)(n.code,{children:"BIT(1)"})]}),(0,r.jsx)(n.td,{children:"true/false"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Boolean"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"UUID"})}),(0,r.jsx)(n.td,{children:"Unique identifier"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"UUID"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"BLOB"})}),(0,r.jsx)(n.td,{children:"Binary data"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"byte[]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"JSON"})}),(0,r.jsx)(n.td,{children:"JSON data (MySQL/PostgreSQL)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"2-common-constraints",children:"2. Common Constraints"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Constraint"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"SQL Example"}),(0,r.jsx)(n.th,{children:"JPA Annotation"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"PRIMARY KEY"}),(0,r.jsx)(n.td,{children:"Unique identifier"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id BIGINT PRIMARY KEY"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@Id"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FOREIGN KEY"}),(0,r.jsx)(n.td,{children:"Links tables"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"FOREIGN KEY(dept_id) REFERENCES dept(id)"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"@ManyToOne"})," + ",(0,r.jsx)(n.code,{children:"@JoinColumn"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NOT NULL"}),(0,r.jsx)(n.td,{children:"Column cannot be null"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name VARCHAR(50) NOT NULL"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@Column(nullable = false)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"UNIQUE"}),(0,r.jsx)(n.td,{children:"Unique values"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"email VARCHAR(100) UNIQUE"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"@Column(unique = true)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DEFAULT"}),(0,r.jsx)(n.td,{children:"Default value"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"active BOOLEAN DEFAULT TRUE"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"private Boolean active = true;"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CHECK"}),(0,r.jsx)(n.td,{children:"Must satisfy a condition"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CHECK (salary >= 0)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'@Check(constraints = "...")'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"COMPOSITE KEY"}),(0,r.jsx)(n.td,{children:"Primary key using multiple columns"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"PRIMARY KEY(student_id, course_id)"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"@EmbeddedId"})," / ",(0,r.jsx)(n.code,{children:"@IdClass"})]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"3-crud-sql-queries",children:"3. CRUD SQL Queries"}),"\n",(0,r.jsx)(n.h3,{id:"select--read",children:"SELECT \u2013 Read"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Basic selection\nSELECT * FROM employee;\nSELECT name, email FROM employee;\n\n-- With conditions\nSELECT * FROM employee WHERE salary > 5000;\nSELECT * FROM employee WHERE department_id IN (1, 2, 3);\nSELECT * FROM employee WHERE name LIKE 'J%';\nSELECT * FROM employee WHERE salary BETWEEN 4000 AND 6000;\nSELECT * FROM employee WHERE email IS NOT NULL;\n\n-- Ordering and pagination\nSELECT * FROM employee ORDER BY salary DESC;\nSELECT * FROM employee LIMIT 5 OFFSET 0;\nSELECT DISTINCT department_id FROM employee;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"insert--create",children:"INSERT \u2013 Create"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Single record\nINSERT INTO employee (name, email, salary, department_id, active)\nVALUES ('John Doe', 'john@example.com', 5000, 1, TRUE);\n\n-- Multiple records\nINSERT INTO employee (name, email, salary, department_id, active)\nVALUES\n    ('Jane Smith', 'jane@example.com', 5500, 2, TRUE),\n    ('Bob Johnson', 'bob@example.com', 4800, 1, TRUE);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"update--update",children:"UPDATE \u2013 Update"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Update single record\nUPDATE employee\nSET salary = 6000\nWHERE id = 1;\n\n-- Update multiple fields\nUPDATE employee\nSET salary = salary * 1.1, active = TRUE\nWHERE department_id = 2;\n\n-- Conditional update\nUPDATE employee\nSET salary = CASE\n    WHEN department_id = 1 THEN salary * 1.15\n    WHEN department_id = 2 THEN salary * 1.10\n    ELSE salary * 1.05\nEND;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"delete--delete",children:"DELETE \u2013 Delete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Delete single record\nDELETE FROM employee WHERE id = 3;\n\n-- Delete with conditions\nDELETE FROM employee WHERE active = FALSE;\nDELETE FROM employee WHERE salary < 3000;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4-joins",children:"4. Joins"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Join Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"SQL Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"INNER JOIN"})}),(0,r.jsx)(n.td,{children:"Only matching rows in both tables"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SELECT e.name, d.name FROM employee e INNER JOIN department d ON e.department_id = d.id;"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"LEFT JOIN"})}),(0,r.jsx)(n.td,{children:"All rows from left table + matching from right"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SELECT e.name, d.name FROM employee e LEFT JOIN department d ON e.department_id = d.id;"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"RIGHT JOIN"})}),(0,r.jsx)(n.td,{children:"All rows from right table + matching from left"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SELECT e.name, d.name FROM employee e RIGHT JOIN department d ON e.department_id = d.id;"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"FULL OUTER JOIN"})}),(0,r.jsx)(n.td,{children:"All rows from both tables"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SELECT e.name, d.name FROM employee e FULL OUTER JOIN department d ON e.department_id = d.id;"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"complex-join-examples",children:"Complex Join Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Multiple joins\nSELECT e.name, d.name as dept_name, p.title as project_title\nFROM employee e\nINNER JOIN department d ON e.department_id = d.id\nLEFT JOIN project_assignment pa ON e.id = pa.employee_id\nLEFT JOIN project p ON pa.project_id = p.id;\n\n-- Self join\nSELECT e1.name as employee, e2.name as manager\nFROM employee e1\nLEFT JOIN employee e2 ON e1.manager_id = e2.id;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"5-aggregation-functions",children:"5. Aggregation Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Basic aggregations\nSELECT COUNT(*) AS total_employees FROM employee;\nSELECT SUM(salary) AS total_salary FROM employee;\nSELECT AVG(salary) AS avg_salary FROM employee;\nSELECT MIN(salary) AS min_salary FROM employee;\nSELECT MAX(salary) AS max_salary FROM employee;\n\n-- Group by\nSELECT department_id, COUNT(*) AS employee_count\nFROM employee\nGROUP BY department_id;\n\nSELECT department_id, AVG(salary) AS avg_salary\nFROM employee\nGROUP BY department_id\nHAVING AVG(salary) > 5000;\n\n-- Advanced grouping\nSELECT\n    department_id,\n    COUNT(*) as total_employees,\n    AVG(salary) as avg_salary,\n    MIN(salary) as min_salary,\n    MAX(salary) as max_salary\nFROM employee\nGROUP BY department_id\nORDER BY avg_salary DESC;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-useful-sql-clauses--functions",children:"6. Useful SQL Clauses & Functions"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Clause/Function"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"DISTINCT"})}),(0,r.jsx)(n.td,{children:"Remove duplicates"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SELECT DISTINCT department_id FROM employee"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"LIKE"})}),(0,r.jsx)(n.td,{children:"Pattern matching"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"WHERE name LIKE 'J%'"})," (starts with J)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"IN"})}),(0,r.jsx)(n.td,{children:"Multiple values"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WHERE department_id IN (1,2,3)"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"BETWEEN"})}),(0,r.jsx)(n.td,{children:"Range"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WHERE salary BETWEEN 4000 AND 6000"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"IS NULL / IS NOT NULL"})}),(0,r.jsx)(n.td,{children:"Check nullability"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"WHERE manager_id IS NULL"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"COALESCE"})}),(0,r.jsx)(n.td,{children:"Handle nulls"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"SELECT COALESCE(manager_id, 0) FROM employee"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"CASE"})}),(0,r.jsx)(n.td,{children:"Conditional logic"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"CASE WHEN salary > 5000 THEN 'High' ELSE 'Low' END"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"7-sql--spring-boot--jpa-mapping",children:"7. SQL \u2192 Spring Boot / JPA Mapping"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"SQL Operation"}),(0,r.jsx)(n.th,{children:"Spring Data JPA Method"}),(0,r.jsx)(n.th,{children:"JPA Annotation Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"**SELECT ***"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"findAll()"}),", ",(0,r.jsx)(n.code,{children:"findById(id)"})]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"@Repository"})," interface"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"SELECT + WHERE"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"findByName(String name)"})}),(0,r.jsx)(n.td,{children:"Method naming convention"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"INSERT"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"save(entity)"})," (if ID is null)"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"@Entity"})," class"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"UPDATE"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"save(entity)"})," (if ID exists)"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"@Entity"})," class"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"DELETE"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"deleteById(id)"}),", ",(0,r.jsx)(n.code,{children:"delete(entity)"})]}),(0,r.jsx)(n.td,{children:"Repository method"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"JOIN"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"@Query"})," with JPQL"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'@Query("SELECT e FROM Employee e JOIN e.department d")'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Pagination"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Pageable"})," parameter"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"findAll(Pageable pageable)"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"8-spring-boot-jpa-examples",children:"8. Spring Boot JPA Examples"}),"\n",(0,r.jsx)(n.h3,{id:"entity-definition",children:"Entity Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "employee")\npublic class Employee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = "name", nullable = false, length = 100)\n    private String name;\n\n    @Column(name = "email", unique = true, nullable = false)\n    private String email;\n\n    @Column(name = "salary")\n    private BigDecimal salary;\n\n    @ManyToOne\n    @JoinColumn(name = "department_id")\n    private Department department;\n\n    @Column(name = "active")\n    private Boolean active = true;\n\n    @CreationTimestamp\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    private LocalDateTime updatedAt;\n\n    // Constructors, getters, setters\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"repository-interface",children:"Repository Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Repository\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n\n    // Derived query methods\n    List<Employee> findByName(String name);\n    List<Employee> findBySalaryGreaterThan(BigDecimal salary);\n    List<Employee> findByDepartmentId(Long departmentId);\n    List<Employee> findByActiveTrue();\n\n    // Custom JPQL queries\n    @Query("SELECT e FROM Employee e WHERE e.salary > :salary")\n    List<Employee> findBySalaryGreaterThan(@Param("salary") BigDecimal salary);\n\n    @Query("SELECT e FROM Employee e JOIN e.department d WHERE d.name = :deptName")\n    List<Employee> findByDepartmentName(@Param("deptName") String departmentName);\n\n    // Native SQL queries\n    @Query(value = "SELECT * FROM employee WHERE active = 1", nativeQuery = true)\n    List<Employee> findActiveEmployees();\n\n    // Aggregation queries\n    @Query("SELECT COUNT(e) FROM Employee e WHERE e.department.id = :deptId")\n    Long countEmployeesByDepartment(@Param("deptId") Long departmentId);\n\n    // Update queries\n    @Modifying\n    @Query("UPDATE Employee e SET e.salary = e.salary * 1.1 WHERE e.department.id = :deptId")\n    int increaseSalaryByDepartment(@Param("deptId") Long departmentId);\n\n    // Delete queries\n    @Modifying\n    @Query("DELETE FROM Employee e WHERE e.active = false")\n    int deleteInactiveEmployees();\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"service-layer",children:"Service Layer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\n@Transactional\npublic class EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    public List<Employee> getAllEmployees() {\n        return employeeRepository.findAll();\n    }\n\n    public Page<Employee> getEmployees(Pageable pageable) {\n        return employeeRepository.findAll(pageable);\n    }\n\n    public Employee saveEmployee(Employee employee) {\n        return employeeRepository.save(employee);\n    }\n\n    public void deleteEmployee(Long id) {\n        employeeRepository.deleteById(id);\n    }\n\n    @Transactional\n    public void updateEmployeeSalary(Long id, BigDecimal newSalary) {\n        Employee employee = employeeRepository.findById(id)\n            .orElseThrow(() -> new EntityNotFoundException("Employee not found"));\n        employee.setSalary(newSalary);\n        employeeRepository.save(employee);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"9-advanced-jpa-features",children:"9. Advanced JPA Features"}),"\n",(0,r.jsx)(n.h3,{id:"specifications-dynamic-queries",children:"Specifications (Dynamic Queries)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class EmployeeSpecifications {\n\n    public static Specification<Employee> hasName(String name) {\n        return (root, query, criteriaBuilder) ->\n            name == null ? null : criteriaBuilder.like(root.get("name"), "%" + name + "%");\n    }\n\n    public static Specification<Employee> hasSalaryGreaterThan(BigDecimal salary) {\n        return (root, query, criteriaBuilder) ->\n            salary == null ? null : criteriaBuilder.greaterThan(root.get("salary"), salary);\n    }\n\n    public static Specification<Employee> belongsToDepartment(String departmentName) {\n        return (root, query, criteriaBuilder) ->\n            departmentName == null ? null :\n                criteriaBuilder.equal(root.get("department").get("name"), departmentName);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"projections",children:"Projections"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public interface EmployeeProjection {\n    String getName();\n    String getEmail();\n    String getDepartmentName();\n}\n\n// In repository\n@Query("SELECT e.name as name, e.email as email, d.name as departmentName " +\n       "FROM Employee e JOIN e.department d")\nList<EmployeeProjection> findAllEmployeeProjections();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"10-common-query-patterns",children:"10. Common Query Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"pagination-and-sorting",children:"Pagination and Sorting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Controller\n@GetMapping("/employees")\npublic Page<Employee> getEmployees(\n    @RequestParam(defaultValue = "0") int page,\n    @RequestParam(defaultValue = "10") int size,\n    @RequestParam(defaultValue = "id") String sortBy,\n    @RequestParam(defaultValue = "asc") String sortDir\n) {\n    Sort sort = sortDir.equalsIgnoreCase("desc") ?\n        Sort.by(sortBy).descending() :\n        Sort.by(sortBy).ascending();\n\n    Pageable pageable = PageRequest.of(page, size, sort);\n    return employeeService.getEmployees(pageable);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class EmployeeService {\n\n    public Employee getEmployeeById(Long id) {\n        return employeeRepository.findById(id)\n            .orElseThrow(() -> new EntityNotFoundException(\n                "Employee not found with id: " + id));\n    }\n\n    public Employee updateEmployee(Long id, Employee employeeDetails) {\n        Employee employee = getEmployeeById(id);\n        employee.setName(employeeDetails.getName());\n        employee.setEmail(employeeDetails.getEmail());\n        employee.setSalary(employeeDetails.getSalary());\n        return employeeRepository.save(employee);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"11-performance-tips",children:"11. Performance Tips"}),"\n",(0,r.jsx)(n.h3,{id:"database-indexing",children:"Database Indexing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create indexes for frequently queried columns\nCREATE INDEX idx_employee_email ON employee(email);\nCREATE INDEX idx_employee_department ON employee(department_id);\nCREATE INDEX idx_employee_salary ON employee(salary);\n\n-- Composite index for multiple column queries\nCREATE INDEX idx_employee_dept_salary ON employee(department_id, salary);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"jpa-performance",children:"JPA Performance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use @BatchSize for collections\n@OneToMany(mappedBy = "employee")\n@BatchSize(size = 10)\nprivate Set<Project> projects;\n\n// Use fetch joins to avoid N+1 queries\n@Query("SELECT e FROM Employee e JOIN FETCH e.department")\nList<Employee> findAllWithDepartment();\n\n// Use pagination for large result sets\n@Query(value = "SELECT e FROM Employee e WHERE e.salary > :salary",\n       countQuery = "SELECT count(e) FROM Employee e WHERE e.salary > :salary")\nPage<Employee> findBySalaryGreaterThan(@Param("salary") BigDecimal salary, Pageable pageable);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"This cheat sheet covers the essential SQL operations and their Spring Boot/JPA equivalents. Keep it handy for quick reference during development!"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);