"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9170],{7073:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(4848),s=t(8453);const i={},c="React TypeScript Cheatsheet",o={id:"WebDev/React/ReactTypeScript",title:"React TypeScript Cheatsheet",description:"Basic Component Types",source:"@site/docs/WebDev/React/ReactTypeScript.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReactTypeScript",permalink:"/js.enigma/docs/WebDev/React/ReactTypeScript",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReactTypeScript.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Jest & React Testing Library Cheatsheet",permalink:"/js.enigma/docs/WebDev/React/ReactJestRTL"},next:{title:"React TypeScript Context",permalink:"/js.enigma/docs/WebDev/React/ReactTypeScriptContext"}},a={},l=[{value:"Basic Component Types",id:"basic-component-types",level:2},{value:"Function Components",id:"function-components",level:3},{value:"Props Types",id:"props-types",level:3},{value:"Event Handlers",id:"event-handlers",level:3},{value:"Hooks with TypeScript",id:"hooks-with-typescript",level:2},{value:"useState",id:"usestate",level:3},{value:"useRef",id:"useref",level:3},{value:"useEffect",id:"useeffect",level:3},{value:"useReducer",id:"usereducer",level:3},{value:"Context with TypeScript",id:"context-with-typescript",level:2},{value:"Generic Components",id:"generic-components",level:2},{value:"Utility Types",id:"utility-types",level:2},{value:"Type Assertions and Guards",id:"type-assertions-and-guards",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"react-typescript-cheatsheet",children:"React TypeScript Cheatsheet"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-component-types",children:"Basic Component Types"}),"\n",(0,r.jsx)(n.h3,{id:"function-components",children:"Function Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Basic Function Component\r\nconst Button: React.FC<{\r\n  onClick: () => void;\r\n  children: React.ReactNode;\r\n}> = ({ onClick, children }) => (\r\n  <button onClick={onClick}>{children}</button>\r\n);\r\n\r\n// Alternative syntax (preferred)\r\ninterface ButtonProps {\r\n  onClick: () => void;\r\n  children: React.ReactNode;\r\n}\r\n\r\nfunction Button({ onClick, children }: ButtonProps) {\r\n  return <button onClick={onClick}>{children}</button>;\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"props-types",children:"Props Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Basic props\r\ninterface UserProps {\r\n  name: string;\r\n  age: number;\r\n  email?: string; // Optional prop\r\n  children?: React.ReactNode; // Children prop\r\n}\r\n\r\n// Props with functions\r\ninterface ButtonProps {\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  onHover?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\n// Props with generics\r\ninterface ListProps<T> {\r\n  items: T[];\r\n  renderItem: (item: T) => React.ReactNode;\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"event-handlers",children:"Event Handlers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Common Event Types\r\ninterface InputProps {\r\n  // Mouse events\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  onMouseOver: (event: React.MouseEvent<HTMLDivElement>) => void;\r\n  \r\n  // Keyboard events\r\n  onKeyPress: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n  \r\n  // Form events\r\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\r\n  \r\n  // Focus events\r\n  onFocus: (event: React.FocusEvent<HTMLInputElement>) => void;\r\n  onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;\r\n}\r\n\r\n// Event handler implementations\r\nconst handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  const value = event.target.value;\r\n};\r\n\r\nconst handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n  event.preventDefault();\r\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"hooks-with-typescript",children:"Hooks with TypeScript"}),"\n",(0,r.jsx)(n.h3,{id:"usestate",children:"useState"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Basic types\r\nconst [count, setCount] = useState<number>(0);\r\nconst [name, setName] = useState<string>('');\r\nconst [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n// Complex types\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nconst [user, setUser] = useState<User | null>(null);\r\n\r\n// Array state\r\nconst [items, setItems] = useState<string[]>([]);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"useref",children:"useRef"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// DOM refs\r\nconst inputRef = useRef<HTMLInputElement>(null);\r\nconst buttonRef = useRef<HTMLButtonElement>(null);\r\n\r\n// Mutable refs\r\nconst countRef = useRef<number>(0);\r\nconst timerRef = useRef<NodeJS.Timeout>();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"useeffect",children:"useEffect"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Basic effect\r\nuseEffect(() => {\r\n  document.title = `Count: ${count}`;\r\n}, [count]);\r\n\r\n// Cleanup function\r\nuseEffect(() => {\r\n  const handler = (event: MouseEvent) => {\r\n    console.log(event.clientX, event.clientY);\r\n  };\r\n  \r\n  window.addEventListener('mousemove', handler);\r\n  \r\n  return () => {\r\n    window.removeEventListener('mousemove', handler);\r\n  };\r\n}, []);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"usereducer",children:"useReducer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface State {\r\n  count: number;\r\n  error: string | null;\r\n  loading: boolean;\r\n}\r\n\r\ntype Action = \r\n  | { type: 'INCREMENT' }\r\n  | { type: 'DECREMENT' }\r\n  | { type: 'SET_ERROR'; payload: string }\r\n  | { type: 'SET_LOADING'; payload: boolean };\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { ...state, count: state.count + 1 };\r\n    case 'DECREMENT':\r\n      return { ...state, count: state.count - 1 };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Usage\r\nconst [state, dispatch] = useReducer(reducer, {\r\n  count: 0,\r\n  error: null,\r\n  loading: false\r\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"context-with-typescript",children:"Context with TypeScript"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Create context with type\r\ninterface ThemeContextType {\r\n  theme: 'light' | 'dark';\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\n// Provider component\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\r\n  \r\n  const toggleTheme = () => {\r\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\r\n  };\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for context\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generic-components",children:"Generic Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Generic list component\r\ninterface ListProps<T> {\r\n  items: T[];\r\n  renderItem: (item: T) => React.ReactNode;\r\n}\r\n\r\nfunction List<T>({ items, renderItem }: ListProps<T>) {\r\n  return (\r\n    <ul>\r\n      {items.map((item, index) => (\r\n        <li key={index}>{renderItem(item)}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\n// Usage\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\n<List<User>\r\n  items={users}\r\n  renderItem={(user) => <span>{user.name}</span>}\r\n/>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"utility-types",children:"Utility Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Partial - Makes all properties optional\r\ntype PartialUser = Partial<User>;\r\n\r\n// Required - Makes all properties required\r\ntype RequiredUser = Required<User>;\r\n\r\n// Pick - Selects specific properties\r\ntype NameAndEmail = Pick<User, 'name' | 'email'>;\r\n\r\n// Omit - Removes specific properties\r\ntype UserWithoutId = Omit<User, 'id'>;\r\n\r\n// Record - Creates an object type with specific key and value types\r\ntype UserRoles = Record<string, 'admin' | 'user' | 'guest'>;\r\n\r\n// Readonly - Makes all properties readonly\r\ntype ReadonlyUser = Readonly<User>;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-assertions-and-guards",children:"Type Assertions and Guards"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Type assertions\r\nconst input = event.target as HTMLInputElement;\r\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\n// Type guards\r\nfunction isUser(obj: any): obj is User {\r\n  return 'id' in obj && 'name' in obj && 'email' in obj;\r\n}\r\n\r\n// Usage with type guard\r\nif (isUser(data)) {\r\n  console.log(data.name); // TypeScript knows data is User\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Props Types"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use interfaces for props"}),"\n",(0,r.jsx)(n.li,{children:"Make props readonly when possible"}),"\n",(0,r.jsx)(n.li,{children:"Use discriminated unions for complex props"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Event Handlers"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use the most specific event type possible"}),"\n",(0,r.jsx)(n.li,{children:"Provide proper types for event.target"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"State Management"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Define explicit types for state"}),"\n",(0,r.jsx)(n.li,{children:"Use discriminated unions for actions"}),"\n",(0,r.jsx)(n.li,{children:"Leverage TypeScript's inference when possible"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use proper dependency types in useCallback/useMemo"}),"\n",(0,r.jsx)(n.li,{children:"Avoid unnecessary type assertions"}),"\n",(0,r.jsx)(n.li,{children:"Utilize const assertions where appropriate"}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function c(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);