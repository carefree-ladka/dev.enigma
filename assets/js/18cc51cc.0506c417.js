"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3910],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(96540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},76847:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=s(74848),t=s(28453);const a={},i="Google JavaScript Style Guide",o={id:"WebDev/Core JavaScript/Google JavaScript Style Guide",title:"Google JavaScript Style Guide",description:"A comprehensive reference to Google's JavaScript coding standards and best practices for consistent, maintainable code.",source:"@site/docs/WebDev/Core JavaScript/Google JavaScript Style Guide.mdx",sourceDirName:"WebDev/Core JavaScript",slug:"/WebDev/Core JavaScript/Google JavaScript Style Guide",permalink:"/js.enigma/docs/WebDev/Core JavaScript/Google JavaScript Style Guide",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/Core JavaScript/Google JavaScript Style Guide.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CSS3 Interview Questions",permalink:"/js.enigma/docs/WebDev/Core JavaScript/CSS"},next:{title:"HTML5 Interview Questions",permalink:"/js.enigma/docs/WebDev/Core JavaScript/HTML"}},c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Source File Structure",id:"source-file-structure",level:2},{value:"1. File Organization",id:"1-file-organization",level:3},{value:"2. File Naming",id:"2-file-naming",level:3},{value:"3. Import/Export Patterns",id:"3-importexport-patterns",level:3},{value:"Formatting Rules",id:"formatting-rules",level:2},{value:"1. Indentation and Spacing",id:"1-indentation-and-spacing",level:3},{value:"2. Line Length and Wrapping",id:"2-line-length-and-wrapping",level:3},{value:"3. Semicolons and Braces",id:"3-semicolons-and-braces",level:3},{value:"4. Blank Lines and Organization",id:"4-blank-lines-and-organization",level:3},{value:"Language Features",id:"language-features",level:2},{value:"1. Variable Declarations",id:"1-variable-declarations",level:3},{value:"2. Functions",id:"2-functions",level:3},{value:"3. Classes",id:"3-classes",level:3},{value:"4. Template Literals",id:"4-template-literals",level:3},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"1. Variables and Functions",id:"1-variables-and-functions",level:3},{value:"2. Constants",id:"2-constants",level:3},{value:"3. Classes and Constructors",id:"3-classes-and-constructors",level:3},{value:"4. Private Members",id:"4-private-members",level:3},{value:"JSDoc Documentation",id:"jsdoc-documentation",level:2},{value:"1. Basic JSDoc Structure",id:"1-basic-jsdoc-structure",level:3},{value:"2. Class Documentation",id:"2-class-documentation",level:3},{value:"3. Type Definitions",id:"3-type-definitions",level:3},{value:"4. Advanced JSDoc Tags",id:"4-advanced-jsdoc-tags",level:3},{value:"Policies and Best Practices",id:"policies-and-best-practices",level:2},{value:"1. Error Handling",id:"1-error-handling",level:3},{value:"2. Asynchronous Code",id:"2-asynchronous-code",level:3},{value:"3. Array and Object Handling",id:"3-array-and-object-handling",level:3},{value:"Modern JavaScript Features",id:"modern-javascript-features",level:2},{value:"1. Destructuring",id:"1-destructuring",level:3},{value:"2. Spread Operator",id:"2-spread-operator",level:3},{value:"3. Optional Chaining and Nullish Coalescing",id:"3-optional-chaining-and-nullish-coalescing",level:3},{value:"4. Modules and Dynamic Imports",id:"4-modules-and-dynamic-imports",level:3},{value:"Testing Guidelines",id:"testing-guidelines",level:2},{value:"1. Test Structure and Organization",id:"1-test-structure-and-organization",level:3},{value:"2. Test Naming and Documentation",id:"2-test-naming-and-documentation",level:3},{value:"3. Mock and Stub Patterns",id:"3-mock-and-stub-patterns",level:3},{value:"4. Async Testing",id:"4-async-testing",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"1. Singleton Pattern",id:"1-singleton-pattern",level:3},{value:"2. Observer Pattern",id:"2-observer-pattern",level:3},{value:"3. Factory Pattern",id:"3-factory-pattern",level:3},{value:"4. Builder Pattern",id:"4-builder-pattern",level:3},{value:"Tools and Enforcement",id:"tools-and-enforcement",level:2},{value:"1. ESLint Configuration",id:"1-eslint-configuration",level:3},{value:"2. Prettier Configuration",id:"2-prettier-configuration",level:3},{value:"3. Package.json Scripts",id:"3-packagejson-scripts",level:3},{value:"4. VSCode Configuration",id:"4-vscode-configuration",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Summary Checklist",id:"summary-checklist",level:2},{value:"<strong>File Structure</strong>",id:"file-structure",level:3},{value:"<strong>Formatting</strong>",id:"formatting",level:3},{value:"<strong>Naming</strong>",id:"naming",level:3},{value:"<strong>Language Features</strong>",id:"language-features-1",level:3},{value:"<strong>Documentation</strong>",id:"documentation",level:3},{value:"<strong>Best Practices</strong>",id:"best-practices",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"google-javascript-style-guide",children:"Google JavaScript Style Guide"})}),"\n",(0,r.jsx)(n.p,{children:"A comprehensive reference to Google's JavaScript coding standards and best practices for consistent, maintainable code."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#source-file-structure",children:"Source File Structure"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#formatting-rules",children:"Formatting Rules"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#language-features",children:"Language Features"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#naming-conventions",children:"Naming Conventions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#jsdoc-documentation",children:"JSDoc Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#policies-and-best-practices",children:"Policies and Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modern-javascript-features",children:"Modern JavaScript Features"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#error-handling",children:"Error Handling"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#testing-guidelines",children:"Testing Guidelines"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#common-patterns",children:"Common Patterns"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#tools-and-enforcement",children:"Tools and Enforcement"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"source-file-structure",children:"Source File Structure"}),"\n",(0,r.jsx)(n.p,{children:"Every JavaScript source file should follow a consistent structure."}),"\n",(0,r.jsx)(n.h3,{id:"1-file-organization",children:"1. File Organization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * @fileoverview Description of file's contents.\n * @author Your Name (optional)\n */\n\n// 1. License header (if applicable)\n/**\n * Copyright 2024 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0...\n */\n\n// 2. @fileoverview JSDoc comment\n/**\n * @fileoverview Utilities for handling user authentication.\n * @suppress {extraRequire}\n */\n\n// 3. goog.module statement (for Closure)\ngoog.module('myproject.auth.utils');\n\n// 4. goog.require statements (alphabetically sorted)\nconst asserts = goog.require('goog.asserts');\nconst dom = goog.require('goog.dom');\nconst events = goog.require('goog.events');\n\n// 5. Module's implementation\nclass AuthenticationManager {\n  constructor() {\n    // Implementation\n  }\n}\n\n// 6. Exports\nexports = {AuthenticationManager};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-file-naming",children:"2. File Naming"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Use kebab-case for file names\nauth-manager.js\nuser-profile-service.js\nemail-validator-utils.js\n\n// \u274c Bad: Avoid camelCase or PascalCase in file names\nauthManager.js\nUserProfileService.js\nEmailValidatorUtils.js\n\n// \u2705 Good: Test files should have .test.js suffix\nauth-manager.test.js\nuser-service.test.js\n\n// \u2705 Good: Type definition files\nauth-types.js\nuser-interfaces.js\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-importexport-patterns",children:"3. Import/Export Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: ES6 modules (preferred)\nimport {AuthManager} from './auth-manager.js';\nimport * as utils from './common-utils.js';\nimport defaultExport from './default-module.js';\n\n// Export patterns\nexport {AuthManager};\nexport {UserService as Service};\nexport default class DefaultClass {}\n\n// \u2705 Good: CommonJS (when ES6 modules not available)\nconst {AuthManager} = require('./auth-manager');\nconst utils = require('./utils');\n\nmodule.exports = {AuthManager};\nmodule.exports = AuthManager; // Default export\n\n// \u274c Bad: Mixing import styles\nimport {something} from './module.js';\nconst other = require('./other-module'); // Don't mix\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"formatting-rules",children:"Formatting Rules"}),"\n",(0,r.jsx)(n.p,{children:"Consistent formatting improves code readability and reduces merge conflicts."}),"\n",(0,r.jsx)(n.h3,{id:"1-indentation-and-spacing",children:"1. Indentation and Spacing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: 2-space indentation\nclass UserManager {\n  constructor(config) {\n    this.config = config;\n    this.users = new Map();\n  }\n\n  addUser(user) {\n    if (!user.id) {\n      throw new Error('User must have an ID');\n    }\n    this.users.set(user.id, user);\n  }\n}\n\n// \u274c Bad: 4-space or tab indentation\nclass UserManager {\n    constructor(config) {\n        this.config = config;\n    }\n}\n\n// \u2705 Good: Spacing around operators\nconst result = (a + b) * c;\nconst isValid = user && user.isActive;\nconst items = [1, 2, 3, 4];\n\n// \u274c Bad: No spacing\nconst result=(a+b)*c;\nconst items=[1,2,3,4];\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-line-length-and-wrapping",children:"2. Line Length and Wrapping"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Lines should be \u2264 80 characters when possible\nconst config = {\n  apiUrl: 'https://api.example.com/v1',\n  timeout: 5000,\n  retries: 3\n};\n\n// \u2705 Good: Method chaining alignment\nconst result = someObject\n    .method1(param1, param2)\n    .method2(param3)\n    .method3();\n\n// \u2705 Good: Function parameter wrapping\nfunction processUserData(\n    userId,\n    userData,\n    validationRules,\n    callback) {\n  // Implementation\n}\n\n// \u2705 Good: Array/object wrapping\nconst longArray = [\n  'first-item',\n  'second-item',\n  'third-item',\n  'fourth-item'\n];\n\nconst complexObject = {\n  propertyOne: value1,\n  propertyTwo: value2,\n  propertyThree: {\n    nestedProperty: nestedValue,\n    anotherNested: anotherValue\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-semicolons-and-braces",children:"3. Semicolons and Braces"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Always use semicolons\nconst message = 'Hello, world!';\ndoSomething();\nreturn result;\n\n// \u274c Bad: Missing semicolons\nconst message = 'Hello, world!'\ndoSomething()\n\n// \u2705 Good: Always use braces for control structures\nif (condition) {\n  doSomething();\n}\n\nif (condition) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n\nfor (const item of items) {\n  processItem(item);\n}\n\n// \u274c Bad: Omitting braces\nif (condition) doSomething();\n\nif (condition)\n  doSomething();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-blank-lines-and-organization",children:"4. Blank Lines and Organization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Strategic use of blank lines\nclass DataProcessor {\n  constructor(config) {\n    this.config = config;\n    this.cache = new Map();\n  }\n\n  // Blank line before method\n  process(data) {\n    const validated = this.validate(data);\n    const transformed = this.transform(validated);\n\n    return this.save(transformed);\n  }\n\n  validate(data) {\n    // Validation logic\n    if (!data) {\n      throw new Error('Data is required');\n    }\n\n    // More validation\n    return data;\n  }\n\n  transform(data) {\n    // Transformation logic\n    return {\n      ...data,\n      timestamp: Date.now()\n    };\n  }\n\n  save(data) {\n    // Save logic\n    this.cache.set(data.id, data);\n    return data;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"language-features",children:"Language Features"}),"\n",(0,r.jsx)(n.p,{children:"Modern JavaScript features should be used appropriately and consistently."}),"\n",(0,r.jsx)(n.h3,{id:"1-variable-declarations",children:"1. Variable Declarations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Prefer const, then let\nconst API_URL = 'https://api.example.com';\nconst users = [];\nlet currentUser = null;\n\n// \u2705 Good: One declaration per line\nconst firstName = user.firstName;\nconst lastName = user.lastName;\nconst email = user.email;\n\n// \u274c Bad: Multiple declarations\nconst firstName = user.firstName,\n      lastName = user.lastName,\n      email = user.email;\n\n// \u274c Bad: Never use var\nvar globalVariable = 'avoid this';\n\n// \u2705 Good: Destructuring\nconst {name, age, email} = user;\nconst [first, second, ...rest] = array;\n\n// \u2705 Good: Default parameters\nfunction greetUser(name = 'Anonymous', greeting = 'Hello') {\n  return `${greeting}, ${name}!`;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-functions",children:"2. Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Function declarations for named functions\nfunction calculateTotal(items) {\n  return items.reduce((sum, item) => sum + item.price, 0);\n}\n\n// \u2705 Good: Arrow functions for callbacks and short functions\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(n => n * 2);\nconst filtered = numbers.filter(n => n > 3);\n\n// \u2705 Good: Arrow function with block body\nconst processUser = (user) => {\n  const validated = validateUser(user);\n  const enriched = enrichUserData(validated);\n  return saveUser(enriched);\n};\n\n// \u2705 Good: Method definitions in classes\nclass UserService {\n  getUser(id) {\n    return this.users.get(id);\n  }\n\n  // Arrow function for preserving 'this'\n  handleCallback = (data) => {\n    this.processData(data);\n  };\n}\n\n// \u274c Bad: Inconsistent function styles\nconst badFunction1 = function(param) { return param; };\nfunction badFunction2(param) { return param; }; // Mixed styles\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-classes",children:"3. Classes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Class definition with proper structure\nclass UserManager {\n  /**\n   * @param {!Object} config Configuration object\n   */\n  constructor(config) {\n    /** @private {!Object} */\n    this.config_ = config;\n\n    /** @private {!Map<string, !User>} */\n    this.users_ = new Map();\n\n    // Bind methods if needed\n    this.handleUserUpdate = this.handleUserUpdate.bind(this);\n  }\n\n  /**\n   * Adds a new user to the system.\n   * @param {!User} user The user to add\n   * @return {boolean} True if user was added successfully\n   */\n  addUser(user) {\n    if (!this.validateUser_(user)) {\n      return false;\n    }\n\n    this.users_.set(user.id, user);\n    this.notifyUserAdded_(user);\n    return true;\n  }\n\n  /**\n   * @param {!User} user\n   * @return {boolean}\n   * @private\n   */\n  validateUser_(user) {\n    return user && user.id && user.email;\n  }\n\n  /**\n   * @param {!User} user\n   * @private\n   */\n  notifyUserAdded_(user) {\n    // Notification logic\n  }\n\n  // Static methods\n  /**\n   * @param {string} email\n   * @return {boolean}\n   */\n  static isValidEmail(email) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  }\n}\n\n// \u2705 Good: Inheritance\nclass AdminUser extends User {\n  constructor(userData, permissions) {\n    super(userData);\n    this.permissions = permissions;\n  }\n\n  hasPermission(permission) {\n    return this.permissions.includes(permission);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-template-literals",children:"4. Template Literals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Template literals for string interpolation\nconst welcomeMessage = `Welcome, ${user.name}!`;\nconst apiUrl = `${BASE_URL}/users/${userId}`;\n\n// \u2705 Good: Multi-line strings\nconst emailTemplate = `\n  <div>\n    <h1>Welcome ${user.name}</h1>\n    <p>Thank you for joining our service.</p>\n    <p>Your account ID is: ${user.id}</p>\n  </div>\n`;\n\n// \u2705 Good: Tagged template literals\nconst styledComponent = css`\n  .user-card {\n    background: ${theme.cardBackground};\n    border: 1px solid ${theme.borderColor};\n  }\n`;\n\n// \u274c Bad: String concatenation when template literal is clearer\nconst message = 'Hello, ' + user.name + '! You have ' + count + ' messages.';\n\n// \u2705 Good: Use template literal instead\nconst message = `Hello, ${user.name}! You have ${count} messages.`;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,r.jsx)(n.p,{children:"Consistent naming improves code readability and maintainability."}),"\n",(0,r.jsx)(n.h3,{id:"1-variables-and-functions",children:"1. Variables and Functions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: camelCase for variables and functions\nconst userName = 'john_doe';\nconst apiResponse = {};\nlet isLoading = false;\n\nfunction getUserData() {}\nfunction calculateTotalPrice() {}\nconst validateEmailAddress = (email) => {};\n\n// \u2705 Good: Boolean variables with descriptive prefixes\nconst isVisible = true;\nconst hasPermission = false;\nconst canEdit = user.role === 'admin';\nconst shouldUpdate = data.timestamp > lastUpdate;\n\n// \u2705 Good: Array and collection naming\nconst users = [];\nconst userList = [];\nconst userMap = new Map();\nconst userSet = new Set();\n\n// \u274c Bad: Poor naming\nconst d = new Date(); // Not descriptive\nconst u = user.data; // Abbreviated\nconst flag = true; // Generic\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-constants",children:"2. Constants"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: SCREAMING_SNAKE_CASE for module constants\nconst API_BASE_URL = 'https://api.example.com';\nconst MAX_RETRY_ATTEMPTS = 3;\nconst DEFAULT_TIMEOUT_MS = 5000;\n\n// \u2705 Good: Grouped constants in objects\nconst HttpStatus = {\n  OK: 200,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  NOT_FOUND: 404,\n  INTERNAL_SERVER_ERROR: 500\n};\n\nconst ErrorCodes = {\n  VALIDATION_FAILED: 'VALIDATION_FAILED',\n  USER_NOT_FOUND: 'USER_NOT_FOUND',\n  PERMISSION_DENIED: 'PERMISSION_DENIED'\n};\n\n// \u2705 Good: Local constants can use camelCase\nfunction processData() {\n  const maxItems = 100;\n  const defaultConfig = {timeout: 1000};\n  // Processing logic\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-classes-and-constructors",children:"3. Classes and Constructors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: PascalCase for classes\nclass UserService {\n  constructor() {}\n}\n\nclass EmailValidator {\n  validate(email) {}\n}\n\nclass DatabaseConnection {\n  connect() {}\n}\n\n// \u2705 Good: Interfaces (when using TypeScript-like conventions)\n/**\n * @interface\n */\nclass UserRepository {\n  /**\n   * @param {string} id\n   * @return {Promise<!User>}\n   */\n  getUser(id) {}\n}\n\n// \u2705 Good: Abstract classes\nclass BaseService {\n  constructor() {\n    if (this.constructor === BaseService) {\n      throw new Error('Cannot instantiate abstract class');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-private-members",children:"4. Private Members"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Trailing underscore for private members (Closure style)\nclass UserManager {\n  constructor() {\n    /** @private {!Map} */\n    this.users_ = new Map();\n\n    /** @private {string} */\n    this.apiKey_ = '';\n  }\n\n  /**\n   * @param {string} id\n   * @return {?User}\n   * @private\n   */\n  getUserFromCache_(id) {\n    return this.users_.get(id);\n  }\n\n  // Public method\n  getUser(id) {\n    return this.getUserFromCache_(id) || this.fetchUser_(id);\n  }\n\n  /**\n   * @param {string} id\n   * @return {Promise<!User>}\n   * @private\n   */\n  async fetchUser_(id) {\n    // Implementation\n  }\n}\n\n// \u2705 Good: Private fields (modern JavaScript)\nclass ModernUserManager {\n  #users = new Map();\n  #apiKey = '';\n\n  #getUserFromCache(id) {\n    return this.#users.get(id);\n  }\n\n  getUser(id) {\n    return this.#getUserFromCache(id);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"jsdoc-documentation",children:"JSDoc Documentation"}),"\n",(0,r.jsx)(n.p,{children:"Comprehensive documentation using JSDoc comments."}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-jsdoc-structure",children:"1. Basic JSDoc Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * Calculates the total price including tax.\n * @param {number} basePrice The base price before tax\n * @param {number} taxRate The tax rate (e.g., 0.1 for 10%)\n * @return {number} The total price including tax\n */\nfunction calculateTotalPrice(basePrice, taxRate) {\n  return basePrice * (1 + taxRate);\n}\n\n/**\n * Validates a user object.\n * @param {!Object} user The user object to validate\n * @param {string} user.name The user's name\n * @param {string} user.email The user's email\n * @param {number=} user.age The user's age (optional)\n * @return {boolean} True if valid, false otherwise\n * @throws {Error} If user is null or undefined\n */\nfunction validateUser(user) {\n  if (!user) {\n    throw new Error('User cannot be null');\n  }\n  return user.name && user.email;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-class-documentation",children:"2. Class Documentation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * Manages user authentication and session handling.\n * @class\n */\nclass AuthenticationManager {\n  /**\n   * @param {!AuthConfig} config Authentication configuration\n   * @param {string} config.apiUrl The API base URL\n   * @param {number} config.sessionTimeout Session timeout in milliseconds\n   */\n  constructor(config) {\n    /** @private {!AuthConfig} */\n    this.config_ = config;\n\n    /** @private {?string} Current session token */\n    this.sessionToken_ = null;\n  }\n\n  /**\n   * Authenticates a user with credentials.\n   * @param {string} username The username\n   * @param {string} password The password\n   * @return {!Promise<!AuthResult>} Authentication result\n   * @throws {AuthError} If authentication fails\n   */\n  async authenticate(username, password) {\n    // Implementation\n  }\n\n  /**\n   * Checks if current session is valid.\n   * @return {boolean} True if session is valid\n   */\n  isSessionValid() {\n    return this.sessionToken_ !== null;\n  }\n\n  /**\n   * Logs out the current user.\n   * @return {!Promise<void>}\n   */\n  async logout() {\n    this.sessionToken_ = null;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-type-definitions",children:"3. Type Definitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * @typedef {Object} User\n * @property {string} id - Unique user identifier\n * @property {string} name - User's display name\n * @property {string} email - User's email address\n * @property {number=} age - User's age (optional)\n * @property {!Array<string>} roles - User's roles\n * @property {UserPreferences=} preferences - User preferences (optional)\n */\n\n/**\n * @typedef {Object} UserPreferences\n * @property {string} theme - UI theme preference\n * @property {string} language - Language preference\n * @property {boolean} notifications - Notification preference\n */\n\n/**\n * @typedef {Object} ApiResponse\n * @template T\n * @property {boolean} success - Whether request was successful\n * @property {T=} data - Response data (optional)\n * @property {string=} error - Error message (optional)\n * @property {number} timestamp - Response timestamp\n */\n\n/**\n * Fetches user data from the API.\n * @param {string} userId The user ID to fetch\n * @return {!Promise<!ApiResponse<!User>>} The API response with user data\n */\nasync function fetchUser(userId) {\n  // Implementation\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-advanced-jsdoc-tags",children:"4. Advanced JSDoc Tags"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"/**\n * Advanced example with multiple JSDoc tags.\n * @author John Doe <john@example.com>\n * @since 1.2.0\n * @version 2.1.0\n * @see {@link https://example.com/docs|Documentation}\n * @example\n * const manager = new UserManager();\n * const user = await manager.createUser({\n *   name: 'John',\n *   email: 'john@example.com'\n * });\n */\nclass UserManager {\n  /**\n   * Creates a new user.\n   * @param {!User} userData User data\n   * @return {!Promise<!User>} Created user\n   * @throws {ValidationError} If user data is invalid\n   * @throws {DuplicateError} If user already exists\n   * @deprecated Use createUserV2 instead\n   * @todo Add support for bulk user creation\n   */\n  async createUser(userData) {\n    // Implementation\n  }\n\n  /**\n   * @param {string} id\n   * @return {!Promise<?User>}\n   * @override\n   */\n  async getUser(id) {\n    // Implementation\n  }\n\n  /**\n   * @param {!Array<string>} ids\n   * @return {!Promise<!Array<!User>>}\n   * @suppress {checkTypes} Temporary suppression for migration\n   * @package\n   */\n  async getMultipleUsers(ids) {\n    // Implementation\n  }\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"policies-and-best-practices",children:"Policies and Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-error-handling",children:"1. Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Specific error types\nclass ValidationError extends Error {\n  constructor(message, field) {\n    super(message);\n    this.name = 'ValidationError';\n    this.field = field;\n  }\n}\n\nclass NetworkError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.name = 'NetworkError';\n    this.statusCode = statusCode;\n  }\n}\n\n// \u2705 Good: Proper error handling\nasync function fetchUserData(userId) {\n  try {\n    const response = await fetch(`/api/users/${userId}`);\n\n    if (!response.ok) {\n      throw new NetworkError(\n        `Failed to fetch user: ${response.statusText}`,\n        response.status\n      );\n    }\n\n    const userData = await response.json();\n\n    if (!userData.id) {\n      throw new ValidationError('User data missing ID', 'id');\n    }\n\n    return userData;\n  } catch (error) {\n    if (error instanceof NetworkError) {\n      console.error('Network error:', error.message);\n      // Handle network errors\n    } else if (error instanceof ValidationError) {\n      console.error('Validation error:', error.message, error.field);\n      // Handle validation errors\n    } else {\n      console.error('Unexpected error:', error);\n      // Handle unexpected errors\n    }\n    throw error; // Re-throw if needed\n  }\n}\n\n// \u2705 Good: Input validation\nfunction processUserAge(age) {\n  if (typeof age !== 'number') {\n    throw new TypeError('Age must be a number');\n  }\n\n  if (age < 0 || age > 150) {\n    throw new RangeError('Age must be between 0 and 150');\n  }\n\n  return Math.floor(age);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-asynchronous-code",children:"2. Asynchronous Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Use async/await for better readability\nasync function processUserRegistration(userData) {\n  try {\n    const validatedData = await validateUserData(userData);\n    const hashedPassword = await hashPassword(validatedData.password);\n    const user = await createUser({\n      ...validatedData,\n      password: hashedPassword\n    });\n    await sendWelcomeEmail(user.email);\n    return user;\n  } catch (error) {\n    console.error('Registration failed:', error);\n    throw error;\n  }\n}\n\n// \u2705 Good: Promise.all for concurrent operations\nasync function loadUserDashboard(userId) {\n  try {\n    const [user, posts, notifications] = await Promise.all([\n      fetchUser(userId),\n      fetchUserPosts(userId),\n      fetchUserNotifications(userId)\n    ]);\n\n    return {\n      user,\n      posts,\n      notifications\n    };\n  } catch (error) {\n    console.error('Failed to load dashboard:', error);\n    throw error;\n  }\n}\n\n// \u2705 Good: Proper Promise handling\nfunction fetchWithRetry(url, maxRetries = 3) {\n  return new Promise((resolve, reject) => {\n    let attempts = 0;\n\n    const attempt = () => {\n      fetch(url)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n          }\n          resolve(response);\n        })\n        .catch(error => {\n          attempts++;\n          if (attempts < maxRetries) {\n            setTimeout(attempt, 1000 * attempts); // Exponential backoff\n          } else {\n            reject(error);\n          }\n        });\n    };\n\n    attempt();\n  });\n}\n\n// \u274c Bad: Callback hell\nfunction badAsyncFlow(userId, callback) {\n  fetchUser(userId, (userError, user) => {\n    if (userError) {\n      callback(userError);\n      return;\n    }\n\n    fetchUserPosts(userId, (postsError, posts) => {\n      if (postsError) {\n        callback(postsError);\n        return;\n      }\n\n      updateUserStats(user, posts, (statsError, stats) => {\n        if (statsError) {\n          callback(statsError);\n          return;\n        }\n\n        callback(null, {user, posts, stats});\n      });\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-array-and-object-handling",children:"3. Array and Object Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Use appropriate array methods\nconst users = [\n  {id: 1, name: 'Alice', active: true, age: 30},\n  {id: 2, name: 'Bob', active: false, age: 25},\n  {id: 3, name: 'Charlie', active: true, age: 35}\n];\n\n// Filter active users\nconst activeUsers = users.filter(user => user.active);\n\n// Get user names\nconst userNames = users.map(user => user.name);\n\n// Find specific user\nconst user = users.find(user => user.id === 2);\n\n// Check if any user meets condition\nconst hasAdultUsers = users.some(user => user.age >= 18);\n\n// Check if all users meet condition\nconst allActive = users.every(user => user.active);\n\n// Calculate total age\nconst totalAge = users.reduce((sum, user) => sum + user.age, 0);\n\n// \u2705 Good: Object manipulation\nconst userUpdate = {\n  name: 'Alice Smith',\n  email: 'alice.smith@example.com'\n};\n\n// Immutable update\nconst updatedUser = {\n  ...existingUser,\n  ...userUpdate,\n  updatedAt: Date.now()\n};\n\n// Extract specific properties\nconst {name, email, ...otherProps} = user;\n\n// \u2705 Good: Safe property access\nconst userCity = user?.address?.city ?? 'Unknown';\nconst firstPost = user?.posts?.[0]?.title ?? 'No posts';\n\n// \u2705 Good: Object validation\nfunction isValidUser(user) {\n  const requiredFields = ['id', 'name', 'email'];\n  return requiredFields.every(field =>\n    user && typeof user[field] === 'string' && user[field].trim() !== ''\n  );\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"modern-javascript-features",children:"Modern JavaScript Features"}),"\n",(0,r.jsx)(n.h3,{id:"1-destructuring",children:"1. Destructuring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Array destructuring\nconst [first, second, ...rest] = array;\nconst [, , third] = array; // Skip elements\nconst [a = 'default'] = array; // Default values\n\n// \u2705 Good: Object destructuring\nconst {name, email, age = 0} = user;\nconst {address: {street, city}} = user; // Nested destructuring\nconst {name: userName, email: userEmail} = user; // Rename\n\n// \u2705 Good: Function parameter destructuring\nfunction processUser({name, email, preferences = {}}) {\n  const {theme = 'light', language = 'en'} = preferences;\n  // Process user\n}\n\n// \u2705 Good: Rest parameters\nfunction logMessage(level, ...messages) {\n  console.log(`[${level}]`, ...messages);\n}\n\n// \u2705 Good: Destructuring in loops\nconst users = [{id: 1, name: 'Alice'}, {id: 2, name: 'Bob'}];\nfor (const {id, name} of users) {\n  console.log(`User ${id}: ${name}`);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-spread-operator",children:"2. Spread Operator"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Array spreading\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconst withExtra = [0, ...arr1, 3.5, ...arr2, 7];\n\n// \u2705 Good: Object spreading\nconst baseConfig = {\n  timeout: 5000,\n  retries: 3\n};\n\nconst userConfig = {\n  ...baseConfig,\n  apiUrl: 'https://api.example.com',\n  timeout: 10000 // Override base value\n};\n\n// \u2705 Good: Function arguments\nfunction sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst result = sum(...numbers);\n\n// \u2705 Good: Cloning arrays and objects\nconst clonedArray = [...originalArray];\nconst clonedObject = {...originalObject};\n\n// \u2705 Good: Converting NodeList to Array\nconst divElements = [...document.querySelectorAll('div')];\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-optional-chaining-and-nullish-coalescing",children:"3. Optional Chaining and Nullish Coalescing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Optional chaining\nconst userCity = user?.profile?.address?.city;\nconst firstPostTitle = user?.posts?.[0]?.title;\nconst methodResult = api?.getData?.();\n\n// \u2705 Good: Nullish coalescing\nconst username = user.name ?? 'Anonymous';\nconst port = process.env.PORT ?? 3000;\nconst config = userConfig ?? defaultConfig;\n\n// \u2705 Good: Combining both\nconst displayName = user?.profile?.displayName ?? user?.name ?? 'User';\n\n// \u2705 Good: Conditional method calls\nuser?.save?.();\napi?.disconnect?.();\n\n// \u274c Bad: Traditional lengthy null checks\nif (user && user.profile && user.profile.address && user.profile.address.city) {\n  console.log(user.profile.address.city);\n}\n\n// \u2705 Good: Simplified with optional chaining\nconsole.log(user?.profile?.address?.city);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-modules-and-dynamic-imports",children:"4. Modules and Dynamic Imports"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Static imports (top of file)\nimport React from 'react';\nimport {Component} from 'react';\nimport * as utils from './utils.js';\nimport './styles.css';\n\n// \u2705 Good: Dynamic imports\nasync function loadFeature(featureName) {\n  try {\n    const module = await import(`./features/${featureName}.js`);\n    return module.default;\n  } catch (error) {\n    console.error(`Failed to load feature ${featureName}:`, error);\n    return null;\n  }\n}\n\n// \u2705 Good: Conditional loading\nif (environment === 'development') {\n  import('./dev-tools.js').then(devTools => {\n    devTools.setup();\n  });\n}\n\n// \u2705 Good: Lazy loading\nconst LazyComponent = React.lazy(() => import('./LazyComponent.js'));\n\n// \u2705 Good: Export patterns\nexport const API_VERSION = '1.0.0';\nexport {UserService, AuthService};\nexport default class MainService {}\n\n// Named and default exports\nexport {default as UserManager} from './UserManager.js';\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"testing-guidelines",children:"Testing Guidelines"}),"\n",(0,r.jsx)(n.h3,{id:"1-test-structure-and-organization",children:"1. Test Structure and Organization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Test file structure (user-service.test.js)\nimport {UserService} from './user-service.js';\n\ndescribe('UserService', () => {\n  let userService;\n  let mockDatabase;\n\n  beforeEach(() => {\n    mockDatabase = {\n      findUser: jest.fn(),\n      saveUser: jest.fn(),\n      deleteUser: jest.fn()\n    };\n    userService = new UserService(mockDatabase);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getUser', () => {\n    it('should return user when found', async () => {\n      // Arrange\n      const userId = '123';\n      const expectedUser = {id: '123', name: 'John Doe'};\n      mockDatabase.findUser.mockResolvedValue(expectedUser);\n\n      // Act\n      const result = await userService.getUser(userId);\n\n      // Assert\n      expect(result).toEqual(expectedUser);\n      expect(mockDatabase.findUser).toHaveBeenCalledWith(userId);\n    });\n\n    it('should throw error when user not found', async () => {\n      // Arrange\n      const userId = '999';\n      mockDatabase.findUser.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(userService.getUser(userId)).rejects.toThrow('User not found');\n    });\n  });\n\n  describe('createUser', () => {\n    it('should create and return new user', async () => {\n      // Arrange\n      const userData = {name: 'Jane Doe', email: 'jane@example.com'};\n      const savedUser = {id: '456', ...userData};\n      mockDatabase.saveUser.mockResolvedValue(savedUser);\n\n      // Act\n      const result = await userService.createUser(userData);\n\n      // Assert\n      expect(result).toEqual(savedUser);\n      expect(mockDatabase.saveUser).toHaveBeenCalledWith(\n        expect.objectContaining(userData)\n      );\n    });\n\n    it('should validate required fields', async () => {\n      // Arrange\n      const invalidUserData = {name: 'John'};\n\n      // Act & Assert\n      await expect(userService.createUser(invalidUserData))\n        .rejects.toThrow('Email is required');\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-test-naming-and-documentation",children:"2. Test Naming and Documentation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Descriptive test names\ndescribe('AuthenticationService', () => {\n  describe('authenticate', () => {\n    it('should return valid token for correct credentials', () => {});\n    it('should throw AuthError for invalid password', () => {});\n    it('should throw AuthError for non-existent user', () => {});\n    it('should handle concurrent authentication requests', () => {});\n  });\n\n  describe('validateToken', () => {\n    it('should return true for valid unexpired token', () => {});\n    it('should return false for expired token', () => {});\n    it('should return false for malformed token', () => {});\n  });\n});\n\n// \u2705 Good: Test documentation\n/**\n * @fileoverview Tests for UserService class.\n * Tests cover user creation, retrieval, updating, and deletion operations.\n */\n\n/**\n * Tests the user creation flow including validation and database operations.\n */\ndescribe('User Creation', () => {\n  /**\n   * Verifies that valid user data creates a user successfully.\n   */\n  it('should create user with valid data', () => {\n    // Test implementation\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-mock-and-stub-patterns",children:"3. Mock and Stub Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Mock external dependencies\nimport {ApiClient} from './api-client.js';\nimport {Logger} from './logger.js';\n\njest.mock('./api-client.js');\njest.mock('./logger.js');\n\ndescribe('DataService', () => {\n  let dataService;\n  let mockApiClient;\n  let mockLogger;\n\n  beforeEach(() => {\n    mockApiClient = {\n      get: jest.fn(),\n      post: jest.fn(),\n      put: jest.fn(),\n      delete: jest.fn()\n    };\n\n    mockLogger = {\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn()\n    };\n\n    ApiClient.mockImplementation(() => mockApiClient);\n    Logger.mockImplementation(() => mockLogger);\n\n    dataService = new DataService();\n  });\n\n  it('should log successful API calls', async () => {\n    // Arrange\n    const responseData = {id: 1, name: 'Test'};\n    mockApiClient.get.mockResolvedValue(responseData);\n\n    // Act\n    await dataService.getData('1');\n\n    // Assert\n    expect(mockLogger.info).toHaveBeenCalledWith('API call successful');\n  });\n});\n\n// \u2705 Good: Spy on methods\ndescribe('EventHandler', () => {\n  it('should call callback function when event occurs', () => {\n    // Arrange\n    const mockCallback = jest.fn();\n    const handler = new EventHandler();\n    const spyOnProcess = jest.spyOn(handler, 'processEvent');\n\n    // Act\n    handler.on('test-event', mockCallback);\n    handler.emit('test-event', 'data');\n\n    // Assert\n    expect(mockCallback).toHaveBeenCalledWith('data');\n    expect(spyOnProcess).toHaveBeenCalledWith('test-event', 'data');\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-async-testing",children:"4. Async Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Testing async functions\ndescribe('AsyncService', () => {\n  it('should handle successful async operations', async () => {\n    // Arrange\n    const service = new AsyncService();\n    const mockData = {result: 'success'};\n    jest.spyOn(service, 'fetchData').mockResolvedValue(mockData);\n\n    // Act\n    const result = await service.processData();\n\n    // Assert\n    expect(result).toEqual(mockData);\n  });\n\n  it('should handle async errors', async () => {\n    // Arrange\n    const service = new AsyncService();\n    const error = new Error('Network error');\n    jest.spyOn(service, 'fetchData').mockRejectedValue(error);\n\n    // Act & Assert\n    await expect(service.processData()).rejects.toThrow('Network error');\n  });\n\n  it('should timeout long-running operations', async () => {\n    // Arrange\n    const service = new AsyncService();\n    jest.spyOn(service, 'longOperation').mockImplementation(\n      () => new Promise(resolve => setTimeout(resolve, 10000))\n    );\n\n    // Act & Assert\n    await expect(service.processWithTimeout()).rejects.toThrow('Timeout');\n  }, 1000); // 1 second timeout for test\n});\n\n// \u2705 Good: Testing Promises\ndescribe('PromiseService', () => {\n  it('should resolve promise chain correctly', () => {\n    // Arrange\n    const service = new PromiseService();\n\n    // Act & Assert\n    return service.chainedOperation()\n      .then(result => {\n        expect(result.step1).toBeDefined();\n        expect(result.step2).toBeDefined();\n        expect(result.final).toBe(true);\n      });\n  });\n\n  it('should handle promise rejections', () => {\n    // Arrange\n    const service = new PromiseService();\n\n    // Act & Assert\n    return service.failingOperation()\n      .catch(error => {\n        expect(error.message).toBe('Operation failed');\n      });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-singleton-pattern",children:"1. Singleton Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Module-based singleton (preferred)\nclass ConfigManager {\n  constructor() {\n    if (ConfigManager.instance) {\n      return ConfigManager.instance;\n    }\n\n    this.config = {};\n    this.loaded = false;\n    ConfigManager.instance = this;\n  }\n\n  async loadConfig() {\n    if (this.loaded) return this.config;\n\n    this.config = await this.fetchConfig();\n    this.loaded = true;\n    return this.config;\n  }\n\n  async fetchConfig() {\n    // Implementation\n  }\n}\n\n// Export singleton instance\nexport const configManager = new ConfigManager();\n\n// \u2705 Good: Factory function singleton\nfunction createLogger() {\n  let instance;\n\n  return function getLogger() {\n    if (!instance) {\n      instance = {\n        log: (message) => console.log(`[LOG] ${message}`),\n        error: (message) => console.error(`[ERROR] ${message}`),\n        warn: (message) => console.warn(`[WARN] ${message}`)\n      };\n    }\n    return instance;\n  };\n}\n\nexport const getLogger = createLogger();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-observer-pattern",children:"2. Observer Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Event emitter implementation\nclass EventEmitter {\n  constructor() {\n    this.events = new Map();\n  }\n\n  on(event, callback) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    if (!this.events.has(event)) return;\n\n    const callbacks = this.events.get(event);\n    const index = callbacks.indexOf(callback);\n\n    if (index > -1) {\n      callbacks.splice(index, 1);\n    }\n  }\n\n  emit(event, ...args) {\n    if (!this.events.has(event)) return;\n\n    this.events.get(event).forEach(callback => {\n      try {\n        callback(...args);\n      } catch (error) {\n        console.error(`Error in event handler for ${event}:`, error);\n      }\n    });\n  }\n\n  once(event, callback) {\n    const onceCallback = (...args) => {\n      callback(...args);\n      this.off(event, onceCallback);\n    };\n    this.on(event, onceCallback);\n  }\n}\n\n// Usage\nclass UserService extends EventEmitter {\n  constructor() {\n    super();\n    this.users = [];\n  }\n\n  addUser(user) {\n    this.users.push(user);\n    this.emit('userAdded', user);\n  }\n\n  removeUser(userId) {\n    const index = this.users.findIndex(u => u.id === userId);\n    if (index > -1) {\n      const user = this.users.splice(index, 1)[0];\n      this.emit('userRemoved', user);\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-factory-pattern",children:"3. Factory Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Factory for creating different types\nclass NotificationFactory {\n  static createNotification(type, config) {\n    switch (type) {\n      case 'email':\n        return new EmailNotification(config);\n      case 'sms':\n        return new SMSNotification(config);\n      case 'push':\n        return new PushNotification(config);\n      default:\n        throw new Error(`Unknown notification type: ${type}`);\n    }\n  }\n}\n\nclass EmailNotification {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async send(message, recipient) {\n    // Email sending implementation\n    console.log(`Sending email to ${recipient}: ${message}`);\n  }\n}\n\nclass SMSNotification {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async send(message, recipient) {\n    // SMS sending implementation\n    console.log(`Sending SMS to ${recipient}: ${message}`);\n  }\n}\n\n// Usage\nconst emailNotifier = NotificationFactory.createNotification('email', {\n  apiKey: 'email-api-key'\n});\n\nconst smsNotifier = NotificationFactory.createNotification('sms', {\n  apiKey: 'sms-api-key'\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-builder-pattern",children:"4. Builder Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good: Fluent builder pattern\nclass QueryBuilder {\n  constructor() {\n    this.query = {\n      select: [],\n      from: '',\n      where: [],\n      orderBy: [],\n      limit: null\n    };\n  }\n\n  select(...fields) {\n    this.query.select.push(...fields);\n    return this;\n  }\n\n  from(table) {\n    this.query.from = table;\n    return this;\n  }\n\n  where(condition) {\n    this.query.where.push(condition);\n    return this;\n  }\n\n  orderBy(field, direction = 'ASC') {\n    this.query.orderBy.push(`${field} ${direction}`);\n    return this;\n  }\n\n  limitTo(count) {\n    this.query.limit = count;\n    return this;\n  }\n\n  build() {\n    let sql = `SELECT ${this.query.select.join(', ')} FROM ${this.query.from}`;\n\n    if (this.query.where.length > 0) {\n      sql += ` WHERE ${this.query.where.join(' AND ')}`;\n    }\n\n    if (this.query.orderBy.length > 0) {\n      sql += ` ORDER BY ${this.query.orderBy.join(', ')}`;\n    }\n\n    if (this.query.limit) {\n      sql += ` LIMIT ${this.query.limit}`;\n    }\n\n    return sql;\n  }\n}\n\n// Usage\nconst query = new QueryBuilder()\n  .select('name', 'email', 'age')\n  .from('users')\n  .where('age > 18')\n  .where('active = true')\n  .orderBy('name')\n  .limitTo(10)\n  .build();\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"tools-and-enforcement",children:"Tools and Enforcement"}),"\n",(0,r.jsx)(n.h3,{id:"1-eslint-configuration",children:"1. ESLint Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// .eslintrc.js - Google style configuration\nmodule.exports = {\n  'extends': ['eslint:recommended', 'google'],\n  'env': {\n    'browser': true,\n    'node': true,\n    'es2022': true\n  },\n  'parserOptions': {\n    'ecmaVersion': 2022,\n    'sourceType': 'module'\n  },\n  'rules': {\n    // Enforce Google style preferences\n    'indent': ['error', 2],\n    'linebreak-style': ['error', 'unix'],\n    'quotes': ['error', 'single'],\n    'semi': ['error', 'always'],\n    'comma-dangle': ['error', 'never'],\n    'max-len': ['error', {'code': 80, 'ignoreUrls': true}],\n\n    // Additional rules\n    'no-unused-vars': ['error', {'argsIgnorePattern': '^_'}],\n    'no-console': ['warn'],\n    'prefer-const': ['error'],\n    'no-var': ['error'],\n    'object-shorthand': ['error'],\n    'prefer-arrow-callback': ['error'],\n\n    // JSDoc enforcement\n    'valid-jsdoc': ['error', {\n      'requireReturn': true,\n      'requireReturnType': true,\n      'requireParamDescription': true,\n      'requireReturnDescription': true\n    }],\n    'require-jsdoc': ['error', {\n      'require': {\n        'FunctionDeclaration': true,\n        'MethodDefinition': true,\n        'ClassDeclaration': true\n      }\n    }]\n  },\n  'overrides': [\n    {\n      'files': ['*.test.js', '*.spec.js'],\n      'env': {\n        'jest': true\n      },\n      'rules': {\n        'no-console': 'off',\n        'max-len': 'off'\n      }\n    }\n  ]\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-prettier-configuration",children:"2. Prettier Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// .prettierrc.js\nmodule.exports = {\n  // Align with Google style\n  'singleQuote': true,\n  'semi': true,\n  'tabWidth': 2,\n  'useTabs': false,\n  'printWidth': 80,\n  'trailingComma': 'es5',\n  'bracketSpacing': false,\n  'arrowParens': 'avoid',\n  'endOfLine': 'lf',\n\n  // Override for specific file types\n  'overrides': [\n    {\n      'files': '*.json',\n      'options': {\n        'printWidth': 120\n      }\n    }\n  ]\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-packagejson-scripts",children:"3. Package.json Scripts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "lint": "eslint src/ --ext .js",\n    "lint:fix": "eslint src/ --ext .js --fix",\n    "format": "prettier --write src/**/*.js",\n    "format:check": "prettier --check src/**/*.js",\n    "test": "jest",\n    "test:watch": "jest --watch",\n    "test:coverage": "jest --coverage",\n    "validate": "npm run lint && npm run format:check && npm run test"\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged",\n      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"\n    }\n  },\n  "lint-staged": {\n    "*.js": [\n      "eslint --fix",\n      "prettier --write",\n      "git add"\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-vscode-configuration",children:"4. VSCode Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// .vscode/settings.json\n{\n  "editor.formatOnSave": true,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true\n  },\n  "eslint.validate": ["javascript"],\n  "prettier.requireConfig": true,\n  "javascript.preferences.quoteStyle": "single",\n  "typescript.preferences.quoteStyle": "single",\n  "editor.tabSize": 2,\n  "editor.insertSpaces": true,\n  "files.insertFinalNewline": true,\n  "files.trimTrailingWhitespace": true\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.p,{children:"Here's how to apply Google JavaScript style in practice:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"console.log('=== Google JavaScript Style Guide Examples ===');\n\n// \u2705 Good: Complete class example following Google style\n/**\n * Manages user data and operations.\n * @class\n */\nclass UserManager {\n  /**\n   * @param {!Object} config Configuration object\n   * @param {string} config.apiUrl API base URL\n   * @param {number} config.timeout Request timeout in milliseconds\n   */\n  constructor(config) {\n    /** @private {!Object} */\n    this.config_ = config;\n\n    /** @private {!Map<string, !User>} */\n    this.users_ = new Map();\n\n    /** @private {!EventEmitter} */\n    this.eventEmitter_ = new EventEmitter();\n  }\n\n  /**\n   * Retrieves a user by ID.\n   * @param {string} userId The user ID\n   * @return {!Promise<?User>} The user or null if not found\n   * @throws {Error} If userId is invalid\n   */\n  async getUser(userId) {\n    if (!userId || typeof userId !== 'string') {\n      throw new Error('Invalid user ID provided');\n    }\n\n    let user = this.users_.get(userId);\n\n    if (!user) {\n      try {\n        user = await this.fetchUserFromApi_(userId);\n        if (user) {\n          this.users_.set(userId, user);\n        }\n      } catch (error) {\n        console.error(`Failed to fetch user ${userId}:`, error);\n        return null;\n      }\n    }\n\n    return user;\n  }\n\n  /**\n   * Creates a new user.\n   * @param {!UserData} userData User data\n   * @return {!Promise<!User>} The created user\n   * @throws {ValidationError} If user data is invalid\n   */\n  async createUser(userData) {\n    const validatedData = this.validateUserData_(userData);\n\n    const user = {\n      id: this.generateUserId_(),\n      ...validatedData,\n      createdAt: Date.now(),\n      updatedAt: Date.now()\n    };\n\n    try {\n      await this.saveUserToApi_(user);\n      this.users_.set(user.id, user);\n      this.eventEmitter_.emit('userCreated', user);\n\n      return user;\n    } catch (error) {\n      console.error('Failed to create user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * @param {string} userId\n   * @return {!Promise<?User>}\n   * @private\n   */\n  async fetchUserFromApi_(userId) {\n    const url = `${this.config_.apiUrl}/users/${userId}`;\n\n    try {\n      const response = await fetch(url, {\n        timeout: this.config_.timeout\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * @param {!UserData} userData\n   * @return {!UserData}\n   * @throws {ValidationError}\n   * @private\n   */\n  validateUserData_(userData) {\n    const requiredFields = ['name', 'email'];\n    const missingFields = requiredFields.filter(field => !userData[field]);\n\n    if (missingFields.length > 0) {\n      throw new ValidationError(\n        `Missing required fields: ${missingFields.join(', ')}`\n      );\n    }\n\n    if (!this.isValidEmail_(userData.email)) {\n      throw new ValidationError('Invalid email format');\n    }\n\n    return {\n      name: userData.name.trim(),\n      email: userData.email.toLowerCase().trim(),\n      age: userData.age || null\n    };\n  }\n\n  /**\n   * @param {string} email\n   * @return {boolean}\n   * @private\n   */\n  isValidEmail_(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  generateUserId_() {\n    return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * @param {!User} user\n   * @return {!Promise<void>}\n   * @private\n   */\n  async saveUserToApi_(user) {\n    const url = `${this.config_.apiUrl}/users`;\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user),\n      timeout: this.config_.timeout\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to save user: ${response.statusText}`);\n    }\n  }\n}\n\n// Usage example\nconst config = {\n  apiUrl: 'https://api.example.com/v1',\n  timeout: 5000\n};\n\nconst userManager = new UserManager(config);\n\n// Create and retrieve users\nasync function exampleUsage() {\n  try {\n    const newUser = await userManager.createUser({\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      age: 30\n    });\n\n    console.log('Created user:', newUser);\n\n    const retrievedUser = await userManager.getUser(newUser.id);\n    console.log('Retrieved user:', retrievedUser);\n  } catch (error) {\n    console.error('Error in example usage:', error);\n  }\n}\n\nexampleUsage();\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary-checklist",children:"Summary Checklist"}),"\n",(0,r.jsx)(n.p,{children:"Use this checklist to ensure your code follows Google JavaScript style:"}),"\n",(0,r.jsx)(n.h3,{id:"file-structure",children:(0,r.jsx)(n.strong,{children:"File Structure"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","File has proper JSDoc ",(0,r.jsx)(n.code,{children:"@fileoverview"})," comment"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Imports are organized and sorted alphabetically"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Exports are at the bottom of the file"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","File name uses kebab-case"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"formatting",children:(0,r.jsx)(n.strong,{children:"Formatting"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","2-space indentation consistently applied"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Lines \u2264 80 characters when practical"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Semicolons used everywhere required"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Braces used for all control structures"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Consistent spacing around operators"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"naming",children:(0,r.jsx)(n.strong,{children:"Naming"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","camelCase for variables and functions"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","PascalCase for classes and constructors"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","SCREAMING_SNAKE_CASE for constants"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Trailing underscore for private members"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Descriptive names for all identifiers"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"language-features-1",children:(0,r.jsx)(n.strong,{children:"Language Features"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.code,{children:"const"})," and ",(0,r.jsx)(n.code,{children:"let"})," instead of ",(0,r.jsx)(n.code,{children:"var"})]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Arrow functions for callbacks"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Template literals for string interpolation"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Destructuring where appropriate"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Modern array methods (",(0,r.jsx)(n.code,{children:"map"}),", ",(0,r.jsx)(n.code,{children:"filter"}),", ",(0,r.jsx)(n.code,{children:"reduce"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"documentation",children:(0,r.jsx)(n.strong,{children:"Documentation"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All public methods have JSDoc comments"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Parameter and return types documented"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Complex logic has explanatory comments"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Examples provided for non-obvious usage"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:(0,r.jsx)(n.strong,{children:"Best Practices"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Proper error handling with specific error types"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Input validation for public methods"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Consistent async/await usage"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No console.log in production code"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests follow naming conventions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);