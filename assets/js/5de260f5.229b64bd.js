"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[5340],{17321:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(74848),i=t(28453);const a={},s="Java Functional Interfaces",l={id:"Java/Java Functional Interfaces",title:"Java Functional Interfaces",description:"Quick Navigation",source:"@site/docs/Java/Java Functional Interfaces.mdx",sourceDirName:"Java",slug:"/Java/Java Functional Interfaces",permalink:"/docs/Java/Java Functional Interfaces",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Java Functional Interfaces.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Date Time APIs - Complete Guide",permalink:"/docs/Java/Java Date Time APIs - Complete Guide"},next:{title:"Java Language Basics - Execution, Memory & JVM",permalink:"/docs/Java/Java Language Basics"}},o={},c=[{value:"Quick Navigation",id:"quick-navigation",level:2},{value:"What are Functional Interfaces?",id:"what-are-functional-interfaces",level:2},{value:"Built-in Functional Interfaces in <code>java.util.function</code>",id:"built-in-functional-interfaces-in-javautilfunction",level:2},{value:"1. Predicate&lt;T&gt;",id:"1-predicatet",level:3},{value:"2. Function&lt;T,R&gt;",id:"2-functiontr",level:3},{value:"3. Consumer&lt;T&gt;",id:"3-consumert",level:3},{value:"4. Supplier&lt;T&gt;",id:"4-suppliert",level:3},{value:"5. UnaryOperator&lt;T&gt;",id:"5-unaryoperatort",level:3},{value:"6. BinaryOperator&lt;T&gt;",id:"6-binaryoperatort",level:3},{value:"Specialized Primitive Functional Interfaces",id:"specialized-primitive-functional-interfaces",level:2},{value:"Creating Custom Functional Interfaces",id:"creating-custom-functional-interfaces",level:2},{value:"Best Practices",id:"best-practices",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"java-functional-interfaces",children:"Java Functional Interfaces"})}),"\n",(0,r.jsx)(e.h2,{id:"quick-navigation",children:"Quick Navigation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#what-are-functional-interfaces",children:"What are Functional Interfaces?"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#built-in-functional-interfaces-in-javautilfunction",children:"Built-in Functional Interfaces"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:"#1-predicate-t",children:["1. ",(0,r.jsx)(e.code,{children:"Predicate<T>"})]})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:"#2-function-t-r",children:["2. ",(0,r.jsx)(e.code,{children:"Function<T,R>"})]})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:"#3-consumer-t",children:["3. ",(0,r.jsx)(e.code,{children:"Consumer<T>"})]})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:"#4-supplier-t",children:["4. ",(0,r.jsx)(e.code,{children:"Supplier<T>"})]})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:"#5-unary-operator-t",children:["5. ",(0,r.jsx)(e.code,{children:"UnaryOperator<T>"})]})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsxs)(e.a,{href:"#6-binary-operator-t",children:["6. ",(0,r.jsx)(e.code,{children:"BinaryOperator<T>"})]})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#specialized-primitive-functional-interfaces",children:"Specialized Primitive Functional Interfaces"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#creating-custom-functional-interfaces",children:"Creating Custom Functional Interfaces"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"what-are-functional-interfaces",children:"What are Functional Interfaces?"}),"\n",(0,r.jsxs)(e.p,{children:["A ",(0,r.jsx)(e.strong,{children:"functional interface"})," is an interface that contains exactly one abstract method. They serve as the foundation for lambda expressions and method references in Java 8+. The ",(0,r.jsx)(e.code,{children:"@FunctionalInterface"})," annotation can be used to ensure an interface has only one abstract method."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@FunctionalInterface\npublic interface Calculator {\n    int calculate(int a, int b);\n\n    // Default and static methods are allowed\n    default void printResult(int result) {\n        System.out.println("Result: " + result);\n    }\n}\n'})}),"\n",(0,r.jsxs)(e.h2,{id:"built-in-functional-interfaces-in-javautilfunction",children:["Built-in Functional Interfaces in ",(0,r.jsx)(e.code,{children:"java.util.function"})]}),"\n",(0,r.jsx)(e.h3,{id:"1-predicatet",children:"1. Predicate<T>"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Purpose"}),": Represents a boolean-valued function that tests a condition."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Method Signature"}),": ",(0,r.jsx)(e.code,{children:"boolean test(T t)"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Cases"}),": Filtering, validation, conditional logic"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import java.util.function.Predicate;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class PredicateExample {\n    public static void main(String[] args) {\n        // Basic predicate\n        Predicate<Integer> isEven = n -> n % 2 == 0;\n        System.out.println(isEven.test(4)); // true\n        System.out.println(isEven.test(5)); // false\n\n        // String predicate\n        Predicate<String> isEmpty = String::isEmpty;\n        Predicate<String> isNotEmpty = isEmpty.negate();\n\n        // Using with streams for filtering\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n        List<Integer> evenNumbers = numbers.stream()\n            .filter(isEven)\n            .toList();\n        System.out.println(evenNumbers); // [2, 4, 6]\n\n        // Combining predicates\n        Predicate<Integer> greaterThan3 = n -> n > 3;\n        Predicate<Integer> evenAndGreaterThan3 = isEven.and(greaterThan3);\n\n        List<Integer> filtered = numbers.stream()\n            .filter(evenAndGreaterThan3)\n            .toList();\n        System.out.println(filtered); // [4, 6]\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-functiontr",children:"2. Function<T,R>"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Purpose"}),": Represents a function that takes one argument and produces a result."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Method Signature"}),": ",(0,r.jsx)(e.code,{children:"R apply(T t)"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Cases"}),": Data transformation, mapping operations"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.function.Function;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class FunctionExample {\n    public static void main(String[] args) {\n        // Basic function - String to Integer\n        Function<String, Integer> stringLength = String::length;\n        System.out.println(stringLength.apply("Hello")); // 5\n\n        // Integer to String\n        Function<Integer, String> intToString = Object::toString;\n\n        // Function composition\n        Function<String, String> upperCase = String::toUpperCase;\n        Function<String, Integer> upperCaseLength = upperCase.andThen(stringLength);\n        System.out.println(upperCaseLength.apply("hello")); // 5\n\n        // Using with streams\n        List<String> words = Arrays.asList("java", "python", "javascript");\n        List<Integer> lengths = words.stream()\n            .map(stringLength)\n            .toList();\n        System.out.println(lengths); // [4, 6, 10]\n\n        // Complex transformation\n        Function<Person, String> personToFullName = person ->\n            person.getFirstName() + " " + person.getLastName();\n    }\n}\n\nclass Person {\n    private String firstName;\n    private String lastName;\n\n    public Person(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() { return firstName; }\n    public String getLastName() { return lastName; }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"3-consumert",children:"3. Consumer<T>"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Purpose"}),": Represents an operation that accepts a single input argument and returns no result."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Method Signature"}),": ",(0,r.jsx)(e.code,{children:"void accept(T t)"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Cases"}),": Side effects like printing, logging, updating state"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.function.Consumer;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class ConsumerExample {\n    public static void main(String[] args) {\n        // Basic consumer\n        Consumer<String> printer = System.out::println;\n        printer.accept("Hello World!"); // Hello World!\n\n        // Consumer for modifying objects\n        Consumer<StringBuilder> appendExclamation = sb -> sb.append("!");\n        StringBuilder sb = new StringBuilder("Hello");\n        appendExclamation.accept(sb);\n        System.out.println(sb); // Hello!\n\n        // Using with streams\n        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");\n        names.stream()\n            .forEach(printer); // Prints each name\n\n        // Chaining consumers\n        Consumer<String> upperCasePrinter = s -> System.out.println(s.toUpperCase());\n        Consumer<String> lengthPrinter = s -> System.out.println("Length: " + s.length());\n\n        Consumer<String> combinedConsumer = upperCasePrinter.andThen(lengthPrinter);\n        combinedConsumer.accept("hello");\n        // Output:\n        // HELLO\n        // Length: 5\n\n        // Practical example: Database operations\n        Consumer<User> saveUser = user -> {\n            // Simulate saving to database\n            System.out.println("Saving user: " + user.getName());\n        };\n    }\n}\n\nclass User {\n    private String name;\n    public User(String name) { this.name = name; }\n    public String getName() { return name; }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"4-suppliert",children:"4. Supplier<T>"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Purpose"}),": Represents a supplier of results with no input arguments."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Method Signature"}),": ",(0,r.jsx)(e.code,{children:"T get()"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Cases"}),": Lazy evaluation, factory methods, generating values"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.function.Supplier;\nimport java.util.Random;\nimport java.util.List;\nimport java.util.stream.Stream;\n\npublic class SupplierExample {\n    public static void main(String[] args) {\n        // Basic supplier\n        Supplier<String> stringSupplier = () -> "Hello World!";\n        System.out.println(stringSupplier.get()); // Hello World!\n\n        // Random number supplier\n        Supplier<Integer> randomInt = () -> new Random().nextInt(100);\n        System.out.println(randomInt.get()); // Random number 0-99\n\n        // Current timestamp supplier\n        Supplier<Long> timestampSupplier = System::currentTimeMillis;\n        System.out.println(timestampSupplier.get());\n\n        // Using with Stream.generate()\n        List<Integer> randomNumbers = Stream.generate(randomInt)\n            .limit(5)\n            .toList();\n        System.out.println(randomNumbers);\n\n        // Factory pattern with supplier\n        Supplier<List<String>> listFactory = () -> Arrays.asList("a", "b", "c");\n        List<String> newList = listFactory.get();\n\n        // Lazy evaluation example\n        Supplier<String> expensiveOperation = () -> {\n            System.out.println("Performing expensive operation...");\n            // Simulate expensive computation\n            try { Thread.sleep(1000); } catch (InterruptedException e) {}\n            return "Result of expensive operation";\n        };\n\n        // The operation is only executed when get() is called\n        String result = expensiveOperation.get();\n        System.out.println(result);\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"5-unaryoperatort",children:"5. UnaryOperator<T>"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Purpose"}),": Represents an operation on a single operand that produces a result of the same type."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Method Signature"}),": ",(0,r.jsx)(e.code,{children:"T apply(T t)"})," (extends ",(0,r.jsx)(e.code,{children:"Function<T,T>"}),")"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Cases"}),": In-place transformations, mathematical operations"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.function.UnaryOperator;\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class UnaryOperatorExample {\n    public static void main(String[] args) {\n        // Basic unary operator\n        UnaryOperator<Integer> square = x -> x * x;\n        System.out.println(square.apply(5)); // 25\n\n        // String operations\n        UnaryOperator<String> upperCase = String::toUpperCase;\n        UnaryOperator<String> addPrefix = s -> "Mr. " + s;\n\n        // Composition\n        UnaryOperator<String> upperCaseWithPrefix = upperCase.compose(addPrefix);\n        System.out.println(upperCaseWithPrefix.apply("smith")); // MR. SMITH\n\n        // Using with streams\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> squared = numbers.stream()\n            .map(square)\n            .toList();\n        System.out.println(squared); // [1, 4, 9, 16, 25]\n\n        // Mathematical transformations\n        UnaryOperator<Double> addTax = price -> price * 1.08;\n        UnaryOperator<Double> applyDiscount = price -> price * 0.9;\n\n        double finalPrice = addTax.andThen(applyDiscount).apply(100.0);\n        System.out.println(finalPrice); // 97.2\n\n        // Identity operator\n        UnaryOperator<String> identity = UnaryOperator.identity();\n        System.out.println(identity.apply("unchanged")); // unchanged\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"6-binaryoperatort",children:"6. BinaryOperator<T>"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Purpose"}),": Represents an operation upon two operands of the same type, producing a result of the same type."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Method Signature"}),": ",(0,r.jsx)(e.code,{children:"T apply(T t1, T t2)"})," (extends ",(0,r.jsx)(e.code,{children:"BiFunction<T,T,T>"}),")"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Cases"}),": Aggregation, reduction operations, combining values"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.function.BinaryOperator;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class BinaryOperatorExample {\n    public static void main(String[] args) {\n        // Basic binary operators\n        BinaryOperator<Integer> add = (a, b) -> a + b;\n        BinaryOperator<Integer> multiply = (a, b) -> a * b;\n        BinaryOperator<Integer> max = Integer::max;\n        BinaryOperator<Integer> min = Integer::min;\n\n        System.out.println(add.apply(5, 3)); // 8\n        System.out.println(multiply.apply(4, 7)); // 28\n        System.out.println(max.apply(10, 15)); // 15\n\n        // String concatenation\n        BinaryOperator<String> concat = (s1, s2) -> s1 + " " + s2;\n        System.out.println(concat.apply("Hello", "World")); // Hello World\n\n        // Using with streams for reduction\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\n        Optional<Integer> sum = numbers.stream().reduce(add);\n        Optional<Integer> product = numbers.stream().reduce(multiply);\n        Optional<Integer> maximum = numbers.stream().reduce(max);\n\n        System.out.println("Sum: " + sum.orElse(0)); // Sum: 15\n        System.out.println("Product: " + product.orElse(1)); // Product: 120\n        System.out.println("Max: " + maximum.orElse(0)); // Max: 5\n\n        // Custom object operations\n        BinaryOperator<Person> youngerPerson = (p1, p2) ->\n            p1.getAge() < p2.getAge() ? p1 : p2;\n\n        Person alice = new Person("Alice", 25);\n        Person bob = new Person("Bob", 30);\n        Person younger = youngerPerson.apply(alice, bob);\n        System.out.println("Younger: " + younger.getName()); // Younger: Alice\n\n        // Using static methods from BinaryOperator\n        BinaryOperator<String> maxByLength = BinaryOperator.maxBy(\n            (s1, s2) -> Integer.compare(s1.length(), s2.length())\n        );\n        String longer = maxByLength.apply("Java", "Programming");\n        System.out.println(longer); // Programming\n    }\n}\n\nclass Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() { return name; }\n    public int getAge() { return age; }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"specialized-primitive-functional-interfaces",children:"Specialized Primitive Functional Interfaces"}),"\n",(0,r.jsx)(e.p,{children:"Java also provides specialized versions for primitive types to avoid boxing/unboxing:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import java.util.function.*;\n\npublic class PrimitiveFunctionalInterfaces {\n    public static void main(String[] args) {\n        // IntPredicate instead of Predicate<Integer>\n        IntPredicate isEven = n -> n % 2 == 0;\n        System.out.println(isEven.test(4)); // true\n\n        // IntFunction instead of Function<Integer, R>\n        IntFunction<String> intToString = Integer::toString;\n        System.out.println(intToString.apply(42)); // "42"\n\n        // IntConsumer instead of Consumer<Integer>\n        IntConsumer printer = System.out::println;\n        printer.accept(100); // 100\n\n        // IntSupplier instead of Supplier<Integer>\n        IntSupplier randomInt = () -> (int)(Math.random() * 100);\n        System.out.println(randomInt.getAsInt());\n\n        // IntUnaryOperator instead of UnaryOperator<Integer>\n        IntUnaryOperator square = x -> x * x;\n        System.out.println(square.applyAsInt(5)); // 25\n\n        // IntBinaryOperator instead of BinaryOperator<Integer>\n        IntBinaryOperator add = (a, b) -> a + b;\n        System.out.println(add.applyAsInt(3, 7)); // 10\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"creating-custom-functional-interfaces",children:"Creating Custom Functional Interfaces"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@FunctionalInterface\npublic interface TriFunction<T, U, V, R> {\n    R apply(T t, U u, V v);\n}\n\n@FunctionalInterface\npublic interface Validator<T> {\n    ValidationResult validate(T item);\n\n    default Validator<T> and(Validator<T> other) {\n        return item -> {\n            ValidationResult first = this.validate(item);\n            return first.isValid() ? other.validate(item) : first;\n        };\n    }\n}\n\nclass ValidationResult {\n    private final boolean valid;\n    private final String message;\n\n    public ValidationResult(boolean valid, String message) {\n        this.valid = valid;\n        this.message = message;\n    }\n\n    public boolean isValid() { return valid; }\n    public String getMessage() { return message; }\n\n    public static ValidationResult valid() {\n        return new ValidationResult(true, "Valid");\n    }\n\n    public static ValidationResult invalid(String message) {\n        return new ValidationResult(false, message);\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use method references when possible"})," for better readability:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Instead of: s -> System.out.println(s)\nConsumer<String> printer = System.out::println;\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Compose functions"})," for complex operations:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'Function<String, String> processText = String::trim\n    .andThen(String::toUpperCase)\n    .andThen(s -> s.replace(" ", "_"));\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use primitive specializations"})," to avoid boxing:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Prefer IntPredicate over Predicate<Integer>\nIntPredicate isPositive = n -> n > 0;\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Chain operations"})," using default methods:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"Predicate<String> notNull = Objects::nonNull;\nPredicate<String> notEmpty = s -> !s.isEmpty();\nPredicate<String> valid = notNull.and(notEmpty);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Functional interfaces enable powerful functional programming patterns in Java, making code more concise, readable, and maintainable when used appropriately."})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var r=t(96540);const i={},a=r.createContext(i);function s(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);