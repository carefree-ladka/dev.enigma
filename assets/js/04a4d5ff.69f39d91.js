"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3117],{7543:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=i(4848),r=i(8453);const s={},l="Java Language Basics - Execution, Memory & JVM",o={id:"Java/Java Language Basics",title:"Java Language Basics - Execution, Memory & JVM",description:"Table of Contents",source:"@site/docs/Java/Java Language Basics.mdx",sourceDirName:"Java",slug:"/Java/Java Language Basics",permalink:"/js.enigma/docs/Java/Java Language Basics",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/Java Language Basics.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Interview Questions Guide",permalink:"/js.enigma/docs/Java/Java Interview Questions"},next:{title:"Java Beginner's Guide",permalink:"/js.enigma/docs/Java/JavaBeginner'sGuide"}},t={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Java Overview",id:"java-overview",level:2},{value:"Java Execution Process",id:"java-execution-process",level:2},{value:"1. Source Code (.java files)",id:"1-source-code-java-files",level:3},{value:"2. Compilation Process",id:"2-compilation-process",level:3},{value:"3. Execution Process",id:"3-execution-process",level:3},{value:"Java Virtual Machine (JVM)",id:"java-virtual-machine-jvm",level:2},{value:"JVM Architecture",id:"jvm-architecture",level:3},{value:"JVM Components",id:"jvm-components",level:3},{value:"1. Class Loader Subsystem",id:"1-class-loader-subsystem",level:4},{value:"2. Memory Areas",id:"2-memory-areas",level:4},{value:"3. Execution Engine",id:"3-execution-engine",level:4},{value:"Memory Management",id:"memory-management",level:2},{value:"Heap Memory Structure",id:"heap-memory-structure",level:3},{value:"Stack Memory",id:"stack-memory",level:3},{value:"Memory Allocation Example",id:"memory-allocation-example",level:3},{value:"Code Compilation &amp; Execution",id:"code-compilation--execution",level:2},{value:"Compilation Steps",id:"compilation-steps",level:3},{value:"Bytecode Example",id:"bytecode-example",level:3},{value:"JIT Compilation Process",id:"jit-compilation-process",level:3},{value:"Java Runtime Environment",id:"java-runtime-environment",level:2},{value:"JRE Components",id:"jre-components",level:3},{value:"JDK vs JRE vs JVM",id:"jdk-vs-jre-vs-jvm",level:3},{value:"Platform Independence",id:"platform-independence",level:2},{value:"How Java Achieves Platform Independence",id:"how-java-achieves-platform-independence",level:3},{value:"Memory Management Deep Dive",id:"memory-management-deep-dive",level:2},{value:"Garbage Collection",id:"garbage-collection",level:3},{value:"GC Process Example",id:"gc-process-example",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"JVM Tuning Parameters",id:"jvm-tuning-parameters",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"java-language-basics---execution-memory--jvm",children:"Java Language Basics - Execution, Memory & JVM"})}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#java-overview",children:"Java Overview"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#java-execution-process",children:"Java Execution Process"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#java-virtual-machine-jvm",children:"Java Virtual Machine (JVM)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#memory-management",children:"Memory Management"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#code-compilation--execution",children:"Code Compilation & Execution"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#java-runtime-environment",children:"Java Runtime Environment"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#platform-independence",children:"Platform Independence"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"java-overview",children:"Java Overview"}),"\n",(0,a.jsx)(n.p,{children:"Java is a high-level, object-oriented programming language developed by Sun Microsystems (now Oracle). Key characteristics:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Platform Independent"}),': "Write Once, Run Anywhere" (WORA)']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Object-Oriented"}),": Everything is an object (except primitives)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Strongly Typed"}),": Variables must be declared with specific types"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Memory Managed"}),": Automatic garbage collection"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Compiled and Interpreted"}),": Bytecode compilation + JVM interpretation"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"java-execution-process",children:"Java Execution Process"}),"\n",(0,a.jsx)(n.h3,{id:"1-source-code-java-files",children:"1. Source Code (.java files)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Example: HelloWorld.java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-compilation-process",children:"2. Compilation Process"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"javac HelloWorld.java  # Compiles to HelloWorld.class\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"What happens during compilation:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Source code (.java) \u2192 Bytecode (.class)"}),"\n",(0,a.jsx)(n.li,{children:"Syntax checking and error reporting"}),"\n",(0,a.jsx)(n.li,{children:"Optimization at compile time"}),"\n",(0,a.jsx)(n.li,{children:"Generation of platform-independent bytecode"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-execution-process",children:"3. Execution Process"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"java HelloWorld  # Runs the bytecode\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Execution flow:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"JVM loads the bytecode"}),"\n",(0,a.jsx)(n.li,{children:"Bytecode verification"}),"\n",(0,a.jsx)(n.li,{children:"Just-In-Time (JIT) compilation"}),"\n",(0,a.jsx)(n.li,{children:"Native machine code execution"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"java-virtual-machine-jvm",children:"Java Virtual Machine (JVM)"}),"\n",(0,a.jsx)(n.h3,{id:"jvm-architecture",children:"JVM Architecture"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                JVM                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Class Loader Subsystem                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Memory Areas:                              \u2502\n\u2502  \u251c\u2500 Method Area                             \u2502\n\u2502  \u251c\u2500 Heap Memory                             \u2502\n\u2502  \u251c\u2500 Stack Memory                            \u2502\n\u2502  \u251c\u2500 PC (Program Counter) Register           \u2502\n\u2502  \u2514\u2500 Native Method Stack                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Execution Engine:                          \u2502\n\u2502  \u251c\u2500 Interpreter                             \u2502\n\u2502  \u251c\u2500 JIT Compiler                            \u2502\n\u2502  \u2514\u2500 Garbage Collector                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Native Method Interface (JNI)              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h3,{id:"jvm-components",children:"JVM Components"}),"\n",(0,a.jsx)(n.h4,{id:"1-class-loader-subsystem",children:"1. Class Loader Subsystem"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Loading"}),": Loads .class files into memory"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Linking"}),": Verification, preparation, resolution"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Initialization"}),": Static variables and blocks"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"2-memory-areas",children:"2. Memory Areas"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Method Area"}),": Class-level data, constants, static variables"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Heap"}),": Object instances and arrays"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Stack"}),": Method call frames, local variables"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"PC Register"}),": Current executing instruction pointer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Native Method Stack"}),": Native method calls"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"3-execution-engine",children:"3. Execution Engine"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interpreter"}),": Executes bytecode line by line"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"JIT Compiler"}),": Compiles frequently used bytecode to native code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Garbage Collector"}),": Automatic memory management"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"memory-management",children:"Memory Management"}),"\n",(0,a.jsx)(n.h3,{id:"heap-memory-structure",children:"Heap Memory Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                HEAP MEMORY                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Young Generation:                          \u2502\n\u2502  \u251c\u2500 Eden Space (new objects)                \u2502\n\u2502  \u251c\u2500 Survivor Space S0                       \u2502\n\u2502  \u2514\u2500 Survivor Space S1                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Old Generation (Tenured):                  \u2502\n\u2502  \u2514\u2500 Long-lived objects                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Metaspace (Java 8+):                       \u2502\n\u2502  \u2514\u2500 Class metadata                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h3,{id:"stack-memory",children:"Stack Memory"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class StackExample {\n    public static void main(String[] args) {    // Frame 1\n        int x = 10;\n        methodA(x);\n    }\n\n    static void methodA(int a) {                // Frame 2\n        int b = 20;\n        methodB(a, b);\n    }\n\n    static void methodB(int p, int q) {         // Frame 3\n        int result = p + q;\n        System.out.println(result);\n    }  // Frame 3 destroyed\n}      // Frame 2 destroyed, Frame 1 destroyed\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Stack Frame Contains:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Local variables"}),"\n",(0,a.jsx)(n.li,{children:"Method parameters"}),"\n",(0,a.jsx)(n.li,{children:"Return address"}),"\n",(0,a.jsx)(n.li,{children:"Intermediate values"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"memory-allocation-example",children:"Memory Allocation Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class MemoryExample {\n    static int staticVar = 100;        // Method Area\n\n    public static void main(String[] args) {\n        int localVar = 10;             // Stack\n        String str = "Hello";          // String Pool (Heap)\n        Person p = new Person("John"); // Heap\n\n        // localVar, str reference \u2192 Stack\n        // "Hello", Person object \u2192 Heap\n        // staticVar \u2192 Method Area\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"code-compilation--execution",children:"Code Compilation & Execution"}),"\n",(0,a.jsx)(n.h3,{id:"compilation-steps",children:"Compilation Steps"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lexical Analysis"}),": Source code \u2192 Tokens"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Syntax Analysis"}),": Tokens \u2192 Abstract Syntax Tree (AST)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Semantic Analysis"}),": Type checking, scope resolution"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Code Generation"}),": AST \u2192 Bytecode"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Optimization"}),": Bytecode optimization"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"bytecode-example",children:"Bytecode Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Java source\npublic int add(int a, int b) {\n    return a + b;\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// Corresponding bytecode\npublic int add(int, int);\n  Code:\n     0: iload_1      // Load first parameter\n     1: iload_2      // Load second parameter\n     2: iadd         // Add integers\n     3: ireturn      // Return result\n"})}),"\n",(0,a.jsx)(n.h3,{id:"jit-compilation-process",children:"JIT Compilation Process"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Bytecode \u2192 Profiling \u2192 Hot Spot Detection \u2192 Native Code Generation\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"JIT Optimization Levels:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"C1 Compiler"}),": Fast compilation, basic optimizations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"C2 Compiler"}),": Slower compilation, advanced optimizations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tiered Compilation"}),": Combines C1 and C2"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"java-runtime-environment",children:"Java Runtime Environment"}),"\n",(0,a.jsx)(n.h3,{id:"jre-components",children:"JRE Components"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Java Runtime Environment (JRE)            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u251c\u2500 Java Virtual Machine (JVM)             \u2502\n\u2502  \u251c\u2500 Core Libraries (java.lang, java.util)  \u2502\n\u2502  \u251c\u2500 Supporting Files                        \u2502\n\u2502  \u2514\u2500 Configuration Files                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h3,{id:"jdk-vs-jre-vs-jvm",children:"JDK vs JRE vs JVM"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Java Development Kit (JDK)                \u2502\n\u2502  \u251c\u2500 Development Tools (javac, jar, etc.)   \u2502\n\u2502  \u2514\u2500 Java Runtime Environment (JRE)         \u2502\n\u2502      \u251c\u2500 Java Virtual Machine (JVM)         \u2502\n\u2502      \u2514\u2500 Core Libraries                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h2,{id:"platform-independence",children:"Platform Independence"}),"\n",(0,a.jsx)(n.h3,{id:"how-java-achieves-platform-independence",children:"How Java Achieves Platform Independence"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Bytecode"}),": Intermediate representation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"JVM"}),": Platform-specific implementation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Standard Libraries"}),": Consistent APIs across platforms"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Java Source  \u2502    \u2502  Bytecode   \u2502    \u2502   Native    \u2502\n\u2502  (.java)    \u2502\u2500\u2500\u2500\u25b6\u2502  (.class)   \u2502\u2500\u2500\u2500\u25b6\u2502   Code      \u2502\n\u2502             \u2502    \u2502Platform     \u2502    \u2502Platform     \u2502\n\u2502Platform     \u2502    \u2502Independent  \u2502    \u2502Dependent    \u2502\n\u2502Independent  \u2502    \u2502             \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h2,{id:"memory-management-deep-dive",children:"Memory Management Deep Dive"}),"\n",(0,a.jsx)(n.h3,{id:"garbage-collection",children:"Garbage Collection"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Types of GC:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Serial GC"}),": Single-threaded"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Parallel GC"}),": Multi-threaded"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CMS GC"}),": Concurrent Mark Sweep"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"G1 GC"}),": Garbage First"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ZGC/Shenandoah"}),": Low-latency collectors"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"gc-process-example",children:"GC Process Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class GCExample {\n    public static void main(String[] args) {\n        // Objects created in Eden space\n        Person p1 = new Person("Alice");\n        Person p2 = new Person("Bob");\n\n        p1 = null; // p1 becomes eligible for GC\n\n        // Force garbage collection (not recommended in production)\n        System.gc();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsx)(n.h3,{id:"jvm-tuning-parameters",children:"JVM Tuning Parameters"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Heap size\njava -Xms512m -Xmx2g MyApp\n\n# Garbage Collector\njava -XX:+UseG1GC MyApp\n\n# JIT compilation\njava -XX:+TieredCompilation MyApp\n\n# Memory debugging\njava -XX:+PrintGCDetails MyApp\n"})}),"\n",(0,a.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Memory Management"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Avoid memory leaks"}),"\n",(0,a.jsx)(n.li,{children:"Use appropriate data structures"}),"\n",(0,a.jsx)(n.li,{children:"Close resources properly"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Minimize object creation in loops"}),"\n",(0,a.jsx)(n.li,{children:"Use StringBuilder for string concatenation"}),"\n",(0,a.jsx)(n.li,{children:"Profile your application"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"JVM Configuration"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Set appropriate heap sizes"}),"\n",(0,a.jsx)(n.li,{children:"Choose suitable garbage collector"}),"\n",(0,a.jsx)(n.li,{children:"Monitor JVM metrics"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.p,{children:"Java's execution model provides platform independence through bytecode compilation and JVM interpretation. The JVM manages memory automatically through garbage collection and optimizes performance through JIT compilation. Understanding these concepts is crucial for writing efficient Java applications and troubleshooting performance issues."}),"\n",(0,a.jsx)(n.p,{children:"Key takeaways:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Java source code compiles to platform-independent bytecode"}),"\n",(0,a.jsx)(n.li,{children:"JVM provides runtime environment with automatic memory management"}),"\n",(0,a.jsx)(n.li,{children:"Memory is organized into heap, stack, and method areas"}),"\n",(0,a.jsx)(n.li,{children:"JIT compilation optimizes frequently executed code"}),"\n",(0,a.jsx)(n.li,{children:"Garbage collection automatically manages object lifecycle"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var a=i(6540);const r={},s=a.createContext(r);function l(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);