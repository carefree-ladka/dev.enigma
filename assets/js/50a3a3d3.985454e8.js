"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[57159],{9323:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var i=r(74848),t=r(28453);const l={},s="Blind 75 + Essential LeetCode Solutions",a={id:"DSA/Blind 75 + Essential LeetCode Solutions",title:"Blind 75 + Essential LeetCode Solutions",description:"Table of Contents",source:"@site/docs/DSA/Blind 75 + Essential LeetCode Solutions.mdx",sourceDirName:"DSA",slug:"/DSA/Blind 75 + Essential LeetCode Solutions",permalink:"/docs/DSA/Blind 75 + Essential LeetCode Solutions",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/Blind 75 + Essential LeetCode Solutions.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Minimum Enclosing Circle - Welzl's Algorithm",permalink:"/docs/DSA/DSA with JavaScript/Welzl\u2019sAlgorithm"},next:{title:"Array Problems - Comprehensive Guide",permalink:"/docs/DSA/DSA Problems/Array Problems - Comprehensive Guide"}},d={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Array",id:"array",level:3},{value:"Binary",id:"binary",level:3},{value:"Dynamic Programming",id:"dynamic-programming",level:3},{value:"Graph",id:"graph",level:3},{value:"Interval",id:"interval",level:3},{value:"Linked List",id:"linked-list",level:3},{value:"Matrix",id:"matrix",level:3},{value:"String",id:"string",level:3},{value:"Tree",id:"tree",level:3},{value:"Heap",id:"heap",level:3},{value:"Backtracking",id:"backtracking",level:3},{value:"Array",id:"array-1",level:2},{value:"Two Sum",id:"two-sum",level:3},{value:"Valid Anagram",id:"valid-anagram",level:3},{value:"Group Anagrams",id:"group-anagrams",level:3},{value:"Valid Parentheses",id:"valid-parentheses",level:3},{value:"Valid Palindrome",id:"valid-palindrome",level:3},{value:"Longest Palindromic Substring",id:"longest-palindromic-substring",level:3},{value:"Palindromic Substrings",id:"palindromic-substrings",level:3},{value:"Tree",id:"tree-1",level:2},{value:"Maximum Depth of Binary Tree",id:"maximum-depth-of-binary-tree",level:3},{value:"Same Tree",id:"same-tree",level:3},{value:"Invert Binary Tree",id:"invert-binary-tree",level:3},{value:"Binary Tree Maximum Path Sum",id:"binary-tree-maximum-path-sum",level:3},{value:"Binary Tree Level Order Traversal",id:"binary-tree-level-order-traversal",level:3},{value:"Serialize and Deserialize Binary Tree",id:"serialize-and-deserialize-binary-tree",level:3},{value:"Subtree of Another Tree",id:"subtree-of-another-tree",level:3},{value:"Construct Binary Tree from Preorder and Inorder",id:"construct-binary-tree-from-preorder-and-inorder",level:3},{value:"Validate Binary Search Tree",id:"validate-binary-search-tree",level:3},{value:"Kth Smallest Element in BST",id:"kth-smallest-element-in-bst",level:3},{value:"Lowest Common Ancestor of BST",id:"lowest-common-ancestor-of-bst",level:3},{value:"Implement Trie",id:"implement-trie",level:3},{value:"Add and Search Word",id:"add-and-search-word",level:3},{value:"Word Search II",id:"word-search-ii",level:3},{value:"Binary Tree Right Side View",id:"binary-tree-right-side-view",level:3},{value:"Heap",id:"heap-1",level:2},{value:"Top K Frequent Elements",id:"top-k-frequent-elements",level:3},{value:"Find Median from Data Stream",id:"find-median-from-data-stream",level:3},{value:"Kth Largest Element in Array",id:"kth-largest-element-in-array",level:3},{value:"Backtracking",id:"backtracking-1",level:2},{value:"Permutations",id:"permutations",level:3},{value:"Subsets",id:"subsets",level:3},{value:"Generate Parentheses",id:"generate-parentheses",level:3},{value:"Complexity Summary",id:"complexity-summary",level:2},{value:"Tips for Each Category",id:"tips-for-each-category",level:2},{value:"Array",id:"array-2",level:3},{value:"Binary",id:"binary-1",level:3},{value:"Dynamic Programming",id:"dynamic-programming-1",level:3},{value:"Graph",id:"graph-1",level:3},{value:"Linked List",id:"linked-list-1",level:3},{value:"String",id:"string-1",level:3},{value:"Tree",id:"tree-2",level:3},{value:"Heap",id:"heap-2",level:3},{value:"Backtracking",id:"backtracking-2",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"blind-75--essential-leetcode-solutions",children:"Blind 75 + Essential LeetCode Solutions"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsx)(n.h3,{id:"array",children:"Array"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#two-sum",children:"Two Sum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-time-to-buy-and-sell-stock",children:"Best Time to Buy and Sell Stock"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#contains-duplicate",children:"Contains Duplicate"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#product-of-array-except-self",children:"Product of Array Except Self"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#maximum-subarray",children:"Maximum Subarray"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#maximum-product-subarray",children:"Maximum Product Subarray"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#find-minimum-in-rotated-sorted-array",children:"Find Minimum in Rotated Sorted Array"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#search-in-rotated-sorted-array",children:"Search in Rotated Sorted Array"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#3sum",children:"3Sum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#container-with-most-water",children:"Container With Most Water"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#trapping-rain-water",children:"Trapping Rain Water"})," \u2b50"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#rotate-array",children:"Rotate Array"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"binary",children:"Binary"}),"\n",(0,i.jsxs)(n.ol,{start:"13",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sum-of-two-integers",children:"Sum of Two Integers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#number-of-1-bits",children:"Number of 1 Bits"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#counting-bits",children:"Counting Bits"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#missing-number",children:"Missing Number"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reverse-bits",children:"Reverse Bits"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-programming",children:"Dynamic Programming"}),"\n",(0,i.jsxs)(n.ol,{start:"18",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#climbing-stairs",children:"Climbing Stairs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#coin-change",children:"Coin Change"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#longest-increasing-subsequence",children:"Longest Increasing Subsequence"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#longest-common-subsequence",children:"Longest Common Subsequence"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#word-break",children:"Word Break"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#combination-sum",children:"Combination Sum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#house-robber",children:"House Robber"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#house-robber-ii",children:"House Robber II"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#decode-ways",children:"Decode Ways"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#unique-paths",children:"Unique Paths"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#jump-game",children:"Jump Game"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#partition-equal-subset-sum",children:"Partition Equal Subset Sum"})," \u2b50"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#edit-distance",children:"Edit Distance"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"graph",children:"Graph"}),"\n",(0,i.jsxs)(n.ol,{start:"31",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#clone-graph",children:"Clone Graph"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#course-schedule",children:"Course Schedule"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#pacific-atlantic-water-flow",children:"Pacific Atlantic Water Flow"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#number-of-islands",children:"Number of Islands"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#longest-consecutive-sequence",children:"Longest Consecutive Sequence"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#rotting-oranges",children:"Rotting Oranges"})," \u2b50"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#word-ladder",children:"Word Ladder"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"interval",children:"Interval"}),"\n",(0,i.jsxs)(n.ol,{start:"38",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#insert-interval",children:"Insert Interval"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#merge-intervals",children:"Merge Intervals"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#non-overlapping-intervals",children:"Non-overlapping Intervals"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"linked-list",children:"Linked List"}),"\n",(0,i.jsxs)(n.ol,{start:"41",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reverse-linked-list",children:"Reverse Linked List"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#detect-cycle-in-linked-list",children:"Detect Cycle in Linked List"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#merge-two-sorted-lists",children:"Merge Two Sorted Lists"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#merge-k-sorted-lists",children:"Merge K Sorted Lists"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#remove-nth-node-from-end",children:"Remove Nth Node From End"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reorder-list",children:"Reorder List"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#copy-list-with-random-pointer",children:"Copy List with Random Pointer"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"matrix",children:"Matrix"}),"\n",(0,i.jsxs)(n.ol,{start:"48",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#set-matrix-zeroes",children:"Set Matrix Zeroes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#spiral-matrix",children:"Spiral Matrix"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#rotate-image",children:"Rotate Image"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#word-search",children:"Word Search"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,i.jsxs)(n.ol,{start:"52",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#longest-substring-without-repeating-characters",children:"Longest Substring Without Repeating Characters"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#longest-repeating-character-replacement",children:"Longest Repeating Character Replacement"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#minimum-window-substring",children:"Minimum Window Substring"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#valid-anagram",children:"Valid Anagram"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#group-anagrams",children:"Group Anagrams"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#valid-parentheses",children:"Valid Parentheses"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#valid-palindrome",children:"Valid Palindrome"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#longest-palindromic-substring",children:"Longest Palindromic Substring"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#palindromic-substrings",children:"Palindromic Substrings"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tree",children:"Tree"}),"\n",(0,i.jsxs)(n.ol,{start:"61",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#maximum-depth-of-binary-tree",children:"Maximum Depth of Binary Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#same-tree",children:"Same Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#invert-binary-tree",children:"Invert Binary Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#binary-tree-maximum-path-sum",children:"Binary Tree Maximum Path Sum"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#binary-tree-level-order-traversal",children:"Binary Tree Level Order Traversal"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#serialize-and-deserialize-binary-tree",children:"Serialize and Deserialize Binary Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#subtree-of-another-tree",children:"Subtree of Another Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#construct-binary-tree-from-preorder-and-inorder",children:"Construct Binary Tree from Preorder and Inorder"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#validate-binary-search-tree",children:"Validate Binary Search Tree"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#kth-smallest-element-in-bst",children:"Kth Smallest Element in BST"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#lowest-common-ancestor-of-bst",children:"Lowest Common Ancestor of BST"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#implement-trie",children:"Implement Trie"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#add-and-search-word",children:"Add and Search Word"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#word-search-ii",children:"Word Search II"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#binary-tree-right-side-view",children:"Binary Tree Right Side View"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"heap",children:"Heap"}),"\n",(0,i.jsxs)(n.ol,{start:"76",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#top-k-frequent-elements",children:"Top K Frequent Elements"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#find-median-from-data-stream",children:"Find Median from Data Stream"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#kth-largest-element-in-array",children:"Kth Largest Element in Array"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backtracking",children:"Backtracking"}),"\n",(0,i.jsxs)(n.ol,{start:"79",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#permutations",children:"Permutations"})," \u2b50"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#subsets",children:"Subsets"})," \u2b50"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#generate-parentheses",children:"Generate Parentheses"})," \u2b50"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"array-1",children:"Array"}),"\n",(0,i.jsx)(n.h3,{id:"two-sum",children:"Two Sum"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force - O(n\xb2) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] == target - nums[i]) {\n                    return new int[] { i, j };\n                }\n            }\n        }\n        // If no valid pair is found, return an empty array instead of null\n        return new int[] {};\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Sliding Window) - O(n+m) time, O(m) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n\n        for (int i = 0; i < nums.length; i++) {\n            int comp = target - nums[i];\n            if (map.containsKey(comp)) {\n                return new int[] { map.get(comp), i };\n            }\n            map.put(nums[i], i);\n\n        }\n        return new int[0];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"valid-anagram",children:"Valid Anagram"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Sort) - O(n log n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) return false;\n\n    char[] sArr = s.toCharArray();\n    char[] tArr = t.toCharArray();\n\n    Arrays.sort(sArr);\n    Arrays.sort(tArr);\n\n    return Arrays.equals(sArr, tArr);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Frequency count) - O(n) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) return false;\n\n    int[] count = new int[26];\n\n    for (int i = 0; i < s.length(); i++) {\n        count[s.charAt(i) - 'a']++;\n        count[t.charAt(i) - 'a']--;\n    }\n\n    for (int c : count) {\n        if (c != 0) return false;\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"group-anagrams",children:"Group Anagrams"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Brute Force - O(n\xb2",(0,i.jsx)(n.em,{children:"k) time, O(n"}),"k) space:"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<String>> groupAnagrams(String[] strs) {\n    List<List<String>> result = new ArrayList<>();\n    boolean[] used = new boolean[strs.length];\n\n    for (int i = 0; i < strs.length; i++) {\n        if (used[i]) continue;\n\n        List<String> group = new ArrayList<>();\n        group.add(strs[i]);\n        used[i] = true;\n\n        for (int j = i + 1; j < strs.length; j++) {\n            if (!used[j] && isAnagram(strs[i], strs[j])) {\n                group.add(strs[j]);\n                used[j] = true;\n            }\n        }\n\n        result.add(group);\n    }\n\n    return result;\n}\n\nprivate boolean isAnagram(String s, String t) {\n    if (s.length() != t.length()) return false;\n    int[] count = new int[26];\n    for (int i = 0; i < s.length(); i++) {\n        count[s.charAt(i) - 'a']++;\n        count[t.charAt(i) - 'a']--;\n    }\n    for (int c : count) {\n        if (c != 0) return false;\n    }\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Optimal (HashMap with sorted key) - O(n",(0,i.jsx)(n.em,{children:"k"}),"log k) time, O(n*k) space:"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<String>> groupAnagrams(String[] strs) {\n    Map<String, List<String>> map = new HashMap<>();\n\n    for (String str : strs) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        String key = new String(chars);\n\n        map.computeIfAbsent(key, k -> new ArrayList<>()).add(str);\n    }\n\n    return new ArrayList<>(map.values());\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"valid-parentheses",children:"Valid Parentheses"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Replace pairs) - O(n\xb2) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public boolean isValid(String s) {\n    while (s.contains("()") || s.contains("[]") || s.contains("{}")) {\n        s = s.replace("()", "");\n        s = s.replace("[]", "");\n        s = s.replace("{}", "");\n    }\n    return s.isEmpty();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Stack) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isValid(String s) {\n    Stack<Character> stack = new Stack<>();\n\n    for (char c : s.toCharArray()) {\n        if (c == '(' || c == '[' || c == '{') {\n            stack.push(c);\n        } else {\n            if (stack.isEmpty()) return false;\n\n            char top = stack.pop();\n            if (c == ')' && top != '(') return false;\n            if (c == ']' && top != '[') return false;\n            if (c == '}' && top != '{') return false;\n        }\n    }\n\n    return stack.isEmpty();\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"valid-palindrome",children:"Valid Palindrome"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Create filtered string) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isPalindrome(String s) {\n    StringBuilder sb = new StringBuilder();\n\n    for (char c : s.toCharArray()) {\n        if (Character.isLetterOrDigit(c)) {\n            sb.append(Character.toLowerCase(c));\n        }\n    }\n\n    String filtered = sb.toString();\n    String reversed = sb.reverse().toString();\n\n    return filtered.equals(reversed);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Two pointers) - O(n) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isPalindrome(String s) {\n    int left = 0, right = s.length() - 1;\n\n    while (left < right) {\n        while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {\n            left++;\n        }\n\n        while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {\n            right--;\n        }\n\n        if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {\n            return false;\n        }\n\n        left++;\n        right--;\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"longest-palindromic-substring",children:"Longest Palindromic Substring"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force - O(n\xb3) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public String longestPalindrome(String s) {\n    String longest = "";\n\n    for (int i = 0; i < s.length(); i++) {\n        for (int j = i; j < s.length(); j++) {\n            String sub = s.substring(i, j + 1);\n            if (isPalindrome(sub) && sub.length() > longest.length()) {\n                longest = sub;\n            }\n        }\n    }\n\n    return longest;\n}\n\nprivate boolean isPalindrome(String s) {\n    int left = 0, right = s.length() - 1;\n    while (left < right) {\n        if (s.charAt(left++) != s.charAt(right--)) return false;\n    }\n    return true;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Expand around center) - O(n\xb2) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public String longestPalindrome(String s) {\n    if (s == null || s.length() < 1) return "";\n\n    int start = 0, end = 0;\n\n    for (int i = 0; i < s.length(); i++) {\n        int len1 = expandAroundCenter(s, i, i);\n        int len2 = expandAroundCenter(s, i, i + 1);\n        int len = Math.max(len1, len2);\n\n        if (len > end - start) {\n            start = i - (len - 1) / 2;\n            end = i + len / 2;\n        }\n    }\n\n    return s.substring(start, end + 1);\n}\n\nprivate int expandAroundCenter(String s, int left, int right) {\n    while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n        left--;\n        right++;\n    }\n    return right - left - 1;\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"palindromic-substrings",children:"Palindromic Substrings"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force - O(n\xb3) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int countSubstrings(String s) {\n    int count = 0;\n\n    for (int i = 0; i < s.length(); i++) {\n        for (int j = i; j < s.length(); j++) {\n            if (isPalindrome(s, i, j)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\nprivate boolean isPalindrome(String s, int start, int end) {\n    while (start < end) {\n        if (s.charAt(start++) != s.charAt(end--)) return false;\n    }\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Expand around center) - O(n\xb2) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int countSubstrings(String s) {\n    int count = 0;\n\n    for (int i = 0; i < s.length(); i++) {\n        count += expandAroundCenter(s, i, i);\n        count += expandAroundCenter(s, i, i + 1);\n    }\n\n    return count;\n}\n\nprivate int expandAroundCenter(String s, int left, int right) {\n    int count = 0;\n\n    while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n        count++;\n        left--;\n        right++;\n    }\n\n    return count;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"tree-1",children:"Tree"}),"\n",(0,i.jsx)(n.h3,{id:"maximum-depth-of-binary-tree",children:"Maximum Depth of Binary Tree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (DFS) - O(n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int maxDepth(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (BFS) - O(n) time, O(w) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int maxDepth(TreeNode root) {\n    if (root == null) return 0;\n\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n    int depth = 0;\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n            if (node.left != null) queue.offer(node.left);\n            if (node.right != null) queue.offer(node.right);\n        }\n\n        depth++;\n    }\n\n    return depth;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"same-tree",children:"Same Tree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (DFS) - O(n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isSameTree(TreeNode p, TreeNode q) {\n    if (p == null && q == null) return true;\n    if (p == null || q == null) return false;\n    if (p.val != q.val) return false;\n\n    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (BFS) - O(n) time, O(w) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isSameTree(TreeNode p, TreeNode q) {\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(p);\n    queue.offer(q);\n\n    while (!queue.isEmpty()) {\n        TreeNode node1 = queue.poll();\n        TreeNode node2 = queue.poll();\n\n        if (node1 == null && node2 == null) continue;\n        if (node1 == null || node2 == null) return false;\n        if (node1.val != node2.val) return false;\n\n        queue.offer(node1.left);\n        queue.offer(node2.left);\n        queue.offer(node1.right);\n        queue.offer(node2.right);\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"invert-binary-tree",children:"Invert Binary Tree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (DFS) - O(n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public TreeNode invertTree(TreeNode root) {\n    if (root == null) return null;\n\n    TreeNode left = invertTree(root.left);\n    TreeNode right = invertTree(root.right);\n\n    root.left = right;\n    root.right = left;\n\n    return root;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (BFS) - O(n) time, O(w) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public TreeNode invertTree(TreeNode root) {\n    if (root == null) return null;\n\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n\n    while (!queue.isEmpty()) {\n        TreeNode node = queue.poll();\n\n        TreeNode temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n\n        if (node.left != null) queue.offer(node.left);\n        if (node.right != null) queue.offer(node.right);\n    }\n\n    return root;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"binary-tree-maximum-path-sum",children:"Binary Tree Maximum Path Sum"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Check all paths) - O(n\xb2) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"private int maxSum = Integer.MIN_VALUE;\n\npublic int maxPathSum(TreeNode root) {\n    getAllPaths(root, 0);\n    return maxSum;\n}\n\nprivate void getAllPaths(TreeNode node, int currentSum) {\n    if (node == null) return;\n\n    currentSum += node.val;\n    maxSum = Math.max(maxSum, currentSum);\n\n    getAllPaths(node.left, currentSum);\n    getAllPaths(node.right, currentSum);\n    getAllPaths(node.left, node.val);\n    getAllPaths(node.right, node.val);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (DFS with global max) - O(n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"private int maxSum = Integer.MIN_VALUE;\n\npublic int maxPathSum(TreeNode root) {\n    maxPathSumHelper(root);\n    return maxSum;\n}\n\nprivate int maxPathSumHelper(TreeNode node) {\n    if (node == null) return 0;\n\n    int left = Math.max(0, maxPathSumHelper(node.left));\n    int right = Math.max(0, maxPathSumHelper(node.right));\n\n    maxSum = Math.max(maxSum, left + right + node.val);\n\n    return node.val + Math.max(left, right);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"binary-tree-level-order-traversal",children:"Binary Tree Level Order Traversal"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (DFS with level tracking) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> result = new ArrayList<>();\n    dfs(root, 0, result);\n    return result;\n}\n\nprivate void dfs(TreeNode node, int level, List<List<Integer>> result) {\n    if (node == null) return;\n\n    if (result.size() == level) {\n        result.add(new ArrayList<>());\n    }\n\n    result.get(level).add(node.val);\n    dfs(node.left, level + 1, result);\n    dfs(node.right, level + 1, result);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (BFS) - O(n) time, O(w) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> result = new ArrayList<>();\n    if (root == null) return result;\n\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        List<Integer> level = new ArrayList<>();\n\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n            level.add(node.val);\n\n            if (node.left != null) queue.offer(node.left);\n            if (node.right != null) queue.offer(node.right);\n        }\n\n        result.add(level);\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"serialize-and-deserialize-binary-tree",children:"Serialize and Deserialize Binary Tree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Level order with nulls) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public String serialize(TreeNode root) {\n    if (root == null) return "null";\n\n    StringBuilder sb = new StringBuilder();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n\n    while (!queue.isEmpty()) {\n        TreeNode node = queue.poll();\n\n        if (node == null) {\n            sb.append("null,");\n        } else {\n            sb.append(node.val).append(",");\n            queue.offer(node.left);\n            queue.offer(node.right);\n        }\n    }\n\n    return sb.toString();\n}\n\npublic TreeNode deserialize(String data) {\n    if (data.equals("null")) return null;\n\n    String[] values = data.split(",");\n    TreeNode root = new TreeNode(Integer.parseInt(values[0]));\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n\n    int i = 1;\n    while (!queue.isEmpty() && i < values.length) {\n        TreeNode node = queue.poll();\n\n        if (!values[i].equals("null")) {\n            node.left = new TreeNode(Integer.parseInt(values[i]));\n            queue.offer(node.left);\n        }\n        i++;\n\n        if (i < values.length && !values[i].equals("null")) {\n            node.right = new TreeNode(Integer.parseInt(values[i]));\n            queue.offer(node.right);\n        }\n        i++;\n    }\n\n    return root;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Preorder DFS) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public String serialize(TreeNode root) {\n    StringBuilder sb = new StringBuilder();\n    serializeHelper(root, sb);\n    return sb.toString();\n}\n\nprivate void serializeHelper(TreeNode node, StringBuilder sb) {\n    if (node == null) {\n        sb.append("null,");\n        return;\n    }\n\n    sb.append(node.val).append(",");\n    serializeHelper(node.left, sb);\n    serializeHelper(node.right, sb);\n}\n\npublic TreeNode deserialize(String data) {\n    Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(",")));\n    return deserializeHelper(queue);\n}\n\nprivate TreeNode deserializeHelper(Queue<String> queue) {\n    String val = queue.poll();\n\n    if (val.equals("null")) return null;\n\n    TreeNode node = new TreeNode(Integer.parseInt(val));\n    node.left = deserializeHelper(queue);\n    node.right = deserializeHelper(queue);\n\n    return node;\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"subtree-of-another-tree",children:"Subtree of Another Tree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force - O(m*n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n    if (root == null) return false;\n\n    if (isSameTree(root, subRoot)) return true;\n\n    return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);\n}\n\nprivate boolean isSameTree(TreeNode p, TreeNode q) {\n    if (p == null && q == null) return true;\n    if (p == null || q == null) return false;\n    if (p.val != q.val) return false;\n\n    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Serialize and compare) - O(m+n) time, O(m+n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n    String tree1 = serialize(root);\n    String tree2 = serialize(subRoot);\n\n    return tree1.contains(tree2);\n}\n\nprivate String serialize(TreeNode node) {\n    if (node == null) return "#";\n\n    return "^" + node.val + " " + serialize(node.left) + " " + serialize(node.right);\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"construct-binary-tree-from-preorder-and-inorder",children:"Construct Binary Tree from Preorder and Inorder"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force - O(n\xb2) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public TreeNode buildTree(int[] preorder, int[] inorder) {\n    if (preorder.length == 0) return null;\n\n    int rootVal = preorder[0];\n    TreeNode root = new TreeNode(rootVal);\n\n    int rootIndex = 0;\n    for (int i = 0; i < inorder.length; i++) {\n        if (inorder[i] == rootVal) {\n            rootIndex = i;\n            break;\n        }\n    }\n\n    root.left = buildTree(\n        Arrays.copyOfRange(preorder, 1, rootIndex + 1),\n        Arrays.copyOfRange(inorder, 0, rootIndex)\n    );\n\n    root.right = buildTree(\n        Arrays.copyOfRange(preorder, rootIndex + 1, preorder.length),\n        Arrays.copyOfRange(inorder, rootIndex + 1, inorder.length)\n    );\n\n    return root;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (HashMap for indices) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"private int preIndex = 0;\nprivate Map<Integer, Integer> inMap = new HashMap<>();\n\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    for (int i = 0; i < inorder.length; i++) {\n        inMap.put(inorder[i], i);\n    }\n\n    return buildTreeHelper(preorder, 0, inorder.length - 1);\n}\n\nprivate TreeNode buildTreeHelper(int[] preorder, int inStart, int inEnd) {\n    if (inStart > inEnd) return null;\n\n    int rootVal = preorder[preIndex++];\n    TreeNode root = new TreeNode(rootVal);\n\n    int inIndex = inMap.get(rootVal);\n\n    root.left = buildTreeHelper(preorder, inStart, inIndex - 1);\n    root.right = buildTreeHelper(preorder, inIndex + 1, inEnd);\n\n    return root;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"validate-binary-search-tree",children:"Validate Binary Search Tree"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Inorder traversal) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isValidBST(TreeNode root) {\n    List<Integer> inorder = new ArrayList<>();\n    inorderTraversal(root, inorder);\n\n    for (int i = 1; i < inorder.size(); i++) {\n        if (inorder.get(i) <= inorder.get(i - 1)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nprivate void inorderTraversal(TreeNode node, List<Integer> list) {\n    if (node == null) return;\n\n    inorderTraversal(node.left, list);\n    list.add(node.val);\n    inorderTraversal(node.right, list);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (DFS with range) - O(n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public boolean isValidBST(TreeNode root) {\n    return validate(root, null, null);\n}\n\nprivate boolean validate(TreeNode node, Integer min, Integer max) {\n    if (node == null) return true;\n\n    if ((min != null && node.val <= min) || (max != null && node.val >= max)) {\n        return false;\n    }\n\n    return validate(node.left, min, node.val) && validate(node.right, node.val, max);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"kth-smallest-element-in-bst",children:"Kth Smallest Element in BST"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Inorder to list) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int kthSmallest(TreeNode root, int k) {\n    List<Integer> inorder = new ArrayList<>();\n    inorderTraversal(root, inorder);\n    return inorder.get(k - 1);\n}\n\nprivate void inorderTraversal(TreeNode node, List<Integer> list) {\n    if (node == null) return;\n\n    inorderTraversal(node.left, list);\n    list.add(node.val);\n    inorderTraversal(node.right, list);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Inorder with early termination) - O(k) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"private int count = 0;\nprivate int result = 0;\n\npublic int kthSmallest(TreeNode root, int k) {\n    inorder(root, k);\n    return result;\n}\n\nprivate void inorder(TreeNode node, int k) {\n    if (node == null) return;\n\n    inorder(node.left, k);\n\n    count++;\n    if (count == k) {\n        result = node.val;\n        return;\n    }\n\n    inorder(node.right, k);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"lowest-common-ancestor-of-bst",children:"Lowest Common Ancestor of BST"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Find paths) - O(n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    List<TreeNode> pathP = new ArrayList<>();\n    List<TreeNode> pathQ = new ArrayList<>();\n\n    findPath(root, p, pathP);\n    findPath(root, q, pathQ);\n\n    TreeNode lca = null;\n    for (int i = 0; i < Math.min(pathP.size(), pathQ.size()); i++) {\n        if (pathP.get(i) == pathQ.get(i)) {\n            lca = pathP.get(i);\n        } else {\n            break;\n        }\n    }\n\n    return lca;\n}\n\nprivate boolean findPath(TreeNode node, TreeNode target, List<TreeNode> path) {\n    if (node == null) return false;\n\n    path.add(node);\n\n    if (node == target) return true;\n\n    if (node.val > target.val) {\n        return findPath(node.left, target, path);\n    } else {\n        return findPath(node.right, target, path);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (BST property) - O(h) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    while (root != null) {\n        if (p.val < root.val && q.val < root.val) {\n            root = root.left;\n        } else if (p.val > root.val && q.val > root.val) {\n            root = root.right;\n        } else {\n            return root;\n        }\n    }\n\n    return null;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"implement-trie",children:"Implement Trie"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation - O(m) time per operation, O(n*m) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class TrieNode {\n    TrieNode[] children = new TrieNode[26];\n    boolean isEnd = false;\n}\n\nclass Trie {\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word) {\n        TrieNode node = root;\n\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n\n        node.isEnd = true;\n    }\n\n    public boolean search(String word) {\n        TrieNode node = findNode(word);\n        return node != null && node.isEnd;\n    }\n\n    public boolean startsWith(String prefix) {\n        return findNode(prefix) != null;\n    }\n\n    private TrieNode findNode(String str) {\n        TrieNode node = root;\n\n        for (char c : str.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                return null;\n            }\n            node = node.children[index];\n        }\n\n        return node;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"add-and-search-word",children:"Add and Search Word"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Brute Force (Store all words) - O(n",(0,i.jsx)(n.em,{children:"m) time, O(n"}),"m) space:"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class WordDictionary {\n    private Set<String> words;\n\n    public WordDictionary() {\n        words = new HashSet<>();\n    }\n\n    public void addWord(String word) {\n        words.add(word);\n    }\n\n    public boolean search(String word) {\n        for (String w : words) {\n            if (match(w, word)) return true;\n        }\n        return false;\n    }\n\n    private boolean match(String word, String pattern) {\n        if (word.length() != pattern.length()) return false;\n\n        for (int i = 0; i < word.length(); i++) {\n            if (pattern.charAt(i) != '.' && pattern.charAt(i) != word.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Trie with DFS) - O(m) average, O(26^m) worst time, O(n*m) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class WordDictionary {\n    class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        boolean isEnd = false;\n    }\n\n    private TrieNode root;\n\n    public WordDictionary() {\n        root = new TrieNode();\n    }\n\n    public void addWord(String word) {\n        TrieNode node = root;\n\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n\n        node.isEnd = true;\n    }\n\n    public boolean search(String word) {\n        return searchHelper(word, 0, root);\n    }\n\n    private boolean searchHelper(String word, int index, TrieNode node) {\n        if (index == word.length()) {\n            return node.isEnd;\n        }\n\n        char c = word.charAt(index);\n\n        if (c == '.') {\n            for (TrieNode child : node.children) {\n                if (child != null && searchHelper(word, index + 1, child)) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            int i = c - 'a';\n            if (node.children[i] == null) return false;\n            return searchHelper(word, index + 1, node.children[i]);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"word-search-ii",children:"Word Search II"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Brute Force (Word Search for each word) - O(m",(0,i.jsx)(n.em,{children:"n"}),"4^L*k) time, O(L) space:"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<String> findWords(char[][] board, String[] words) {\n    List<String> result = new ArrayList<>();\n\n    for (String word : words) {\n        if (exist(board, word)) {\n            result.add(word);\n        }\n    }\n\n    return result;\n}\n\nprivate boolean exist(char[][] board, String word) {\n    for (int i = 0; i < board.length; i++) {\n        for (int j = 0; j < board[0].length; j++) {\n            if (dfs(board, word, i, j, 0)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean dfs(char[][] board, String word, int i, int j, int index) {\n    if (index == word.length()) return true;\n\n    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length ||\n        board[i][j] != word.charAt(index)) {\n        return false;\n    }\n\n    char temp = board[i][j];\n    board[i][j] = '#';\n\n    boolean found = dfs(board, word, i + 1, j, index + 1) ||\n                    dfs(board, word, i - 1, j, index + 1) ||\n                    dfs(board, word, i, j + 1, index + 1) ||\n                    dfs(board, word, i, j - 1, index + 1);\n\n    board[i][j] = temp;\n    return found;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Optimal (Trie + DFS) - O(m",(0,i.jsx)(n.em,{children:"n"}),"4^L) time, O(k*L) space:"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class TrieNode {\n    TrieNode[] children = new TrieNode[26];\n    String word = null;\n}\n\npublic List<String> findWords(char[][] board, String[] words) {\n    List<String> result = new ArrayList<>();\n    TrieNode root = buildTrie(words);\n\n    for (int i = 0; i < board.length; i++) {\n        for (int j = 0; j < board[0].length; j++) {\n            dfs(board, i, j, root, result);\n        }\n    }\n\n    return result;\n}\n\nprivate TrieNode buildTrie(String[] words) {\n    TrieNode root = new TrieNode();\n\n    for (String word : words) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children[index] == null) {\n                node.children[index] = new TrieNode();\n            }\n            node = node.children[index];\n        }\n        node.word = word;\n    }\n\n    return root;\n}\n\nprivate void dfs(char[][] board, int i, int j, TrieNode node, List<String> result) {\n    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) return;\n\n    char c = board[i][j];\n    if (c == '#' || node.children[c - 'a'] == null) return;\n\n    node = node.children[c - 'a'];\n\n    if (node.word != null) {\n        result.add(node.word);\n        node.word = null; // Avoid duplicates\n    }\n\n    board[i][j] = '#';\n    dfs(board, i + 1, j, node, result);\n    dfs(board, i - 1, j, node, result);\n    dfs(board, i, j + 1, node, result);\n    dfs(board, i, j - 1, node, result);\n    board[i][j] = c;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"binary-tree-right-side-view",children:"Binary Tree Right Side View"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (DFS with level tracking) - O(n) time, O(h) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<Integer> rightSideView(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    dfs(root, 0, result);\n    return result;\n}\n\nprivate void dfs(TreeNode node, int level, List<Integer> result) {\n    if (node == null) return;\n\n    if (level == result.size()) {\n        result.add(node.val);\n    }\n\n    dfs(node.right, level + 1, result);\n    dfs(node.left, level + 1, result);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (BFS) - O(n) time, O(w) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<Integer> rightSideView(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    if (root == null) return result;\n\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.offer(root);\n\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n\n            if (i == size - 1) {\n                result.add(node.val);\n            }\n\n            if (node.left != null) queue.offer(node.left);\n            if (node.right != null) queue.offer(node.right);\n        }\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"heap-1",children:"Heap"}),"\n",(0,i.jsx)(n.h3,{id:"top-k-frequent-elements",children:"Top K Frequent Elements"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Sort by frequency) - O(n log n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int[] topKFrequent(int[] nums, int k) {\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (int num : nums) {\n        count.put(num, count.getOrDefault(num, 0) + 1);\n    }\n\n    List<Map.Entry<Integer, Integer>> entries = new ArrayList<>(count.entrySet());\n    entries.sort((a, b) -> b.getValue() - a.getValue());\n\n    int[] result = new int[k];\n    for (int i = 0; i < k; i++) {\n        result[i] = entries.get(i).getKey();\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Min Heap) - O(n log k) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int[] topKFrequent(int[] nums, int k) {\n    Map<Integer, Integer> count = new HashMap<>();\n\n    for (int num : nums) {\n        count.put(num, count.getOrDefault(num, 0) + 1);\n    }\n\n    PriorityQueue<Map.Entry<Integer, Integer>> pq =\n        new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());\n\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n        pq.offer(entry);\n        if (pq.size() > k) {\n            pq.poll();\n        }\n    }\n\n    int[] result = new int[k];\n    for (int i = 0; i < k; i++) {\n        result[i] = pq.poll().getKey();\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"find-median-from-data-stream",children:"Find Median from Data Stream"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Sort every time) - O(n log n) per find, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class MedianFinder {\n    private List<Integer> nums;\n\n    public MedianFinder() {\n        nums = new ArrayList<>();\n    }\n\n    public void addNum(int num) {\n        nums.add(num);\n    }\n\n    public double findMedian() {\n        Collections.sort(nums);\n        int n = nums.size();\n\n        if (n % 2 == 0) {\n            return (nums.get(n / 2 - 1) + nums.get(n / 2)) / 2.0;\n        } else {\n            return nums.get(n / 2);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Two Heaps) - O(log n) per operation, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"class MedianFinder {\n    private PriorityQueue<Integer> maxHeap; // Lower half\n    private PriorityQueue<Integer> minHeap; // Upper half\n\n    public MedianFinder() {\n        maxHeap = new PriorityQueue<>((a, b) -> b - a);\n        minHeap = new PriorityQueue<>();\n    }\n\n    public void addNum(int num) {\n        maxHeap.offer(num);\n        minHeap.offer(maxHeap.poll());\n\n        if (maxHeap.size() < minHeap.size()) {\n            maxHeap.offer(minHeap.poll());\n        }\n    }\n\n    public double findMedian() {\n        if (maxHeap.size() > minHeap.size()) {\n            return maxHeap.peek();\n        } else {\n            return (maxHeap.peek() + minHeap.peek()) / 2.0;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"kth-largest-element-in-array",children:"Kth Largest Element in Array"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Sort) - O(n log n) time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int findKthLargest(int[] nums, int k) {\n    Arrays.sort(nums);\n    return nums[nums.length - k];\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Min Heap) - O(n log k) time, O(k) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int findKthLargest(int[] nums, int k) {\n    PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n    for (int num : nums) {\n        pq.offer(num);\n        if (pq.size() > k) {\n            pq.poll();\n        }\n    }\n\n    return pq.peek();\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Best (QuickSelect) - O(n) average time, O(1) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public int findKthLargest(int[] nums, int k) {\n    return quickSelect(nums, 0, nums.length - 1, nums.length - k);\n}\n\nprivate int quickSelect(int[] nums, int left, int right, int k) {\n    if (left == right) return nums[left];\n\n    int pivotIndex = partition(nums, left, right);\n\n    if (k == pivotIndex) {\n        return nums[k];\n    } else if (k < pivotIndex) {\n        return quickSelect(nums, left, pivotIndex - 1, k);\n    } else {\n        return quickSelect(nums, pivotIndex + 1, right, k);\n    }\n}\n\nprivate int partition(int[] nums, int left, int right) {\n    int pivot = nums[right];\n    int i = left;\n\n    for (int j = left; j < right; j++) {\n        if (nums[j] < pivot) {\n            swap(nums, i, j);\n            i++;\n        }\n    }\n\n    swap(nums, i, right);\n    return i;\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    int temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"backtracking-1",children:"Backtracking"}),"\n",(0,i.jsx)(n.h3,{id:"permutations",children:"Permutations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Generate all and filter) - O(n! * n\xb2) time, O(n!) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    generatePermutations(nums, new ArrayList<>(), new boolean[nums.length], result);\n    return result;\n}\n\nprivate void generatePermutations(int[] nums, List<Integer> current,\n                                  boolean[] used, List<List<Integer>> result) {\n    if (current.size() == nums.length) {\n        result.add(new ArrayList<>(current));\n        return;\n    }\n\n    for (int i = 0; i < nums.length; i++) {\n        if (used[i]) continue;\n\n        current.add(nums[i]);\n        used[i] = true;\n        generatePermutations(nums, current, used, result);\n        current.remove(current.size() - 1);\n        used[i] = false;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Backtracking with swap) - O(n!) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<Integer>> permute(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(nums, 0, result);\n    return result;\n}\n\nprivate void backtrack(int[] nums, int start, List<List<Integer>> result) {\n    if (start == nums.length) {\n        List<Integer> perm = new ArrayList<>();\n        for (int num : nums) {\n            perm.add(num);\n        }\n        result.add(perm);\n        return;\n    }\n\n    for (int i = start; i < nums.length; i++) {\n        swap(nums, start, i);\n        backtrack(nums, start + 1, result);\n        swap(nums, start, i);\n    }\n}\n\nprivate void swap(int[] nums, int i, int j) {\n    int temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"subsets",children:"Subsets"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Iterative) - O(n * 2^n) time, O(2^n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    result.add(new ArrayList<>());\n\n    for (int num : nums) {\n        int size = result.size();\n        for (int i = 0; i < size; i++) {\n            List<Integer> subset = new ArrayList<>(result.get(i));\n            subset.add(num);\n            result.add(subset);\n        }\n    }\n\n    return result;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Backtracking) - O(n * 2^n) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<List<Integer>> subsets(int[] nums) {\n    List<List<Integer>> result = new ArrayList<>();\n    backtrack(nums, 0, new ArrayList<>(), result);\n    return result;\n}\n\nprivate void backtrack(int[] nums, int start, List<Integer> current,\n                      List<List<Integer>> result) {\n    result.add(new ArrayList<>(current));\n\n    for (int i = start; i < nums.length; i++) {\n        current.add(nums[i]);\n        backtrack(nums, i + 1, current, result);\n        current.remove(current.size() - 1);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"generate-parentheses",children:"Generate Parentheses"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Brute Force (Generate all and validate) - O(2^(2n) * n) time, O(2^(2n)) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<String> generateParenthesis(int n) {\n    List<String> result = new ArrayList<>();\n    generateAll(new char[2 * n], 0, result);\n    return result;\n}\n\nprivate void generateAll(char[] current, int pos, List<String> result) {\n    if (pos == current.length) {\n        if (isValid(current)) {\n            result.add(new String(current));\n        }\n        return;\n    }\n\n    current[pos] = '(';\n    generateAll(current, pos + 1, result);\n    current[pos] = ')';\n    generateAll(current, pos + 1, result);\n}\n\nprivate boolean isValid(char[] current) {\n    int balance = 0;\n    for (char c : current) {\n        if (c == '(') balance++;\n        else balance--;\n        if (balance < 0) return false;\n    }\n    return balance == 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimal (Backtracking with constraints) - O(4^n / sqrt(n)) time, O(n) space:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public List<String> generateParenthesis(int n) {\n    List<String> result = new ArrayList<>();\n    backtrack(result, new StringBuilder(), 0, 0, n);\n    return result;\n}\n\nprivate void backtrack(List<String> result, StringBuilder current,\n                      int open, int close, int max) {\n    if (current.length() == max * 2) {\n        result.add(current.toString());\n        return;\n    }\n\n    if (open < max) {\n        current.append('(');\n        backtrack(result, current, open + 1, close, max);\n        current.deleteCharAt(current.length() - 1);\n    }\n\n    if (close < open) {\n        current.append(')');\n        backtrack(result, current, open, close + 1, max);\n        current.deleteCharAt(current.length() - 1);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"complexity-summary",children:"Complexity Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Category"}),(0,i.jsx)(n.th,{children:"Problem"}),(0,i.jsx)(n.th,{children:"Brute Force"}),(0,i.jsx)(n.th,{children:"Optimal"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Array"}),(0,i.jsx)(n.td,{children:"Two Sum"}),(0,i.jsx)(n.td,{children:"O(n\xb2)"}),(0,i.jsx)(n.td,{children:"O(n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Array"}),(0,i.jsx)(n.td,{children:"Best Time to Buy/Sell"}),(0,i.jsx)(n.td,{children:"O(n\xb2)"}),(0,i.jsx)(n.td,{children:"O(n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Array"}),(0,i.jsx)(n.td,{children:"Maximum Subarray"}),(0,i.jsx)(n.td,{children:"O(n\xb2)"}),(0,i.jsx)(n.td,{children:"O(n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Binary"}),(0,i.jsx)(n.td,{children:"Sum of Two Integers"}),(0,i.jsx)(n.td,{children:"N/A"}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DP"}),(0,i.jsx)(n.td,{children:"Climbing Stairs"}),(0,i.jsx)(n.td,{children:"O(2^n)"}),(0,i.jsx)(n.td,{children:"O(n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DP"}),(0,i.jsx)(n.td,{children:"Coin Change"}),(0,i.jsx)(n.td,{children:"O(S^n)"}),(0,i.jsx)(n.td,{children:"O(n*amount)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DP"}),(0,i.jsx)(n.td,{children:"LIS"}),(0,i.jsx)(n.td,{children:"O(2^n)"}),(0,i.jsx)(n.td,{children:"O(n log n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Graph"}),(0,i.jsx)(n.td,{children:"Clone Graph"}),(0,i.jsx)(n.td,{children:"O(V+E)"}),(0,i.jsx)(n.td,{children:"O(V+E)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Graph"}),(0,i.jsx)(n.td,{children:"Number of Islands"}),(0,i.jsx)(n.td,{children:"O(m*n)"}),(0,i.jsx)(n.td,{children:"O(m*n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Linked List"}),(0,i.jsx)(n.td,{children:"Reverse List"}),(0,i.jsx)(n.td,{children:"O(n), O(n) space"}),(0,i.jsx)(n.td,{children:"O(n), O(1) space"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Linked List"}),(0,i.jsx)(n.td,{children:"Merge K Lists"}),(0,i.jsx)(n.td,{children:"O(k\xb2*n)"}),(0,i.jsxs)(n.td,{children:["O(n",(0,i.jsx)(n.em,{children:"k"}),"log k)"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Longest Substring"}),(0,i.jsx)(n.td,{children:"O(n\xb3)"}),(0,i.jsx)(n.td,{children:"O(n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Min Window Substring"}),(0,i.jsx)(n.td,{children:"O(n\xb2*m)"}),(0,i.jsx)(n.td,{children:"O(n+m)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Tree"}),(0,i.jsx)(n.td,{children:"Max Depth"}),(0,i.jsx)(n.td,{children:"O(n)"}),(0,i.jsx)(n.td,{children:"O(n)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Tree"}),(0,i.jsx)(n.td,{children:"Validate BST"}),(0,i.jsx)(n.td,{children:"O(n), O(n) space"}),(0,i.jsx)(n.td,{children:"O(n), O(h) space"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Heap"}),(0,i.jsx)(n.td,{children:"Top K Frequent"}),(0,i.jsx)(n.td,{children:"O(n log n)"}),(0,i.jsx)(n.td,{children:"O(n log k)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Heap"}),(0,i.jsx)(n.td,{children:"Find Median"}),(0,i.jsx)(n.td,{children:"O(n log n)"}),(0,i.jsx)(n.td,{children:"O(log n)"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"tips-for-each-category",children:"Tips for Each Category"}),"\n",(0,i.jsx)(n.h3,{id:"array-2",children:"Array"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use two pointers for sorted array problems"}),"\n",(0,i.jsx)(n.li,{children:"Kadane's algorithm for maximum subarray"}),"\n",(0,i.jsx)(n.li,{children:"HashMap for O(1) lookup"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"binary-1",children:"Binary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"XOR for finding missing/duplicate numbers"}),"\n",(0,i.jsx)(n.li,{children:"Bit manipulation to avoid arithmetic operators"}),"\n",(0,i.jsx)(n.li,{children:"Brian Kernighan's algorithm for counting bits"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-programming-1",children:"Dynamic Programming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Identify overlapping subproblems"}),"\n",(0,i.jsx)(n.li,{children:"Build bottom-up to avoid recursion overhead"}),"\n",(0,i.jsx)(n.li,{children:"Use space optimization (rolling array)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"graph-1",children:"Graph"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"BFS for shortest path in unweighted graphs"}),"\n",(0,i.jsx)(n.li,{children:"DFS for connectivity and cycle detection"}),"\n",(0,i.jsx)(n.li,{children:"Use colors/states to detect cycles"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"linked-list-1",children:"Linked List"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use dummy node to handle edge cases"}),"\n",(0,i.jsx)(n.li,{children:"Floyd's cycle detection (fast/slow pointers)"}),"\n",(0,i.jsx)(n.li,{children:"Reverse in-place to save space"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"string-1",children:"String"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sliding window for substring problems"}),"\n",(0,i.jsx)(n.li,{children:"HashMap for character frequency"}),"\n",(0,i.jsx)(n.li,{children:"Two pointers for palindrome checks"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tree-2",children:"Tree"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Recursion for most tree problems"}),"\n",(0,i.jsx)(n.li,{children:"BFS for level-order traversal"}),"\n",(0,i.jsx)(n.li,{children:"Validate BST with range constraints"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"heap-2",children:"Heap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Min heap for K largest elements"}),"\n",(0,i.jsx)(n.li,{children:"Two heaps for median finding"}),"\n",(0,i.jsx)(n.li,{children:"Use heap to maintain top K elements"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backtracking-2",children:"Backtracking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add constraints to prune search space"}),"\n",(0,i.jsx)(n.li,{children:"Use visited set to avoid cycles"}),"\n",(0,i.jsx)(n.li,{children:"Restore state after recursive calls"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(96540);const t={},l=i.createContext(t);function s(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);