"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8760],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},39599:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var t=i(74848),r=i(28453);const s={title:"Fenwick Tree Tutorial",description:"A comprehensive guide to Fenwick Trees with code examples in JavaScript."},a="Fenwick Tree Tutorial",l={id:"DSA/DSA with JavaScript/Fenwick",title:"Fenwick Tree Tutorial",description:"A comprehensive guide to Fenwick Trees with code examples in JavaScript.",source:"@site/docs/DSA/DSA with JavaScript/Fenwick.mdx",sourceDirName:"DSA/DSA with JavaScript",slug:"/DSA/DSA with JavaScript/Fenwick",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/Fenwick",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/DSA with JavaScript/Fenwick.mdx",tags:[],version:"current",frontMatter:{title:"Fenwick Tree Tutorial",description:"A comprehensive guide to Fenwick Trees with code examples in JavaScript."},sidebar:"tutorialSidebar",previous:{title:"Euler Path, Hamilton Cycle, and Hierholzer's Algorithm",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/EularPath"},next:{title:"Fisher-Yates Shuffle Algorithm",permalink:"/dev.enigma/docs/DSA/DSA with JavaScript/FisherYates"}},o={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Key Operations",id:"key-operations",level:2},{value:"Fenwick Tree Structure",id:"fenwick-tree-structure",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Implementation with an Array",id:"implementation-with-an-array",level:3},{value:"2D Binary Indexed Tree Solution",id:"2d-binary-indexed-tree-solution",level:3},{value:"1D Range Queries",id:"1d-range-queries",level:3},{value:"2D Range Queries",id:"2d-range-queries",level:3},{value:"Range Module",id:"range-module",level:3},{value:"Counting Problems",id:"counting-problems",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"fenwick-tree-tutorial",children:"Fenwick Tree Tutorial"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"A Fenwick Tree, also known as a Binary Indexed Tree (BIT), is a data structure that provides efficient methods for querying and updating prefix sums in an array. It supports operations like point updates and prefix sum queries in O(log n) time."}),"\n",(0,t.jsx)(n.h2,{id:"key-operations",children:"Key Operations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update"}),": Increment the value at a specific index."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query"}),": Get the sum of values from the start of the array to a specific index."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"fenwick-tree-structure",children:"Fenwick Tree Structure"}),"\n",(0,t.jsx)(n.p,{children:"The Fenwick Tree is typically represented as an array where each position maintains a cumulative sum of elements."}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Here\u2019s a basic implementation of a Fenwick Tree in JavaScript:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Javascript",children:"class FenwickTree {\n  constructor(size) {\n    this.size = size;\n    this.tree = new Array(size + 1).fill(0);\n  }\n\n  // Increment the value at index i by delta\n  update(index, delta) {\n    while (index <= this.size) {\n      this.tree[index] += delta;\n      index += index & -index; // Move to the next index\n    }\n  }\n\n  // Get the prefix sum from the start to index i\n  query(index) {\n    let sum = 0;\n    while (index > 0) {\n      sum += this.tree[index];\n      index -= index & -index; // Move to the parent index\n    }\n    return sum;\n  }\n    // Query the sum from index i to j (inclusive)\n  rangeQuery(i, j) {\n    return this.query(j) - this.query(i - 1);\n  }\n}\n\n// Example Usage\nconst fenwick = new FenwickTree(10);\n\n// Incrementing values\nfenwick.update(1, 5);\nfenwick.update(3, 3);\nfenwick.update(5, 7);\n\n// Querying prefix sums\nconsole.log(fenwick.query(5)); // Output: 15 (5 + 3 + 7)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implementation-with-an-array",children:"Implementation with an Array"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"class FenwickTree {\n  constructor(arr) {\n    this.size = arr.length;\n    this.tree = new Array(this.size + 1).fill(0);  // Fenwick Tree is 1-indexed\n\n    // Build the tree by updating for each element in the array\n    for (let i = 0; i < arr.length; i++) {\n      this.update(i + 1, arr[i]);  // Convert to 1-indexed\n    }\n  }\n\n  // Increment the value at index i by delta\n  update(index, delta) {\n    while (index <= this.size) {\n      this.tree[index] += delta;\n      index += index & -index; // Move to the next index\n    }\n  }\n\n  // Get the prefix sum from the start to index i\n  query(index) {\n    let sum = 0;\n    while (index > 0) {\n      sum += this.tree[index];\n      index -= index & -index; // Move to the parent index\n    }\n    return sum;\n  }\n\n  // Query the sum from index i to j (inclusive)\n  rangeQuery(i, j) {\n    return this.query(j) - this.query(i - 1);\n  }\n}\n\n// Example Usage\nconst arr = [5, 3, 7, 9, 6];  // Your initial array\nconst fenwick = new FenwickTree(arr);\n\n// Checking the internal tree array\nconsole.log(fenwick.tree);  // Output: internal Fenwick Tree structure\n\n// Querying prefix sums or range sums\nconsole.log(fenwick.query(3));  // Output: Sum from index 1 to 3 (5 + 3 + 7 = 15)\nconsole.log(fenwick.rangeQuery(2, 4));  // Output: Sum from index 2 to 4 (3 + 7 + 9 = 19)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2d-binary-indexed-tree-solution",children:"2D Binary Indexed Tree Solution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"class NumMatrix {\n    constructor(matrix) {\n        this.m = matrix.length;\n        this.n = matrix[0].length;\n        this.tree = Array.from({ length: this.m + 1 }, () => Array(this.n + 1).fill(0));\n        this.matrix = Array.from({ length: this.m }, () => Array(this.n).fill(0));\n        \n        // Build the BIT\n        for (let i = 0; i < this.m; i++) {\n            for (let j = 0; j < this.n; j++) {\n                this.update(i, j, matrix[i][j]);\n            }\n        }\n    }\n\n    // Update BIT with delta\n    update(x, y, delta) {\n        const diff = delta - this.matrix[x][y];\n        this.matrix[x][y] = delta;\n        for (let i = x + 1; i <= this.m; i += i & -i) {\n            for (let j = y + 1; j <= this.n; j += j & -j) {\n                this.tree[i][j] += diff;\n            }\n        }\n    }\n\n    // Query sum from (1,1) to (x,y)\n    query(x, y) {\n        let sum = 0;\n        for (let i = x + 1; i > 0; i -= i & -i) {\n            for (let j = y + 1; j > 0; j -= j & -j) {\n                sum += this.tree[i][j];\n            }\n        }\n        return sum;\n    }\n\n    // Calculate sum for the submatrix\n    sumRegion(row1, col1, row2, col2) {\n        return this.query(row2, col2)\n             - (row1 > 0 ? this.query(row1 - 1, col2) : 0)\n             - (col1 > 0 ? this.query(row2, col1 - 1) : 0)\n             + (row1 > 0 && col1 > 0 ? this.query(row1 - 1, col1 - 1) : 0);\n    }\n}\n\n// Example usage:\nconst matrix = [\n    [3, 0, 1, 4, 2],\n    [5, 6, 3, 2, 1],\n    [1, 2, 0, 1, 5],\n    [4, 1, 0, 1, 7],\n    [1, 0, 3, 0, 5]\n];\nconst numMatrix = new NumMatrix(matrix);\nconsole.log(numMatrix.sumRegion(2, 1, 4, 3)); // Output: 8\nnumMatrix.update(3, 2, 2);\nconsole.log(numMatrix.sumRegion(2, 1, 4, 3)); // Output: 10\n"})}),"\n",(0,t.jsx)(n.h1,{id:"range-queries-problems",children:"Range Queries Problems"}),"\n",(0,t.jsx)(n.h3,{id:"1d-range-queries",children:"1D Range Queries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/range-sum-query-mutable/description/",children:"Range Sum Query - Mutable"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/range-sum-query-immutable/description/",children:"Range Sum Query - Immutable"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2d-range-queries",children:"2D Range Queries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/range-sum-query-2d-mutable/description/",children:"Range Sum Query 2D - Mutable"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"range-module",children:"Range Module"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/range-module/description/",children:"Range Module"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"counting-problems",children:"Counting Problems"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self/",children:"Count of Smaller Numbers After Self"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);