"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7401],{2719:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=e(4848),o=e(8453);const s={},i="Unix File System",c={id:"DSA/UnixFileSystem",title:"Unix File System",description:"",source:"@site/docs/DSA/UnixFileSystem.mdx",sourceDirName:"DSA",slug:"/DSA/UnixFileSystem",permalink:"/js.enigma/docs/DSA/UnixFileSystem",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/UnixFileSystem.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Union-Find (Disjoint Set Union) Tutorial",permalink:"/js.enigma/docs/DSA/UnionFind"},next:{title:"Frontend System Design",permalink:"/js.enigma/docs/category/frontend-system-design"}},a={},d=[];function h(r){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"unix-file-system",children:"Unix File System"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"class FileNode {\r\n  constructor(type) {\r\n    this.type = type\r\n    this.children = {}\r\n  }\r\n}\r\n\r\nclass FileSystem {\r\n  constructor() {\r\n    this.root = new FileNode('dir') // Root directory\r\n    this.currentPath = this.root;\r\n    this.pathStack = ['/']; // Keeps track of current path\r\n  }\r\n\r\n  // Helper function to traverse the directory tree\r\n  #traverse(path) {\r\n    const parts = path.split('/').filter(Boolean);\r\n    let node = this.root;\r\n\r\n    for (const part of parts) {\r\n      if (!node.children[part] || node.children[part].type !== 'dir') {\r\n        throw new Error(`Directory '${part}' does not exist`);\r\n      }\r\n      node = node.children[part];\r\n    }\r\n    return node;\r\n  }\r\n\r\n  // Create a directory\r\n  mkdir(path) {\r\n    const parts = path.split('/').filter(Boolean);\r\n    let node = this.root;\r\n\r\n    for (const part of parts) {\r\n      if (!node.children[part]) {\r\n        node.children[part] = new FileNode('dir');\r\n      }\r\n      node = node.children[part];\r\n\r\n      if (node.type !== 'dir') {\r\n        throw new Error(`${part} is a file, cannot create directory here`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create a file\r\n  touch(path) {\r\n    const parts = path.split('/').filter(Boolean);\r\n    const fileName = parts.pop();\r\n    let node = this.root;\r\n\r\n    for (const part of parts) {\r\n      if (!node.children[part] || node.children[part].type !== 'dir') {\r\n        throw new Error(`Directory '${part}' does not exist`);\r\n      }\r\n      node = node.children[part];\r\n    }\r\n\r\n    node.children[fileName] = new FileNode('file')\r\n  }\r\n\r\n  // List contents of a directory\r\n  ls(path = '') {\r\n    const node = path ? this.#traverse(path) : this.currentPath;\r\n\r\n    if (node.type !== 'dir') {\r\n      throw new Error(`${path} is not a directory`);\r\n    }\r\n\r\n    return Object.keys(node.children);\r\n  }\r\n\r\n  // Change directory\r\n  cd(path) {\r\n    if (path === '/') {\r\n      this.currentPath = this.root;\r\n      this.pathStack = ['/'];\r\n      return;\r\n    }\r\n\r\n    const node = this.#traverse(path);\r\n    this.currentPath = node;\r\n    this.pathStack = path.split('/').filter(Boolean);\r\n  }\r\n\r\n  // Print working directory\r\n  pwd() {\r\n    return '/' + this.pathStack.join('/');\r\n  }\r\n}\r\n\r\n// Example Usage:\r\nconst fs = new FileSystem();\r\n\r\nfs.mkdir('/home/user/documents');\r\nfs.mkdir('/home/user/photos');\r\nfs.touch('/home/user/documents/resume.pdf');\r\nfs.touch('/home/user/photos/selfie.png');\r\n\r\nconsole.log(fs.ls('/home/user'));  // ['documents', 'photos']\r\nconsole.log(fs.ls('/home/user/documents'));  // ['resume.pdf']\r\n\r\nfs.cd('/home/user/documents');\r\nconsole.log(fs.pwd());  // '/home/user/documents'\r\n\r\nfs.cd('/');\r\nconsole.log(fs.pwd());  // '/'\r\n\r\n/* \r\n[ 'documents', 'photos' ]\r\n[ 'resume.pdf' ]\r\n/home/user/documents\r\n//\r\n*/\n"})})]})}function l(r={}){const{wrapper:n}={...(0,o.R)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(h,{...r})}):h(r)}},8453:(r,n,e)=>{e.d(n,{R:()=>i,x:()=>c});var t=e(6540);const o={},s=t.createContext(o);function i(r){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function c(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:i(r.components),t.createElement(s.Provider,{value:n},r.children)}}}]);