"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4721],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const i={},l=a.createContext(i);function o(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(l.Provider,{value:n},e.children)}},74482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=t(74848),i=t(28453);const l={},o="Complete ARIA & Keyboard Navigation",s={id:"WebDev/Machine Coding Round/Complete ARIA & Keyboard Navigation",title:"Complete ARIA & Keyboard Navigation",description:"A comprehensive guide to ARIA roles, states, properties, and keyboard navigation patterns for building accessible web applications.",source:"@site/docs/WebDev/Machine Coding Round/Complete ARIA & Keyboard Navigation.mdx",sourceDirName:"WebDev/Machine Coding Round",slug:"/WebDev/Machine Coding Round/Complete ARIA & Keyboard Navigation",permalink:"/dev.enigma/docs/WebDev/Machine Coding Round/Complete ARIA & Keyboard Navigation",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/Machine Coding Round/Complete ARIA & Keyboard Navigation.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Web Accessibility (a11y) Guide",permalink:"/dev.enigma/docs/WebDev/Machine Coding Round/Accessibility"},next:{title:"Machine Coding Round",permalink:"/dev.enigma/docs/WebDev/Machine Coding Round/MachineCodingRounds"}},r={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"ARIA Roles",id:"aria-roles",level:2},{value:"Landmark Roles",id:"landmark-roles",level:3},{value:"Widget Roles",id:"widget-roles",level:3},{value:"Document Structure Roles",id:"document-structure-roles",level:3},{value:"ARIA States &amp; Properties",id:"aria-states--properties",level:2},{value:"Common States",id:"common-states",level:3},{value:"Properties (Relationships &amp; Descriptions)",id:"properties-relationships--descriptions",level:3},{value:"Accessible Notes &amp; Text Areas",id:"accessible-notes--text-areas",level:2},{value:"Basic Textarea Implementation",id:"basic-textarea-implementation",level:3},{value:"Rich Text Editor (Contenteditable)",id:"rich-text-editor-contenteditable",level:3},{value:"Error States and Validation",id:"error-states-and-validation",level:3},{value:"Advanced Notes Features",id:"advanced-notes-features",level:3},{value:"Keyboard Navigation Patterns",id:"keyboard-navigation-patterns",level:2},{value:"Focus Management Principles",id:"focus-management-principles",level:3},{value:"Button Navigation",id:"button-navigation",level:3},{value:"Menu Navigation",id:"menu-navigation",level:3},{value:"Tab Navigation",id:"tab-navigation",level:3},{value:"Listbox/Combobox Navigation",id:"listboxcombobox-navigation",level:3},{value:"Live Regions &amp; Dynamic Content",id:"live-regions--dynamic-content",level:2},{value:"Live Region Types",id:"live-region-types",level:3},{value:"Dynamic Content Management",id:"dynamic-content-management",level:3},{value:"Form Validation with Live Feedback",id:"form-validation-with-live-feedback",level:3},{value:"Form Accessibility",id:"form-accessibility",level:2},{value:"Field Grouping and Relationships",id:"field-grouping-and-relationships",level:3},{value:"Advanced Input Types",id:"advanced-input-types",level:3},{value:"Modal &amp; Dialog Patterns",id:"modal--dialog-patterns",level:2},{value:"Basic Modal Dialog",id:"basic-modal-dialog",level:3},{value:"Alert Dialog",id:"alert-dialog",level:3},{value:"Form Dialog",id:"form-dialog",level:3},{value:"Testing &amp; Validation",id:"testing--validation",level:2},{value:"Automated Testing",id:"automated-testing",level:3},{value:"Manual Testing Checklist",id:"manual-testing-checklist",level:3},{value:"Testing Tools Integration",id:"testing-tools-integration",level:3},{value:"Summary",id:"summary",level:2},{value:"Key Principles to Remember",id:"key-principles-to-remember",level:3},{value:"Quick Reference",id:"quick-reference",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"complete-aria--keyboard-navigation",children:"Complete ARIA & Keyboard Navigation"})}),"\n",(0,a.jsx)(n.p,{children:"A comprehensive guide to ARIA roles, states, properties, and keyboard navigation patterns for building accessible web applications."}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#aria-roles",children:"ARIA Roles"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#aria-states--properties",children:"ARIA States & Properties"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#accessible-notes--text-areas",children:"Accessible Notes & Text Areas"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#keyboard-navigation-patterns",children:"Keyboard Navigation Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#live-regions--dynamic-content",children:"Live Regions & Dynamic Content"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#form-accessibility",children:"Form Accessibility"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#modal--dialog-patterns",children:"Modal & Dialog Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#testing--validation",children:"Testing & Validation"})}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"aria-roles",children:"ARIA Roles"}),"\n",(0,a.jsxs)(n.p,{children:["ARIA roles define what an element ",(0,a.jsx)(n.strong,{children:"is"})," semantically to assistive technologies. They communicate the purpose and behavior of elements."]}),"\n",(0,a.jsx)(n.h3,{id:"landmark-roles",children:"Landmark Roles"}),"\n",(0,a.jsx)(n.p,{children:"Landmark roles help users navigate page structure and find content quickly."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Site-wide header --\x3e\n<header role="banner">\n  <h1>My Website</h1>\n  <nav role="navigation" aria-label="Main menu">\n    <ul>\n      <li><a href="/home">Home</a></li>\n      <li><a href="/about">About</a></li>\n    </ul>\n  </nav>\n</header>\n\n\x3c!-- Main content area --\x3e\n<main role="main">\n  <article>\n    <h2>Article Title</h2>\n    <p>Article content...</p>\n  </article>\n</main>\n\n\x3c!-- Sidebar content --\x3e\n<aside role="complementary" aria-labelledby="sidebar-heading">\n  <h3 id="sidebar-heading">Related Links</h3>\n  <ul>\n    <li><a href="#">Link 1</a></li>\n    <li><a href="#">Link 2</a></li>\n  </ul>\n</aside>\n\n\x3c!-- Site footer --\x3e\n<footer role="contentinfo">\n  <p>&copy; 2025 My Website</p>\n</footer>\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"\ud83d\udca1 Best Practice"}),": Use semantic HTML elements (",(0,a.jsx)(n.code,{children:"<header>"}),", ",(0,a.jsx)(n.code,{children:"<nav>"}),", ",(0,a.jsx)(n.code,{children:"<main>"}),", ",(0,a.jsx)(n.code,{children:"<aside>"}),", ",(0,a.jsx)(n.code,{children:"<footer>"}),") which have implicit ARIA roles. Only add explicit roles when semantic HTML isn't sufficient."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"widget-roles",children:"Widget Roles"}),"\n",(0,a.jsx)(n.p,{children:"Widget roles define interactive components and their expected behaviors."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Custom button --\x3e\n<div role="button"\n     tabindex="0"\n     aria-pressed="false"\n     onkeydown="handleButtonKeydown(event)"\n     onclick="toggleButton()">\n  Toggle Setting\n</div>\n\n\x3c!-- Custom checkbox --\x3e\n<div role="checkbox"\n     tabindex="0"\n     aria-checked="false"\n     aria-labelledby="custom-checkbox-label">\n  <span id="custom-checkbox-label">Enable notifications</span>\n</div>\n\n\x3c!-- Dialog/Modal --\x3e\n<div role="dialog"\n     aria-labelledby="dialog-title"\n     aria-describedby="dialog-description"\n     aria-modal="true">\n  <h2 id="dialog-title">Confirm Action</h2>\n  <p id="dialog-description">Are you sure you want to delete this item?</p>\n  <button>Cancel</button>\n  <button>Delete</button>\n</div>\n\n\x3c!-- Tab interface --\x3e\n<div role="tablist" aria-label="Settings tabs">\n  <button role="tab"\n          aria-selected="true"\n          aria-controls="general-panel"\n          id="general-tab">General</button>\n  <button role="tab"\n          aria-selected="false"\n          aria-controls="privacy-panel"\n          id="privacy-tab">Privacy</button>\n</div>\n\n<div role="tabpanel"\n     id="general-panel"\n     aria-labelledby="general-tab">\n  <h3>General Settings</h3>\n  \x3c!-- Panel content --\x3e\n</div>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"document-structure-roles",children:"Document Structure Roles"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Article with proper heading structure --\x3e\n<article role="article">\n  <header>\n    <h1>Article Title</h1>\n    <p>Published on <time datetime="2025-01-15">January 15, 2025</time></p>\n  </header>\n\n  <div role="region" aria-labelledby="section1">\n    <h2 id="section1">Introduction</h2>\n    <p>Content...</p>\n  </div>\n</article>\n\n\x3c!-- Data table --\x3e\n<table role="table" aria-label="Sales data">\n  <thead>\n    <tr role="row">\n      <th role="columnheader">Month</th>\n      <th role="columnheader">Sales</th>\n      <th role="columnheader">Growth</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr role="row">\n      <td role="cell">January</td>\n      <td role="cell">$10,000</td>\n      <td role="cell">+5%</td>\n    </tr>\n  </tbody>\n</table>\n\n\x3c!-- List with custom styling --\x3e\n<ul role="list" aria-label="Feature list">\n  <li role="listitem">Feature 1</li>\n  <li role="listitem">Feature 2</li>\n  <li role="listitem">Feature 3</li>\n</ul>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"aria-states--properties",children:"ARIA States & Properties"}),"\n",(0,a.jsx)(n.p,{children:"ARIA states and properties describe the current condition and relationships of elements."}),"\n",(0,a.jsx)(n.h3,{id:"common-states",children:"Common States"}),"\n",(0,a.jsx)(n.p,{children:"States describe the current condition of an element and can change frequently."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Disabled state --\x3e\n<button aria-disabled="true" onclick="handleClick(event)">\n  Save (processing...)\n</button>\n\n\x3c!-- Expanded/Collapsed states --\x3e\n<button aria-expanded="false"\n        aria-controls="menu-items"\n        onclick="toggleMenu()">\n  Menu <span aria-hidden="true">\u25bc</span>\n</button>\n<ul id="menu-items" hidden>\n  <li><a href="#">Item 1</a></li>\n  <li><a href="#">Item 2</a></li>\n</ul>\n\n\x3c!-- Checked states --\x3e\n<div role="checkbox"\n     aria-checked="false"\n     tabindex="0"\n     onclick="toggleCheck(this)">\n  <span class="checkbox-icon" aria-hidden="true">\u2610</span>\n  Enable feature\n</div>\n\n<div role="checkbox"\n     aria-checked="mixed"\n     tabindex="0">\n  <span class="checkbox-icon" aria-hidden="true">\u2611</span>\n  Select all items (some selected)\n</div>\n\n\x3c!-- Selected state --\x3e\n<ul role="listbox" aria-label="Color options">\n  <li role="option"\n      aria-selected="false"\n      tabindex="0">Red</li>\n  <li role="option"\n      aria-selected="true"\n      tabindex="-1">Blue</li>\n  <li role="option"\n      aria-selected="false"\n      tabindex="-1">Green</li>\n</ul>\n\n\x3c!-- Hidden state --\x3e\n<div aria-hidden="true" class="decorative-icon">\ud83c\udf89</div>\n<span class="sr-only">Celebration complete!</span>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"properties-relationships--descriptions",children:"Properties (Relationships & Descriptions)"}),"\n",(0,a.jsx)(n.p,{children:"Properties describe relationships between elements and provide additional context."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Labeling --\x3e\n<input type="email"\n       id="email-input"\n       aria-label="Email address"\n       aria-required="true"\n       aria-invalid="false">\n\n\x3c!-- Label by reference --\x3e\n<h2 id="billing-heading">Billing Information</h2>\n<fieldset aria-labelledby="billing-heading">\n  <input type="text" placeholder="Card number">\n  <input type="text" placeholder="Expiry date">\n</fieldset>\n\n\x3c!-- Described by reference --\x3e\n<input type="password"\n       id="password"\n       aria-describedby="password-help password-strength">\n<div id="password-help">\n  Password must be at least 8 characters long\n</div>\n<div id="password-strength" aria-live="polite">\n  Password strength: Weak\n</div>\n\n\x3c!-- Controls relationship --\x3e\n<button aria-controls="video-player"\n        aria-pressed="false"\n        onclick="togglePlayback()">\n  <span aria-hidden="true">\u25b6\ufe0f</span>\n  Play video\n</button>\n<video id="video-player" src="video.mp4"></video>\n\n\x3c!-- Owns relationship --\x3e\n<div role="combobox"\n     aria-owns="suggestions-list"\n     aria-expanded="false">\n  <input type="text" aria-autocomplete="list">\n  <ul id="suggestions-list" role="listbox" hidden>\n    <li role="option">Suggestion 1</li>\n    <li role="option">Suggestion 2</li>\n  </ul>\n</div>\n\n\x3c!-- Flow to (reading order) --\x3e\n<div id="step1">\n  <h3>Step 1: Enter details</h3>\n  <input type="text" aria-flowto="step2">\n</div>\n<div id="step2" aria-flowto="step3">\n  <h3>Step 2: Review</h3>\n  \x3c!-- content --\x3e\n</div>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"accessible-notes--text-areas",children:"Accessible Notes & Text Areas"}),"\n",(0,a.jsx)(n.p,{children:"Creating accessible text input areas for notes, comments, and long-form content."}),"\n",(0,a.jsx)(n.h3,{id:"basic-textarea-implementation",children:"Basic Textarea Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Semantic HTML approach (preferred) --\x3e\n<div class="form-group">\n  <label for="notes">Meeting Notes</label>\n  <textarea id="notes"\n            name="notes"\n            rows="6"\n            cols="50"\n            aria-required="true"\n            aria-describedby="notes-help notes-count"\n            placeholder="Enter your notes here..."></textarea>\n\n  <div id="notes-help" class="help-text">\n    Include key discussion points and action items\n  </div>\n\n  <div id="notes-count" class="character-count" aria-live="polite">\n    0 / 500 characters\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"rich-text-editor-contenteditable",children:"Rich Text Editor (Contenteditable)"}),"\n",(0,a.jsx)(n.p,{children:"When you need more than basic textarea functionality:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="rich-editor">\n  <label id="editor-label">Article Content</label>\n\n  \x3c!-- Toolbar --\x3e\n  <div role="toolbar"\n       aria-label="Formatting options"\n       aria-controls="editor-content">\n    <button type="button"\n            aria-pressed="false"\n            onclick="toggleFormat(\'bold\')"\n            title="Bold (Ctrl+B)">\n      <strong aria-hidden="true">B</strong>\n      <span class="sr-only">Bold</span>\n    </button>\n\n    <button type="button"\n            aria-pressed="false"\n            onclick="toggleFormat(\'italic\')"\n            title="Italic (Ctrl+I)">\n      <em aria-hidden="true">I</em>\n      <span class="sr-only">Italic</span>\n    </button>\n  </div>\n\n  \x3c!-- Editor content --\x3e\n  <div id="editor-content"\n       role="textbox"\n       aria-multiline="true"\n       aria-labelledby="editor-label"\n       aria-describedby="editor-help"\n       contenteditable="true"\n       spellcheck="true"\n       tabindex="0"\n       onkeydown="handleEditorKeydown(event)"\n       oninput="updateCharCount()">\n  </div>\n\n  <div id="editor-help" class="help-text">\n    Use Ctrl+B for bold, Ctrl+I for italic. Press Shift+F10 for formatting options.\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"error-states-and-validation",children:"Error States and Validation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="form-group">\n  <label for="required-notes">Project Description *</label>\n\n  <textarea id="required-notes"\n            aria-required="true"\n            aria-invalid="true"\n            aria-describedby="notes-error notes-help">\n  </textarea>\n\n  \x3c!-- Error message --\x3e\n  <div id="notes-error"\n       role="alert"\n       class="error-message"\n       aria-atomic="true">\n    <span class="error-icon" aria-hidden="true">\u26a0\ufe0f</span>\n    Project description is required and must be at least 10 characters long.\n  </div>\n\n  \x3c!-- Help text --\x3e\n  <div id="notes-help" class="help-text">\n    Describe the project goals, timeline, and key deliverables.\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-notes-features",children:"Advanced Notes Features"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="advanced-notes-editor">\n  \x3c!-- Header with metadata --\x3e\n  <div class="notes-header">\n    <h3 id="notes-title">Session Notes</h3>\n    <div class="notes-meta" aria-label="Note metadata">\n      <span>Last saved: <time id="last-saved">2 minutes ago</time></span>\n      <span>Word count: <span id="word-count">247</span></span>\n    </div>\n  </div>\n\n  \x3c!-- Main editor --\x3e\n  <div class="editor-container">\n    <textarea id="advanced-notes"\n              aria-labelledby="notes-title"\n              aria-describedby="editor-status keyboard-shortcuts"\n              spellcheck="true"\n              autocorrect="on"\n              autocapitalize="sentences"\n              onkeydown="handleAdvancedKeydown(event)"\n              oninput="autoSave()"\n              onfocus="showKeyboardHelp()"\n              onblur="hideKeyboardHelp()">\n    </textarea>\n\n    \x3c!-- Auto-save status --\x3e\n    <div id="editor-status"\n         aria-live="polite"\n         aria-atomic="false"\n         class="save-status">\n      All changes saved\n    </div>\n  </div>\n\n  \x3c!-- Keyboard shortcuts help --\x3e\n  <div id="keyboard-shortcuts"\n       class="keyboard-help"\n       role="region"\n       aria-label="Keyboard shortcuts">\n    <h4>Keyboard Shortcuts</h4>\n    <dl>\n      <dt>Ctrl + S</dt>\n      <dd>Save notes</dd>\n      <dt>Ctrl + Z</dt>\n      <dd>Undo</dd>\n      <dt>Ctrl + Y</dt>\n      <dd>Redo</dd>\n      <dt>Ctrl + F</dt>\n      <dd>Find in notes</dd>\n    </dl>\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"keyboard-navigation-patterns",children:"Keyboard Navigation Patterns"}),"\n",(0,a.jsx)(n.p,{children:"Comprehensive keyboard navigation patterns for different UI components."}),"\n",(0,a.jsx)(n.h3,{id:"focus-management-principles",children:"Focus Management Principles"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Focus management utilities\nclass FocusManager {\n  constructor() {\n    this.focusableSelectors = [\n      'a[href]',\n      'button',\n      'input',\n      'select',\n      'textarea',\n      '[tabindex]',\n      '[contenteditable=\"true\"]'\n    ].join(', ');\n  }\n\n  getFocusableElements(container) {\n    const elements = container.querySelectorAll(this.focusableSelectors);\n    return Array.from(elements).filter(el => {\n      return !el.disabled &&\n             !el.hasAttribute('aria-hidden') &&\n             el.tabIndex !== -1;\n    });\n  }\n\n  trapFocus(container) {\n    const focusableElements = this.getFocusableElements(container);\n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n\n    container.addEventListener('keydown', (e) => {\n      if (e.key === 'Tab') {\n        if (e.shiftKey) {\n          if (document.activeElement === firstElement) {\n            e.preventDefault();\n            lastElement.focus();\n          }\n        } else {\n          if (document.activeElement === lastElement) {\n            e.preventDefault();\n            firstElement.focus();\n          }\n        }\n      }\n    });\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"button-navigation",children:"Button Navigation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="button-group" role="group" aria-label="Document actions">\n  <button type="button"\n          onclick="saveDocument()"\n          onkeydown="handleButtonKeydown(event, \'save\')">\n    Save\n  </button>\n\n  <button type="button"\n          onclick="previewDocument()"\n          onkeydown="handleButtonKeydown(event, \'preview\')">\n    Preview\n  </button>\n\n  <button type="button"\n          onclick="publishDocument()"\n          onkeydown="handleButtonKeydown(event, \'publish\')">\n    Publish\n  </button>\n</div>\n\n<script>\nfunction handleButtonKeydown(event, action) {\n  // Enter and Space activate buttons\n  if (event.key === \'Enter\' || event.key === \' \') {\n    event.preventDefault();\n    event.target.click();\n  }\n\n  // Arrow key navigation within button group\n  if (event.key === \'ArrowLeft\' || event.key === \'ArrowRight\') {\n    const buttons = [...event.target.parentNode.querySelectorAll(\'button\')];\n    const currentIndex = buttons.indexOf(event.target);\n    let nextIndex;\n\n    if (event.key === \'ArrowRight\') {\n      nextIndex = (currentIndex + 1) % buttons.length;\n    } else {\n      nextIndex = currentIndex === 0 ? buttons.length - 1 : currentIndex - 1;\n    }\n\n    buttons[nextIndex].focus();\n    event.preventDefault();\n  }\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"menu-navigation",children:"Menu Navigation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="menu-container">\n  <button id="menu-trigger"\n          aria-haspopup="true"\n          aria-expanded="false"\n          aria-controls="main-menu"\n          onkeydown="handleMenuTriggerKeydown(event)"\n          onclick="toggleMenu()">\n    File <span aria-hidden="true">\u25bc</span>\n  </button>\n\n  <ul id="main-menu"\n      role="menu"\n      aria-labelledby="menu-trigger"\n      hidden\n      onkeydown="handleMenuKeydown(event)">\n\n    <li role="menuitem" tabindex="-1">\n      <button type="button" onclick="newDocument()">\n        New <kbd aria-hidden="true">Ctrl+N</kbd>\n      </button>\n    </li>\n\n    <li role="menuitem" tabindex="-1">\n      <button type="button" onclick="openDocument()">\n        Open <kbd aria-hidden="true">Ctrl+O</kbd>\n      </button>\n    </li>\n\n    <li role="separator" aria-hidden="true"></li>\n\n    <li role="menuitem"\n        aria-haspopup="true"\n        aria-expanded="false"\n        tabindex="-1">\n      <button type="button" onclick="toggleRecentMenu()">\n        Recent Files <span aria-hidden="true">\u25b6</span>\n      </button>\n\n      \x3c!-- Submenu --\x3e\n      <ul role="menu" hidden>\n        <li role="menuitem" tabindex="-1">\n          <button type="button">Document1.txt</button>\n        </li>\n        <li role="menuitem" tabindex="-1">\n          <button type="button">Document2.txt</button>\n        </li>\n      </ul>\n    </li>\n  </ul>\n</div>\n\n<script>\nfunction handleMenuTriggerKeydown(event) {\n  switch (event.key) {\n    case \'Enter\':\n    case \' \':\n    case \'ArrowDown\':\n      event.preventDefault();\n      openMenu();\n      break;\n\n    case \'ArrowUp\':\n      event.preventDefault();\n      openMenu(true); // Focus last item\n      break;\n  }\n}\n\nfunction handleMenuKeydown(event) {\n  const menuItems = [...event.target.closest(\'[role="menu"]\')\n    .querySelectorAll(\'[role="menuitem"]:not([aria-hidden="true"])\')];\n  const currentIndex = menuItems.indexOf(event.target.closest(\'[role="menuitem"]\'));\n\n  switch (event.key) {\n    case \'ArrowDown\':\n      event.preventDefault();\n      const nextIndex = (currentIndex + 1) % menuItems.length;\n      menuItems[nextIndex].querySelector(\'button\').focus();\n      break;\n\n    case \'ArrowUp\':\n      event.preventDefault();\n      const prevIndex = currentIndex === 0 ? menuItems.length - 1 : currentIndex - 1;\n      menuItems[prevIndex].querySelector(\'button\').focus();\n      break;\n\n    case \'Enter\':\n    case \' \':\n      event.preventDefault();\n      event.target.click();\n      break;\n\n    case \'Escape\':\n      closeMenu();\n      document.getElementById(\'menu-trigger\').focus();\n      break;\n\n    case \'ArrowRight\':\n      // Handle submenu navigation\n      const submenu = event.target.closest(\'[role="menuitem"]\').querySelector(\'[role="menu"]\');\n      if (submenu) {\n        event.preventDefault();\n        openSubmenu(submenu);\n      }\n      break;\n\n    case \'ArrowLeft\':\n      // Close submenu or return to parent menu\n      const parentMenu = event.target.closest(\'[role="menu"]\').parentElement.closest(\'[role="menu"]\');\n      if (parentMenu) {\n        event.preventDefault();\n        closeSubmenu();\n        // Focus parent menu item\n      }\n      break;\n  }\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"tab-navigation",children:"Tab Navigation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="tab-container">\n  <div role="tablist"\n       aria-label="Settings sections"\n       onkeydown="handleTabListKeydown(event)">\n\n    <button role="tab"\n            id="general-tab"\n            aria-selected="true"\n            aria-controls="general-panel"\n            tabindex="0">\n      General\n    </button>\n\n    <button role="tab"\n            id="privacy-tab"\n            aria-selected="false"\n            aria-controls="privacy-panel"\n            tabindex="-1">\n      Privacy\n    </button>\n\n    <button role="tab"\n            id="security-tab"\n            aria-selected="false"\n            aria-controls="security-panel"\n            tabindex="-1">\n      Security\n    </button>\n  </div>\n\n  <div role="tabpanel"\n       id="general-panel"\n       aria-labelledby="general-tab"\n       tabindex="0">\n    <h3>General Settings</h3>\n    <label>\n      <input type="checkbox"> Enable notifications\n    </label>\n  </div>\n\n  <div role="tabpanel"\n       id="privacy-panel"\n       aria-labelledby="privacy-tab"\n       tabindex="0"\n       hidden>\n    <h3>Privacy Settings</h3>\n    <label>\n      <input type="checkbox"> Share usage data\n    </label>\n  </div>\n</div>\n\n<script>\nfunction handleTabListKeydown(event) {\n  const tabs = [...event.target.closest(\'[role="tablist"]\').querySelectorAll(\'[role="tab"]\')];\n  const currentIndex = tabs.indexOf(event.target);\n  let nextIndex;\n\n  switch (event.key) {\n    case \'ArrowRight\':\n    case \'ArrowLeft\':\n      event.preventDefault();\n\n      if (event.key === \'ArrowRight\') {\n        nextIndex = (currentIndex + 1) % tabs.length;\n      } else {\n        nextIndex = currentIndex === 0 ? tabs.length - 1 : currentIndex - 1;\n      }\n\n      selectTab(tabs[nextIndex]);\n      break;\n\n    case \'Home\':\n      event.preventDefault();\n      selectTab(tabs[0]);\n      break;\n\n    case \'End\':\n      event.preventDefault();\n      selectTab(tabs[tabs.length - 1]);\n      break;\n  }\n}\n\nfunction selectTab(tab) {\n  // Update ARIA states\n  const tablist = tab.closest(\'[role="tablist"]\');\n  const tabs = [...tablist.querySelectorAll(\'[role="tab"]\')];\n\n  tabs.forEach(t => {\n    t.setAttribute(\'aria-selected\', \'false\');\n    t.tabIndex = -1;\n  });\n\n  tab.setAttribute(\'aria-selected\', \'true\');\n  tab.tabIndex = 0;\n  tab.focus();\n\n  // Show corresponding panel\n  const panels = [...document.querySelectorAll(\'[role="tabpanel"]\')];\n  panels.forEach(p => p.hidden = true);\n\n  const targetPanel = document.getElementById(tab.getAttribute(\'aria-controls\'));\n  if (targetPanel) {\n    targetPanel.hidden = false;\n  }\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"listboxcombobox-navigation",children:"Listbox/Combobox Navigation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="combobox-container">\n  <label for="country-input">Choose a country</label>\n\n  <div role="combobox"\n       aria-expanded="false"\n       aria-haspopup="listbox"\n       aria-owns="country-listbox">\n\n    <input type="text"\n           id="country-input"\n           aria-autocomplete="list"\n           aria-controls="country-listbox"\n           onkeydown="handleComboboxKeydown(event)"\n           oninput="filterOptions(event)"\n           onfocus="showOptions()"\n           onblur="hideOptions()">\n  </div>\n\n  <ul id="country-listbox"\n      role="listbox"\n      aria-label="Country options"\n      hidden\n      onkeydown="handleListboxKeydown(event)">\n\n    <li role="option"\n        id="option-us"\n        aria-selected="false">United States</li>\n    <li role="option"\n        id="option-ca"\n        aria-selected="false">Canada</li>\n    <li role="option"\n        id="option-uk"\n        aria-selected="false">United Kingdom</li>\n  </ul>\n</div>\n\n<script>\nfunction handleComboboxKeydown(event) {\n  const listbox = document.getElementById(\'country-listbox\');\n  const options = [...listbox.querySelectorAll(\'[role="option"]:not([hidden])\')];\n\n  switch (event.key) {\n    case \'ArrowDown\':\n      event.preventDefault();\n      if (listbox.hidden) {\n        showOptions();\n      }\n      focusOption(options[0]);\n      break;\n\n    case \'ArrowUp\':\n      event.preventDefault();\n      if (listbox.hidden) {\n        showOptions();\n      }\n      focusOption(options[options.length - 1]);\n      break;\n\n    case \'Escape\':\n      hideOptions();\n      break;\n\n    case \'Enter\':\n      if (!listbox.hidden) {\n        const selectedOption = listbox.querySelector(\'[aria-selected="true"]\');\n        if (selectedOption) {\n          selectOption(selectedOption);\n        }\n      }\n      break;\n  }\n}\n\nfunction handleListboxKeydown(event) {\n  const options = [...event.target.closest(\'[role="listbox"]\')\n    .querySelectorAll(\'[role="option"]:not([hidden])\')];\n  const currentIndex = options.indexOf(event.target);\n\n  switch (event.key) {\n    case \'ArrowDown\':\n      event.preventDefault();\n      const nextIndex = (currentIndex + 1) % options.length;\n      focusOption(options[nextIndex]);\n      break;\n\n    case \'ArrowUp\':\n      event.preventDefault();\n      const prevIndex = currentIndex === 0 ? options.length - 1 : currentIndex - 1;\n      focusOption(options[prevIndex]);\n      break;\n\n    case \'Enter\':\n    case \' \':\n      event.preventDefault();\n      selectOption(event.target);\n      break;\n\n    case \'Escape\':\n      hideOptions();\n      document.getElementById(\'country-input\').focus();\n      break;\n\n    case \'Home\':\n      event.preventDefault();\n      focusOption(options[0]);\n      break;\n\n    case \'End\':\n      event.preventDefault();\n      focusOption(options[options.length - 1]);\n      break;\n\n    // Type-ahead support\n    default:\n      if (event.key.length === 1) {\n        const char = event.key.toLowerCase();\n        const matchingOption = options.find(option =>\n          option.textContent.toLowerCase().startsWith(char)\n        );\n        if (matchingOption) {\n          focusOption(matchingOption);\n        }\n      }\n      break;\n  }\n}\n\nfunction focusOption(option) {\n  const options = [...option.parentElement.querySelectorAll(\'[role="option"]\')];\n  options.forEach(opt => opt.setAttribute(\'aria-selected\', \'false\'));\n\n  option.setAttribute(\'aria-selected\', \'true\');\n  option.focus();\n\n  // Update input value for preview\n  const input = document.getElementById(\'country-input\');\n  input.value = option.textContent;\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"live-regions--dynamic-content",children:"Live Regions & Dynamic Content"}),"\n",(0,a.jsx)(n.p,{children:"Managing dynamic content updates for screen reader users."}),"\n",(0,a.jsx)(n.h3,{id:"live-region-types",children:"Live Region Types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'\x3c!-- Polite announcements (don\'t interrupt) --\x3e\n<div id="status-updates"\n     aria-live="polite"\n     aria-atomic="false"\n     class="sr-only">\n  \x3c!-- Status messages appear here --\x3e\n</div>\n\n\x3c!-- Assertive announcements (interrupt current speech) --\x3e\n<div id="error-announcements"\n     aria-live="assertive"\n     aria-atomic="true"\n     role="alert"\n     class="sr-only">\n  \x3c!-- Critical errors appear here --\x3e\n</div>\n\n\x3c!-- Off - no announcements --\x3e\n<div id="debug-info"\n     aria-live="off"\n     aria-relevant="text additions removals">\n  \x3c!-- Debug info that shouldn\'t be announced --\x3e\n</div>\n\n\x3c!-- Log for sequential updates --\x3e\n<div id="activity-log"\n     role="log"\n     aria-label="Recent activity"\n     aria-live="polite">\n  <ul>\n    <li>User John logged in at 2:30 PM</li>\n    <li>Document saved at 2:32 PM</li>\n    \x3c!-- New items added here --\x3e\n  </ul>\n</div>\n\n\x3c!-- Timer/countdown --\x3e\n<div id="timer-display"\n     role="timer"\n     aria-live="polite"\n     aria-atomic="true">\n  <span class="time">05:00</span>\n  <span class="label">minutes remaining</span>\n</div>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dynamic-content-management",children:"Dynamic Content Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"class LiveRegionManager {\n  constructor() {\n    this.regions = {\n      status: this.createRegion('polite', false),\n      alert: this.createRegion('assertive', true),\n      log: this.createRegion('polite', false, 'log')\n    };\n  }\n\n  createRegion(level, atomic, role = null) {\n    const region = document.createElement('div');\n    region.setAttribute('aria-live', level);\n    region.setAttribute('aria-atomic', atomic.toString());\n    region.className = 'sr-only';\n\n    if (role) {\n      region.setAttribute('role', role);\n    }\n\n    document.body.appendChild(region);\n    return region;\n  }\n\n  announce(message, type = 'status', delay = 100) {\n    // Small delay ensures screen readers catch the update\n    setTimeout(() => {\n      const region = this.regions[type];\n      if (region) {\n        region.textContent = message;\n\n        // Clear after announcement to allow repeated messages\n        setTimeout(() => {\n          region.textContent = '';\n        }, 1000);\n      }\n    }, delay);\n  }\n\n  appendToLog(message, timestamp = true) {\n    const logRegion = this.regions.log;\n    const entry = document.createElement('div');\n\n    if (timestamp) {\n      const time = new Date().toLocaleTimeString();\n      entry.textContent = `${time}: ${message}`;\n    } else {\n      entry.textContent = message;\n    }\n\n    logRegion.appendChild(entry);\n\n    // Limit log entries to prevent performance issues\n    const entries = logRegion.children;\n    if (entries.length > 50) {\n      logRegion.removeChild(entries[0]);\n    }\n  }\n}\n\n// Usage examples\nconst liveRegions = new LiveRegionManager();\n\n// Status updates\nfunction saveDocument() {\n  // ... save logic\n  liveRegions.announce('Document saved successfully');\n}\n\n// Error alerts\nfunction handleError(error) {\n  liveRegions.announce(`Error: ${error.message}`, 'alert');\n}\n\n// Activity logging\nfunction logActivity(activity) {\n  liveRegions.appendToLog(activity);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"form-validation-with-live-feedback",children:"Form Validation with Live Feedback"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<form novalidate onsubmit="handleFormSubmit(event)">\n  <div class="form-group">\n    <label for="username">Username *</label>\n    <input type="text"\n           id="username"\n           name="username"\n           required\n           minlength="3"\n           aria-describedby="username-help username-feedback"\n           oninput="validateField(this)"\n           onblur="validateField(this, true)">\n\n    <div id="username-help" class="help-text">\n      Username must be at least 3 characters long\n    </div>\n\n    <div id="username-feedback"\n         aria-live="polite"\n         aria-atomic="true"\n         class="validation-feedback">\n      \x3c!-- Validation messages appear here --\x3e\n    </div>\n  </div>\n\n  <div class="form-group">\n    <label for="email">Email Address *</label>\n    <input type="email"\n           id="email"\n           name="email"\n           required\n           aria-describedby="email-help email-feedback"\n           oninput="validateField(this)"\n           onblur="validateField(this, true)">\n\n    <div id="email-help" class="help-text">\n      Enter a valid email address\n    </div>\n\n    <div id="email-feedback"\n         aria-live="polite"\n         class="validation-feedback">\n    </div>\n  </div>\n\n  \x3c!-- Form-level feedback --\x3e\n  <div id="form-feedback"\n       role="alert"\n       aria-live="assertive"\n       class="form-errors">\n    \x3c!-- Form submission errors appear here --\x3e\n  </div>\n\n  <button type="submit">Submit</button>\n</form>\n\n<script>\nfunction validateField(field, showSuccess = false) {\n  const feedback = document.getElementById(field.id + \'-feedback\');\n  const isValid = field.checkValidity();\n\n  // Clear previous state\n  field.removeAttribute(\'aria-invalid\');\n  feedback.textContent = \'\';\n  feedback.className = \'validation-feedback\';\n\n  if (!isValid) {\n    field.setAttribute(\'aria-invalid\', \'true\');\n    feedback.className = \'validation-feedback error\';\n    feedback.textContent = field.validationMessage;\n  } else if (showSuccess && field.value.trim()) {\n    feedback.className = \'validation-feedback success\';\n    feedback.textContent = \'Valid\';\n  }\n}\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  const form = event.target;\n  const formFeedback = document.getElementById(\'form-feedback\');\n  const isValid = form.checkValidity();\n\n  if (!isValid) {\n    // Show form-level errors\n    formFeedback.innerHTML = `\n      <h3>Please correct the following errors:</h3>\n      <ul>\n        ${Array.from(form.elements)\n          .filter(el => !el.checkValidity() && el.name)\n          .map(el => `<li>${el.labels[0]?.textContent || el.name}: ${el.validationMessage}</li>`)\n          .join(\'\')}\n      </ul>\n    `;\n\n    // Focus first invalid field\n    const firstInvalid = form.querySelector(\':invalid\');\n    if (firstInvalid) {\n      firstInvalid.focus();\n    }\n  } else {\n    formFeedback.innerHTML = \'<p>Form submitted successfully!</p>\';\n    // Process form...\n  }\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"form-accessibility",children:"Form Accessibility"}),"\n",(0,a.jsx)(n.p,{children:"Comprehensive form accessibility patterns and techniques."}),"\n",(0,a.jsx)(n.h3,{id:"field-grouping-and-relationships",children:"Field Grouping and Relationships"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<form>\n  \x3c!-- Required field indicators --\x3e\n  <fieldset>\n    <legend>Personal Information <span class="required-note">(* indicates required fields)</span></legend>\n\n    <div class="form-row">\n      <div class="form-group">\n        <label for="first-name">\n          First Name *\n          <span class="sr-only">(required)</span>\n        </label>\n        <input type="text"\n               id="first-name"\n               name="firstName"\n               required\n               autocomplete="given-name"\n               aria-describedby="name-help">\n      </div>\n\n      <div class="form-group">\n        <label for="last-name">\n          Last Name *\n          <span class="sr-only">(required)</span>\n        </label>\n        <input type="text"\n               id="last-name"\n               name="lastName"\n               required\n               autocomplete="family-name">\n      </div>\n    </div>\n\n    <div id="name-help" class="help-text">\n      Enter your full legal name as it appears on official documents\n    </div>\n  </fieldset>\n\n  \x3c!-- Radio button groups --\x3e\n  <fieldset>\n    <legend>Contact Preference</legend>\n    <div role="radiogroup" aria-describedby="contact-help">\n      <label>\n        <input type="radio" name="contact" value="email" checked>\n        Email\n      </label>\n      <label>\n        <input type="radio" name="contact" value="phone">\n        Phone\n      </label>\n      <label>\n        <input type="radio" name="contact" value="mail">\n        Mail\n      </label>\n    </div>\n    <div id="contact-help" class="help-text">\n      Choose how you\'d like us to contact you\n    </div>\n  </fieldset>\n\n  \x3c!-- Checkbox groups --\x3e\n  <fieldset>\n    <legend>Interests (select all that apply)</legend>\n    <div class="checkbox-group">\n      <label>\n        <input type="checkbox" name="interests" value="technology">\n        Technology\n      </label>\n      <label>\n        <input type="checkbox" name="interests" value="design">\n        Design\n      </label>\n      <label>\n        <input type="checkbox" name="interests" value="business">\n        Business\n      </label>\n    </div>\n  </fieldset>\n\n  \x3c!-- Complex input with multiple parts --\x3e\n  <fieldset>\n    <legend>Phone Number</legend>\n    <div class="phone-input" role="group" aria-labelledby="phone-legend">\n      <label for="phone-country" class="sr-only">Country code</label>\n      <select id="phone-country" name="phoneCountry" aria-describedby="phone-help">\n        <option value="+1">+1 (US)</option>\n        <option value="+44">+44 (UK)</option>\n        <option value="+33">+33 (FR)</option>\n      </select>\n\n      <label for="phone-number" class="sr-only">Phone number</label>\n      <input type="tel"\n             id="phone-number"\n             name="phoneNumber"\n             placeholder="(555) 123-4567"\n             autocomplete="tel"\n             aria-describedby="phone-help">\n    </div>\n    <div id="phone-help" class="help-text">\n      Include area code for US numbers\n    </div>\n  </fieldset>\n</form>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-input-types",children:"Advanced Input Types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div class="advanced-inputs">\n  \x3c!-- Date picker --\x3e\n  <div class="form-group">\n    <label for="birth-date">Date of Birth</label>\n    <input type="date"\n           id="birth-date"\n           name="birthDate"\n           min="1900-01-01"\n           max="2023-12-31"\n           aria-describedby="date-help"\n           onchange="validateAge(this)">\n    <div id="date-help" class="help-text">\n      Must be 18 years or older\n    </div>\n  </div>\n\n  \x3c!-- Range slider --\x3e\n  <div class="form-group">\n    <label for="salary-range">Expected Salary Range</label>\n    <div class="range-container">\n      <input type="range"\n             id="salary-range"\n             name="salaryRange"\n             min="30000"\n             max="200000"\n             step="5000"\n             value="75000"\n             aria-describedby="salary-help salary-value"\n             oninput="updateRangeValue(this)">\n      <output id="salary-value" for="salary-range" aria-live="polite">\n        $75,000\n      </output>\n    </div>\n    <div id="salary-help" class="help-text">\n      Adjust slider to set your expected salary range\n    </div>\n  </div>\n\n  \x3c!-- File upload --\x3e\n  <div class="form-group">\n    <label for="resume-upload">Upload Resume</label>\n    <input type="file"\n           id="resume-upload"\n           name="resume"\n           accept=".pdf,.doc,.docx"\n           aria-describedby="file-help file-status"\n           onchange="handleFileUpload(this)">\n    <div id="file-help" class="help-text">\n      Accepted formats: PDF, DOC, DOCX (max 5MB)\n    </div>\n    <div id="file-status" aria-live="polite" class="file-status">\n      \x3c!-- Upload status appears here --\x3e\n    </div>\n  </div>\n\n  \x3c!-- Multi-step progress --\x3e\n  <div class="progress-container">\n    <div role="progressbar"\n         aria-valuenow="2"\n         aria-valuemin="1"\n         aria-valuemax="4"\n         aria-labelledby="progress-label">\n      <div id="progress-label">Step 2 of 4: Contact Information</div>\n      <div class="progress-bar">\n        <div class="progress-fill" style="width: 50%"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\nfunction updateRangeValue(slider) {\n  const output = document.getElementById(\'salary-value\');\n  const value = parseInt(slider.value);\n  output.textContent = `${value.toLocaleString()}`;\n}\n\nfunction handleFileUpload(input) {\n  const status = document.getElementById(\'file-status\');\n  const file = input.files[0];\n\n  if (file) {\n    if (file.size > 5 * 1024 * 1024) { // 5MB\n      status.innerHTML = \'<span class="error">File too large. Maximum size is 5MB.</span>\';\n      input.value = \'\';\n    } else {\n      status.innerHTML = `<span class="success">File selected: ${file.name}</span>`;\n    }\n  } else {\n    status.textContent = \'\';\n  }\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"modal--dialog-patterns",children:"Modal & Dialog Patterns"}),"\n",(0,a.jsx)(n.p,{children:"Accessible modal and dialog implementations with proper focus management."}),"\n",(0,a.jsx)(n.h3,{id:"basic-modal-dialog",children:"Basic Modal Dialog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div id="modal-overlay"\n     class="modal-overlay"\n     hidden\n     onclick="handleOverlayClick(event)">\n\n  <div id="confirmation-modal"\n       role="dialog"\n       aria-modal="true"\n       aria-labelledby="modal-title"\n       aria-describedby="modal-description"\n       class="modal"\n       onkeydown="handleModalKeydown(event)">\n\n    <div class="modal-header">\n      <h2 id="modal-title">Confirm Deletion</h2>\n      <button type="button"\n              class="close-button"\n              aria-label="Close dialog"\n              onclick="closeModal()">\n        <span aria-hidden="true">\xd7</span>\n      </button>\n    </div>\n\n    <div class="modal-body">\n      <p id="modal-description">\n        Are you sure you want to delete this item? This action cannot be undone.\n      </p>\n    </div>\n\n    <div class="modal-footer">\n      <button type="button"\n              class="btn btn-secondary"\n              onclick="closeModal()">\n        Cancel\n      </button>\n      <button type="button"\n              class="btn btn-danger"\n              onclick="confirmDelete()"\n              autofocus>\n        Delete\n      </button>\n    </div>\n  </div>\n</div>\n\n<script>\nlet previousActiveElement = null;\nconst focusManager = new FocusManager();\n\nfunction openModal(modalId) {\n  // Store current focus\n  previousActiveElement = document.activeElement;\n\n  const overlay = document.getElementById(\'modal-overlay\');\n  const modal = document.getElementById(modalId);\n\n  // Show modal\n  overlay.hidden = false;\n\n  // Trap focus within modal\n  focusManager.trapFocus(modal);\n\n  // Focus first focusable element or autofocus element\n  const autofocusElement = modal.querySelector(\'[autofocus]\');\n  const firstFocusable = focusManager.getFocusableElements(modal)[0];\n\n  if (autofocusElement) {\n    autofocusElement.focus();\n  } else if (firstFocusable) {\n    firstFocusable.focus();\n  }\n\n  // Prevent body scroll\n  document.body.style.overflow = \'hidden\';\n\n  // Announce to screen readers\n  setTimeout(() => {\n    liveRegions.announce(\'Dialog opened\', \'status\');\n  }, 100);\n}\n\nfunction closeModal() {\n  const overlay = document.getElementById(\'modal-overlay\');\n\n  // Hide modal\n  overlay.hidden = true;\n\n  // Restore focus\n  if (previousActiveElement) {\n    previousActiveElement.focus();\n    previousActiveElement = null;\n  }\n\n  // Restore body scroll\n  document.body.style.overflow = \'\';\n\n  // Announce to screen readers\n  liveRegions.announce(\'Dialog closed\', \'status\');\n}\n\nfunction handleModalKeydown(event) {\n  if (event.key === \'Escape\') {\n    closeModal();\n  }\n}\n\nfunction handleOverlayClick(event) {\n  if (event.target === event.currentTarget) {\n    closeModal();\n  }\n}\n\nfunction confirmDelete() {\n  // Perform deletion\n  liveRegions.announce(\'Item deleted successfully\', \'status\');\n  closeModal();\n}\n<\/script>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"alert-dialog",children:"Alert Dialog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div id="alert-modal"\n     role="alertdialog"\n     aria-modal="true"\n     aria-labelledby="alert-title"\n     aria-describedby="alert-description"\n     class="modal alert-modal"\n     hidden>\n\n  <div class="modal-content">\n    <div class="alert-icon" aria-hidden="true">\u26a0\ufe0f</div>\n    <h2 id="alert-title">System Error</h2>\n    <p id="alert-description">\n      An unexpected error occurred. Your work has been saved automatically.\n    </p>\n    <button type="button"\n            class="btn btn-primary"\n            onclick="closeAlertModal()"\n            autofocus>\n      OK\n    </button>\n  </div>\n</div>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"form-dialog",children:"Form Dialog"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<div id="form-modal"\n     role="dialog"\n     aria-modal="true"\n     aria-labelledby="form-modal-title"\n     class="modal form-modal"\n     hidden>\n\n  <form onsubmit="handleFormModalSubmit(event)" novalidate>\n    <div class="modal-header">\n      <h2 id="form-modal-title">Add New Contact</h2>\n      <button type="button"\n              aria-label="Close"\n              onclick="closeFormModal()">\xd7</button>\n    </div>\n\n    <div class="modal-body">\n      <div class="form-group">\n        <label for="contact-name">Name *</label>\n        <input type="text"\n               id="contact-name"\n               name="name"\n               required\n               aria-describedby="name-error"\n               autofocus>\n        <div id="name-error"\n             role="alert"\n             aria-live="assertive"\n             class="error-message">\n        </div>\n      </div>\n\n      <div class="form-group">\n        <label for="contact-email">Email</label>\n        <input type="email"\n               id="contact-email"\n               name="email"\n               aria-describedby="email-error">\n        <div id="email-error"\n             role="alert"\n             aria-live="assertive"\n             class="error-message">\n        </div>\n      </div>\n    </div>\n\n    <div class="modal-footer">\n      <button type="button" onclick="closeFormModal()">Cancel</button>\n      <button type="submit">Add Contact</button>\n    </div>\n  </form>\n</div>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"testing--validation",children:"Testing & Validation"}),"\n",(0,a.jsx)(n.p,{children:"Tools and techniques for testing accessibility implementation."}),"\n",(0,a.jsx)(n.h3,{id:"automated-testing",children:"Automated Testing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Basic accessibility testing utilities\nclass AccessibilityTester {\n  constructor() {\n    this.violations = [];\n  }\n\n  testFocusManagement() {\n    const focusableElements = document.querySelectorAll(\n      'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n\n    focusableElements.forEach(element => {\n      if (element.tabIndex === 0 && !this.isVisible(element)) {\n        this.violations.push({\n          type: 'focus',\n          element: element,\n          message: 'Focusable element is not visible'\n        });\n      }\n    });\n  }\n\n  testLabels() {\n    const inputs = document.querySelectorAll('input, select, textarea');\n\n    inputs.forEach(input => {\n      const hasLabel = this.hasLabel(input);\n      if (!hasLabel) {\n        this.violations.push({\n          type: 'label',\n          element: input,\n          message: 'Form control missing label'\n        });\n      }\n    });\n  }\n\n  testHeadingStructure() {\n    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n    let previousLevel = 0;\n\n    headings.forEach((heading, index) => {\n      const level = parseInt(heading.tagName.charAt(1));\n\n      if (index === 0 && level !== 1) {\n        this.violations.push({\n          type: 'heading',\n          element: heading,\n          message: 'Page should start with h1'\n        });\n      }\n\n      if (level > previousLevel + 1) {\n        this.violations.push({\n          type: 'heading',\n          element: heading,\n          message: `Heading level jumps from h${previousLevel} to h${level}`\n        });\n      }\n\n      previousLevel = level;\n    });\n  }\n\n  testAriaLabels() {\n    const elementsWithAriaLabel = document.querySelectorAll('[aria-label]');\n    const elementsWithAriaLabelledby = document.querySelectorAll('[aria-labelledby]');\n\n    elementsWithAriaLabelledby.forEach(element => {\n      const ids = element.getAttribute('aria-labelledby').split(' ');\n      ids.forEach(id => {\n        if (!document.getElementById(id)) {\n          this.violations.push({\n            type: 'aria',\n            element: element,\n            message: `aria-labelledby references non-existent id: ${id}`\n          });\n        }\n      });\n    });\n  }\n\n  hasLabel(input) {\n    // Check for label element\n    if (input.labels && input.labels.length > 0) return true;\n\n    // Check for aria-label\n    if (input.getAttribute('aria-label')) return true;\n\n    // Check for aria-labelledby\n    if (input.getAttribute('aria-labelledby')) {\n      const ids = input.getAttribute('aria-labelledby').split(' ');\n      return ids.every(id => document.getElementById(id));\n    }\n\n    return false;\n  }\n\n  isVisible(element) {\n    const style = window.getComputedStyle(element);\n    return style.display !== 'none' &&\n           style.visibility !== 'hidden' &&\n           style.opacity !== '0';\n  }\n\n  runAllTests() {\n    this.violations = [];\n    this.testFocusManagement();\n    this.testLabels();\n    this.testHeadingStructure();\n    this.testAriaLabels();\n\n    return this.violations;\n  }\n\n  generateReport() {\n    const violations = this.runAllTests();\n\n    console.group('Accessibility Test Results');\n\n    if (violations.length === 0) {\n      console.log('\u2705 No violations found');\n    } else {\n      console.log(`\u274c Found ${violations.length} violations:`);\n\n      violations.forEach((violation, index) => {\n        console.group(`${index + 1}. ${violation.type.toUpperCase()}`);\n        console.log('Message:', violation.message);\n        console.log('Element:', violation.element);\n        console.groupEnd();\n      });\n    }\n\n    console.groupEnd();\n\n    return violations;\n  }\n}\n\n// Usage\nconst tester = new AccessibilityTester();\ntester.generateReport();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"manual-testing-checklist",children:"Manual Testing Checklist"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:"## Accessibility Testing Checklist\n\n### Keyboard Navigation\n- [ ] All interactive elements are reachable via Tab key\n- [ ] Tab order is logical and matches visual layout\n- [ ] Focus indicators are visible and clear\n- [ ] Escape key closes modals/menus appropriately\n- [ ] Arrow keys work in menus, tabs, and other widgets\n- [ ] Enter/Space activate buttons and links\n\n### Screen Reader Testing\n- [ ] Page has proper heading structure (h1, h2, h3, etc.)\n- [ ] All images have appropriate alt text\n- [ ] Form controls have labels\n- [ ] Error messages are announced\n- [ ] Dynamic content updates are announced\n- [ ] Landmarks help with navigation\n\n### Visual Testing\n- [ ] Text has sufficient color contrast (4.5:1 for normal, 3:1 for large)\n- [ ] Focus indicators are visible\n- [ ] Text is readable when zoomed to 200%\n- [ ] No information conveyed by color alone\n- [ ] Content reflows properly on mobile devices\n\n### ARIA Testing\n- [ ] ARIA roles are used appropriately\n- [ ] ARIA states update correctly (expanded, selected, etc.)\n- [ ] aria-live regions announce changes\n- [ ] No invalid ARIA attribute combinations\n\n### Form Testing\n- [ ] Required fields are clearly marked\n- [ ] Validation errors are associated with fields\n- [ ] Error messages are descriptive\n- [ ] Success messages are announced\n- [ ] Field groups use fieldset/legend appropriately\n"})}),"\n",(0,a.jsx)(n.h3,{id:"testing-tools-integration",children:"Testing Tools Integration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Integration with popular testing tools\nclass AccessibilityTestSuite {\n  async runAxeTests() {\n    // Requires axe-core library\n    if (typeof axe !== 'undefined') {\n      try {\n        const results = await axe.run();\n        console.log('Axe test results:', results);\n        return results.violations;\n      } catch (error) {\n        console.error('Axe testing failed:', error);\n        return [];\n      }\n    } else {\n      console.warn('axe-core library not loaded');\n      return [];\n    }\n  }\n\n  simulateScreenReader() {\n    // Basic screen reader simulation\n    const elements = document.querySelectorAll('*');\n    const announcement = [];\n\n    elements.forEach(element => {\n      if (this.isVisible(element) && this.hasTextContent(element)) {\n        const role = element.getAttribute('role') || this.getImplicitRole(element);\n        const label = this.getAccessibleName(element);\n\n        if (label) {\n          announcement.push({\n            element: element,\n            role: role,\n            name: label,\n            states: this.getStates(element)\n          });\n        }\n      }\n    });\n\n    return announcement;\n  }\n\n  getImplicitRole(element) {\n    const roleMap = {\n      'button': 'button',\n      'a': element.href ? 'link' : null,\n      'input': this.getInputRole(element),\n      'h1': 'heading',\n      'h2': 'heading',\n      'h3': 'heading',\n      'h4': 'heading',\n      'h5': 'heading',\n      'h6': 'heading',\n      'nav': 'navigation',\n      'main': 'main',\n      'header': 'banner',\n      'footer': 'contentinfo',\n      'aside': 'complementary'\n    };\n\n    return roleMap[element.tagName.toLowerCase()] || null;\n  }\n\n  getInputRole(input) {\n    const typeRoleMap = {\n      'checkbox': 'checkbox',\n      'radio': 'radio',\n      'range': 'slider',\n      'text': 'textbox',\n      'email': 'textbox',\n      'password': 'textbox',\n      'search': 'searchbox'\n    };\n\n    return typeRoleMap[input.type] || 'textbox';\n  }\n\n  getAccessibleName(element) {\n    // Priority order for accessible name calculation\n\n    // 1. aria-label\n    if (element.hasAttribute('aria-label')) {\n      return element.getAttribute('aria-label');\n    }\n\n    // 2. aria-labelledby\n    if (element.hasAttribute('aria-labelledby')) {\n      const ids = element.getAttribute('aria-labelledby').split(' ');\n      const names = ids.map(id => {\n        const referencedElement = document.getElementById(id);\n        return referencedElement ? referencedElement.textContent.trim() : '';\n      }).filter(name => name);\n\n      if (names.length > 0) {\n        return names.join(' ');\n      }\n    }\n\n    // 3. Associated label\n    if (element.labels && element.labels.length > 0) {\n      return element.labels[0].textContent.trim();\n    }\n\n    // 4. alt attribute (for images)\n    if (element.hasAttribute('alt')) {\n      return element.getAttribute('alt');\n    }\n\n    // 5. title attribute\n    if (element.hasAttribute('title')) {\n      return element.getAttribute('title');\n    }\n\n    // 6. Text content (for certain elements)\n    if (['button', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(element.tagName.toLowerCase())) {\n      return element.textContent.trim();\n    }\n\n    return null;\n  }\n\n  getStates(element) {\n    const states = [];\n\n    // Common ARIA states\n    const ariaStates = [\n      'aria-expanded',\n      'aria-checked',\n      'aria-selected',\n      'aria-pressed',\n      'aria-disabled',\n      'aria-invalid',\n      'aria-hidden'\n    ];\n\n    ariaStates.forEach(state => {\n      if (element.hasAttribute(state)) {\n        const value = element.getAttribute(state);\n        states.push(`${state}: ${value}`);\n      }\n    });\n\n    // HTML states\n    if (element.disabled) states.push('disabled');\n    if (element.required) states.push('required');\n    if (element.checked) states.push('checked');\n\n    return states;\n  }\n\n  isVisible(element) {\n    const rect = element.getBoundingClientRect();\n    const style = window.getComputedStyle(element);\n\n    return rect.width > 0 &&\n           rect.height > 0 &&\n           style.opacity !== '0' &&\n           style.visibility !== 'hidden' &&\n           style.display !== 'none';\n  }\n\n  hasTextContent(element) {\n    return element.textContent && element.textContent.trim().length > 0;\n  }\n}\n\n// Usage\nconst testSuite = new AccessibilityTestSuite();\n\n// Run manual tests\nconst manualResults = new AccessibilityTester().runAllTests();\n\n// Run axe tests (if available)\ntestSuite.runAxeTests().then(axeResults => {\n  console.log('Combined test results:', {\n    manual: manualResults,\n    axe: axeResults\n  });\n});\n\n// Simulate screen reader output\nconst srOutput = testSuite.simulateScreenReader();\nconsole.log('Screen reader simulation:', srOutput);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.p,{children:"This comprehensive guide covers:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ARIA Roles"}),": Semantic meaning for assistive technologies"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"ARIA States & Properties"}),": Dynamic states and relationships"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Keyboard Navigation"}),": Proper focus management and interaction patterns"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Live Regions"}),": Dynamic content announcements"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Form Accessibility"}),": Proper labeling, validation, and error handling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Modal Patterns"}),": Focus trapping and proper dialog implementation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Testing"}),": Automated and manual accessibility validation"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"key-principles-to-remember",children:"Key Principles to Remember"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Semantic HTML First"}),": Use native elements when possible before adding ARIA"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Progressive Enhancement"}),": Build accessible foundations, then enhance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test with Real Users"}),": Nothing replaces testing with actual assistive technology users"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Focus Management"}),": Always know where focus is and where it should go"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clear Communication"}),": Provide clear, descriptive labels and instructions"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Essential ARIA attributes:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"aria-label"}),", ",(0,a.jsx)(n.code,{children:"aria-labelledby"}),", ",(0,a.jsx)(n.code,{children:"aria-describedby"})," for labeling"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"aria-expanded"}),", ",(0,a.jsx)(n.code,{children:"aria-selected"}),", ",(0,a.jsx)(n.code,{children:"aria-checked"})," for states"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"aria-live"}),", ",(0,a.jsx)(n.code,{children:'role="alert"'})," for dynamic content"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"aria-hidden"})," to hide decorative elements"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Key keyboard patterns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Tab/Shift+Tab for focus navigation"}),"\n",(0,a.jsx)(n.li,{children:"Enter/Space for activation"}),"\n",(0,a.jsx)(n.li,{children:"Arrow keys for widget navigation"}),"\n",(0,a.jsx)(n.li,{children:"Escape for dismissal/cancellation"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Testing priorities:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Keyboard-only navigation"}),"\n",(0,a.jsx)(n.li,{children:"Screen reader compatibility"}),"\n",(0,a.jsx)(n.li,{children:"Color contrast and visual clarity"}),"\n",(0,a.jsx)(n.li,{children:"Error handling and feedback"}),"\n",(0,a.jsx)(n.li,{children:"Mobile accessibility"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);