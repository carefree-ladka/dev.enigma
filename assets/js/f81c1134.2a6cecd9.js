"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[8130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/10/09/react-ssr-blog-post","metadata":{"permalink":"/blog/2024/10/09/react-ssr-blog-post","editUrl":"https://github.com/carefree-ladka/blog/2024-10-09-react-ssr-blog-post.mdx","source":"@site/blog/2024-10-09-react-ssr-blog-post.mdx","title":"Understanding React Server Components: A Deep Dive","description":"A comprehensive guide to React Server Components, exploring how they work, their benefits, and practical examples of when to use them.","date":"2024-10-09T00:00:00.000Z","tags":[{"inline":false,"label":"React","permalink":"/blog/tags/react","description":"Posts about React.js, hooks, components, and best practices"},{"inline":true,"label":"server-components","permalink":"/blog/tags/server-components"},{"inline":true,"label":"next.js","permalink":"/blog/tags/next-js"},{"inline":false,"label":"Performance","permalink":"/blog/tags/performance","description":"Web performance optimization and best practices"},{"inline":false,"label":"Web Development","permalink":"/blog/tags/web-development","description":"General web development topics and best practices"}],"readingTime":8.415,"hasTruncateMarker":true,"authors":[{"name":"Pawan Kumar","title":"Zensar Technologies","url":"https://www.linkedin.com/in/kumpawan/","page":{"permalink":"/blog/authors/pawan"},"socials":{"linkedin":"https://www.linkedin.com/in/kumpawan/","github":"https://github.com/carefree-ladka"},"imageURL":"https://github.com/carefree-ladka.png","key":"pawan"}],"frontMatter":{"title":"Understanding React Server Components: A Deep Dive","date":"2024-10-09T00:00:00.000Z","authors":["pawan"],"tags":["react","server-components","next.js","performance","web-development"],"description":"A comprehensive guide to React Server Components, exploring how they work, their benefits, and practical examples of when to use them.","image":"/img/blog/react-server-components.jpg"},"unlisted":false},"content":"React Server Components (RSC) represent a paradigm shift in how we build React applications. Introduced by the React team and popularized by Next.js 13+, they blur the line between server and client, offering significant performance benefits and a better developer experience.\\n\\n{/* truncate */}\\n\\n## What Are React Server Components?\\n\\nReact Server Components are components that run exclusively on the server. Unlike traditional React components that render on both server (SSR) and client (hydration), Server Components never ship JavaScript to the browser.\\n\\n### Key Characteristics\\n\\n- **Zero Bundle Size**: Server Components don\'t add to your JavaScript bundle\\n- **Direct Backend Access**: Can directly access databases, file systems, and server-only APIs\\n- **Automatic Code Splitting**: Only Client Components are split and sent to the browser\\n- **Streaming**: Can stream UI updates to the client progressively\\n\\n## Server Components vs Client Components\\n\\nLet\'s break down the differences:\\n\\n| Feature                           | Server Components | Client Components |\\n| --------------------------------- | ----------------- | ----------------- |\\n| **Runs on**                       | Server only       | Server + Client   |\\n| **JavaScript Bundle**             | 0 KB              | Adds to bundle    |\\n| **Can use hooks**                 | \u274c No             | \u2705 Yes            |\\n| **Can access backend**            | \u2705 Yes            | \u274c No             |\\n| **Interactivity**                 | \u274c No             | \u2705 Yes            |\\n| **Default in Next.js App Router** | \u2705 Yes            | Need \'use client\' |\\n\\n## When to Use Server Components\\n\\nServer Components are ideal for:\\n\\n1. **Data Fetching**: Fetching data from databases or APIs\\n2. **Static Content**: Rendering content that doesn\'t require interactivity\\n3. **Heavy Dependencies**: Using large libraries that don\'t need to run on the client\\n4. **Security**: Keeping sensitive logic and API keys on the server\\n\\n## When to Use Client Components\\n\\nClient Components are necessary for:\\n\\n1. **Interactivity**: onClick, onChange, form submissions\\n2. **React Hooks**: useState, useEffect, useContext, etc.\\n3. **Browser APIs**: localStorage, window, document\\n4. **Event Listeners**: Any user interaction handling\\n\\n## Practical Example: Building a Blog Post Page\\n\\nLet\'s build a blog post page that leverages both Server and Client Components.\\n\\n### Server Component: Blog Post (Default)\\n\\n```tsx\\n// app/blog/[slug]/page.tsx\\nimport { getPost } from \'@/lib/api\';\\nimport LikeButton from \'@/components/LikeButton\';\\nimport CommentSection from \'@/components/CommentSection\';\\n\\n// This is a Server Component by default in Next.js App Router\\nexport default async function BlogPost({\\n  params,\\n}: {\\n  params: { slug: string };\\n}) {\\n  // Direct database/API access - no need for API routes!\\n  const post = await getPost(params.slug);\\n\\n  return (\\n    <article className=\\"max-w-4xl mx-auto px-4 py-8\\">\\n      <h1 className=\\"text-4xl font-bold mb-4\\">{post.title}</h1>\\n\\n      <div className=\\"flex items-center gap-4 mb-8 text-gray-600\\">\\n        <time dateTime={post.date}>\\n          {new Date(post.date).toLocaleDateString()}\\n        </time>\\n        <span>\u2022</span>\\n        <span>{post.readTime} min read</span>\\n      </div>\\n\\n      {/* Static content rendered on server */}\\n      <div\\n        className=\\"prose prose-lg\\"\\n        dangerouslySetInnerHTML={{ __html: post.content }}\\n      />\\n\\n      {/* Client Components for interactivity */}\\n      <div className=\\"mt-8 border-t pt-8\\">\\n        <LikeButton postId={post.id} initialLikes={post.likes} />\\n      </div>\\n\\n      <CommentSection postId={post.id} />\\n    </article>\\n  );\\n}\\n```\\n\\n### Client Component: Like Button\\n\\n```tsx\\n// components/LikeButton.tsx\\n\'use client\'; // This directive marks it as a Client Component\\n\\nimport { useState } from \'react\';\\nimport { Heart } from \'lucide-react\';\\n\\ninterface LikeButtonProps {\\n  postId: string;\\n  initialLikes: number;\\n}\\n\\nexport default function LikeButton({ postId, initialLikes }: LikeButtonProps) {\\n  const [likes, setLikes] = useState(initialLikes);\\n  const [isLiked, setIsLiked] = useState(false);\\n  const [isLoading, setIsLoading] = useState(false);\\n\\n  const handleLike = async () => {\\n    if (isLoading) return;\\n\\n    setIsLoading(true);\\n    setIsLiked(!isLiked);\\n    setLikes(isLiked ? likes - 1 : likes + 1);\\n\\n    try {\\n      await fetch(`/api/posts/${postId}/like`, {\\n        method: \'POST\',\\n        body: JSON.stringify({ liked: !isLiked }),\\n      });\\n    } catch (error) {\\n      // Revert on error\\n      setIsLiked(isLiked);\\n      setLikes(likes);\\n      console.error(\'Failed to update like:\', error);\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <button\\n      onClick={handleLike}\\n      disabled={isLoading}\\n      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all ${\\n        isLiked\\n          ? \'bg-red-100 text-red-600\'\\n          : \'bg-gray-100 text-gray-600 hover:bg-gray-200\'\\n      }`}\\n    >\\n      <Heart className={`w-5 h-5 ${isLiked ? \'fill-current\' : \'\'}`} />\\n      <span className=\\"font-medium\\">{likes} likes</span>\\n    </button>\\n  );\\n}\\n```\\n\\n### Client Component: Comment Section\\n\\n```tsx\\n// components/CommentSection.tsx\\n\'use client\';\\n\\nimport { useState, useEffect } from \'react\';\\n\\ninterface Comment {\\n  id: string;\\n  author: string;\\n  content: string;\\n  createdAt: string;\\n}\\n\\nexport default function CommentSection({ postId }: { postId: string }) {\\n  const [comments, setComments] = useState<Comment[]>([]);\\n  const [newComment, setNewComment] = useState(\'\');\\n  const [isLoading, setIsLoading] = useState(true);\\n\\n  useEffect(() => {\\n    fetchComments();\\n  }, [postId]);\\n\\n  const fetchComments = async () => {\\n    try {\\n      const response = await fetch(`/api/posts/${postId}/comments`);\\n      const data = await response.json();\\n      setComments(data);\\n    } catch (error) {\\n      console.error(\'Failed to fetch comments:\', error);\\n    } finally {\\n      setIsLoading(false);\\n    }\\n  };\\n\\n  const handleSubmit = async (e: React.FormEvent) => {\\n    e.preventDefault();\\n    if (!newComment.trim()) return;\\n\\n    try {\\n      const response = await fetch(`/api/posts/${postId}/comments`, {\\n        method: \'POST\',\\n        headers: { \'Content-Type\': \'application/json\' },\\n        body: JSON.stringify({ content: newComment }),\\n      });\\n\\n      const comment = await response.json();\\n      setComments([comment, ...comments]);\\n      setNewComment(\'\');\\n    } catch (error) {\\n      console.error(\'Failed to post comment:\', error);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\"mt-12\\">\\n      <h2 className=\\"text-2xl font-bold mb-6\\">Comments ({comments.length})</h2>\\n\\n      <form onSubmit={handleSubmit} className=\\"mb-8\\">\\n        <textarea\\n          value={newComment}\\n          onChange={e => setNewComment(e.target.value)}\\n          placeholder=\\"Share your thoughts...\\"\\n          className=\\"w-full px-4 py-3 border rounded-lg resize-none focus:ring-2 focus:ring-blue-500\\"\\n          rows={4}\\n        />\\n        <button\\n          type=\\"submit\\"\\n          className=\\"mt-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\\"\\n        >\\n          Post Comment\\n        </button>\\n      </form>\\n\\n      {isLoading ? (\\n        <div className=\\"text-center py-8 text-gray-500\\">\\n          Loading comments...\\n        </div>\\n      ) : comments.length === 0 ? (\\n        <div className=\\"text-center py-8 text-gray-500\\">\\n          No comments yet. Be the first to comment!\\n        </div>\\n      ) : (\\n        <div className=\\"space-y-6\\">\\n          {comments.map(comment => (\\n            <div key={comment.id} className=\\"border-b pb-6\\">\\n              <div className=\\"flex items-center gap-2 mb-2\\">\\n                <span className=\\"font-semibold\\">{comment.author}</span>\\n                <span className=\\"text-sm text-gray-500\\">\\n                  {new Date(comment.createdAt).toLocaleDateString()}\\n                </span>\\n              </div>\\n              <p className=\\"text-gray-700\\">{comment.content}</p>\\n            </div>\\n          ))}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n```\\n\\n## Performance Benefits\\n\\n### 1. Reduced JavaScript Bundle\\n\\nServer Components don\'t contribute to your client bundle. In our example:\\n\\n- The blog post content rendering: **0 KB** to client\\n- Heavy markdown parsing library: **0 KB** to client\\n- Only the LikeButton and CommentSection JavaScript is sent\\n\\n### 2. Faster Initial Page Load\\n\\n```\\nTraditional SSR:\\nServer renders \u2192 Send HTML + Full JS \u2192 Hydrate everything \u2192 Interactive\\n\\nWith RSC:\\nServer renders \u2192 Send HTML + Minimal JS \u2192 Only hydrate interactive parts \u2192 Interactive\\n```\\n\\n### 3. Better SEO\\n\\nServer Components render fully on the server, ensuring search engines see complete content without waiting for JavaScript execution.\\n\\n## Common Patterns and Best Practices\\n\\n### Pattern 1: Composition\\n\\nCompose Server and Client Components together:\\n\\n```tsx\\n// Server Component\\nexport default async function Dashboard() {\\n  const data = await fetchDashboardData();\\n\\n  return (\\n    <div>\\n      {/* Server-rendered static content */}\\n      <DashboardStats data={data} />\\n\\n      {/* Client Component for interactivity */}\\n      <InteractiveChart data={data} />\\n    </div>\\n  );\\n}\\n```\\n\\n### Pattern 2: Passing Server Data to Client Components\\n\\nAlways pass serializable props:\\n\\n```tsx\\n// \u2705 Good - Serializable data\\n<ClientComponent data={{ id: 1, name: \'John\' }} />\\n\\n// \u274c Bad - Functions can\'t be serialized\\n<ClientComponent onClick={handleClick} />\\n\\n// \u274c Bad - Date objects need to be serialized\\n<ClientComponent date={new Date()} />\\n\\n// \u2705 Good - Pass as ISO string\\n<ClientComponent date={new Date().toISOString()} />\\n```\\n\\n### Pattern 3: Keeping Client Components Small\\n\\nPush \'use client\' down the component tree:\\n\\n```tsx\\n// \u274c Bad - Entire dashboard is client\\n\'use client\';\\n\\nexport default function Dashboard() {\\n  const [state, setState] = useState();\\n\\n  return (\\n    <div>\\n      <Header />\\n      <Stats />\\n      <InteractiveWidget state={state} setState={setState} />\\n      <Footer />\\n    </div>\\n  );\\n}\\n\\n// \u2705 Good - Only interactive part is client\\nexport default function Dashboard() {\\n  return (\\n    <div>\\n      <Header />\\n      <Stats />\\n      <InteractiveWidget /> {/* This internally uses \'use client\' */}\\n      <Footer />\\n    </div>\\n  );\\n}\\n```\\n\\n## Limitations and Gotchas\\n\\n### 1. No Browser APIs\\n\\nServer Components can\'t access `window`, `localStorage`, or any browser APIs.\\n\\n```tsx\\n// \u274c This will fail in Server Component\\nexport default function Component() {\\n  const width = window.innerWidth; // Error!\\n  return <div>Width: {width}</div>;\\n}\\n```\\n\\n### 2. No React Hooks\\n\\nServer Components can\'t use hooks like `useState`, `useEffect`, etc.\\n\\n```tsx\\n// \u274c This will fail in Server Component\\nexport default function Component() {\\n  const [count, setCount] = useState(0); // Error!\\n  return <div>{count}</div>;\\n}\\n```\\n\\n### 3. Props Must Be Serializable\\n\\nYou can\'t pass functions, class instances, or other non-serializable data from Server to Client Components.\\n\\n## Debugging Tips\\n\\n### 1. Check Component Type\\n\\nIn Next.js, add this to see which components are Server vs Client:\\n\\n```tsx\\nconsole.log(typeof window === \'undefined\' ? \'Server\' : \'Client\');\\n```\\n\\n### 2. Use React DevTools\\n\\nThe React DevTools browser extension shows which components are Server Components (marked with a special badge).\\n\\n### 3. Check Network Tab\\n\\nServer Components won\'t appear in your JavaScript bundle. Check the Network tab to verify bundle sizes.\\n\\n## Migrating to Server Components\\n\\nIf you\'re migrating from Pages Router or Create React App:\\n\\n1. **Start with the App Router** in Next.js 13+\\n2. **Default to Server Components** - only add \'use client\' when needed\\n3. **Move data fetching to Server Components** - remove API routes where possible\\n4. **Keep interactivity in Client Components** - buttons, forms, hooks\\n5. **Test incrementally** - migrate page by page\\n\\n## Real-World Use Cases\\n\\n### E-commerce Product Page\\n\\n```tsx\\n// Server Component - Product details\\nexport default async function ProductPage({\\n  params,\\n}: {\\n  params: { id: string };\\n}) {\\n  const product = await db.product.findUnique({ where: { id: params.id } });\\n\\n  return (\\n    <div>\\n      {/* Server-rendered product info */}\\n      <ProductImages images={product.images} />\\n      <ProductInfo product={product} />\\n\\n      {/* Client Component for cart interaction */}\\n      <AddToCartButton productId={product.id} />\\n    </div>\\n  );\\n}\\n```\\n\\n### Admin Dashboard\\n\\n```tsx\\n// Server Component - Dashboard with real-time data needs\\nexport default async function AdminDashboard() {\\n  const stats = await getAdminStats();\\n\\n  return (\\n    <div>\\n      {/* Server-rendered stats */}\\n      <StatsCards stats={stats} />\\n\\n      {/* Client Components for interactivity */}\\n      <RealtimeUserChart />\\n      <ActivityFeed />\\n    </div>\\n  );\\n}\\n```\\n\\n## Conclusion\\n\\nReact Server Components are a powerful addition to the React ecosystem. They offer:\\n\\n- **Better Performance**: Reduced JavaScript bundles and faster page loads\\n- **Improved DX**: Direct backend access without API routes\\n- **Flexibility**: Mix Server and Client Components as needed\\n\\nThe key is understanding when to use each type:\\n\\n- **Server Components** for data fetching and static content\\n- **Client Components** for interactivity and React hooks\\n\\nAs the ecosystem matures and more frameworks adopt RSC, they\'ll become the default way to build React applications.\\n\\n---\\n\\n## Further Reading\\n\\n- [React Server Components RFC](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md)\\n- [Next.js Server Components Documentation](https://nextjs.org/docs/app/building-your-application/rendering/server-components)\\n- [Understanding React Server Components](https://www.joshwcomeau.com/react/server-components/)\\n\\nHave questions about Server Components? Feel free to reach out or leave a comment below!"}]}}')}}]);