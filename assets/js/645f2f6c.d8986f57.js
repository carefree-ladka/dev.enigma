"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[3513],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(96540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}},76884:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});var s=i(74848),r=i(28453);const l={},t="SQL Query Optimization Guide",a={id:"Database/DB Query Optimization",title:"SQL Query Optimization Guide",description:"\ud83c\udfaf Core Principles",source:"@site/docs/Database/DB Query Optimization.mdx",sourceDirName:"Database",slug:"/Database/DB Query Optimization",permalink:"/dev.enigma/docs/Database/DB Query Optimization",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Database/DB Query Optimization.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Complete SQL & MySQL Guide for Java Developers",permalink:"/dev.enigma/docs/Database/Complete SQL & MySQL"},next:{title:"Full-Text Search & Inverted Index",permalink:"/dev.enigma/docs/Database/Full-Text Search & Inverted Index"}},d={},o=[{value:"\ud83c\udfaf Core Principles",id:"-core-principles",level:2},{value:"1. Indexing Strategies",id:"1-indexing-strategies",level:2},{value:"Types of Indexes",id:"types-of-indexes",level:3},{value:"Creating Effective Indexes",id:"creating-effective-indexes",level:3},{value:"Index Best Practices",id:"index-best-practices",level:3},{value:"2. Query Refactoring",id:"2-query-refactoring",level:2},{value:"Select Only Required Columns",id:"select-only-required-columns",level:3},{value:"Avoid Functions on Indexed Columns",id:"avoid-functions-on-indexed-columns",level:3},{value:"Replace Subqueries with Joins",id:"replace-subqueries-with-joins",level:3},{value:"Use EXISTS for Existence Checks",id:"use-exists-for-existence-checks",level:3},{value:"Optimize OR Conditions",id:"optimize-or-conditions",level:3},{value:"3. Join Optimization",id:"3-join-optimization",level:2},{value:"Join Order Matters",id:"join-order-matters",level:3},{value:"Ensure Joined Columns Are Indexed",id:"ensure-joined-columns-are-indexed",level:3},{value:"Choose the Right Join Type",id:"choose-the-right-join-type",level:3},{value:"4. Limiting and Pagination",id:"4-limiting-and-pagination",level:2},{value:"Use LIMIT/TOP",id:"use-limittop",level:3},{value:"Efficient Pagination",id:"efficient-pagination",level:3},{value:"5. Aggregation Optimization",id:"5-aggregation-optimization",level:2},{value:"Precompute Aggregates",id:"precompute-aggregates",level:3},{value:"Use Materialized Views",id:"use-materialized-views",level:3},{value:"Filter Before Aggregating",id:"filter-before-aggregating",level:3},{value:"6. Data Types &amp; Schema Design",id:"6-data-types--schema-design",level:2},{value:"Use Appropriate Data Types",id:"use-appropriate-data-types",level:3},{value:"Avoid Nullable Columns When Possible",id:"avoid-nullable-columns-when-possible",level:3},{value:"7. Partitioning &amp; Sharding",id:"7-partitioning--sharding",level:2},{value:"Table Partitioning",id:"table-partitioning",level:3},{value:"When to Partition",id:"when-to-partition",level:3},{value:"8. Batch Operations",id:"8-batch-operations",level:2},{value:"Bulk Inserts",id:"bulk-inserts",level:3},{value:"Batch Updates",id:"batch-updates",level:3},{value:"9. Caching Strategies",id:"9-caching-strategies",level:2},{value:"Application-Level Caching",id:"application-level-caching",level:3},{value:"Database Query Cache",id:"database-query-cache",level:3},{value:"10. Denormalization",id:"10-denormalization",level:2},{value:"When to Denormalize",id:"when-to-denormalize",level:3},{value:"11. Query Execution Analysis",id:"11-query-execution-analysis",level:2},{value:"Using EXPLAIN",id:"using-explain",level:3},{value:"Key Metrics to Watch",id:"key-metrics-to-watch",level:3},{value:"12. Monitoring &amp; Profiling",id:"12-monitoring--profiling",level:2},{value:"MySQL Slow Query Log",id:"mysql-slow-query-log",level:3},{value:"PostgreSQL Query Statistics",id:"postgresql-query-statistics",level:3},{value:"13. Advanced Techniques",id:"13-advanced-techniques",level:2},{value:"Window Functions vs Subqueries",id:"window-functions-vs-subqueries",level:3},{value:"Common Table Expressions (CTEs)",id:"common-table-expressions-ctes",level:3},{value:"Index Hints (Use Sparingly)",id:"index-hints-use-sparingly",level:3},{value:"14. Transaction Optimization",id:"14-transaction-optimization",level:2},{value:"Keep Transactions Short",id:"keep-transactions-short",level:3},{value:"Use Appropriate Isolation Levels",id:"use-appropriate-isolation-levels",level:3},{value:"15. Connection Pooling",id:"15-connection-pooling",level:2},{value:"\ud83c\udfaf Quick Reference Checklist",id:"-quick-reference-checklist",level:2},{value:"Before Deploying a Query",id:"before-deploying-a-query",level:3},{value:"Performance Degradation Troubleshooting",id:"performance-degradation-troubleshooting",level:3},{value:"\ud83d\udcca Optimization Decision Tree",id:"-optimization-decision-tree",level:2},{value:"\ud83d\ude80 Performance Gains Summary",id:"-performance-gains-summary",level:2},{value:"\ud83d\udca1 Pro Tips",id:"-pro-tips",level:2},{value:"\ud83d\udcda Additional Resources",id:"-additional-resources",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sql-query-optimization-guide",children:"SQL Query Optimization Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"-core-principles",children:"\ud83c\udfaf Core Principles"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Index First"}),": Optimize indexes before anything else"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Query Second"}),": Rewrite inefficient queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scale Last"}),": Consider caching, partitioning, and sharding for large datasets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always Measure"}),": Use ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," to verify improvements"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-indexing-strategies",children:"1. Indexing Strategies"}),"\n",(0,s.jsx)(n.h3,{id:"types-of-indexes",children:"Types of Indexes"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Index Type"}),(0,s.jsx)(n.th,{children:"Best For"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"B-Tree"})}),(0,s.jsx)(n.td,{children:"Range queries, sorting"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WHERE age > 25"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Hash"})}),(0,s.jsx)(n.td,{children:"Exact matches"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WHERE id = 123"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Composite"})}),(0,s.jsx)(n.td,{children:"Multiple columns"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WHERE user_id = 1 AND status = 'active'"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Covering"})}),(0,s.jsx)(n.td,{children:"Query entirely from index"}),(0,s.jsx)(n.td,{children:"Index includes all SELECT columns"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Partial"})}),(0,s.jsx)(n.td,{children:"Filtered subset"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WHERE status = 'active' AND deleted_at IS NULL"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"creating-effective-indexes",children:"Creating Effective Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Single column index\nCREATE INDEX idx_users_email ON users(email);\n\n-- Composite index (order matters!)\nCREATE INDEX idx_orders_user_status ON orders(user_id, status, created_at);\n\n-- Covering index\nCREATE INDEX idx_users_covering ON users(id, name, email, status);\n\n-- Partial index (PostgreSQL)\nCREATE INDEX idx_active_users ON users(email) WHERE status = 'active';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"index-best-practices",children:"Index Best Practices"}),"\n",(0,s.jsxs)(n.p,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"DO:"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Index columns used in ",(0,s.jsx)(n.code,{children:"WHERE"}),", ",(0,s.jsx)(n.code,{children:"JOIN"}),", ",(0,s.jsx)(n.code,{children:"ORDER BY"}),", ",(0,s.jsx)(n.code,{children:"GROUP BY"})]}),"\n",(0,s.jsx)(n.li,{children:"Use composite indexes for queries with multiple filters"}),"\n",(0,s.jsx)(n.li,{children:"Put most selective column first in composite indexes"}),"\n",(0,s.jsx)(n.li,{children:"Use covering indexes for frequent queries"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"DON'T:"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Over-index (slows down writes)"}),"\n",(0,s.jsx)(n.li,{children:"Index low-cardinality columns (e.g., boolean fields)"}),"\n",(0,s.jsx)(n.li,{children:"Index small tables (< 1000 rows)"}),"\n",(0,s.jsx)(n.li,{children:"Create redundant indexes"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-query-refactoring",children:"2. Query Refactoring"}),"\n",(0,s.jsx)(n.h3,{id:"select-only-required-columns",children:"Select Only Required Columns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Fetches unnecessary data\nSELECT * FROM users WHERE status = 'active';\n\n-- \u2705 Good: Fetch only what you need\nSELECT id, name, email FROM users WHERE status = 'active';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"avoid-functions-on-indexed-columns",children:"Avoid Functions on Indexed Columns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Index can't be used\nSELECT * FROM orders WHERE DATE(created_at) = '2025-10-02';\nSELECT * FROM users WHERE LOWER(email) = 'test@example.com';\n\n-- \u2705 Good: Index is utilized\nSELECT * FROM orders\nWHERE created_at >= '2025-10-02 00:00:00'\n  AND created_at < '2025-10-03 00:00:00';\n\nSELECT * FROM users WHERE email = 'test@example.com';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"replace-subqueries-with-joins",children:"Replace Subqueries with Joins"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Subquery executes separately\nSELECT name FROM users\nWHERE id IN (SELECT user_id FROM orders WHERE total > 100);\n\n-- \u2705 Good: Join is more efficient\nSELECT DISTINCT u.name\nFROM users u\nINNER JOIN orders o ON u.id = o.user_id\nWHERE o.total > 100;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-exists-for-existence-checks",children:"Use EXISTS for Existence Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: IN loads entire result set\nSELECT name FROM users\nWHERE id IN (SELECT user_id FROM orders);\n\n-- \u2705 Good: EXISTS stops at first match\nSELECT name FROM users u\nWHERE EXISTS (SELECT 1 FROM orders o WHERE o.user_id = u.id);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optimize-or-conditions",children:"Optimize OR Conditions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: May not use indexes efficiently\nSELECT * FROM users\nWHERE status = 'active' OR status = 'pending';\n\n-- \u2705 Good: Better index utilization\nSELECT * FROM users\nWHERE status IN ('active', 'pending');\n\n-- \u2705 Alternative: UNION for different columns\nSELECT * FROM users WHERE status = 'active'\nUNION ALL\nSELECT * FROM users WHERE role = 'admin';\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-join-optimization",children:"3. Join Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"join-order-matters",children:"Join Order Matters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u2705 Join smaller table first\nSELECT o.id, u.name, p.title\nFROM products p  -- Largest table\nINNER JOIN orders o ON p.id = o.product_id  -- Medium table\nINNER JOIN users u ON o.user_id = u.id;  -- Smallest table\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ensure-joined-columns-are-indexed",children:"Ensure Joined Columns Are Indexed"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_orders_product_id ON orders(product_id);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"choose-the-right-join-type",children:"Choose the Right Join Type"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- INNER JOIN: Only matching rows\nSELECT * FROM users u\nINNER JOIN orders o ON u.id = o.user_id;\n\n-- LEFT JOIN: All users, even without orders\nSELECT * FROM users u\nLEFT JOIN orders o ON u.id = o.user_id;\n\n-- Prefer INNER JOIN when possible (faster)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-limiting-and-pagination",children:"4. Limiting and Pagination"}),"\n",(0,s.jsx)(n.h3,{id:"use-limittop",children:"Use LIMIT/TOP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Fetch only required rows\nSELECT id, name FROM products\nORDER BY created_at DESC\nLIMIT 20;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"efficient-pagination",children:"Efficient Pagination"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Slow with large offsets\nSELECT * FROM products\nORDER BY id\nLIMIT 20 OFFSET 10000;\n\n-- \u2705 Good: Keyset pagination\nSELECT * FROM products\nWHERE id > 10020\nORDER BY id\nLIMIT 20;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-aggregation-optimization",children:"5. Aggregation Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"precompute-aggregates",children:"Precompute Aggregates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Create summary table\nCREATE TABLE user_stats AS\nSELECT\n    user_id,\n    COUNT(*) as order_count,\n    SUM(total) as total_spent,\n    MAX(created_at) as last_order_date\nFROM orders\nGROUP BY user_id;\n\n-- Update incrementally with triggers or scheduled jobs\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-materialized-views",children:"Use Materialized Views"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- PostgreSQL\nCREATE MATERIALIZED VIEW top_customers AS\nSELECT\n    u.id,\n    u.name,\n    COUNT(o.id) as order_count,\n    SUM(o.total) as total_spent\nFROM users u\nJOIN orders o ON u.id = o.user_id\nGROUP BY u.id, u.name;\n\n-- Refresh periodically\nREFRESH MATERIALIZED VIEW top_customers;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"filter-before-aggregating",children:"Filter Before Aggregating"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Aggregates then filters\nSELECT user_id, SUM(total)\nFROM orders\nGROUP BY user_id\nHAVING SUM(total) > 1000;\n\n-- \u2705 Good: Filter early when possible\nSELECT user_id, SUM(total)\nFROM orders\nWHERE created_at >= '2025-01-01'\nGROUP BY user_id\nHAVING SUM(total) > 1000;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-data-types--schema-design",children:"6. Data Types & Schema Design"}),"\n",(0,s.jsx)(n.h3,{id:"use-appropriate-data-types",children:"Use Appropriate Data Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Wastes space\nCREATE TABLE orders (\n    id BIGINT,  -- If max is < 2 billion, use INT\n    status VARCHAR(255),  -- If max length is 20\n    price DOUBLE  -- Use DECIMAL for money\n);\n\n-- \u2705 Good: Optimal types\nCREATE TABLE orders (\n    id INT,\n    status VARCHAR(20),\n    price DECIMAL(10,2)\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"avoid-nullable-columns-when-possible",children:"Avoid Nullable Columns When Possible"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Nullable columns may prevent index usage in some DBs\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    email VARCHAR(255) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'active'\n);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-partitioning--sharding",children:"7. Partitioning & Sharding"}),"\n",(0,s.jsx)(n.h3,{id:"table-partitioning",children:"Table Partitioning"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Range partition by date (MySQL/PostgreSQL)\nCREATE TABLE orders (\n    id INT,\n    user_id INT,\n    created_at DATE,\n    total DECIMAL(10,2)\n)\nPARTITION BY RANGE (YEAR(created_at)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025),\n    PARTITION p2025 VALUES LESS THAN (2026)\n);\n\n-- Query automatically scans only relevant partition\nSELECT * FROM orders\nWHERE created_at BETWEEN '2025-01-01' AND '2025-12-31';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"when-to-partition",children:"When to Partition"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tables > 50GB"}),"\n",(0,s.jsx)(n.li,{children:"Time-series data"}),"\n",(0,s.jsx)(n.li,{children:"Clear partition key (date, region, category)"}),"\n",(0,s.jsx)(n.li,{children:"Queries frequently filter by partition key"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-batch-operations",children:"8. Batch Operations"}),"\n",(0,s.jsx)(n.h3,{id:"bulk-inserts",children:"Bulk Inserts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Multiple round trips\nINSERT INTO users (name, email) VALUES ('Alice', 'a@x.com');\nINSERT INTO users (name, email) VALUES ('Bob', 'b@x.com');\nINSERT INTO users (name, email) VALUES ('Charlie', 'c@x.com');\n\n-- \u2705 Good: Single transaction\nINSERT INTO users (name, email) VALUES\n    ('Alice', 'a@x.com'),\n    ('Bob', 'b@x.com'),\n    ('Charlie', 'c@x.com');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"batch-updates",children:"Batch Updates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Row-by-row updates\nUPDATE users SET status = 'inactive' WHERE id = 1;\nUPDATE users SET status = 'inactive' WHERE id = 2;\n\n-- \u2705 Good: Batch update\nUPDATE users\nSET status = 'inactive'\nWHERE id IN (1, 2, 3, 4, 5);\n\n-- \u2705 Better: Conditional update\nUPDATE users\nSET status = 'inactive'\nWHERE last_login < '2024-01-01';\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"9-caching-strategies",children:"9. Caching Strategies"}),"\n",(0,s.jsx)(n.h3,{id:"application-level-caching",children:"Application-Level Caching"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'-- Cache frequent queries in Redis/Memcached\n-- TTL: 5 minutes for user profile\nGET user:123:profile\n\n-- If miss, query DB and cache\nSELECT id, name, email FROM users WHERE id = 123;\nSET user:123:profile "{...}" EX 300\n'})}),"\n",(0,s.jsx)(n.h3,{id:"database-query-cache",children:"Database Query Cache"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- MySQL (older versions)\nSET GLOBAL query_cache_size = 268435456;  -- 256MB\n\n-- Note: MySQL 8.0+ removed query cache\n-- Use application-level caching instead\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"10-denormalization",children:"10. Denormalization"}),"\n",(0,s.jsx)(n.h3,{id:"when-to-denormalize",children:"When to Denormalize"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Read-heavy workloads"}),"\n",(0,s.jsx)(n.li,{children:"Expensive joins on large tables"}),"\n",(0,s.jsx)(n.li,{children:"Aggregations computed frequently"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Instead of joining every time:\nSELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nGROUP BY u.id;\n\n-- Denormalize:\nALTER TABLE users ADD COLUMN order_count INT DEFAULT 0;\n\n-- Update with trigger or batch job\nUPDATE users u\nSET order_count = (SELECT COUNT(*) FROM orders WHERE user_id = u.id);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"11-query-execution-analysis",children:"11. Query Execution Analysis"}),"\n",(0,s.jsx)(n.h3,{id:"using-explain",children:"Using EXPLAIN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- MySQL/PostgreSQL\nEXPLAIN SELECT * FROM users WHERE email = 'test@example.com';\n\n-- PostgreSQL with costs\nEXPLAIN ANALYZE SELECT * FROM users WHERE email = 'test@example.com';\n\n-- MySQL with JSON format\nEXPLAIN FORMAT=JSON SELECT * FROM users WHERE email = 'test@example.com';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-metrics-to-watch",children:"Key Metrics to Watch"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Metric"}),(0,s.jsx)(n.th,{children:"What It Means"}),(0,s.jsx)(n.th,{children:"Action"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Seq Scan / ALL"})}),(0,s.jsx)(n.td,{children:"Full table scan"}),(0,s.jsx)(n.td,{children:"Add index"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"rows examined"})}),(0,s.jsx)(n.td,{children:"Rows scanned"}),(0,s.jsx)(n.td,{children:"Reduce with WHERE/index"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Using filesort"})}),(0,s.jsx)(n.td,{children:"Expensive sort"}),(0,s.jsx)(n.td,{children:"Add index on ORDER BY"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Using temporary"})}),(0,s.jsx)(n.td,{children:"Temp table created"}),(0,s.jsx)(n.td,{children:"Optimize JOIN/GROUP BY"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Using index"})}),(0,s.jsx)(n.td,{children:"Good! Index-only scan"}),(0,s.jsx)(n.td,{children:"Keep it"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"12-monitoring--profiling",children:"12. Monitoring & Profiling"}),"\n",(0,s.jsx)(n.h3,{id:"mysql-slow-query-log",children:"MySQL Slow Query Log"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Enable slow query log\nSET GLOBAL slow_query_log = 'ON';\nSET GLOBAL long_query_time = 1;  -- Log queries > 1 second\nSET GLOBAL log_queries_not_using_indexes = 'ON';\n\n-- View slow queries\nSELECT * FROM mysql.slow_log\nORDER BY query_time DESC\nLIMIT 10;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"postgresql-query-statistics",children:"PostgreSQL Query Statistics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Enable pg_stat_statements\nCREATE EXTENSION pg_stat_statements;\n\n-- Find slowest queries\nSELECT\n    query,\n    calls,\n    total_exec_time,\n    mean_exec_time,\n    max_exec_time\nFROM pg_stat_statements\nORDER BY total_exec_time DESC\nLIMIT 10;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"13-advanced-techniques",children:"13. Advanced Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"window-functions-vs-subqueries",children:"Window Functions vs Subqueries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Slower: Correlated subquery\nSELECT\n    e.name,\n    e.salary,\n    (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id) as avg_salary\nFROM employees e;\n\n-- \u2705 Faster: Window function\nSELECT\n    name,\n    salary,\n    AVG(salary) OVER (PARTITION BY dept_id) as avg_salary\nFROM employees;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"common-table-expressions-ctes",children:"Common Table Expressions (CTEs)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Improve readability and sometimes performance\nWITH high_value_customers AS (\n    SELECT user_id, SUM(total) as lifetime_value\n    FROM orders\n    GROUP BY user_id\n    HAVING SUM(total) > 10000\n)\nSELECT u.name, hvc.lifetime_value\nFROM users u\nJOIN high_value_customers hvc ON u.id = hvc.user_id;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"index-hints-use-sparingly",children:"Index Hints (Use Sparingly)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Force index usage (MySQL)\nSELECT * FROM users USE INDEX (idx_email) WHERE email = 'test@example.com';\n\n-- Ignore index (for testing)\nSELECT * FROM users IGNORE INDEX (idx_email) WHERE email = 'test@example.com';\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"14-transaction-optimization",children:"14. Transaction Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"keep-transactions-short",children:"Keep Transactions Short"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- \u274c Bad: Long-running transaction\nBEGIN;\nSELECT * FROM large_table WHERE ...;  -- Expensive query\n-- ... other operations ...\nUPDATE users SET status = 'active';\nCOMMIT;\n\n-- \u2705 Good: Separate read from transaction\nSELECT * FROM large_table WHERE ...;  -- Outside transaction\n\nBEGIN;\nUPDATE users SET status = 'active';\nCOMMIT;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-appropriate-isolation-levels",children:"Use Appropriate Isolation Levels"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Read uncommitted (fastest, least safe)\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\n\n-- Read committed (good balance)\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\n\n-- Repeatable read (default in MySQL)\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\n\n-- Serializable (slowest, most safe)\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"15-connection-pooling",children:"15. Connection Pooling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Application-level connection pooling\n-- Prevents connection overhead\n\n-- Example config (not SQL):\npool_size: 20\nmax_overflow: 10\npool_timeout: 30\npool_recycle: 3600\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-quick-reference-checklist",children:"\ud83c\udfaf Quick Reference Checklist"}),"\n",(0,s.jsx)(n.h3,{id:"before-deploying-a-query",children:"Before Deploying a Query"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Used ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," to check execution plan"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Selected only required columns (no ",(0,s.jsx)(n.code,{children:"SELECT *"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Added indexes on WHERE/JOIN/ORDER BY columns"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Avoided functions on indexed columns"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Used ",(0,s.jsx)(n.code,{children:"LIMIT"})," when full result not needed"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tested with production-like data volume"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Checked for N+1 query problems"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Validated appropriate data types"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Considered caching for frequent queries"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-degradation-troubleshooting",children:"Performance Degradation Troubleshooting"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Check slow query logs"}),"\n",(0,s.jsxs)(n.li,{children:["Run ",(0,s.jsx)(n.code,{children:"EXPLAIN"})," on slow queries"]}),"\n",(0,s.jsx)(n.li,{children:"Look for missing indexes"}),"\n",(0,s.jsx)(n.li,{children:"Check for table bloat/fragmentation"}),"\n",(0,s.jsxs)(n.li,{children:["Verify statistics are up to date (",(0,s.jsx)(n.code,{children:"ANALYZE TABLE"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Check for blocking/locking issues"}),"\n",(0,s.jsx)(n.li,{children:"Monitor connection pool exhaustion"}),"\n",(0,s.jsx)(n.li,{children:"Review recent schema changes"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-optimization-decision-tree",children:"\ud83d\udcca Optimization Decision Tree"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Is query slow?\n\u251c\u2500 Yes: Run EXPLAIN\n\u2502  \u251c\u2500 Full table scan? \u2192 Add index\n\u2502  \u251c\u2500 Using filesort? \u2192 Add index on ORDER BY\n\u2502  \u251c\u2500 Using temporary? \u2192 Optimize GROUP BY/JOIN\n\u2502  \u251c\u2500 High rows examined? \u2192 Add WHERE filters\n\u2502  \u2514\u2500 Many joins? \u2192 Consider denormalization\n\u2514\u2500 No: Monitor and maintain\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-performance-gains-summary",children:"\ud83d\ude80 Performance Gains Summary"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Technique"}),(0,s.jsx)(n.th,{children:"Expected Improvement"}),(0,s.jsx)(n.th,{children:"Effort"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Add missing index"}),(0,s.jsx)(n.td,{children:"10-100x"}),(0,s.jsx)(n.td,{children:"Low"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Remove SELECT *"}),(0,s.jsx)(n.td,{children:"2-5x"}),(0,s.jsx)(n.td,{children:"Low"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Replace subquery with JOIN"}),(0,s.jsx)(n.td,{children:"2-10x"}),(0,s.jsx)(n.td,{children:"Low"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Batch inserts"}),(0,s.jsx)(n.td,{children:"5-50x"}),(0,s.jsx)(n.td,{children:"Low"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Partition large table"}),(0,s.jsx)(n.td,{children:"5-20x"}),(0,s.jsx)(n.td,{children:"Medium"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Materialized views"}),(0,s.jsx)(n.td,{children:"10-100x"}),(0,s.jsx)(n.td,{children:"Medium"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Denormalization"}),(0,s.jsx)(n.td,{children:"5-50x"}),(0,s.jsx)(n.td,{children:"High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Sharding"}),(0,s.jsx)(n.td,{children:"10-100x"}),(0,s.jsx)(n.td,{children:"High"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-pro-tips",children:"\ud83d\udca1 Pro Tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Measure Everything"}),": Always benchmark before and after optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Premature Optimization"}),": Don't optimize until you have a performance problem"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Index Maintenance"}),": Rebuild fragmented indexes periodically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Statistics"}),": Keep table statistics updated (",(0,s.jsx)(n.code,{children:"ANALYZE TABLE"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read Replicas"}),": Offload read queries to replicas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Archive Old Data"}),": Move historical data to separate tables/databases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Query Complexity"}),": Sometimes multiple simple queries beat one complex query"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Application-Level"}),": Consider solving problems in application code (caching, async processing)"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-additional-resources",children:"\ud83d\udcda Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"MySQL Performance Schema"}),"\n",(0,s.jsxs)(n.li,{children:["PostgreSQL pg",(0,s.jsx)(n.em,{children:"stat"}),"* views"]}),"\n",(0,s.jsx)(n.li,{children:"Database-specific EXPLAIN documentation"}),"\n",(0,s.jsx)(n.li,{children:"Query optimization tools (EverSQL, pt-query-digest)"}),"\n",(0,s.jsx)(n.li,{children:"APM tools (DataDog, New Relic, AppDynamics)"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Remember"}),": The best optimization is the one that solves your specific bottleneck. Always profile first! \ud83c\udfaf"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);