"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6421],{7917:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var t=n(4848),o=n(8453);const c={},s="Redux Toolkit Testing",i={id:"WebDev/React/ReduxToolkitTesting",title:"Redux Toolkit Testing",description:"",source:"@site/docs/WebDev/React/ReduxToolkitTesting.mdx",sourceDirName:"WebDev/React",slug:"/WebDev/React/ReduxToolkitTesting",permalink:"/js.enigma/docs/WebDev/React/ReduxToolkitTesting",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/React/ReduxToolkitTesting.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Redux Toolkit",permalink:"/js.enigma/docs/WebDev/React/ReduxToolkit"},next:{title:"Redux vs Context API",permalink:"/js.enigma/docs/WebDev/React/ReduxVSContext"}},a={},u=[];function d(e){const r={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"redux-toolkit-testing",children:"Redux Toolkit Testing"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-JavaScript",children:"// Redux Toolkit Testing Guide\r\n\r\n// 1. Setting Up Test Environment\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { render } from '@testing-library/react';\r\nimport { Provider } from 'react-redux';\r\n\r\n// Sample slice\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: { value: 0 },\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    decrementByAmount: (state, action) => {\r\n      state.value -= action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// 2. Testing Reducers\r\ndescribe('counterSlice reducers', () => {\r\n  const initialState = { value: 0 };\r\n\r\n  test('should handle increment', () => {\r\n    expect(\r\n      counterSlice.reducer(initialState, counterSlice.actions.increment())\r\n    ).toEqual({ value: 1 });\r\n  });\r\n\r\n  test('should handle decrementByAmount', () => {\r\n    expect(\r\n      counterSlice.reducer(initialState, counterSlice.actions.decrementByAmount(2))\r\n    ).toEqual({ value: -2 });\r\n  });\r\n\r\n  test('should handle unknown action', () => {\r\n    expect(\r\n      counterSlice.reducer(initialState, { type: 'unknown' })\r\n    ).toEqual(initialState);\r\n  });\r\n});\r\n\r\n// 3. Testing Async Thunks\r\n// Example thunk\r\nconst fetchUserById = createAsyncThunk(\r\n  'users/fetchById',\r\n  async (userId, thunkAPI) => {\r\n    const response = await fetch(`/api/users/${userId}`);\r\n    return response.json();\r\n  }\r\n);\r\n\r\n// Testing thunk\r\ndescribe('fetchUserById thunk', () => {\r\n  test('successful fetch', async () => {\r\n    const user = { id: 1, name: 'John' };\r\n    \r\n    // Mock fetch\r\n    global.fetch = jest.fn(() =>\r\n      Promise.resolve({\r\n        json: () => Promise.resolve(user),\r\n      })\r\n    );\r\n\r\n    const dispatch = jest.fn();\r\n    const thunk = fetchUserById(1);\r\n    \r\n    await thunk(dispatch, () => ({}));\r\n    \r\n    const { calls } = dispatch.mock;\r\n    expect(calls[0][0].type).toBe('users/fetchById/pending');\r\n    expect(calls[1][0].type).toBe('users/fetchById/fulfilled');\r\n    expect(calls[1][0].payload).toEqual(user);\r\n  });\r\n\r\n  test('failed fetch', async () => {\r\n    const error = new Error('Network error');\r\n    \r\n    global.fetch = jest.fn(() => Promise.reject(error));\r\n\r\n    const dispatch = jest.fn();\r\n    const thunk = fetchUserById(1);\r\n    \r\n    await thunk(dispatch, () => ({}));\r\n    \r\n    const { calls } = dispatch.mock;\r\n    expect(calls[0][0].type).toBe('users/fetchById/pending');\r\n    expect(calls[1][0].type).toBe('users/fetchById/rejected');\r\n    expect(calls[1][0].error.message).toBe('Network error');\r\n  });\r\n});\r\n\r\n// 4. Testing Selectors\r\nconst selectCount = (state) => state.counter.value;\r\n\r\ndescribe('selectors', () => {\r\n  const state = {\r\n    counter: { value: 42 }\r\n  };\r\n\r\n  test('should select counter value', () => {\r\n    expect(selectCount(state)).toBe(42);\r\n  });\r\n});\r\n\r\n// 5. Testing Connected Components\r\nfunction renderWithProviders(\r\n  ui,\r\n  {\r\n    preloadedState = {},\r\n    store = configureStore({\r\n      reducer: { counter: counterSlice.reducer },\r\n      preloadedState,\r\n    }),\r\n    ...renderOptions\r\n  } = {}\r\n) {\r\n  function Wrapper({ children }) {\r\n    return <Provider store={store}>{children}</Provider>;\r\n  }\r\n\r\n  return {\r\n    store,\r\n    ...render(ui, { wrapper: Wrapper, ...renderOptions }),\r\n  };\r\n}\r\n\r\n// Example component test\r\nimport { screen, fireEvent } from '@testing-library/react';\r\n\r\ndescribe('Counter component', () => {\r\n  test('renders with redux provider', () => {\r\n    renderWithProviders(<Counter />, {\r\n      preloadedState: {\r\n        counter: { value: 5 },\r\n      },\r\n    });\r\n\r\n    expect(screen.getByText('Count: 5')).toBeInTheDocument();\r\n  });\r\n\r\n  test('increments value', () => {\r\n    const { store } = renderWithProviders(<Counter />, {\r\n      preloadedState: {\r\n        counter: { value: 5 },\r\n      },\r\n    });\r\n\r\n    fireEvent.click(screen.getByText('Increment'));\r\n    \r\n    expect(store.getState().counter.value).toBe(6);\r\n  });\r\n});\r\n\r\n// 6. Testing Store Configuration\r\ndescribe('store configuration', () => {\r\n  test('should handle initial state', () => {\r\n    const store = configureStore({\r\n      reducer: {\r\n        counter: counterSlice.reducer,\r\n      },\r\n    });\r\n\r\n    expect(store.getState().counter.value).toBe(0);\r\n  });\r\n\r\n  test('should handle multiple dispatches', () => {\r\n    const store = configureStore({\r\n      reducer: {\r\n        counter: counterSlice.reducer,\r\n      },\r\n    });\r\n\r\n    store.dispatch(counterSlice.actions.increment());\r\n    store.dispatch(counterSlice.actions.increment());\r\n    store.dispatch(counterSlice.actions.decrementByAmount(1));\r\n\r\n    expect(store.getState().counter.value).toBe(1);\r\n  });\r\n});\r\n\r\n// 7. Testing Middleware\r\nconst customMiddleware = (store) => (next) => (action) => {\r\n  if (action.type === 'counter/increment') {\r\n    // Custom logic\r\n    console.log('Increment detected');\r\n  }\r\n  return next(action);\r\n};\r\n\r\ndescribe('middleware', () => {\r\n  test('custom middleware intercepts actions', () => {\r\n    const consoleSpy = jest.spyOn(console, 'log');\r\n    \r\n    const store = configureStore({\r\n      reducer: { counter: counterSlice.reducer },\r\n      middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().concat(customMiddleware),\r\n    });\r\n\r\n    store.dispatch(counterSlice.actions.increment());\r\n    \r\n    expect(consoleSpy).toHaveBeenCalledWith('Increment detected');\r\n  });\r\n});\r\n\r\n// 8. Testing RTK Query\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nconst api = createApi({\r\n  baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\r\n  endpoints: (builder) => ({\r\n    getUser: builder.query({\r\n      query: (id) => `users/${id}`,\r\n    }),\r\n  }),\r\n});\r\n\r\ndescribe('RTK Query', () => {\r\n  test('endpoint definition', () => {\r\n    expect(api.endpoints.getUser.query(1)).toBe('users/1');\r\n  });\r\n\r\n  test('should generate hooks', () => {\r\n    expect(typeof api.useGetUserQuery).toBe('function');\r\n  });\r\n});\n"})})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(6540);const o={},c=t.createContext(o);function s(e){const r=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(c.Provider,{value:r},e.children)}}}]);