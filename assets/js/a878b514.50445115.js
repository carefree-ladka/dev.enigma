"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6301],{1274:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=r(4848),i=r(8453);const s={title:"Kruskal's Algorithm"},o=void 0,l={id:"DSA/Kruskal'sAlgorithm",title:"Kruskal's Algorithm",description:"Kruskal's algorithm is a popular algorithm in graph theory for finding the Minimum Spanning Tree (MST) of a connected, weighted, undirected graph. The MST connects all vertices with the minimum total edge weight and without any cycles.",source:"@site/docs/DSA/Kruskal'sAlgorithm.mdx",sourceDirName:"DSA",slug:"/DSA/Kruskal'sAlgorithm",permalink:"/js.enigma/docs/DSA/Kruskal'sAlgorithm",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/DSA/Kruskal'sAlgorithm.mdx",tags:[],version:"current",frontMatter:{title:"Kruskal's Algorithm"},sidebar:"tutorialSidebar",previous:{title:"Kadane's Algorithm Tutorial",permalink:"/js.enigma/docs/DSA/Kadane"},next:{title:"LRU Cache Design",permalink:"/js.enigma/docs/DSA/LRUcache"}},a={},c=[{value:"Steps of Kruskal&#39;s Algorithm",id:"steps-of-kruskals-algorithm",level:2},{value:"Time Complexity",id:"time-complexity",level:2},{value:"JavaScript Implementation",id:"javascript-implementation",level:2}];function h(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Kruskal's algorithm is a popular algorithm in graph theory for finding the ",(0,t.jsx)(n.strong,{children:"Minimum Spanning Tree (MST)"})," of a connected, weighted, undirected graph. The MST connects all vertices with the minimum total edge weight and without any cycles."]}),"\n",(0,t.jsx)(n.h2,{id:"steps-of-kruskals-algorithm",children:"Steps of Kruskal's Algorithm"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sort all edges"})," in the graph in ascending order based on their weight."]}),"\n",(0,t.jsx)(n.li,{children:"Initialize a disjoint - set(union - find) structure, where each vertex starts in its own set."}),"\n",(0,t.jsx)(n.li,{children:"Iterate through the sorted edges:"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["For each edge, check if the vertices it connects belong to different sets(using the union - find structure).","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If they are in different sets, add the edge to the MST and unite the sets to avoid cycles."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repeat step 3"})," until there are exactly ",(0,t.jsx)(n.code,{children:"V-1"})," edges in the MST, where",(0,t.jsx)(n.code,{children:"V"})," is the number of vertices."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sorting the edges takes O(ElogE)."}),"\n",(0,t.jsx)(n.li,{children:"Union - find operations(with path compression and union by rank) have nearly constant time complexity,O(E*logV)."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The overall time complexity is O(ElogE) or O(Elog V), where",(0,t.jsx)(n.code,{children:"E"})," is the number of edges and ",(0,t.jsx)(n.code,{children:"V"})," is the number of vertices."]}),"\n",(0,t.jsx)(n.h2,{id:"javascript-implementation",children:"JavaScript Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Below is a JavaScript implementation of Kruskal's algorithm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JavaScript",children:"class UnionFind {\r\n  constructor(n) {\r\n      this.parent = Array.from({ length: n }, (_, i) => i);\r\n      this.rank = Array(n).fill(0);\r\n  }\r\n\r\n  find(x) {\r\n      if (this.parent[x] !== x) {\r\n          this.parent[x] = this.find(this.parent[x]);  // Path compression\r\n      }\r\n      return this.parent[x];\r\n  }\r\n\r\n  union(x, y) {\r\n      const rootX = this.find(x);\r\n      const rootY = this.find(y);\r\n\r\n      if (rootX !== rootY) {\r\n          // Union by rank\r\n          if (this.rank[rootX] > this.rank[rootY]) {\r\n              this.parent[rootY] = rootX;\r\n          } else if (this.rank[rootX] < this.rank[rootY]) {\r\n              this.parent[rootX] = rootY;\r\n          } else {\r\n              this.parent[rootY] = rootX;\r\n              this.rank[rootX]++;\r\n          }\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n}\r\n\r\nfunction kruskal(n, edges) {\r\n  edges.sort((a, b) => a[2] - b[2]);  // Sort edges by weight\r\n  const uf = new UnionFind(n);\r\n  const mst = [];\r\n\r\n  for (const [u, v, weight] of edges) {\r\n      if (uf.union(u, v)) {\r\n          mst.push([u, v, weight]);\r\n          if (mst.length === n - 1) break;  // MST has n-1 edges\r\n      }\r\n  }\r\n  return mst;\r\n}\r\n\r\n// Example usage\r\nconst n = 4;  // Number of vertices\r\nconst edges = [\r\n  [0, 1, 10],\r\n  [0, 2, 6],\r\n  [0, 3, 5],\r\n  [1, 3, 15],\r\n  [2, 3, 4]\r\n];\r\n\r\nconsole.log(kruskal(n, edges));//[ [ 2, 3, 4 ], [ 0, 3, 5 ], [ 0, 1, 10 ] ]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);