"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[7572],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(96540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}},60607:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var o=t(74848),a=t(28453);const r={title:"Prototypal Inheritance"},s=void 0,c={id:"WebDev/JavaScript/PrototypalInheritance",title:"Prototypal Inheritance",description:"Object Literal Based",source:"@site/docs/WebDev/JavaScript/PrototypalInheritance.mdx",sourceDirName:"WebDev/JavaScript",slug:"/WebDev/JavaScript/PrototypalInheritance",permalink:"/dev.enigma/docs/WebDev/JavaScript/PrototypalInheritance",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/WebDev/JavaScript/PrototypalInheritance.mdx",tags:[],version:"current",frontMatter:{title:"Prototypal Inheritance"},sidebar:"tutorialSidebar",previous:{title:"__proto__ vs prototype",permalink:"/dev.enigma/docs/WebDev/JavaScript/ProtoVSPrototype"},next:{title:"ProxyReflect",permalink:"/dev.enigma/docs/WebDev/JavaScript/ProxyReflect"}},i={},l=[{value:"Object Literal Based",id:"object-literal-based",level:2},{value:"Constructor Functions and Prototypal Inheritance",id:"constructor-functions-and-prototypal-inheritance",level:3},{value:"ES6 Classes and Prototypes",id:"es6-classes-and-prototypes",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"object-literal-based",children:"Object Literal Based"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'// Define a prototype object\nconst animal = {\n  eats: true,\n  walk() {\n    console.log("Animal walks");\n  }\n};\n\n// Create a new object that inherits from \'animal\'\nconst dog = Object.create(animal);\ndog.bark = function() {\n  console.log("Dog barks");\n};\n\ndog.walk(); // Inherited from \'animal\': "Animal walks"\ndog.bark(); // Specific to \'dog\': "Dog barks"\n\nconsole.log(dog.eats); // Inherited property: true\n'})}),"\n",(0,o.jsx)(n.h3,{id:"constructor-functions-and-prototypal-inheritance",children:"Constructor Functions and Prototypal Inheritance"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  console.log("Hello, my name is " + this.name);\n};\n\nconst john = new Person("John");\njohn.greet(); // "Hello, my name is John"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"es6-classes-and-prototypes",children:"ES6 Classes and Prototypes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-JavaScript",children:'class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a noise`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks`);\n  }\n}\n\nconst myDog = new Dog("Rex");\nmyDog.speak(); // Rex barks\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);