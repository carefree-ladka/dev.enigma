"use strict";(self.webpackChunkdev_enigma=self.webpackChunkdev_enigma||[]).push([[1727],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var a=t(96540);const r={},i=a.createContext(r);function l(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}},33336:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(74848),r=t(28453);const i={},l="Java Stream API Cheatsheet",s={id:"Java/JavaStreamAPICheatsheet",title:"Java Stream API Cheatsheet",description:"Table of Contents",source:"@site/docs/Java/JavaStreamAPICheatsheet.mdx",sourceDirName:"Java",slug:"/Java/JavaStreamAPICheatsheet",permalink:"/docs/Java/JavaStreamAPICheatsheet",draft:!1,unlisted:!1,editUrl:"https://github.com/carefree-ladka/docs/Java/JavaStreamAPICheatsheet.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Java Stream API",permalink:"/docs/Java/JavaStreamAPI"},next:{title:"Java Data Structures and Algorithms",permalink:"/docs/Java/JavaWithDSA"}},o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Stream Creation",id:"stream-creation",level:2},{value:"From Collections",id:"from-collections",level:3},{value:"From Arrays",id:"from-arrays",level:3},{value:"Static Methods",id:"static-methods",level:3},{value:"From Files and I/O",id:"from-files-and-io",level:3},{value:"From Random Numbers",id:"from-random-numbers",level:3},{value:"Intermediate Operations",id:"intermediate-operations",level:2},{value:"Filtering",id:"filtering",level:3},{value:"Mapping",id:"mapping",level:3},{value:"Flat Mapping",id:"flat-mapping",level:3},{value:"Sorting",id:"sorting",level:3},{value:"Limiting and Skipping",id:"limiting-and-skipping",level:3},{value:"Distinct and Peek",id:"distinct-and-peek",level:3},{value:"Terminal Operations",id:"terminal-operations",level:2},{value:"Collection Operations",id:"collection-operations",level:3},{value:"Finding Elements",id:"finding-elements",level:3},{value:"Reduction",id:"reduction",level:3},{value:"Counting and Statistics",id:"counting-and-statistics",level:3},{value:"For Each",id:"for-each",level:3},{value:"Collectors",id:"collectors",level:2},{value:"Basic Collectors",id:"basic-collectors",level:3},{value:"Grouping and Partitioning",id:"grouping-and-partitioning",level:3},{value:"Statistical Collectors",id:"statistical-collectors",level:3},{value:"Advanced Collectors",id:"advanced-collectors",level:3},{value:"Primitive Streams",id:"primitive-streams",level:2},{value:"IntStream",id:"intstream",level:3},{value:"LongStream and DoubleStream",id:"longstream-and-doublestream",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Find Maximum/Minimum",id:"find-maximumminimum",level:3},{value:"Group and Count",id:"group-and-count",level:3},{value:"Nested Grouping",id:"nested-grouping",level:3},{value:"Custom Collectors",id:"custom-collectors",level:3},{value:"Flat Map Examples",id:"flat-map-examples",level:3},{value:"Complex Filtering and Mapping",id:"complex-filtering-and-mapping",level:3},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Parallel Streams",id:"parallel-streams",level:3},{value:"Stream Ordering",id:"stream-ordering",level:3},{value:"Early Termination",id:"early-termination",level:3},{value:"Avoid Boxing",id:"avoid-boxing",level:3},{value:"Method References",id:"method-references",level:3},{value:"Common Anti-Patterns to Avoid",id:"common-anti-patterns-to-avoid",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"java-stream-api-cheatsheet",children:"Java Stream API Cheatsheet"})}),"\n",(0,a.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#stream-creation",children:"Stream Creation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#intermediate-operations",children:"Intermediate Operations"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#terminal-operations",children:"Terminal Operations"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#collectors",children:"Collectors"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#primitive-streams",children:"Primitive Streams"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#common-patterns",children:"Common Patterns"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#performance-tips",children:"Performance Tips"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"stream-creation",children:"Stream Creation"}),"\n",(0,a.jsx)(n.h3,{id:"from-collections",children:"From Collections"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'List<String> list = Arrays.asList("a", "b", "c");\nStream<String> stream = list.stream();\nStream<String> parallelStream = list.parallelStream();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-arrays",children:"From Arrays"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'String[] array = {"a", "b", "c"};\nStream<String> stream = Arrays.stream(array);\nStream<String> streamPart = Arrays.stream(array, 1, 3); // from index 1 to 2\n'})}),"\n",(0,a.jsx)(n.h3,{id:"static-methods",children:"Static Methods"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'Stream<String> empty = Stream.empty();\nStream<String> single = Stream.of("a");\nStream<String> multiple = Stream.of("a", "b", "c");\nStream<Integer> infinite = Stream.generate(() -> 1);\nStream<Integer> sequence = Stream.iterate(0, n -> n + 2); // 0, 2, 4, 6...\nStream<Integer> limited = Stream.iterate(0, n -> n < 10, n -> n + 1); // Java 9+\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-files-and-io",children:"From Files and I/O"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'Stream<String> lines = Files.lines(Paths.get("file.txt"));\nStream<Path> paths = Files.walk(Paths.get("directory"));\n'})}),"\n",(0,a.jsx)(n.h3,{id:"from-random-numbers",children:"From Random Numbers"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"Random random = new Random();\nStream<Integer> randomInts = random.ints().boxed();\nIntStream randomIntStream = random.ints(10); // 10 random integers\n"})}),"\n",(0,a.jsx)(n.h2,{id:"intermediate-operations",children:"Intermediate Operations"}),"\n",(0,a.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"stream.filter(x -> x.length() > 2)\nstream.filter(Objects::nonNull)\nstream.filter(String::isEmpty)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mapping",children:"Mapping"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"stream.map(String::toUpperCase)\nstream.map(s -> s.length())\nstream.mapToInt(String::length) // Returns IntStream\nstream.mapToLong(Long::parseLong)\nstream.mapToDouble(Double::parseDouble)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"flat-mapping",children:"Flat Mapping"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Flatten nested collections\nstream.flatMap(Collection::stream)\nstream.flatMapToInt(s -> s.chars()) // String to IntStream of characters\n"})}),"\n",(0,a.jsx)(n.h3,{id:"sorting",children:"Sorting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"stream.sorted() // Natural ordering\nstream.sorted(Comparator.reverseOrder())\nstream.sorted(Comparator.comparing(String::length))\nstream.sorted(Comparator.comparing(Person::getName).thenComparing(Person::getAge))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"limiting-and-skipping",children:"Limiting and Skipping"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"stream.limit(5) // First 5 elements\nstream.skip(3)  // Skip first 3 elements\nstream.takeWhile(x -> x.length() < 5) // Java 9+\nstream.dropWhile(x -> x.length() < 5) // Java 9+\n"})}),"\n",(0,a.jsx)(n.h3,{id:"distinct-and-peek",children:"Distinct and Peek"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"stream.distinct() // Remove duplicates\nstream.peek(System.out::println) // Debug/side effects\n"})}),"\n",(0,a.jsx)(n.h2,{id:"terminal-operations",children:"Terminal Operations"}),"\n",(0,a.jsx)(n.h3,{id:"collection-operations",children:"Collection Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'List<String> list = stream.collect(Collectors.toList());\nSet<String> set = stream.collect(Collectors.toSet());\nString joined = stream.collect(Collectors.joining(", "));\n'})}),"\n",(0,a.jsx)(n.h3,{id:"finding-elements",children:"Finding Elements"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'Optional<String> first = stream.findFirst();\nOptional<String> any = stream.findAny();\nboolean anyMatch = stream.anyMatch(s -> s.startsWith("a"));\nboolean allMatch = stream.allMatch(s -> s.length() > 0);\nboolean noneMatch = stream.noneMatch(String::isEmpty);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"reduction",children:"Reduction"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'Optional<String> reduced = stream.reduce((a, b) -> a + b);\nString reduced = stream.reduce("", (a, b) -> a + b);\nint sum = stream.reduce(0, Integer::sum);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"counting-and-statistics",children:"Counting and Statistics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"long count = stream.count();\nOptionalInt max = intStream.max();\nOptionalInt min = intStream.min();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"for-each",children:"For Each"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"stream.forEach(System.out::println);\nstream.forEachOrdered(System.out::println); // Maintains order in parallel streams\n"})}),"\n",(0,a.jsx)(n.h2,{id:"collectors",children:"Collectors"}),"\n",(0,a.jsx)(n.h3,{id:"basic-collectors",children:"Basic Collectors"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// To Collections\n.collect(Collectors.toList())\n.collect(Collectors.toSet())\n.collect(Collectors.toCollection(TreeSet::new))\n\n// To Map\n.collect(Collectors.toMap(keyMapper, valueMapper))\n.collect(Collectors.toMap(Person::getId, Function.identity()))\n\n// Joining\n.collect(Collectors.joining())\n.collect(Collectors.joining(", "))\n.collect(Collectors.joining(", ", "[", "]"))\n'})}),"\n",(0,a.jsx)(n.h3,{id:"grouping-and-partitioning",children:"Grouping and Partitioning"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Group by\nMap<Integer, List<String>> byLength =\n    stream.collect(Collectors.groupingBy(String::length));\n\nMap<Integer, Set<String>> byLengthSet =\n    stream.collect(Collectors.groupingBy(String::length, Collectors.toSet()));\n\n// Partition (boolean grouping)\nMap<Boolean, List<String>> partition =\n    stream.collect(Collectors.partitioningBy(s -> s.length() > 3));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"statistical-collectors",children:"Statistical Collectors"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Counting\nMap<String, Long> counts =\n    stream.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\n// Statistics\nIntSummaryStatistics stats =\n    stream.collect(Collectors.summarizingInt(String::length));\n\n// Min/Max\nOptional<String> longest =\n    stream.collect(Collectors.maxBy(Comparator.comparing(String::length)));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-collectors",children:"Advanced Collectors"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Downstream collectors\nMap<Integer, String> lengthToJoined = stream.collect(\n    Collectors.groupingBy(String::length, Collectors.joining(", ")));\n\n// Mapping collector\nSet<Integer> lengths = stream.collect(\n    Collectors.mapping(String::length, Collectors.toSet()));\n\n// Filtering collector (Java 9+)\nList<String> longStrings = stream.collect(\n    Collectors.filtering(s -> s.length() > 3, Collectors.toList()));\n'})}),"\n",(0,a.jsx)(n.h2,{id:"primitive-streams",children:"Primitive Streams"}),"\n",(0,a.jsx)(n.h3,{id:"intstream",children:"IntStream"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"IntStream.range(1, 5)        // 1, 2, 3, 4\nIntStream.rangeClosed(1, 5)  // 1, 2, 3, 4, 5\nIntStream.of(1, 2, 3, 4, 5)\n\n// Statistics\nOptionalInt max = intStream.max();\nOptionalInt min = intStream.min();\nint sum = intStream.sum();\nOptionalDouble average = intStream.average();\nIntSummaryStatistics stats = intStream.summaryStatistics();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"longstream-and-doublestream",children:"LongStream and DoubleStream"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"LongStream.range(1L, 1000000L)\nDoubleStream.of(1.0, 2.0, 3.0)\n\n// Convert between streams\nintStream.asLongStream()\nintStream.asDoubleStream()\nintStream.boxed() // IntStream to Stream<Integer>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"find-maximumminimum",children:"Find Maximum/Minimum"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Find person with max age\nOptional<Person> oldest = people.stream()\n    .max(Comparator.comparing(Person::getAge));\n\n// Find longest string\nOptional<String> longest = strings.stream()\n    .max(Comparator.comparing(String::length));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"group-and-count",children:"Group and Count"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Count occurrences\nMap<String, Long> wordCounts = words.stream()\n    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\n// Group by property and count\nMap<String, Long> countByCity = people.stream()\n    .collect(Collectors.groupingBy(Person::getCity, Collectors.counting()));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nested-grouping",children:"Nested Grouping"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Group by department, then by salary range\nMap<String, Map<String, List<Employee>>> grouped = employees.stream()\n    .collect(Collectors.groupingBy(Employee::getDepartment,\n        Collectors.groupingBy(emp -> emp.getSalary() > 50000 ? "High" : "Low")));\n'})}),"\n",(0,a.jsx)(n.h3,{id:"custom-collectors",children:"Custom Collectors"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Create a custom collector for comma-separated values\nCollector<String, ?, String> customJoining = Collector.of(\n    StringBuilder::new,                    // supplier\n    (sb, s) -> sb.append(s).append(", "), // accumulator\n    StringBuilder::append,                 // combiner\n    sb -> sb.toString()                   // finisher\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"flat-map-examples",children:"Flat Map Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Get all words from sentences\nList<String> words = sentences.stream()\n    .flatMap(sentence -> Arrays.stream(sentence.split(" ")))\n    .collect(Collectors.toList());\n\n// Get all phone numbers from people\nList<String> allPhones = people.stream()\n    .flatMap(person -> person.getPhones().stream())\n    .collect(Collectors.toList());\n'})}),"\n",(0,a.jsx)(n.h3,{id:"complex-filtering-and-mapping",children:"Complex Filtering and Mapping"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Chain multiple operations\nList<String> result = people.stream()\n    .filter(person -> person.getAge() > 18)\n    .filter(person -> person.getCity().equals("NYC"))\n    .map(Person::getName)\n    .map(String::toUpperCase)\n    .sorted()\n    .collect(Collectors.toList());\n'})}),"\n",(0,a.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,a.jsx)(n.h3,{id:"parallel-streams",children:"Parallel Streams"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Use parallel streams for CPU-intensive operations on large datasets\nlist.parallelStream()\n    .filter(expensiveOperation)\n    .collect(Collectors.toList());\n\n// Sequential processing when needed\nparallelStream.sequential()\n"})}),"\n",(0,a.jsx)(n.h3,{id:"stream-ordering",children:"Stream Ordering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Unordered streams can be faster for certain operations\nset.stream()\n    .unordered()\n    .parallel()\n    .map(operation)\n    .collect(Collectors.toSet());\n"})}),"\n",(0,a.jsx)(n.h3,{id:"early-termination",children:"Early Termination"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Use findFirst() or findAny() for early termination\nOptional<String> found = hugelist.stream()\n    .filter(expensiveCondition)\n    .findFirst();\n\n// Use anyMatch() instead of filter().findAny().isPresent()\nboolean exists = list.stream().anyMatch(condition);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"avoid-boxing",children:"Avoid Boxing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Use primitive streams to avoid boxing\nint sum = list.stream()\n    .mapToInt(Integer::intValue)\n    .sum();\n\n// Instead of\nint sum = list.stream()\n    .reduce(0, Integer::sum);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"method-references",children:"Method References"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Method references are often more efficient than lambdas\nlist.stream().map(String::toLowerCase)     // Good\nlist.stream().map(s -> s.toLowerCase())    // Less efficient\n\nlist.stream().filter(Objects::nonNull)    // Good\nlist.stream().filter(x -> x != null)      // Less efficient\n"})}),"\n",(0,a.jsx)(n.h2,{id:"common-anti-patterns-to-avoid",children:"Common Anti-Patterns to Avoid"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Don't use streams for simple iterations\n// BAD\nlist.stream().forEach(System.out::println);\n// GOOD\nfor (String item : list) {\n    System.out.println(item);\n}\n\n// Don't modify external state in stream operations\n// BAD\nList<String> result = new ArrayList<>();\nlist.stream().forEach(result::add);\n// GOOD\nList<String> result = list.stream().collect(Collectors.toList());\n\n// Don't use parallel streams for small datasets or I/O operations\n// BAD\nsmallList.parallelStream().map(this::callWebService)\n// GOOD\nsmallList.stream().map(this::callWebService)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);